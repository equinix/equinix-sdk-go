/*
Lookup

Based on a user's permission, a user may view their locations, provider and patch panel in their organization. These locations can be filtered by permission code, account number, cage and cabinet details to get both A Side and Z side IBX locations and patch panel available ports to place an order

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lookupv2

import (
	"encoding/json"
	"fmt"
)

// ConnectorTypes Name of the connector type that corresponds with the connection service
type ConnectorTypes string

// List of connector_types
const (
	CONNECTORTYPES_BNC       ConnectorTypes = "BNC"
	CONNECTORTYPES_LC        ConnectorTypes = "LC"
	CONNECTORTYPES_FC        ConnectorTypes = "FC"
	CONNECTORTYPES_SC        ConnectorTypes = "SC"
	CONNECTORTYPES_ST        ConnectorTypes = "ST"
	CONNECTORTYPES_WIRE_WRAP ConnectorTypes = "WIRE_WRAP"
	CONNECTORTYPES_RJ45      ConnectorTypes = "RJ45"
	CONNECTORTYPES_E2000     ConnectorTypes = "E2000"
	CONNECTORTYPES_RJ11      ConnectorTypes = "RJ11"
)

// All allowed values of ConnectorTypes enum
var AllowedConnectorTypesEnumValues = []ConnectorTypes{
	"BNC",
	"LC",
	"FC",
	"SC",
	"ST",
	"WIRE_WRAP",
	"RJ45",
	"E2000",
	"RJ11",
}

func (v *ConnectorTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConnectorTypes(value)
	for _, existing := range AllowedConnectorTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConnectorTypes", value)
}

// NewConnectorTypesFromValue returns a pointer to a valid ConnectorTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConnectorTypesFromValue(v string) (*ConnectorTypes, error) {
	ev := ConnectorTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConnectorTypes: valid values are %v", v, AllowedConnectorTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConnectorTypes) IsValid() bool {
	for _, existing := range AllowedConnectorTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to connector_types value
func (v ConnectorTypes) Ptr() *ConnectorTypes {
	return &v
}

type NullableConnectorTypes struct {
	value *ConnectorTypes
	isSet bool
}

func (v NullableConnectorTypes) Get() *ConnectorTypes {
	return v.value
}

func (v *NullableConnectorTypes) Set(val *ConnectorTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorTypes(val *ConnectorTypes) *NullableConnectorTypes {
	return &NullableConnectorTypes{value: val, isSet: true}
}

func (v NullableConnectorTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
