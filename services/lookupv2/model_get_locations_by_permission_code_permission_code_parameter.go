/*
Lookup

Based on a user's permission, a user may view their locations, provider and patch panel in their organization. These locations can be filtered by permission code, account number, cage and cabinet details to get both A Side and Z side IBX locations and patch panel available ports to place an order

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lookupv2

import (
	"encoding/json"
	"fmt"
)

// GetLocationsByPermissionCodePermissionCodeParameter the model 'GetLocationsByPermissionCodePermissionCodeParameter'
type GetLocationsByPermissionCodePermissionCodeParameter string

// List of Get_Locations_by_permission_code_permissionCode_parameter
const (
	GETLOCATIONSBYPERMISSIONCODEPERMISSIONCODEPARAMETER_CROSS_CONNECT GetLocationsByPermissionCodePermissionCodeParameter = "CROSS_CONNECT"
	GETLOCATIONSBYPERMISSIONCODEPERMISSIONCODEPARAMETER_WORK_VISIT    GetLocationsByPermissionCodePermissionCodeParameter = "WORK_VISIT"
	GETLOCATIONSBYPERMISSIONCODEPERMISSIONCODEPARAMETER_SHIPMENTS     GetLocationsByPermissionCodePermissionCodeParameter = "SHIPMENTS"
)

// All allowed values of GetLocationsByPermissionCodePermissionCodeParameter enum
var AllowedGetLocationsByPermissionCodePermissionCodeParameterEnumValues = []GetLocationsByPermissionCodePermissionCodeParameter{
	"CROSS_CONNECT",
	"WORK_VISIT",
	"SHIPMENTS",
}

func (v *GetLocationsByPermissionCodePermissionCodeParameter) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GetLocationsByPermissionCodePermissionCodeParameter(value)
	for _, existing := range AllowedGetLocationsByPermissionCodePermissionCodeParameterEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GetLocationsByPermissionCodePermissionCodeParameter", value)
}

// NewGetLocationsByPermissionCodePermissionCodeParameterFromValue returns a pointer to a valid GetLocationsByPermissionCodePermissionCodeParameter
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGetLocationsByPermissionCodePermissionCodeParameterFromValue(v string) (*GetLocationsByPermissionCodePermissionCodeParameter, error) {
	ev := GetLocationsByPermissionCodePermissionCodeParameter(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GetLocationsByPermissionCodePermissionCodeParameter: valid values are %v", v, AllowedGetLocationsByPermissionCodePermissionCodeParameterEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GetLocationsByPermissionCodePermissionCodeParameter) IsValid() bool {
	for _, existing := range AllowedGetLocationsByPermissionCodePermissionCodeParameterEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Get_Locations_by_permission_code_permissionCode_parameter value
func (v GetLocationsByPermissionCodePermissionCodeParameter) Ptr() *GetLocationsByPermissionCodePermissionCodeParameter {
	return &v
}

type NullableGetLocationsByPermissionCodePermissionCodeParameter struct {
	value *GetLocationsByPermissionCodePermissionCodeParameter
	isSet bool
}

func (v NullableGetLocationsByPermissionCodePermissionCodeParameter) Get() *GetLocationsByPermissionCodePermissionCodeParameter {
	return v.value
}

func (v *NullableGetLocationsByPermissionCodePermissionCodeParameter) Set(val *GetLocationsByPermissionCodePermissionCodeParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableGetLocationsByPermissionCodePermissionCodeParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableGetLocationsByPermissionCodePermissionCodeParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetLocationsByPermissionCodePermissionCodeParameter(val *GetLocationsByPermissionCodePermissionCodeParameter) *NullableGetLocationsByPermissionCodePermissionCodeParameter {
	return &NullableGetLocationsByPermissionCodePermissionCodeParameter{value: val, isSet: true}
}

func (v NullableGetLocationsByPermissionCodePermissionCodeParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetLocationsByPermissionCodePermissionCodeParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
