/*
Lookup

Based on a user's permission, a user may view their locations, provider and patch panel in their organization. These locations can be filtered by permission code, account number, cage and cabinet details to get both A Side and Z side IBX locations and patch panel available ports to place an order

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lookupv2

import (
	"encoding/json"
	"fmt"
)

// PatchPanelDetailsType Patch panel type
type PatchPanelDetailsType string

// List of patch_panel_details_type
const (
	PATCHPANELDETAILSTYPE_CUSTOMER_PROVIDED PatchPanelDetailsType = "CUSTOMER_PROVIDED"
	PATCHPANELDETAILSTYPE_EQUINIX_PROVIDED  PatchPanelDetailsType = "EQUINIX_PROVIDED"
)

// All allowed values of PatchPanelDetailsType enum
var AllowedPatchPanelDetailsTypeEnumValues = []PatchPanelDetailsType{
	"CUSTOMER_PROVIDED",
	"EQUINIX_PROVIDED",
}

func (v *PatchPanelDetailsType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PatchPanelDetailsType(value)
	for _, existing := range AllowedPatchPanelDetailsTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PatchPanelDetailsType", value)
}

// NewPatchPanelDetailsTypeFromValue returns a pointer to a valid PatchPanelDetailsType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPatchPanelDetailsTypeFromValue(v string) (*PatchPanelDetailsType, error) {
	ev := PatchPanelDetailsType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PatchPanelDetailsType: valid values are %v", v, AllowedPatchPanelDetailsTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PatchPanelDetailsType) IsValid() bool {
	for _, existing := range AllowedPatchPanelDetailsTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to patch_panel_details_type value
func (v PatchPanelDetailsType) Ptr() *PatchPanelDetailsType {
	return &v
}

type NullablePatchPanelDetailsType struct {
	value *PatchPanelDetailsType
	isSet bool
}

func (v NullablePatchPanelDetailsType) Get() *PatchPanelDetailsType {
	return v.value
}

func (v *NullablePatchPanelDetailsType) Set(val *PatchPanelDetailsType) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchPanelDetailsType) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchPanelDetailsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchPanelDetailsType(val *PatchPanelDetailsType) *NullablePatchPanelDetailsType {
	return &NullablePatchPanelDetailsType{value: val, isSet: true}
}

func (v NullablePatchPanelDetailsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchPanelDetailsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
