/*
Lookup

Based on a user's permission, a user may view their locations, provider and patch panel in their organization. These locations can be filtered by permission code, account number, cage and cabinet details to get both A Side and Z side IBX locations and patch panel available ports to place an order

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lookupv2

import (
	"encoding/json"
)

// checks if the Accounts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Accounts{}

// Accounts struct for Accounts
type Accounts struct {
	// Customer account number
	AccountNumber *string `json:"accountNumber,omitempty"`
	// Customer account name
	AccountName *string `json:"accountName,omitempty"`
	// When set to `true`, User is allowed to place an orders on this account
	AllowOrder           *bool `json:"allowOrder,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Accounts Accounts

// NewAccounts instantiates a new Accounts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccounts() *Accounts {
	this := Accounts{}
	var allowOrder bool = true
	this.AllowOrder = &allowOrder
	return &this
}

// NewAccountsWithDefaults instantiates a new Accounts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountsWithDefaults() *Accounts {
	this := Accounts{}
	var allowOrder bool = true
	this.AllowOrder = &allowOrder
	return &this
}

// GetAccountNumber returns the AccountNumber field value if set, zero value otherwise.
func (o *Accounts) GetAccountNumber() string {
	if o == nil || IsNil(o.AccountNumber) {
		var ret string
		return ret
	}
	return *o.AccountNumber
}

// GetAccountNumberOk returns a tuple with the AccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Accounts) GetAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.AccountNumber) {
		return nil, false
	}
	return o.AccountNumber, true
}

// HasAccountNumber returns a boolean if a field has been set.
func (o *Accounts) HasAccountNumber() bool {
	if o != nil && !IsNil(o.AccountNumber) {
		return true
	}

	return false
}

// SetAccountNumber gets a reference to the given string and assigns it to the AccountNumber field.
func (o *Accounts) SetAccountNumber(v string) {
	o.AccountNumber = &v
}

// GetAccountName returns the AccountName field value if set, zero value otherwise.
func (o *Accounts) GetAccountName() string {
	if o == nil || IsNil(o.AccountName) {
		var ret string
		return ret
	}
	return *o.AccountName
}

// GetAccountNameOk returns a tuple with the AccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Accounts) GetAccountNameOk() (*string, bool) {
	if o == nil || IsNil(o.AccountName) {
		return nil, false
	}
	return o.AccountName, true
}

// HasAccountName returns a boolean if a field has been set.
func (o *Accounts) HasAccountName() bool {
	if o != nil && !IsNil(o.AccountName) {
		return true
	}

	return false
}

// SetAccountName gets a reference to the given string and assigns it to the AccountName field.
func (o *Accounts) SetAccountName(v string) {
	o.AccountName = &v
}

// GetAllowOrder returns the AllowOrder field value if set, zero value otherwise.
func (o *Accounts) GetAllowOrder() bool {
	if o == nil || IsNil(o.AllowOrder) {
		var ret bool
		return ret
	}
	return *o.AllowOrder
}

// GetAllowOrderOk returns a tuple with the AllowOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Accounts) GetAllowOrderOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowOrder) {
		return nil, false
	}
	return o.AllowOrder, true
}

// HasAllowOrder returns a boolean if a field has been set.
func (o *Accounts) HasAllowOrder() bool {
	if o != nil && !IsNil(o.AllowOrder) {
		return true
	}

	return false
}

// SetAllowOrder gets a reference to the given bool and assigns it to the AllowOrder field.
func (o *Accounts) SetAllowOrder(v bool) {
	o.AllowOrder = &v
}

func (o Accounts) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Accounts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountNumber) {
		toSerialize["accountNumber"] = o.AccountNumber
	}
	if !IsNil(o.AccountName) {
		toSerialize["accountName"] = o.AccountName
	}
	if !IsNil(o.AllowOrder) {
		toSerialize["allowOrder"] = o.AllowOrder
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Accounts) UnmarshalJSON(data []byte) (err error) {
	varAccounts := _Accounts{}

	err = json.Unmarshal(data, &varAccounts)

	if err != nil {
		return err
	}

	*o = Accounts(varAccounts)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "accountNumber")
		delete(additionalProperties, "accountName")
		delete(additionalProperties, "allowOrder")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAccounts struct {
	value *Accounts
	isSet bool
}

func (v NullableAccounts) Get() *Accounts {
	return v.value
}

func (v *NullableAccounts) Set(val *Accounts) {
	v.value = val
	v.isSet = true
}

func (v NullableAccounts) IsSet() bool {
	return v.isSet
}

func (v *NullableAccounts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccounts(val *Accounts) *NullableAccounts {
	return &NullableAccounts{value: val, isSet: true}
}

func (v NullableAccounts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccounts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
