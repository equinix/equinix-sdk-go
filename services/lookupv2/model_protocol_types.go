/*
Lookup

Based on a user's permission, a user may view their locations, provider and patch panel in their organization. These locations can be filtered by permission code, account number, cage and cabinet details to get both A Side and Z side IBX locations and patch panel available ports to place an order

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lookupv2

import (
	"encoding/json"
	"fmt"
)

// ProtocolTypes Name of the protocol type that corresponds with the media type.
type ProtocolTypes string

// List of protocol_types
const (
	PROTOCOLTYPES_ANTENNA           ProtocolTypes = "ANTENNA"
	PROTOCOLTYPES_DS_3              ProtocolTypes = "DS-3"
	PROTOCOLTYPES_E1                ProtocolTypes = "E1"
	PROTOCOLTYPES_E3                ProtocolTypes = "E3"
	PROTOCOLTYPES_ETHERNET          ProtocolTypes = "ETHERNET"
	PROTOCOLTYPES_FAST_ETHERNET     ProtocolTypes = "FAST_ETHERNET"
	PROTOCOLTYPES_GIGABIT_ETHERNET  ProtocolTypes = "GIGABIT_ETHERNET"
	PROTOCOLTYPES_POTS              ProtocolTypes = "POTS"
	PROTOCOLTYPES_T1                ProtocolTypes = "T1"
	PROTOCOLTYPES_FIBRE_CHANNEL     ProtocolTypes = "FIBRE_CHANNEL"
	PROTOCOLTYPES__10_GIG_ETHERNET  ProtocolTypes = "10_GIG_ETHERNET"
	PROTOCOLTYPES__100_GIG_ETHERNET ProtocolTypes = "100_GIG_ETHERNET"
	PROTOCOLTYPES__40_GIG_ETHERNET  ProtocolTypes = "40_GIG_ETHERNET"
	PROTOCOLTYPES_DARK_FIBER        ProtocolTypes = "DARK_FIBER"
	PROTOCOLTYPES_DWDM              ProtocolTypes = "DWDM"
	PROTOCOLTYPES__56_K             ProtocolTypes = "56K"
	PROTOCOLTYPES_ISDN              ProtocolTypes = "ISDN"
	PROTOCOLTYPES_OC_12             ProtocolTypes = "OC-12"
	PROTOCOLTYPES_OC_192            ProtocolTypes = "OC-192"
	PROTOCOLTYPES_OC_3              ProtocolTypes = "OC-3"
	PROTOCOLTYPES_OC_48             ProtocolTypes = "OC-48"
	PROTOCOLTYPES_STM_1             ProtocolTypes = "STM-1"
	PROTOCOLTYPES_STM_16            ProtocolTypes = "STM-16"
	PROTOCOLTYPES_STM_4             ProtocolTypes = "STM-4"
	PROTOCOLTYPES_STM_64            ProtocolTypes = "STM-64"
	PROTOCOLTYPES_NA                ProtocolTypes = "NA"
)

// All allowed values of ProtocolTypes enum
var AllowedProtocolTypesEnumValues = []ProtocolTypes{
	"ANTENNA",
	"DS-3",
	"E1",
	"E3",
	"ETHERNET",
	"FAST_ETHERNET",
	"GIGABIT_ETHERNET",
	"POTS",
	"T1",
	"FIBRE_CHANNEL",
	"10_GIG_ETHERNET",
	"100_GIG_ETHERNET",
	"40_GIG_ETHERNET",
	"DARK_FIBER",
	"DWDM",
	"56K",
	"ISDN",
	"OC-12",
	"OC-192",
	"OC-3",
	"OC-48",
	"STM-1",
	"STM-16",
	"STM-4",
	"STM-64",
	"NA",
}

func (v *ProtocolTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProtocolTypes(value)
	for _, existing := range AllowedProtocolTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProtocolTypes", value)
}

// NewProtocolTypesFromValue returns a pointer to a valid ProtocolTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProtocolTypesFromValue(v string) (*ProtocolTypes, error) {
	ev := ProtocolTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProtocolTypes: valid values are %v", v, AllowedProtocolTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProtocolTypes) IsValid() bool {
	for _, existing := range AllowedProtocolTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to protocol_types value
func (v ProtocolTypes) Ptr() *ProtocolTypes {
	return &v
}

type NullableProtocolTypes struct {
	value *ProtocolTypes
	isSet bool
}

func (v NullableProtocolTypes) Get() *ProtocolTypes {
	return v.value
}

func (v *NullableProtocolTypes) Set(val *ProtocolTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableProtocolTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableProtocolTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtocolTypes(val *ProtocolTypes) *NullableProtocolTypes {
	return &NullableProtocolTypes{value: val, isSet: true}
}

func (v NullableProtocolTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtocolTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
