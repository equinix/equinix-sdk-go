/*
Lookup

Based on a user's permission, a user may view their locations, provider and patch panel in their organization. These locations can be filtered by permission code, account number, cage and cabinet details to get both A Side and Z side IBX locations and patch panel available ports to place an order

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lookupv2

import (
	"encoding/json"
	"fmt"
)

// CageDetailsCabinetType Type of the cabinet
type CageDetailsCabinetType string

// List of cage_details_cabinetType
const (
	CAGEDETAILSCABINETTYPE_PRIVATE     CageDetailsCabinetType = "PRIVATE"
	CAGEDETAILSCABINETTYPE_DEMARCATION CageDetailsCabinetType = "DEMARCATION"
)

// All allowed values of CageDetailsCabinetType enum
var AllowedCageDetailsCabinetTypeEnumValues = []CageDetailsCabinetType{
	"PRIVATE",
	"DEMARCATION",
}

func (v *CageDetailsCabinetType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CageDetailsCabinetType(value)
	for _, existing := range AllowedCageDetailsCabinetTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CageDetailsCabinetType", value)
}

// NewCageDetailsCabinetTypeFromValue returns a pointer to a valid CageDetailsCabinetType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCageDetailsCabinetTypeFromValue(v string) (*CageDetailsCabinetType, error) {
	ev := CageDetailsCabinetType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CageDetailsCabinetType: valid values are %v", v, AllowedCageDetailsCabinetTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CageDetailsCabinetType) IsValid() bool {
	for _, existing := range AllowedCageDetailsCabinetTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to cage_details_cabinetType value
func (v CageDetailsCabinetType) Ptr() *CageDetailsCabinetType {
	return &v
}

type NullableCageDetailsCabinetType struct {
	value *CageDetailsCabinetType
	isSet bool
}

func (v NullableCageDetailsCabinetType) Get() *CageDetailsCabinetType {
	return v.value
}

func (v *NullableCageDetailsCabinetType) Set(val *CageDetailsCabinetType) {
	v.value = val
	v.isSet = true
}

func (v NullableCageDetailsCabinetType) IsSet() bool {
	return v.isSet
}

func (v *NullableCageDetailsCabinetType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCageDetailsCabinetType(val *CageDetailsCabinetType) *NullableCageDetailsCabinetType {
	return &NullableCageDetailsCabinetType{value: val, isSet: true}
}

func (v NullableCageDetailsCabinetType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCageDetailsCabinetType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
