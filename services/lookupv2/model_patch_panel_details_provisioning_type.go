/*
Lookup

Based on a user's permission, a user may view their locations, provider and patch panel in their organization. These locations can be filtered by permission code, account number, cage and cabinet details to get both A Side and Z side IBX locations and patch panel available ports to place an order

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lookupv2

import (
	"encoding/json"
	"fmt"
)

// PatchPanelDetailsProvisioningType If `REGULAR`, order will be provisioned as per standard lead time. If `FAST_PROVISIONING`, order is typically provisioned in 30min through the support of fast provisioning scheduling. However, service may be delayed due to system maintenance
type PatchPanelDetailsProvisioningType string

// List of patch_panel_details_provisioningType
const (
	PATCHPANELDETAILSPROVISIONINGTYPE_REGULAR           PatchPanelDetailsProvisioningType = "REGULAR"
	PATCHPANELDETAILSPROVISIONINGTYPE_FAST_PROVISIONING PatchPanelDetailsProvisioningType = "FAST_PROVISIONING"
)

// All allowed values of PatchPanelDetailsProvisioningType enum
var AllowedPatchPanelDetailsProvisioningTypeEnumValues = []PatchPanelDetailsProvisioningType{
	"REGULAR",
	"FAST_PROVISIONING",
}

func (v *PatchPanelDetailsProvisioningType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PatchPanelDetailsProvisioningType(value)
	for _, existing := range AllowedPatchPanelDetailsProvisioningTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PatchPanelDetailsProvisioningType", value)
}

// NewPatchPanelDetailsProvisioningTypeFromValue returns a pointer to a valid PatchPanelDetailsProvisioningType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPatchPanelDetailsProvisioningTypeFromValue(v string) (*PatchPanelDetailsProvisioningType, error) {
	ev := PatchPanelDetailsProvisioningType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PatchPanelDetailsProvisioningType: valid values are %v", v, AllowedPatchPanelDetailsProvisioningTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PatchPanelDetailsProvisioningType) IsValid() bool {
	for _, existing := range AllowedPatchPanelDetailsProvisioningTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to patch_panel_details_provisioningType value
func (v PatchPanelDetailsProvisioningType) Ptr() *PatchPanelDetailsProvisioningType {
	return &v
}

type NullablePatchPanelDetailsProvisioningType struct {
	value *PatchPanelDetailsProvisioningType
	isSet bool
}

func (v NullablePatchPanelDetailsProvisioningType) Get() *PatchPanelDetailsProvisioningType {
	return v.value
}

func (v *NullablePatchPanelDetailsProvisioningType) Set(val *PatchPanelDetailsProvisioningType) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchPanelDetailsProvisioningType) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchPanelDetailsProvisioningType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchPanelDetailsProvisioningType(val *PatchPanelDetailsProvisioningType) *NullablePatchPanelDetailsProvisioningType {
	return &NullablePatchPanelDetailsProvisioningType{value: val, isSet: true}
}

func (v NullablePatchPanelDetailsProvisioningType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchPanelDetailsProvisioningType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
