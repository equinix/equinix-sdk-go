/*
Lookup

Based on a user's permission, a user may view their locations, provider and patch panel in their organization. These locations can be filtered by permission code, account number, cage and cabinet details to get both A Side and Z side IBX locations and patch panel available ports to place an order

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lookupv2

import (
	"encoding/json"
)

// checks if the Provider type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Provider{}

// Provider struct for Provider
type Provider struct {
	// Cage account name of service provider
	ProviderAccountName *string `json:"providerAccountName,omitempty"`
	// Cage account number of service provider
	ProviderAccountNumber *string `json:"providerAccountNumber,omitempty"`
	AdditionalProperties  map[string]interface{}
}

type _Provider Provider

// NewProvider instantiates a new Provider object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProvider() *Provider {
	this := Provider{}
	return &this
}

// NewProviderWithDefaults instantiates a new Provider object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProviderWithDefaults() *Provider {
	this := Provider{}
	return &this
}

// GetProviderAccountName returns the ProviderAccountName field value if set, zero value otherwise.
func (o *Provider) GetProviderAccountName() string {
	if o == nil || IsNil(o.ProviderAccountName) {
		var ret string
		return ret
	}
	return *o.ProviderAccountName
}

// GetProviderAccountNameOk returns a tuple with the ProviderAccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Provider) GetProviderAccountNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProviderAccountName) {
		return nil, false
	}
	return o.ProviderAccountName, true
}

// HasProviderAccountName returns a boolean if a field has been set.
func (o *Provider) HasProviderAccountName() bool {
	if o != nil && !IsNil(o.ProviderAccountName) {
		return true
	}

	return false
}

// SetProviderAccountName gets a reference to the given string and assigns it to the ProviderAccountName field.
func (o *Provider) SetProviderAccountName(v string) {
	o.ProviderAccountName = &v
}

// GetProviderAccountNumber returns the ProviderAccountNumber field value if set, zero value otherwise.
func (o *Provider) GetProviderAccountNumber() string {
	if o == nil || IsNil(o.ProviderAccountNumber) {
		var ret string
		return ret
	}
	return *o.ProviderAccountNumber
}

// GetProviderAccountNumberOk returns a tuple with the ProviderAccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Provider) GetProviderAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.ProviderAccountNumber) {
		return nil, false
	}
	return o.ProviderAccountNumber, true
}

// HasProviderAccountNumber returns a boolean if a field has been set.
func (o *Provider) HasProviderAccountNumber() bool {
	if o != nil && !IsNil(o.ProviderAccountNumber) {
		return true
	}

	return false
}

// SetProviderAccountNumber gets a reference to the given string and assigns it to the ProviderAccountNumber field.
func (o *Provider) SetProviderAccountNumber(v string) {
	o.ProviderAccountNumber = &v
}

func (o Provider) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Provider) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProviderAccountName) {
		toSerialize["providerAccountName"] = o.ProviderAccountName
	}
	if !IsNil(o.ProviderAccountNumber) {
		toSerialize["providerAccountNumber"] = o.ProviderAccountNumber
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Provider) UnmarshalJSON(data []byte) (err error) {
	varProvider := _Provider{}

	err = json.Unmarshal(data, &varProvider)

	if err != nil {
		return err
	}

	*o = Provider(varProvider)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "providerAccountName")
		delete(additionalProperties, "providerAccountNumber")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProvider struct {
	value *Provider
	isSet bool
}

func (v NullableProvider) Get() *Provider {
	return v.value
}

func (v *NullableProvider) Set(val *Provider) {
	v.value = val
	v.isSet = true
}

func (v NullableProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProvider(val *Provider) *NullableProvider {
	return &NullableProvider{value: val, isSet: true}
}

func (v NullableProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
