/*
Lookup

Based on a user's permission, a user may view their locations, provider and patch panel in their organization. These locations can be filtered by permission code, account number, cage and cabinet details to get both A Side and Z side IBX locations and patch panel available ports to place an order

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lookupv2

import (
	"encoding/json"
)

// checks if the LocationsDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LocationsDetails{}

// LocationsDetails struct for LocationsDetails
type LocationsDetails struct {
	// IBX locations code
	Ibx *string `json:"ibx,omitempty"`
	// IBX access is restricted when the value is `true`
	AccessRestricted *bool `json:"accessRestricted,omitempty"`
	// When set to `true`, user will be allowed to access IBXs with restricted access. This only applies for specific partners
	SpecialPrivilege     *bool         `json:"specialPrivilege,omitempty"`
	Accounts             []Accounts    `json:"accounts,omitempty"`
	Cages                []CageDetails `json:"cages,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LocationsDetails LocationsDetails

// NewLocationsDetails instantiates a new LocationsDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocationsDetails() *LocationsDetails {
	this := LocationsDetails{}
	var accessRestricted bool = false
	this.AccessRestricted = &accessRestricted
	var specialPrivilege bool = false
	this.SpecialPrivilege = &specialPrivilege
	return &this
}

// NewLocationsDetailsWithDefaults instantiates a new LocationsDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationsDetailsWithDefaults() *LocationsDetails {
	this := LocationsDetails{}
	var accessRestricted bool = false
	this.AccessRestricted = &accessRestricted
	var specialPrivilege bool = false
	this.SpecialPrivilege = &specialPrivilege
	return &this
}

// GetIbx returns the Ibx field value if set, zero value otherwise.
func (o *LocationsDetails) GetIbx() string {
	if o == nil || IsNil(o.Ibx) {
		var ret string
		return ret
	}
	return *o.Ibx
}

// GetIbxOk returns a tuple with the Ibx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationsDetails) GetIbxOk() (*string, bool) {
	if o == nil || IsNil(o.Ibx) {
		return nil, false
	}
	return o.Ibx, true
}

// HasIbx returns a boolean if a field has been set.
func (o *LocationsDetails) HasIbx() bool {
	if o != nil && !IsNil(o.Ibx) {
		return true
	}

	return false
}

// SetIbx gets a reference to the given string and assigns it to the Ibx field.
func (o *LocationsDetails) SetIbx(v string) {
	o.Ibx = &v
}

// GetAccessRestricted returns the AccessRestricted field value if set, zero value otherwise.
func (o *LocationsDetails) GetAccessRestricted() bool {
	if o == nil || IsNil(o.AccessRestricted) {
		var ret bool
		return ret
	}
	return *o.AccessRestricted
}

// GetAccessRestrictedOk returns a tuple with the AccessRestricted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationsDetails) GetAccessRestrictedOk() (*bool, bool) {
	if o == nil || IsNil(o.AccessRestricted) {
		return nil, false
	}
	return o.AccessRestricted, true
}

// HasAccessRestricted returns a boolean if a field has been set.
func (o *LocationsDetails) HasAccessRestricted() bool {
	if o != nil && !IsNil(o.AccessRestricted) {
		return true
	}

	return false
}

// SetAccessRestricted gets a reference to the given bool and assigns it to the AccessRestricted field.
func (o *LocationsDetails) SetAccessRestricted(v bool) {
	o.AccessRestricted = &v
}

// GetSpecialPrivilege returns the SpecialPrivilege field value if set, zero value otherwise.
func (o *LocationsDetails) GetSpecialPrivilege() bool {
	if o == nil || IsNil(o.SpecialPrivilege) {
		var ret bool
		return ret
	}
	return *o.SpecialPrivilege
}

// GetSpecialPrivilegeOk returns a tuple with the SpecialPrivilege field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationsDetails) GetSpecialPrivilegeOk() (*bool, bool) {
	if o == nil || IsNil(o.SpecialPrivilege) {
		return nil, false
	}
	return o.SpecialPrivilege, true
}

// HasSpecialPrivilege returns a boolean if a field has been set.
func (o *LocationsDetails) HasSpecialPrivilege() bool {
	if o != nil && !IsNil(o.SpecialPrivilege) {
		return true
	}

	return false
}

// SetSpecialPrivilege gets a reference to the given bool and assigns it to the SpecialPrivilege field.
func (o *LocationsDetails) SetSpecialPrivilege(v bool) {
	o.SpecialPrivilege = &v
}

// GetAccounts returns the Accounts field value if set, zero value otherwise.
func (o *LocationsDetails) GetAccounts() []Accounts {
	if o == nil || IsNil(o.Accounts) {
		var ret []Accounts
		return ret
	}
	return o.Accounts
}

// GetAccountsOk returns a tuple with the Accounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationsDetails) GetAccountsOk() ([]Accounts, bool) {
	if o == nil || IsNil(o.Accounts) {
		return nil, false
	}
	return o.Accounts, true
}

// HasAccounts returns a boolean if a field has been set.
func (o *LocationsDetails) HasAccounts() bool {
	if o != nil && !IsNil(o.Accounts) {
		return true
	}

	return false
}

// SetAccounts gets a reference to the given []Accounts and assigns it to the Accounts field.
func (o *LocationsDetails) SetAccounts(v []Accounts) {
	o.Accounts = v
}

// GetCages returns the Cages field value if set, zero value otherwise.
func (o *LocationsDetails) GetCages() []CageDetails {
	if o == nil || IsNil(o.Cages) {
		var ret []CageDetails
		return ret
	}
	return o.Cages
}

// GetCagesOk returns a tuple with the Cages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationsDetails) GetCagesOk() ([]CageDetails, bool) {
	if o == nil || IsNil(o.Cages) {
		return nil, false
	}
	return o.Cages, true
}

// HasCages returns a boolean if a field has been set.
func (o *LocationsDetails) HasCages() bool {
	if o != nil && !IsNil(o.Cages) {
		return true
	}

	return false
}

// SetCages gets a reference to the given []CageDetails and assigns it to the Cages field.
func (o *LocationsDetails) SetCages(v []CageDetails) {
	o.Cages = v
}

func (o LocationsDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LocationsDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ibx) {
		toSerialize["ibx"] = o.Ibx
	}
	if !IsNil(o.AccessRestricted) {
		toSerialize["accessRestricted"] = o.AccessRestricted
	}
	if !IsNil(o.SpecialPrivilege) {
		toSerialize["specialPrivilege"] = o.SpecialPrivilege
	}
	if !IsNil(o.Accounts) {
		toSerialize["accounts"] = o.Accounts
	}
	if !IsNil(o.Cages) {
		toSerialize["cages"] = o.Cages
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LocationsDetails) UnmarshalJSON(data []byte) (err error) {
	varLocationsDetails := _LocationsDetails{}

	err = json.Unmarshal(data, &varLocationsDetails)

	if err != nil {
		return err
	}

	*o = LocationsDetails(varLocationsDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ibx")
		delete(additionalProperties, "accessRestricted")
		delete(additionalProperties, "specialPrivilege")
		delete(additionalProperties, "accounts")
		delete(additionalProperties, "cages")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLocationsDetails struct {
	value *LocationsDetails
	isSet bool
}

func (v NullableLocationsDetails) Get() *LocationsDetails {
	return v.value
}

func (v *NullableLocationsDetails) Set(val *LocationsDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationsDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationsDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationsDetails(val *LocationsDetails) *NullableLocationsDetails {
	return &NullableLocationsDetails{value: val, isSet: true}
}

func (v NullableLocationsDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationsDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
