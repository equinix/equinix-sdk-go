/*
Lookup

Based on a user's permission, a user may view their locations, provider and patch panel in their organization. These locations can be filtered by permission code, account number, cage and cabinet details to get both A Side and Z side IBX locations and patch panel available ports to place an order

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lookupv2

import (
	"encoding/json"
)

// checks if the PatchPanelResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchPanelResponse{}

// PatchPanelResponse struct for PatchPanelResponse
type PatchPanelResponse struct {
	// Patch panel unique ID / serial number
	PatchPanelId *string `json:"patchPanelId,omitempty"`
	// Available ports for use
	AvailablePortCount *float32 `json:"availablePortCount,omitempty"`
	// Unique reference ID associated with patch panel
	PatchPanelReferenceId *string `json:"patchPanelReferenceId,omitempty"`
	// Patch panel will support only intra facility when `true`
	IfcEnabled           *bool                              `json:"ifcEnabled,omitempty"`
	ProvisioningType     *PatchPanelDetailsProvisioningType `json:"provisioningType,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PatchPanelResponse PatchPanelResponse

// NewPatchPanelResponse instantiates a new PatchPanelResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchPanelResponse() *PatchPanelResponse {
	this := PatchPanelResponse{}
	var ifcEnabled bool = false
	this.IfcEnabled = &ifcEnabled
	return &this
}

// NewPatchPanelResponseWithDefaults instantiates a new PatchPanelResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchPanelResponseWithDefaults() *PatchPanelResponse {
	this := PatchPanelResponse{}
	var ifcEnabled bool = false
	this.IfcEnabled = &ifcEnabled
	return &this
}

// GetPatchPanelId returns the PatchPanelId field value if set, zero value otherwise.
func (o *PatchPanelResponse) GetPatchPanelId() string {
	if o == nil || IsNil(o.PatchPanelId) {
		var ret string
		return ret
	}
	return *o.PatchPanelId
}

// GetPatchPanelIdOk returns a tuple with the PatchPanelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPanelResponse) GetPatchPanelIdOk() (*string, bool) {
	if o == nil || IsNil(o.PatchPanelId) {
		return nil, false
	}
	return o.PatchPanelId, true
}

// HasPatchPanelId returns a boolean if a field has been set.
func (o *PatchPanelResponse) HasPatchPanelId() bool {
	if o != nil && !IsNil(o.PatchPanelId) {
		return true
	}

	return false
}

// SetPatchPanelId gets a reference to the given string and assigns it to the PatchPanelId field.
func (o *PatchPanelResponse) SetPatchPanelId(v string) {
	o.PatchPanelId = &v
}

// GetAvailablePortCount returns the AvailablePortCount field value if set, zero value otherwise.
func (o *PatchPanelResponse) GetAvailablePortCount() float32 {
	if o == nil || IsNil(o.AvailablePortCount) {
		var ret float32
		return ret
	}
	return *o.AvailablePortCount
}

// GetAvailablePortCountOk returns a tuple with the AvailablePortCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPanelResponse) GetAvailablePortCountOk() (*float32, bool) {
	if o == nil || IsNil(o.AvailablePortCount) {
		return nil, false
	}
	return o.AvailablePortCount, true
}

// HasAvailablePortCount returns a boolean if a field has been set.
func (o *PatchPanelResponse) HasAvailablePortCount() bool {
	if o != nil && !IsNil(o.AvailablePortCount) {
		return true
	}

	return false
}

// SetAvailablePortCount gets a reference to the given float32 and assigns it to the AvailablePortCount field.
func (o *PatchPanelResponse) SetAvailablePortCount(v float32) {
	o.AvailablePortCount = &v
}

// GetPatchPanelReferenceId returns the PatchPanelReferenceId field value if set, zero value otherwise.
func (o *PatchPanelResponse) GetPatchPanelReferenceId() string {
	if o == nil || IsNil(o.PatchPanelReferenceId) {
		var ret string
		return ret
	}
	return *o.PatchPanelReferenceId
}

// GetPatchPanelReferenceIdOk returns a tuple with the PatchPanelReferenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPanelResponse) GetPatchPanelReferenceIdOk() (*string, bool) {
	if o == nil || IsNil(o.PatchPanelReferenceId) {
		return nil, false
	}
	return o.PatchPanelReferenceId, true
}

// HasPatchPanelReferenceId returns a boolean if a field has been set.
func (o *PatchPanelResponse) HasPatchPanelReferenceId() bool {
	if o != nil && !IsNil(o.PatchPanelReferenceId) {
		return true
	}

	return false
}

// SetPatchPanelReferenceId gets a reference to the given string and assigns it to the PatchPanelReferenceId field.
func (o *PatchPanelResponse) SetPatchPanelReferenceId(v string) {
	o.PatchPanelReferenceId = &v
}

// GetIfcEnabled returns the IfcEnabled field value if set, zero value otherwise.
func (o *PatchPanelResponse) GetIfcEnabled() bool {
	if o == nil || IsNil(o.IfcEnabled) {
		var ret bool
		return ret
	}
	return *o.IfcEnabled
}

// GetIfcEnabledOk returns a tuple with the IfcEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPanelResponse) GetIfcEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IfcEnabled) {
		return nil, false
	}
	return o.IfcEnabled, true
}

// HasIfcEnabled returns a boolean if a field has been set.
func (o *PatchPanelResponse) HasIfcEnabled() bool {
	if o != nil && !IsNil(o.IfcEnabled) {
		return true
	}

	return false
}

// SetIfcEnabled gets a reference to the given bool and assigns it to the IfcEnabled field.
func (o *PatchPanelResponse) SetIfcEnabled(v bool) {
	o.IfcEnabled = &v
}

// GetProvisioningType returns the ProvisioningType field value if set, zero value otherwise.
func (o *PatchPanelResponse) GetProvisioningType() PatchPanelDetailsProvisioningType {
	if o == nil || IsNil(o.ProvisioningType) {
		var ret PatchPanelDetailsProvisioningType
		return ret
	}
	return *o.ProvisioningType
}

// GetProvisioningTypeOk returns a tuple with the ProvisioningType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPanelResponse) GetProvisioningTypeOk() (*PatchPanelDetailsProvisioningType, bool) {
	if o == nil || IsNil(o.ProvisioningType) {
		return nil, false
	}
	return o.ProvisioningType, true
}

// HasProvisioningType returns a boolean if a field has been set.
func (o *PatchPanelResponse) HasProvisioningType() bool {
	if o != nil && !IsNil(o.ProvisioningType) {
		return true
	}

	return false
}

// SetProvisioningType gets a reference to the given PatchPanelDetailsProvisioningType and assigns it to the ProvisioningType field.
func (o *PatchPanelResponse) SetProvisioningType(v PatchPanelDetailsProvisioningType) {
	o.ProvisioningType = &v
}

func (o PatchPanelResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchPanelResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PatchPanelId) {
		toSerialize["patchPanelId"] = o.PatchPanelId
	}
	if !IsNil(o.AvailablePortCount) {
		toSerialize["availablePortCount"] = o.AvailablePortCount
	}
	if !IsNil(o.PatchPanelReferenceId) {
		toSerialize["patchPanelReferenceId"] = o.PatchPanelReferenceId
	}
	if !IsNil(o.IfcEnabled) {
		toSerialize["ifcEnabled"] = o.IfcEnabled
	}
	if !IsNil(o.ProvisioningType) {
		toSerialize["provisioningType"] = o.ProvisioningType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PatchPanelResponse) UnmarshalJSON(data []byte) (err error) {
	varPatchPanelResponse := _PatchPanelResponse{}

	err = json.Unmarshal(data, &varPatchPanelResponse)

	if err != nil {
		return err
	}

	*o = PatchPanelResponse(varPatchPanelResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "patchPanelId")
		delete(additionalProperties, "availablePortCount")
		delete(additionalProperties, "patchPanelReferenceId")
		delete(additionalProperties, "ifcEnabled")
		delete(additionalProperties, "provisioningType")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePatchPanelResponse struct {
	value *PatchPanelResponse
	isSet bool
}

func (v NullablePatchPanelResponse) Get() *PatchPanelResponse {
	return v.value
}

func (v *NullablePatchPanelResponse) Set(val *PatchPanelResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchPanelResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchPanelResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchPanelResponse(val *PatchPanelResponse) *NullablePatchPanelResponse {
	return &NullablePatchPanelResponse{value: val, isSet: true}
}

func (v NullablePatchPanelResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchPanelResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
