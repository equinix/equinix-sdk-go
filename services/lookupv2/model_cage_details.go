/*
Lookup

Based on a user's permission, a user may view their locations, provider and patch panel in their organization. These locations can be filtered by permission code, account number, cage and cabinet details to get both A Side and Z side IBX locations and patch panel available ports to place an order

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lookupv2

import (
	"encoding/json"
)

// checks if the CageDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CageDetails{}

// CageDetails struct for CageDetails
type CageDetails struct {
	// Cage Unique space id
	Id   *string          `json:"id,omitempty"`
	Type *CageDetailsType `json:"type,omitempty"`
	// Customer account number associated with cage
	AccountNumbers *string `json:"accountNumbers,omitempty"`
	// Cabinet Unique space id
	CabinetId            *string                 `json:"cabinetId,omitempty"`
	CabinetType          *CageDetailsCabinetType `json:"cabinetType,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CageDetails CageDetails

// NewCageDetails instantiates a new CageDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCageDetails() *CageDetails {
	this := CageDetails{}
	var type_ CageDetailsType = CAGEDETAILSTYPE_PRIVATE
	this.Type = &type_
	return &this
}

// NewCageDetailsWithDefaults instantiates a new CageDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCageDetailsWithDefaults() *CageDetails {
	this := CageDetails{}
	var type_ CageDetailsType = CAGEDETAILSTYPE_PRIVATE
	this.Type = &type_
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CageDetails) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CageDetails) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CageDetails) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CageDetails) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CageDetails) GetType() CageDetailsType {
	if o == nil || IsNil(o.Type) {
		var ret CageDetailsType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CageDetails) GetTypeOk() (*CageDetailsType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CageDetails) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given CageDetailsType and assigns it to the Type field.
func (o *CageDetails) SetType(v CageDetailsType) {
	o.Type = &v
}

// GetAccountNumbers returns the AccountNumbers field value if set, zero value otherwise.
func (o *CageDetails) GetAccountNumbers() string {
	if o == nil || IsNil(o.AccountNumbers) {
		var ret string
		return ret
	}
	return *o.AccountNumbers
}

// GetAccountNumbersOk returns a tuple with the AccountNumbers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CageDetails) GetAccountNumbersOk() (*string, bool) {
	if o == nil || IsNil(o.AccountNumbers) {
		return nil, false
	}
	return o.AccountNumbers, true
}

// HasAccountNumbers returns a boolean if a field has been set.
func (o *CageDetails) HasAccountNumbers() bool {
	if o != nil && !IsNil(o.AccountNumbers) {
		return true
	}

	return false
}

// SetAccountNumbers gets a reference to the given string and assigns it to the AccountNumbers field.
func (o *CageDetails) SetAccountNumbers(v string) {
	o.AccountNumbers = &v
}

// GetCabinetId returns the CabinetId field value if set, zero value otherwise.
func (o *CageDetails) GetCabinetId() string {
	if o == nil || IsNil(o.CabinetId) {
		var ret string
		return ret
	}
	return *o.CabinetId
}

// GetCabinetIdOk returns a tuple with the CabinetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CageDetails) GetCabinetIdOk() (*string, bool) {
	if o == nil || IsNil(o.CabinetId) {
		return nil, false
	}
	return o.CabinetId, true
}

// HasCabinetId returns a boolean if a field has been set.
func (o *CageDetails) HasCabinetId() bool {
	if o != nil && !IsNil(o.CabinetId) {
		return true
	}

	return false
}

// SetCabinetId gets a reference to the given string and assigns it to the CabinetId field.
func (o *CageDetails) SetCabinetId(v string) {
	o.CabinetId = &v
}

// GetCabinetType returns the CabinetType field value if set, zero value otherwise.
func (o *CageDetails) GetCabinetType() CageDetailsCabinetType {
	if o == nil || IsNil(o.CabinetType) {
		var ret CageDetailsCabinetType
		return ret
	}
	return *o.CabinetType
}

// GetCabinetTypeOk returns a tuple with the CabinetType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CageDetails) GetCabinetTypeOk() (*CageDetailsCabinetType, bool) {
	if o == nil || IsNil(o.CabinetType) {
		return nil, false
	}
	return o.CabinetType, true
}

// HasCabinetType returns a boolean if a field has been set.
func (o *CageDetails) HasCabinetType() bool {
	if o != nil && !IsNil(o.CabinetType) {
		return true
	}

	return false
}

// SetCabinetType gets a reference to the given CageDetailsCabinetType and assigns it to the CabinetType field.
func (o *CageDetails) SetCabinetType(v CageDetailsCabinetType) {
	o.CabinetType = &v
}

func (o CageDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CageDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.AccountNumbers) {
		toSerialize["accountNumbers"] = o.AccountNumbers
	}
	if !IsNil(o.CabinetId) {
		toSerialize["cabinetId"] = o.CabinetId
	}
	if !IsNil(o.CabinetType) {
		toSerialize["cabinetType"] = o.CabinetType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CageDetails) UnmarshalJSON(data []byte) (err error) {
	varCageDetails := _CageDetails{}

	err = json.Unmarshal(data, &varCageDetails)

	if err != nil {
		return err
	}

	*o = CageDetails(varCageDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "type")
		delete(additionalProperties, "accountNumbers")
		delete(additionalProperties, "cabinetId")
		delete(additionalProperties, "cabinetType")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCageDetails struct {
	value *CageDetails
	isSet bool
}

func (v NullableCageDetails) Get() *CageDetails {
	return v.value
}

func (v *NullableCageDetails) Set(val *CageDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableCageDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableCageDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCageDetails(val *CageDetails) *NullableCageDetails {
	return &NullableCageDetails{value: val, isSet: true}
}

func (v NullableCageDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCageDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
