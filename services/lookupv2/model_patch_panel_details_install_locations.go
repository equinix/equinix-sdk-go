/*
Lookup

Based on a user's permission, a user may view their locations, provider and patch panel in their organization. These locations can be filtered by permission code, account number, cage and cabinet details to get both A Side and Z side IBX locations and patch panel available ports to place an order

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lookupv2

import (
	"encoding/json"
	"fmt"
)

// PatchPanelDetailsInstallLocations Location of installed patch panel
type PatchPanelDetailsInstallLocations string

// List of patch_panel_details_installLocations
const (
	PATCHPANELDETAILSINSTALLLOCATIONS_STANDARD PatchPanelDetailsInstallLocations = "STANDARD"
)

// All allowed values of PatchPanelDetailsInstallLocations enum
var AllowedPatchPanelDetailsInstallLocationsEnumValues = []PatchPanelDetailsInstallLocations{
	"STANDARD",
}

func (v *PatchPanelDetailsInstallLocations) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PatchPanelDetailsInstallLocations(value)
	for _, existing := range AllowedPatchPanelDetailsInstallLocationsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PatchPanelDetailsInstallLocations", value)
}

// NewPatchPanelDetailsInstallLocationsFromValue returns a pointer to a valid PatchPanelDetailsInstallLocations
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPatchPanelDetailsInstallLocationsFromValue(v string) (*PatchPanelDetailsInstallLocations, error) {
	ev := PatchPanelDetailsInstallLocations(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PatchPanelDetailsInstallLocations: valid values are %v", v, AllowedPatchPanelDetailsInstallLocationsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PatchPanelDetailsInstallLocations) IsValid() bool {
	for _, existing := range AllowedPatchPanelDetailsInstallLocationsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to patch_panel_details_installLocations value
func (v PatchPanelDetailsInstallLocations) Ptr() *PatchPanelDetailsInstallLocations {
	return &v
}

type NullablePatchPanelDetailsInstallLocations struct {
	value *PatchPanelDetailsInstallLocations
	isSet bool
}

func (v NullablePatchPanelDetailsInstallLocations) Get() *PatchPanelDetailsInstallLocations {
	return v.value
}

func (v *NullablePatchPanelDetailsInstallLocations) Set(val *PatchPanelDetailsInstallLocations) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchPanelDetailsInstallLocations) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchPanelDetailsInstallLocations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchPanelDetailsInstallLocations(val *PatchPanelDetailsInstallLocations) *NullablePatchPanelDetailsInstallLocations {
	return &NullablePatchPanelDetailsInstallLocations{value: val, isSet: true}
}

func (v NullablePatchPanelDetailsInstallLocations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchPanelDetailsInstallLocations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
