/*
Lookup

Based on a user's permission, a user may view their locations, provider and patch panel in their organization. These locations can be filtered by permission code, account number, cage and cabinet details to get both A Side and Z side IBX locations and patch panel available ports to place an order

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lookupv2

import (
	"encoding/json"
)

// checks if the UserPortDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserPortDetails{}

// UserPortDetails struct for UserPortDetails
type UserPortDetails struct {
	// Port number that is currently in use
	PortNumber *float32 `json:"portNumber,omitempty"`
	// Serial number or cable id
	SerialNumber           *string             `json:"serialNumber,omitempty"`
	ConnectionServicesName *ConnectionServices `json:"connectionServicesName,omitempty"`
	// Name of Z-Side service provider
	ZSideProviderName    *string `json:"zSideProviderName,omitempty"`
	CircuitId            *string `json:"circuitId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UserPortDetails UserPortDetails

// NewUserPortDetails instantiates a new UserPortDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserPortDetails() *UserPortDetails {
	this := UserPortDetails{}
	return &this
}

// NewUserPortDetailsWithDefaults instantiates a new UserPortDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserPortDetailsWithDefaults() *UserPortDetails {
	this := UserPortDetails{}
	return &this
}

// GetPortNumber returns the PortNumber field value if set, zero value otherwise.
func (o *UserPortDetails) GetPortNumber() float32 {
	if o == nil || IsNil(o.PortNumber) {
		var ret float32
		return ret
	}
	return *o.PortNumber
}

// GetPortNumberOk returns a tuple with the PortNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPortDetails) GetPortNumberOk() (*float32, bool) {
	if o == nil || IsNil(o.PortNumber) {
		return nil, false
	}
	return o.PortNumber, true
}

// HasPortNumber returns a boolean if a field has been set.
func (o *UserPortDetails) HasPortNumber() bool {
	if o != nil && !IsNil(o.PortNumber) {
		return true
	}

	return false
}

// SetPortNumber gets a reference to the given float32 and assigns it to the PortNumber field.
func (o *UserPortDetails) SetPortNumber(v float32) {
	o.PortNumber = &v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *UserPortDetails) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPortDetails) GetSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *UserPortDetails) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *UserPortDetails) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetConnectionServicesName returns the ConnectionServicesName field value if set, zero value otherwise.
func (o *UserPortDetails) GetConnectionServicesName() ConnectionServices {
	if o == nil || IsNil(o.ConnectionServicesName) {
		var ret ConnectionServices
		return ret
	}
	return *o.ConnectionServicesName
}

// GetConnectionServicesNameOk returns a tuple with the ConnectionServicesName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPortDetails) GetConnectionServicesNameOk() (*ConnectionServices, bool) {
	if o == nil || IsNil(o.ConnectionServicesName) {
		return nil, false
	}
	return o.ConnectionServicesName, true
}

// HasConnectionServicesName returns a boolean if a field has been set.
func (o *UserPortDetails) HasConnectionServicesName() bool {
	if o != nil && !IsNil(o.ConnectionServicesName) {
		return true
	}

	return false
}

// SetConnectionServicesName gets a reference to the given ConnectionServices and assigns it to the ConnectionServicesName field.
func (o *UserPortDetails) SetConnectionServicesName(v ConnectionServices) {
	o.ConnectionServicesName = &v
}

// GetZSideProviderName returns the ZSideProviderName field value if set, zero value otherwise.
func (o *UserPortDetails) GetZSideProviderName() string {
	if o == nil || IsNil(o.ZSideProviderName) {
		var ret string
		return ret
	}
	return *o.ZSideProviderName
}

// GetZSideProviderNameOk returns a tuple with the ZSideProviderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPortDetails) GetZSideProviderNameOk() (*string, bool) {
	if o == nil || IsNil(o.ZSideProviderName) {
		return nil, false
	}
	return o.ZSideProviderName, true
}

// HasZSideProviderName returns a boolean if a field has been set.
func (o *UserPortDetails) HasZSideProviderName() bool {
	if o != nil && !IsNil(o.ZSideProviderName) {
		return true
	}

	return false
}

// SetZSideProviderName gets a reference to the given string and assigns it to the ZSideProviderName field.
func (o *UserPortDetails) SetZSideProviderName(v string) {
	o.ZSideProviderName = &v
}

// GetCircuitId returns the CircuitId field value if set, zero value otherwise.
func (o *UserPortDetails) GetCircuitId() string {
	if o == nil || IsNil(o.CircuitId) {
		var ret string
		return ret
	}
	return *o.CircuitId
}

// GetCircuitIdOk returns a tuple with the CircuitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPortDetails) GetCircuitIdOk() (*string, bool) {
	if o == nil || IsNil(o.CircuitId) {
		return nil, false
	}
	return o.CircuitId, true
}

// HasCircuitId returns a boolean if a field has been set.
func (o *UserPortDetails) HasCircuitId() bool {
	if o != nil && !IsNil(o.CircuitId) {
		return true
	}

	return false
}

// SetCircuitId gets a reference to the given string and assigns it to the CircuitId field.
func (o *UserPortDetails) SetCircuitId(v string) {
	o.CircuitId = &v
}

func (o UserPortDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserPortDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PortNumber) {
		toSerialize["portNumber"] = o.PortNumber
	}
	if !IsNil(o.SerialNumber) {
		toSerialize["serialNumber"] = o.SerialNumber
	}
	if !IsNil(o.ConnectionServicesName) {
		toSerialize["connectionServicesName"] = o.ConnectionServicesName
	}
	if !IsNil(o.ZSideProviderName) {
		toSerialize["zSideProviderName"] = o.ZSideProviderName
	}
	if !IsNil(o.CircuitId) {
		toSerialize["circuitId"] = o.CircuitId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UserPortDetails) UnmarshalJSON(data []byte) (err error) {
	varUserPortDetails := _UserPortDetails{}

	err = json.Unmarshal(data, &varUserPortDetails)

	if err != nil {
		return err
	}

	*o = UserPortDetails(varUserPortDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "portNumber")
		delete(additionalProperties, "serialNumber")
		delete(additionalProperties, "connectionServicesName")
		delete(additionalProperties, "zSideProviderName")
		delete(additionalProperties, "circuitId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserPortDetails struct {
	value *UserPortDetails
	isSet bool
}

func (v NullableUserPortDetails) Get() *UserPortDetails {
	return v.value
}

func (v *NullableUserPortDetails) Set(val *UserPortDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableUserPortDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableUserPortDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserPortDetails(val *UserPortDetails) *NullableUserPortDetails {
	return &NullableUserPortDetails{value: val, isSet: true}
}

func (v NullableUserPortDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserPortDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
