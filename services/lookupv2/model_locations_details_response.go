/*
Lookup

Based on a user's permission, a user may view their locations, provider and patch panel in their organization. These locations can be filtered by permission code, account number, cage and cabinet details to get both A Side and Z side IBX locations and patch panel available ports to place an order

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lookupv2

import (
	"encoding/json"
)

// checks if the LocationsDetailsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LocationsDetailsResponse{}

// LocationsDetailsResponse struct for LocationsDetailsResponse
type LocationsDetailsResponse struct {
	CrossConnects        []LocationsDetails `json:"crossConnects,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LocationsDetailsResponse LocationsDetailsResponse

// NewLocationsDetailsResponse instantiates a new LocationsDetailsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocationsDetailsResponse() *LocationsDetailsResponse {
	this := LocationsDetailsResponse{}
	return &this
}

// NewLocationsDetailsResponseWithDefaults instantiates a new LocationsDetailsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationsDetailsResponseWithDefaults() *LocationsDetailsResponse {
	this := LocationsDetailsResponse{}
	return &this
}

// GetCrossConnects returns the CrossConnects field value if set, zero value otherwise.
func (o *LocationsDetailsResponse) GetCrossConnects() []LocationsDetails {
	if o == nil || IsNil(o.CrossConnects) {
		var ret []LocationsDetails
		return ret
	}
	return o.CrossConnects
}

// GetCrossConnectsOk returns a tuple with the CrossConnects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationsDetailsResponse) GetCrossConnectsOk() ([]LocationsDetails, bool) {
	if o == nil || IsNil(o.CrossConnects) {
		return nil, false
	}
	return o.CrossConnects, true
}

// HasCrossConnects returns a boolean if a field has been set.
func (o *LocationsDetailsResponse) HasCrossConnects() bool {
	if o != nil && !IsNil(o.CrossConnects) {
		return true
	}

	return false
}

// SetCrossConnects gets a reference to the given []LocationsDetails and assigns it to the CrossConnects field.
func (o *LocationsDetailsResponse) SetCrossConnects(v []LocationsDetails) {
	o.CrossConnects = v
}

func (o LocationsDetailsResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LocationsDetailsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CrossConnects) {
		toSerialize["crossConnects"] = o.CrossConnects
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LocationsDetailsResponse) UnmarshalJSON(data []byte) (err error) {
	varLocationsDetailsResponse := _LocationsDetailsResponse{}

	err = json.Unmarshal(data, &varLocationsDetailsResponse)

	if err != nil {
		return err
	}

	*o = LocationsDetailsResponse(varLocationsDetailsResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "crossConnects")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLocationsDetailsResponse struct {
	value *LocationsDetailsResponse
	isSet bool
}

func (v NullableLocationsDetailsResponse) Get() *LocationsDetailsResponse {
	return v.value
}

func (v *NullableLocationsDetailsResponse) Set(val *LocationsDetailsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationsDetailsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationsDetailsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationsDetailsResponse(val *LocationsDetailsResponse) *NullableLocationsDetailsResponse {
	return &NullableLocationsDetailsResponse{value: val, isSet: true}
}

func (v NullableLocationsDetailsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationsDetailsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
