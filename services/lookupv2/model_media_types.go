/*
Lookup

Based on a user's permission, a user may view their locations, provider and patch panel in their organization. These locations can be filtered by permission code, account number, cage and cabinet details to get both A Side and Z side IBX locations and patch panel available ports to place an order

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lookupv2

import (
	"encoding/json"
	"fmt"
)

// MediaTypes Name of the media type that corresponds with the connection service.
type MediaTypes string

// List of media_types
const (
	MEDIATYPES_COAX                              MediaTypes = "COAX"
	MEDIATYPES_MP4_CABLE                         MediaTypes = "MP4_CABLE"
	MEDIATYPES__50_MICRON_MULTI_MODE_FIBER       MediaTypes = "50_MICRON_MULTI_MODE_FIBER"
	MEDIATYPES__50_MICRON_MULTI_MODE_FIBER_OM2   MediaTypes = "50_MICRON_MULTI_MODE_FIBER_OM2"
	MEDIATYPES__50_MICRON_MULTI_MODE_FIBER_OM3   MediaTypes = "50_MICRON_MULTI_MODE_FIBER_OM3"
	MEDIATYPES__50_MICRON_MULTI_MODE_FIBER_OM4   MediaTypes = "50_MICRON_MULTI_MODE_FIBER_OM4"
	MEDIATYPES__62_5_MICRON_MULTI_MODE_FIBER     MediaTypes = "62.5_MICRON_MULTI_MODE_FIBER"
	MEDIATYPES__62_5_MICRON_MULTI_MODE_FIBER_OM1 MediaTypes = "62.5_MICRON_MULTI_MODE_FIBER_OM1"
	MEDIATYPES_ABAM                              MediaTypes = "ABAM"
	MEDIATYPES_CAT3                              MediaTypes = "CAT3"
	MEDIATYPES_CAT5_E                            MediaTypes = "CAT5E"
	MEDIATYPES_CAT6                              MediaTypes = "CAT6"
	MEDIATYPES_CAT6_A                            MediaTypes = "CAT6A"
	MEDIATYPES_OS1                               MediaTypes = "OS1"
	MEDIATYPES_SINGLE_MODE_FIBER                 MediaTypes = "SINGLE_MODE_FIBER"
)

// All allowed values of MediaTypes enum
var AllowedMediaTypesEnumValues = []MediaTypes{
	"COAX",
	"MP4_CABLE",
	"50_MICRON_MULTI_MODE_FIBER",
	"50_MICRON_MULTI_MODE_FIBER_OM2",
	"50_MICRON_MULTI_MODE_FIBER_OM3",
	"50_MICRON_MULTI_MODE_FIBER_OM4",
	"62.5_MICRON_MULTI_MODE_FIBER",
	"62.5_MICRON_MULTI_MODE_FIBER_OM1",
	"ABAM",
	"CAT3",
	"CAT5E",
	"CAT6",
	"CAT6A",
	"OS1",
	"SINGLE_MODE_FIBER",
}

func (v *MediaTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MediaTypes(value)
	for _, existing := range AllowedMediaTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MediaTypes", value)
}

// NewMediaTypesFromValue returns a pointer to a valid MediaTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMediaTypesFromValue(v string) (*MediaTypes, error) {
	ev := MediaTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MediaTypes: valid values are %v", v, AllowedMediaTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MediaTypes) IsValid() bool {
	for _, existing := range AllowedMediaTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to media_types value
func (v MediaTypes) Ptr() *MediaTypes {
	return &v
}

type NullableMediaTypes struct {
	value *MediaTypes
	isSet bool
}

func (v NullableMediaTypes) Get() *MediaTypes {
	return v.value
}

func (v *NullableMediaTypes) Set(val *MediaTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableMediaTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableMediaTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMediaTypes(val *MediaTypes) *NullableMediaTypes {
	return &NullableMediaTypes{value: val, isSet: true}
}

func (v NullableMediaTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMediaTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
