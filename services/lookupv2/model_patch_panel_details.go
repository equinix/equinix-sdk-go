/*
Lookup

Based on a user's permission, a user may view their locations, provider and patch panel in their organization. These locations can be filtered by permission code, account number, cage and cabinet details to get both A Side and Z side IBX locations and patch panel available ports to place an order

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lookupv2

import (
	"encoding/json"
)

// checks if the PatchPanelDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchPanelDetails{}

// PatchPanelDetails struct for PatchPanelDetails
type PatchPanelDetails struct {
	// Patch panel ID / serial number
	PatchPanelId *string `json:"patchPanelId,omitempty"`
	// IBX location code
	Ibx *string `json:"ibx,omitempty"`
	// Cage ID
	CageId *string `json:"cageId,omitempty"`
	// Cabinet ID
	CabinetId *string `json:"cabinetId,omitempty"`
	// Customer cage account number
	AccountNumber *string `json:"accountNumber,omitempty"`
	// Customer cage account name
	AccountName *string `json:"accountName,omitempty"`
	// Type of dedicated media
	DedicatedMediaType *string `json:"dedicatedMediaType,omitempty"`
	// Prewired status of cross connects. When `true`, cross connects are prewired
	PreWired *bool                  `json:"preWired,omitempty"`
	Type     *PatchPanelDetailsType `json:"type,omitempty"`
	// Identifies if intra-facility cable (IFC) connection is required for patch panel. When `true`, IFC connection is required.
	IfcEnabled *bool `json:"ifcEnabled,omitempty"`
	// Rack location of patch panel
	RackLocations    *string                            `json:"rackLocations,omitempty"`
	InstallLocations *PatchPanelDetailsInstallLocations `json:"installLocations,omitempty"`
	// If `true`, Equinix will install cross connect from demarcation panel to customer equipment.
	InstallationRequired *bool `json:"installationRequired,omitempty"`
	// if `true`, circuits are available for patch panel
	CircuitAvailable *bool `json:"circuitAvailable,omitempty"`
	// Individually identified ports that are available out of the total number of ports.
	AvailablePorts       []float32                          `json:"availablePorts,omitempty"`
	ConnectionServices   []ConnectionServicesDetailsInner   `json:"connectionServices,omitempty"`
	UsedPortsDetails     []UserPortDetails                  `json:"usedPortsDetails,omitempty"`
	ProvisioningType     *PatchPanelDetailsProvisioningType `json:"provisioningType,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PatchPanelDetails PatchPanelDetails

// NewPatchPanelDetails instantiates a new PatchPanelDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchPanelDetails() *PatchPanelDetails {
	this := PatchPanelDetails{}
	var installationRequired bool = false
	this.InstallationRequired = &installationRequired
	var circuitAvailable bool = false
	this.CircuitAvailable = &circuitAvailable
	return &this
}

// NewPatchPanelDetailsWithDefaults instantiates a new PatchPanelDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchPanelDetailsWithDefaults() *PatchPanelDetails {
	this := PatchPanelDetails{}
	var installationRequired bool = false
	this.InstallationRequired = &installationRequired
	var circuitAvailable bool = false
	this.CircuitAvailable = &circuitAvailable
	return &this
}

// GetPatchPanelId returns the PatchPanelId field value if set, zero value otherwise.
func (o *PatchPanelDetails) GetPatchPanelId() string {
	if o == nil || IsNil(o.PatchPanelId) {
		var ret string
		return ret
	}
	return *o.PatchPanelId
}

// GetPatchPanelIdOk returns a tuple with the PatchPanelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPanelDetails) GetPatchPanelIdOk() (*string, bool) {
	if o == nil || IsNil(o.PatchPanelId) {
		return nil, false
	}
	return o.PatchPanelId, true
}

// HasPatchPanelId returns a boolean if a field has been set.
func (o *PatchPanelDetails) HasPatchPanelId() bool {
	if o != nil && !IsNil(o.PatchPanelId) {
		return true
	}

	return false
}

// SetPatchPanelId gets a reference to the given string and assigns it to the PatchPanelId field.
func (o *PatchPanelDetails) SetPatchPanelId(v string) {
	o.PatchPanelId = &v
}

// GetIbx returns the Ibx field value if set, zero value otherwise.
func (o *PatchPanelDetails) GetIbx() string {
	if o == nil || IsNil(o.Ibx) {
		var ret string
		return ret
	}
	return *o.Ibx
}

// GetIbxOk returns a tuple with the Ibx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPanelDetails) GetIbxOk() (*string, bool) {
	if o == nil || IsNil(o.Ibx) {
		return nil, false
	}
	return o.Ibx, true
}

// HasIbx returns a boolean if a field has been set.
func (o *PatchPanelDetails) HasIbx() bool {
	if o != nil && !IsNil(o.Ibx) {
		return true
	}

	return false
}

// SetIbx gets a reference to the given string and assigns it to the Ibx field.
func (o *PatchPanelDetails) SetIbx(v string) {
	o.Ibx = &v
}

// GetCageId returns the CageId field value if set, zero value otherwise.
func (o *PatchPanelDetails) GetCageId() string {
	if o == nil || IsNil(o.CageId) {
		var ret string
		return ret
	}
	return *o.CageId
}

// GetCageIdOk returns a tuple with the CageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPanelDetails) GetCageIdOk() (*string, bool) {
	if o == nil || IsNil(o.CageId) {
		return nil, false
	}
	return o.CageId, true
}

// HasCageId returns a boolean if a field has been set.
func (o *PatchPanelDetails) HasCageId() bool {
	if o != nil && !IsNil(o.CageId) {
		return true
	}

	return false
}

// SetCageId gets a reference to the given string and assigns it to the CageId field.
func (o *PatchPanelDetails) SetCageId(v string) {
	o.CageId = &v
}

// GetCabinetId returns the CabinetId field value if set, zero value otherwise.
func (o *PatchPanelDetails) GetCabinetId() string {
	if o == nil || IsNil(o.CabinetId) {
		var ret string
		return ret
	}
	return *o.CabinetId
}

// GetCabinetIdOk returns a tuple with the CabinetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPanelDetails) GetCabinetIdOk() (*string, bool) {
	if o == nil || IsNil(o.CabinetId) {
		return nil, false
	}
	return o.CabinetId, true
}

// HasCabinetId returns a boolean if a field has been set.
func (o *PatchPanelDetails) HasCabinetId() bool {
	if o != nil && !IsNil(o.CabinetId) {
		return true
	}

	return false
}

// SetCabinetId gets a reference to the given string and assigns it to the CabinetId field.
func (o *PatchPanelDetails) SetCabinetId(v string) {
	o.CabinetId = &v
}

// GetAccountNumber returns the AccountNumber field value if set, zero value otherwise.
func (o *PatchPanelDetails) GetAccountNumber() string {
	if o == nil || IsNil(o.AccountNumber) {
		var ret string
		return ret
	}
	return *o.AccountNumber
}

// GetAccountNumberOk returns a tuple with the AccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPanelDetails) GetAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.AccountNumber) {
		return nil, false
	}
	return o.AccountNumber, true
}

// HasAccountNumber returns a boolean if a field has been set.
func (o *PatchPanelDetails) HasAccountNumber() bool {
	if o != nil && !IsNil(o.AccountNumber) {
		return true
	}

	return false
}

// SetAccountNumber gets a reference to the given string and assigns it to the AccountNumber field.
func (o *PatchPanelDetails) SetAccountNumber(v string) {
	o.AccountNumber = &v
}

// GetAccountName returns the AccountName field value if set, zero value otherwise.
func (o *PatchPanelDetails) GetAccountName() string {
	if o == nil || IsNil(o.AccountName) {
		var ret string
		return ret
	}
	return *o.AccountName
}

// GetAccountNameOk returns a tuple with the AccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPanelDetails) GetAccountNameOk() (*string, bool) {
	if o == nil || IsNil(o.AccountName) {
		return nil, false
	}
	return o.AccountName, true
}

// HasAccountName returns a boolean if a field has been set.
func (o *PatchPanelDetails) HasAccountName() bool {
	if o != nil && !IsNil(o.AccountName) {
		return true
	}

	return false
}

// SetAccountName gets a reference to the given string and assigns it to the AccountName field.
func (o *PatchPanelDetails) SetAccountName(v string) {
	o.AccountName = &v
}

// GetDedicatedMediaType returns the DedicatedMediaType field value if set, zero value otherwise.
func (o *PatchPanelDetails) GetDedicatedMediaType() string {
	if o == nil || IsNil(o.DedicatedMediaType) {
		var ret string
		return ret
	}
	return *o.DedicatedMediaType
}

// GetDedicatedMediaTypeOk returns a tuple with the DedicatedMediaType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPanelDetails) GetDedicatedMediaTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DedicatedMediaType) {
		return nil, false
	}
	return o.DedicatedMediaType, true
}

// HasDedicatedMediaType returns a boolean if a field has been set.
func (o *PatchPanelDetails) HasDedicatedMediaType() bool {
	if o != nil && !IsNil(o.DedicatedMediaType) {
		return true
	}

	return false
}

// SetDedicatedMediaType gets a reference to the given string and assigns it to the DedicatedMediaType field.
func (o *PatchPanelDetails) SetDedicatedMediaType(v string) {
	o.DedicatedMediaType = &v
}

// GetPreWired returns the PreWired field value if set, zero value otherwise.
func (o *PatchPanelDetails) GetPreWired() bool {
	if o == nil || IsNil(o.PreWired) {
		var ret bool
		return ret
	}
	return *o.PreWired
}

// GetPreWiredOk returns a tuple with the PreWired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPanelDetails) GetPreWiredOk() (*bool, bool) {
	if o == nil || IsNil(o.PreWired) {
		return nil, false
	}
	return o.PreWired, true
}

// HasPreWired returns a boolean if a field has been set.
func (o *PatchPanelDetails) HasPreWired() bool {
	if o != nil && !IsNil(o.PreWired) {
		return true
	}

	return false
}

// SetPreWired gets a reference to the given bool and assigns it to the PreWired field.
func (o *PatchPanelDetails) SetPreWired(v bool) {
	o.PreWired = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PatchPanelDetails) GetType() PatchPanelDetailsType {
	if o == nil || IsNil(o.Type) {
		var ret PatchPanelDetailsType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPanelDetails) GetTypeOk() (*PatchPanelDetailsType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PatchPanelDetails) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given PatchPanelDetailsType and assigns it to the Type field.
func (o *PatchPanelDetails) SetType(v PatchPanelDetailsType) {
	o.Type = &v
}

// GetIfcEnabled returns the IfcEnabled field value if set, zero value otherwise.
func (o *PatchPanelDetails) GetIfcEnabled() bool {
	if o == nil || IsNil(o.IfcEnabled) {
		var ret bool
		return ret
	}
	return *o.IfcEnabled
}

// GetIfcEnabledOk returns a tuple with the IfcEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPanelDetails) GetIfcEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IfcEnabled) {
		return nil, false
	}
	return o.IfcEnabled, true
}

// HasIfcEnabled returns a boolean if a field has been set.
func (o *PatchPanelDetails) HasIfcEnabled() bool {
	if o != nil && !IsNil(o.IfcEnabled) {
		return true
	}

	return false
}

// SetIfcEnabled gets a reference to the given bool and assigns it to the IfcEnabled field.
func (o *PatchPanelDetails) SetIfcEnabled(v bool) {
	o.IfcEnabled = &v
}

// GetRackLocations returns the RackLocations field value if set, zero value otherwise.
func (o *PatchPanelDetails) GetRackLocations() string {
	if o == nil || IsNil(o.RackLocations) {
		var ret string
		return ret
	}
	return *o.RackLocations
}

// GetRackLocationsOk returns a tuple with the RackLocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPanelDetails) GetRackLocationsOk() (*string, bool) {
	if o == nil || IsNil(o.RackLocations) {
		return nil, false
	}
	return o.RackLocations, true
}

// HasRackLocations returns a boolean if a field has been set.
func (o *PatchPanelDetails) HasRackLocations() bool {
	if o != nil && !IsNil(o.RackLocations) {
		return true
	}

	return false
}

// SetRackLocations gets a reference to the given string and assigns it to the RackLocations field.
func (o *PatchPanelDetails) SetRackLocations(v string) {
	o.RackLocations = &v
}

// GetInstallLocations returns the InstallLocations field value if set, zero value otherwise.
func (o *PatchPanelDetails) GetInstallLocations() PatchPanelDetailsInstallLocations {
	if o == nil || IsNil(o.InstallLocations) {
		var ret PatchPanelDetailsInstallLocations
		return ret
	}
	return *o.InstallLocations
}

// GetInstallLocationsOk returns a tuple with the InstallLocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPanelDetails) GetInstallLocationsOk() (*PatchPanelDetailsInstallLocations, bool) {
	if o == nil || IsNil(o.InstallLocations) {
		return nil, false
	}
	return o.InstallLocations, true
}

// HasInstallLocations returns a boolean if a field has been set.
func (o *PatchPanelDetails) HasInstallLocations() bool {
	if o != nil && !IsNil(o.InstallLocations) {
		return true
	}

	return false
}

// SetInstallLocations gets a reference to the given PatchPanelDetailsInstallLocations and assigns it to the InstallLocations field.
func (o *PatchPanelDetails) SetInstallLocations(v PatchPanelDetailsInstallLocations) {
	o.InstallLocations = &v
}

// GetInstallationRequired returns the InstallationRequired field value if set, zero value otherwise.
func (o *PatchPanelDetails) GetInstallationRequired() bool {
	if o == nil || IsNil(o.InstallationRequired) {
		var ret bool
		return ret
	}
	return *o.InstallationRequired
}

// GetInstallationRequiredOk returns a tuple with the InstallationRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPanelDetails) GetInstallationRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.InstallationRequired) {
		return nil, false
	}
	return o.InstallationRequired, true
}

// HasInstallationRequired returns a boolean if a field has been set.
func (o *PatchPanelDetails) HasInstallationRequired() bool {
	if o != nil && !IsNil(o.InstallationRequired) {
		return true
	}

	return false
}

// SetInstallationRequired gets a reference to the given bool and assigns it to the InstallationRequired field.
func (o *PatchPanelDetails) SetInstallationRequired(v bool) {
	o.InstallationRequired = &v
}

// GetCircuitAvailable returns the CircuitAvailable field value if set, zero value otherwise.
func (o *PatchPanelDetails) GetCircuitAvailable() bool {
	if o == nil || IsNil(o.CircuitAvailable) {
		var ret bool
		return ret
	}
	return *o.CircuitAvailable
}

// GetCircuitAvailableOk returns a tuple with the CircuitAvailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPanelDetails) GetCircuitAvailableOk() (*bool, bool) {
	if o == nil || IsNil(o.CircuitAvailable) {
		return nil, false
	}
	return o.CircuitAvailable, true
}

// HasCircuitAvailable returns a boolean if a field has been set.
func (o *PatchPanelDetails) HasCircuitAvailable() bool {
	if o != nil && !IsNil(o.CircuitAvailable) {
		return true
	}

	return false
}

// SetCircuitAvailable gets a reference to the given bool and assigns it to the CircuitAvailable field.
func (o *PatchPanelDetails) SetCircuitAvailable(v bool) {
	o.CircuitAvailable = &v
}

// GetAvailablePorts returns the AvailablePorts field value if set, zero value otherwise.
func (o *PatchPanelDetails) GetAvailablePorts() []float32 {
	if o == nil || IsNil(o.AvailablePorts) {
		var ret []float32
		return ret
	}
	return o.AvailablePorts
}

// GetAvailablePortsOk returns a tuple with the AvailablePorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPanelDetails) GetAvailablePortsOk() ([]float32, bool) {
	if o == nil || IsNil(o.AvailablePorts) {
		return nil, false
	}
	return o.AvailablePorts, true
}

// HasAvailablePorts returns a boolean if a field has been set.
func (o *PatchPanelDetails) HasAvailablePorts() bool {
	if o != nil && !IsNil(o.AvailablePorts) {
		return true
	}

	return false
}

// SetAvailablePorts gets a reference to the given []float32 and assigns it to the AvailablePorts field.
func (o *PatchPanelDetails) SetAvailablePorts(v []float32) {
	o.AvailablePorts = v
}

// GetConnectionServices returns the ConnectionServices field value if set, zero value otherwise.
func (o *PatchPanelDetails) GetConnectionServices() []ConnectionServicesDetailsInner {
	if o == nil || IsNil(o.ConnectionServices) {
		var ret []ConnectionServicesDetailsInner
		return ret
	}
	return o.ConnectionServices
}

// GetConnectionServicesOk returns a tuple with the ConnectionServices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPanelDetails) GetConnectionServicesOk() ([]ConnectionServicesDetailsInner, bool) {
	if o == nil || IsNil(o.ConnectionServices) {
		return nil, false
	}
	return o.ConnectionServices, true
}

// HasConnectionServices returns a boolean if a field has been set.
func (o *PatchPanelDetails) HasConnectionServices() bool {
	if o != nil && !IsNil(o.ConnectionServices) {
		return true
	}

	return false
}

// SetConnectionServices gets a reference to the given []ConnectionServicesDetailsInner and assigns it to the ConnectionServices field.
func (o *PatchPanelDetails) SetConnectionServices(v []ConnectionServicesDetailsInner) {
	o.ConnectionServices = v
}

// GetUsedPortsDetails returns the UsedPortsDetails field value if set, zero value otherwise.
func (o *PatchPanelDetails) GetUsedPortsDetails() []UserPortDetails {
	if o == nil || IsNil(o.UsedPortsDetails) {
		var ret []UserPortDetails
		return ret
	}
	return o.UsedPortsDetails
}

// GetUsedPortsDetailsOk returns a tuple with the UsedPortsDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPanelDetails) GetUsedPortsDetailsOk() ([]UserPortDetails, bool) {
	if o == nil || IsNil(o.UsedPortsDetails) {
		return nil, false
	}
	return o.UsedPortsDetails, true
}

// HasUsedPortsDetails returns a boolean if a field has been set.
func (o *PatchPanelDetails) HasUsedPortsDetails() bool {
	if o != nil && !IsNil(o.UsedPortsDetails) {
		return true
	}

	return false
}

// SetUsedPortsDetails gets a reference to the given []UserPortDetails and assigns it to the UsedPortsDetails field.
func (o *PatchPanelDetails) SetUsedPortsDetails(v []UserPortDetails) {
	o.UsedPortsDetails = v
}

// GetProvisioningType returns the ProvisioningType field value if set, zero value otherwise.
func (o *PatchPanelDetails) GetProvisioningType() PatchPanelDetailsProvisioningType {
	if o == nil || IsNil(o.ProvisioningType) {
		var ret PatchPanelDetailsProvisioningType
		return ret
	}
	return *o.ProvisioningType
}

// GetProvisioningTypeOk returns a tuple with the ProvisioningType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPanelDetails) GetProvisioningTypeOk() (*PatchPanelDetailsProvisioningType, bool) {
	if o == nil || IsNil(o.ProvisioningType) {
		return nil, false
	}
	return o.ProvisioningType, true
}

// HasProvisioningType returns a boolean if a field has been set.
func (o *PatchPanelDetails) HasProvisioningType() bool {
	if o != nil && !IsNil(o.ProvisioningType) {
		return true
	}

	return false
}

// SetProvisioningType gets a reference to the given PatchPanelDetailsProvisioningType and assigns it to the ProvisioningType field.
func (o *PatchPanelDetails) SetProvisioningType(v PatchPanelDetailsProvisioningType) {
	o.ProvisioningType = &v
}

func (o PatchPanelDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchPanelDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PatchPanelId) {
		toSerialize["patchPanelId"] = o.PatchPanelId
	}
	if !IsNil(o.Ibx) {
		toSerialize["ibx"] = o.Ibx
	}
	if !IsNil(o.CageId) {
		toSerialize["cageId"] = o.CageId
	}
	if !IsNil(o.CabinetId) {
		toSerialize["cabinetId"] = o.CabinetId
	}
	if !IsNil(o.AccountNumber) {
		toSerialize["accountNumber"] = o.AccountNumber
	}
	if !IsNil(o.AccountName) {
		toSerialize["accountName"] = o.AccountName
	}
	if !IsNil(o.DedicatedMediaType) {
		toSerialize["dedicatedMediaType"] = o.DedicatedMediaType
	}
	if !IsNil(o.PreWired) {
		toSerialize["preWired"] = o.PreWired
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.IfcEnabled) {
		toSerialize["ifcEnabled"] = o.IfcEnabled
	}
	if !IsNil(o.RackLocations) {
		toSerialize["rackLocations"] = o.RackLocations
	}
	if !IsNil(o.InstallLocations) {
		toSerialize["installLocations"] = o.InstallLocations
	}
	if !IsNil(o.InstallationRequired) {
		toSerialize["installationRequired"] = o.InstallationRequired
	}
	if !IsNil(o.CircuitAvailable) {
		toSerialize["circuitAvailable"] = o.CircuitAvailable
	}
	if !IsNil(o.AvailablePorts) {
		toSerialize["availablePorts"] = o.AvailablePorts
	}
	if !IsNil(o.ConnectionServices) {
		toSerialize["connectionServices"] = o.ConnectionServices
	}
	if !IsNil(o.UsedPortsDetails) {
		toSerialize["usedPortsDetails"] = o.UsedPortsDetails
	}
	if !IsNil(o.ProvisioningType) {
		toSerialize["provisioningType"] = o.ProvisioningType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PatchPanelDetails) UnmarshalJSON(data []byte) (err error) {
	varPatchPanelDetails := _PatchPanelDetails{}

	err = json.Unmarshal(data, &varPatchPanelDetails)

	if err != nil {
		return err
	}

	*o = PatchPanelDetails(varPatchPanelDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "patchPanelId")
		delete(additionalProperties, "ibx")
		delete(additionalProperties, "cageId")
		delete(additionalProperties, "cabinetId")
		delete(additionalProperties, "accountNumber")
		delete(additionalProperties, "accountName")
		delete(additionalProperties, "dedicatedMediaType")
		delete(additionalProperties, "preWired")
		delete(additionalProperties, "type")
		delete(additionalProperties, "ifcEnabled")
		delete(additionalProperties, "rackLocations")
		delete(additionalProperties, "installLocations")
		delete(additionalProperties, "installationRequired")
		delete(additionalProperties, "circuitAvailable")
		delete(additionalProperties, "availablePorts")
		delete(additionalProperties, "connectionServices")
		delete(additionalProperties, "usedPortsDetails")
		delete(additionalProperties, "provisioningType")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePatchPanelDetails struct {
	value *PatchPanelDetails
	isSet bool
}

func (v NullablePatchPanelDetails) Get() *PatchPanelDetails {
	return v.value
}

func (v *NullablePatchPanelDetails) Set(val *PatchPanelDetails) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchPanelDetails) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchPanelDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchPanelDetails(val *PatchPanelDetails) *NullablePatchPanelDetails {
	return &NullablePatchPanelDetails{value: val, isSet: true}
}

func (v NullablePatchPanelDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchPanelDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
