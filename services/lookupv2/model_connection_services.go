/*
Lookup

Based on a user's permission, a user may view their locations, provider and patch panel in their organization. These locations can be filtered by permission code, account number, cage and cabinet details to get both A Side and Z side IBX locations and patch panel available ports to place an order

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lookupv2

import (
	"encoding/json"
	"fmt"
)

// ConnectionServices The name of the available connection service.
type ConnectionServices string

// List of Connection_services
const (
	CONNECTIONSERVICES_COAX              ConnectionServices = "COAX"
	CONNECTIONSERVICES_MP4_CABLE         ConnectionServices = "MP4_CABLE"
	CONNECTIONSERVICES_MULTI_MODE_FIBER  ConnectionServices = "MULTI_MODE_FIBER"
	CONNECTIONSERVICES_POTS              ConnectionServices = "POTS"
	CONNECTIONSERVICES_SINGLE_MODE_FIBER ConnectionServices = "SINGLE_MODE_FIBER"
	CONNECTIONSERVICES_UTP               ConnectionServices = "UTP"
)

// All allowed values of ConnectionServices enum
var AllowedConnectionServicesEnumValues = []ConnectionServices{
	"COAX",
	"MP4_CABLE",
	"MULTI_MODE_FIBER",
	"POTS",
	"SINGLE_MODE_FIBER",
	"UTP",
}

func (v *ConnectionServices) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConnectionServices(value)
	for _, existing := range AllowedConnectionServicesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConnectionServices", value)
}

// NewConnectionServicesFromValue returns a pointer to a valid ConnectionServices
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConnectionServicesFromValue(v string) (*ConnectionServices, error) {
	ev := ConnectionServices(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConnectionServices: valid values are %v", v, AllowedConnectionServicesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConnectionServices) IsValid() bool {
	for _, existing := range AllowedConnectionServicesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Connection_services value
func (v ConnectionServices) Ptr() *ConnectionServices {
	return &v
}

type NullableConnectionServices struct {
	value *ConnectionServices
	isSet bool
}

func (v NullableConnectionServices) Get() *ConnectionServices {
	return v.value
}

func (v *NullableConnectionServices) Set(val *ConnectionServices) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionServices) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionServices) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionServices(val *ConnectionServices) *NullableConnectionServices {
	return &NullableConnectionServices{value: val, isSet: true}
}

func (v NullableConnectionServices) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionServices) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
