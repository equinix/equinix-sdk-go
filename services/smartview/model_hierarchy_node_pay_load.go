/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
)

// checks if the HierarchyNodePayLoad type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HierarchyNodePayLoad{}

// HierarchyNodePayLoad struct for HierarchyNodePayLoad
type HierarchyNodePayLoad struct {
	Cages []Cages `json:"cages,omitempty"`
	Circuits []CircuitsMapWithCage `json:"circuits,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HierarchyNodePayLoad HierarchyNodePayLoad

// NewHierarchyNodePayLoad instantiates a new HierarchyNodePayLoad object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHierarchyNodePayLoad() *HierarchyNodePayLoad {
	this := HierarchyNodePayLoad{}
	return &this
}

// NewHierarchyNodePayLoadWithDefaults instantiates a new HierarchyNodePayLoad object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHierarchyNodePayLoadWithDefaults() *HierarchyNodePayLoad {
	this := HierarchyNodePayLoad{}
	return &this
}

// GetCages returns the Cages field value if set, zero value otherwise.
func (o *HierarchyNodePayLoad) GetCages() []Cages {
	if o == nil || IsNil(o.Cages) {
		var ret []Cages
		return ret
	}
	return o.Cages
}

// GetCagesOk returns a tuple with the Cages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HierarchyNodePayLoad) GetCagesOk() ([]Cages, bool) {
	if o == nil || IsNil(o.Cages) {
		return nil, false
	}
	return o.Cages, true
}

// HasCages returns a boolean if a field has been set.
func (o *HierarchyNodePayLoad) HasCages() bool {
	if o != nil && !IsNil(o.Cages) {
		return true
	}

	return false
}

// SetCages gets a reference to the given []Cages and assigns it to the Cages field.
func (o *HierarchyNodePayLoad) SetCages(v []Cages) {
	o.Cages = v
}

// GetCircuits returns the Circuits field value if set, zero value otherwise.
func (o *HierarchyNodePayLoad) GetCircuits() []CircuitsMapWithCage {
	if o == nil || IsNil(o.Circuits) {
		var ret []CircuitsMapWithCage
		return ret
	}
	return o.Circuits
}

// GetCircuitsOk returns a tuple with the Circuits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HierarchyNodePayLoad) GetCircuitsOk() ([]CircuitsMapWithCage, bool) {
	if o == nil || IsNil(o.Circuits) {
		return nil, false
	}
	return o.Circuits, true
}

// HasCircuits returns a boolean if a field has been set.
func (o *HierarchyNodePayLoad) HasCircuits() bool {
	if o != nil && !IsNil(o.Circuits) {
		return true
	}

	return false
}

// SetCircuits gets a reference to the given []CircuitsMapWithCage and assigns it to the Circuits field.
func (o *HierarchyNodePayLoad) SetCircuits(v []CircuitsMapWithCage) {
	o.Circuits = v
}

func (o HierarchyNodePayLoad) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HierarchyNodePayLoad) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cages) {
		toSerialize["cages"] = o.Cages
	}
	if !IsNil(o.Circuits) {
		toSerialize["circuits"] = o.Circuits
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HierarchyNodePayLoad) UnmarshalJSON(data []byte) (err error) {
	varHierarchyNodePayLoad := _HierarchyNodePayLoad{}

	err = json.Unmarshal(data, &varHierarchyNodePayLoad)

	if err != nil {
		return err
	}

	*o = HierarchyNodePayLoad(varHierarchyNodePayLoad)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cages")
		delete(additionalProperties, "circuits")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHierarchyNodePayLoad struct {
	value *HierarchyNodePayLoad
	isSet bool
}

func (v NullableHierarchyNodePayLoad) Get() *HierarchyNodePayLoad {
	return v.value
}

func (v *NullableHierarchyNodePayLoad) Set(val *HierarchyNodePayLoad) {
	v.value = val
	v.isSet = true
}

func (v NullableHierarchyNodePayLoad) IsSet() bool {
	return v.isSet
}

func (v *NullableHierarchyNodePayLoad) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHierarchyNodePayLoad(val *HierarchyNodePayLoad) *NullableHierarchyNodePayLoad {
	return &NullableHierarchyNodePayLoad{value: val, isSet: true}
}

func (v NullableHierarchyNodePayLoad) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHierarchyNodePayLoad) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


