/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
	"fmt"
)

// ChannelChannelType the model 'ChannelChannelType'
type ChannelChannelType string

// List of Channel_channelType
const (
	CHANNELCHANNELTYPE_AWS_IOT_CORE ChannelChannelType = "AWS_IOT_CORE"
	CHANNELCHANNELTYPE_WEBHOOK ChannelChannelType = "WEBHOOK"
	CHANNELCHANNELTYPE_AZURE ChannelChannelType = "AZURE"
)

// All allowed values of ChannelChannelType enum
var AllowedChannelChannelTypeEnumValues = []ChannelChannelType{
	"AWS_IOT_CORE",
	"WEBHOOK",
	"AZURE",
}

func (v *ChannelChannelType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ChannelChannelType(value)
	for _, existing := range AllowedChannelChannelTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ChannelChannelType", value)
}

// NewChannelChannelTypeFromValue returns a pointer to a valid ChannelChannelType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewChannelChannelTypeFromValue(v string) (*ChannelChannelType, error) {
	ev := ChannelChannelType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ChannelChannelType: valid values are %v", v, AllowedChannelChannelTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ChannelChannelType) IsValid() bool {
	for _, existing := range AllowedChannelChannelTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Channel_channelType value
func (v ChannelChannelType) Ptr() *ChannelChannelType {
	return &v
}

type NullableChannelChannelType struct {
	value *ChannelChannelType
	isSet bool
}

func (v NullableChannelChannelType) Get() *ChannelChannelType {
	return v.value
}

func (v *NullableChannelChannelType) Set(val *ChannelChannelType) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelChannelType) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelChannelType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelChannelType(val *ChannelChannelType) *NullableChannelChannelType {
	return &NullableChannelChannelType{value: val, isSet: true}
}

func (v NullableChannelChannelType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelChannelType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

