/*
Smart View Environmental API

Empower yourself with Environmental APIs. The API makes it possible to fetch current environmental data including humidity and temperature for a single sensor (identified by IBX code and sensor ID) or for all the sensors within an IBX (identified by IBX code) in a paginated way. When fetching all sensor readings you can apply additional sort criteria.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
	"fmt"
)

// checks if the TagPointValueWithUnit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TagPointValueWithUnit{}

// TagPointValueWithUnit reading details
type TagPointValueWithUnit struct {
	// reading unit
	Unit *string `json:"unit,omitempty"`
	// reading value
	Value string `json:"value"`
	AdditionalProperties map[string]interface{}
}

type _TagPointValueWithUnit TagPointValueWithUnit

// NewTagPointValueWithUnit instantiates a new TagPointValueWithUnit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagPointValueWithUnit(value string) *TagPointValueWithUnit {
	this := TagPointValueWithUnit{}
	this.Value = value
	return &this
}

// NewTagPointValueWithUnitWithDefaults instantiates a new TagPointValueWithUnit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagPointValueWithUnitWithDefaults() *TagPointValueWithUnit {
	this := TagPointValueWithUnit{}
	return &this
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *TagPointValueWithUnit) GetUnit() string {
	if o == nil || IsNil(o.Unit) {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagPointValueWithUnit) GetUnitOk() (*string, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *TagPointValueWithUnit) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *TagPointValueWithUnit) SetUnit(v string) {
	o.Unit = &v
}

// GetValue returns the Value field value
func (o *TagPointValueWithUnit) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *TagPointValueWithUnit) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *TagPointValueWithUnit) SetValue(v string) {
	o.Value = v
}

func (o TagPointValueWithUnit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TagPointValueWithUnit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	toSerialize["value"] = o.Value

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TagPointValueWithUnit) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTagPointValueWithUnit := _TagPointValueWithUnit{}

	err = json.Unmarshal(data, &varTagPointValueWithUnit)

	if err != nil {
		return err
	}

	*o = TagPointValueWithUnit(varTagPointValueWithUnit)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "unit")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTagPointValueWithUnit struct {
	value *TagPointValueWithUnit
	isSet bool
}

func (v NullableTagPointValueWithUnit) Get() *TagPointValueWithUnit {
	return v.value
}

func (v *NullableTagPointValueWithUnit) Set(val *TagPointValueWithUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableTagPointValueWithUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableTagPointValueWithUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagPointValueWithUnit(val *TagPointValueWithUnit) *NullableTagPointValueWithUnit {
	return &NullableTagPointValueWithUnit{value: val, isSet: true}
}

func (v NullableTagPointValueWithUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagPointValueWithUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


