/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
	"fmt"
)

// ComparisonDataDatapoint datapoint on which the comparison is done.
type ComparisonDataDatapoint string

// List of ComparisonData_datapoint
const (
	COMPARISONDATADATAPOINT_PERCENTAGE_KVA ComparisonDataDatapoint = "percentageKva"
)

// All allowed values of ComparisonDataDatapoint enum
var AllowedComparisonDataDatapointEnumValues = []ComparisonDataDatapoint{
	"percentageKva",
}

func (v *ComparisonDataDatapoint) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ComparisonDataDatapoint(value)
	for _, existing := range AllowedComparisonDataDatapointEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ComparisonDataDatapoint", value)
}

// NewComparisonDataDatapointFromValue returns a pointer to a valid ComparisonDataDatapoint
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewComparisonDataDatapointFromValue(v string) (*ComparisonDataDatapoint, error) {
	ev := ComparisonDataDatapoint(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ComparisonDataDatapoint: valid values are %v", v, AllowedComparisonDataDatapointEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ComparisonDataDatapoint) IsValid() bool {
	for _, existing := range AllowedComparisonDataDatapointEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ComparisonData_datapoint value
func (v ComparisonDataDatapoint) Ptr() *ComparisonDataDatapoint {
	return &v
}

type NullableComparisonDataDatapoint struct {
	value *ComparisonDataDatapoint
	isSet bool
}

func (v NullableComparisonDataDatapoint) Get() *ComparisonDataDatapoint {
	return v.value
}

func (v *NullableComparisonDataDatapoint) Set(val *ComparisonDataDatapoint) {
	v.value = val
	v.isSet = true
}

func (v NullableComparisonDataDatapoint) IsSet() bool {
	return v.isSet
}

func (v *NullableComparisonDataDatapoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComparisonDataDatapoint(val *ComparisonDataDatapoint) *NullableComparisonDataDatapoint {
	return &NullableComparisonDataDatapoint{value: val, isSet: true}
}

func (v NullableComparisonDataDatapoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComparisonDataDatapoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

