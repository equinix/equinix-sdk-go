/*
Smart View Environmental API

Empower yourself with Environmental APIs. The API makes it possible to fetch current environmental data including humidity and temperature for a single sensor (identified by IBX code and sensor ID) or for all the sensors within an IBX (identified by IBX code) in a paginated way. When fetching all sensor readings you can apply additional sort criteria.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// SmartViewEnvironmentalApiService SmartViewEnvironmentalApi service
type SmartViewEnvironmentalApiService service

type ApiGetSensorReadingsRequest struct {
	ctx context.Context
	ApiService *SmartViewEnvironmentalApiService
	ibx string
	authorization *string
	type_ *string
	zone *string
	offset *int32
	limit *int32
}

// The OAuth Bearer token. Please add the prefix &#39;Bearer &#39; before the token.
func (r ApiGetSensorReadingsRequest) Authorization(authorization string) ApiGetSensorReadingsRequest {
	r.authorization = &authorization
	return r
}

// Type of sensor data to display, e.g. specifying &#39;HUMIDITY&#39; means only sensor readings with HUMIDITY value will be included
func (r ApiGetSensorReadingsRequest) Type_(type_ string) ApiGetSensorReadingsRequest {
	r.type_ = &type_
	return r
}

// Zone name. Adding this parameter limits the query to sensors in the specified zone
func (r ApiGetSensorReadingsRequest) Zone(zone string) ApiGetSensorReadingsRequest {
	r.zone = &zone
	return r
}

// Results offset you want to retrieve (0..N)
func (r ApiGetSensorReadingsRequest) Offset(offset int32) ApiGetSensorReadingsRequest {
	r.offset = &offset
	return r
}

// Number of records to retrieve per request.
func (r ApiGetSensorReadingsRequest) Limit(limit int32) ApiGetSensorReadingsRequest {
	r.limit = &limit
	return r
}

func (r ApiGetSensorReadingsRequest) Execute() (*SensorReadingsResponse, *http.Response, error) {
	return r.ApiService.GetSensorReadingsExecute(r)
}

/*
GetSensorReadings IBX sensors current readings

Returns current environmental (temperature and humidity) sensor readings for the given IBX code in a paginated way.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ibx IBX where the sensor is located.
 @return ApiGetSensorReadingsRequest
*/
func (a *SmartViewEnvironmentalApiService) GetSensorReadings(ctx context.Context, ibx string) ApiGetSensorReadingsRequest {
	return ApiGetSensorReadingsRequest{
		ApiService: a,
		ctx: ctx,
		ibx: ibx,
	}
}

// Execute executes the request
//  @return SensorReadingsResponse
func (a *SmartViewEnvironmentalApiService) GetSensorReadingsExecute(r ApiGetSensorReadingsRequest) (*SensorReadingsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SensorReadingsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SmartViewEnvironmentalApiService.GetSensorReadings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/smartview/v2/environmental/ibxs/{ibx}/sensors/readings"
	localVarPath = strings.Replace(localVarPath, "{"+"ibx"+"}", url.PathEscape(parameterValueToString(r.ibx, "ibx")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}

	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.zone != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "zone", r.zone, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSingleSensorReadingsRequest struct {
	ctx context.Context
	ApiService *SmartViewEnvironmentalApiService
	ibx string
	sensorId string
	authorization *string
}

// The OAuth Bearer token. Please add the prefix &#39;Bearer &#39; before the token.
func (r ApiGetSingleSensorReadingsRequest) Authorization(authorization string) ApiGetSingleSensorReadingsRequest {
	r.authorization = &authorization
	return r
}

func (r ApiGetSingleSensorReadingsRequest) Execute() (*SensorReading, *http.Response, error) {
	return r.ApiService.GetSingleSensorReadingsExecute(r)
}

/*
GetSingleSensorReadings Single sensor current value(s)

Returns current environmental sensor readings such as temperature and humidity for the given sensor ID and IBX code.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ibx IBX where the sensor is located.
 @param sensorId Id of sensor to read.
 @return ApiGetSingleSensorReadingsRequest
*/
func (a *SmartViewEnvironmentalApiService) GetSingleSensorReadings(ctx context.Context, ibx string, sensorId string) ApiGetSingleSensorReadingsRequest {
	return ApiGetSingleSensorReadingsRequest{
		ApiService: a,
		ctx: ctx,
		ibx: ibx,
		sensorId: sensorId,
	}
}

// Execute executes the request
//  @return SensorReading
func (a *SmartViewEnvironmentalApiService) GetSingleSensorReadingsExecute(r ApiGetSingleSensorReadingsRequest) (*SensorReading, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SensorReading
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SmartViewEnvironmentalApiService.GetSingleSensorReadings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/smartview/v2/environmental/ibxs/{ibx}/sensors/{sensorId}/readings"
	localVarPath = strings.Replace(localVarPath, "{"+"ibx"+"}", url.PathEscape(parameterValueToString(r.ibx, "ibx")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sensorId"+"}", url.PathEscape(parameterValueToString(r.sensorId, "sensorId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
