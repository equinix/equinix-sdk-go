/*
Smart View Environmental API

Empower yourself with Environmental APIs. The API makes it possible to fetch current environmental data including humidity and temperature for a single sensor (identified by IBX code and sensor ID) or for all the sensors within an IBX (identified by IBX code) in a paginated way. When fetching all sensor readings you can apply additional sort criteria.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
	"fmt"
)

// checks if the Environment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Environment{}

// Environment message data
type Environment struct {
	Asset EnvironmentAssetDetails `json:"asset"`
	// data quality: Good | Bad | Uncertain
	DataQuality *string `json:"dataQuality,omitempty"`
	// ibx
	Ibx string `json:"ibx"`
	Reading EnvironmentValueWithUnit `json:"reading"`
	// message reading time
	ReadingTime *string `json:"readingTime,omitempty"`
	// unique message id
	StreamId string `json:"streamId"`
	Tag EnvironmentTagDetails `json:"tag"`
	AdditionalProperties map[string]interface{}
}

type _Environment Environment

// NewEnvironment instantiates a new Environment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironment(asset EnvironmentAssetDetails, ibx string, reading EnvironmentValueWithUnit, streamId string, tag EnvironmentTagDetails) *Environment {
	this := Environment{}
	this.Asset = asset
	this.Ibx = ibx
	this.Reading = reading
	this.StreamId = streamId
	this.Tag = tag
	return &this
}

// NewEnvironmentWithDefaults instantiates a new Environment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentWithDefaults() *Environment {
	this := Environment{}
	return &this
}

// GetAsset returns the Asset field value
func (o *Environment) GetAsset() EnvironmentAssetDetails {
	if o == nil {
		var ret EnvironmentAssetDetails
		return ret
	}

	return o.Asset
}

// GetAssetOk returns a tuple with the Asset field value
// and a boolean to check if the value has been set.
func (o *Environment) GetAssetOk() (*EnvironmentAssetDetails, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Asset, true
}

// SetAsset sets field value
func (o *Environment) SetAsset(v EnvironmentAssetDetails) {
	o.Asset = v
}

// GetDataQuality returns the DataQuality field value if set, zero value otherwise.
func (o *Environment) GetDataQuality() string {
	if o == nil || IsNil(o.DataQuality) {
		var ret string
		return ret
	}
	return *o.DataQuality
}

// GetDataQualityOk returns a tuple with the DataQuality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Environment) GetDataQualityOk() (*string, bool) {
	if o == nil || IsNil(o.DataQuality) {
		return nil, false
	}
	return o.DataQuality, true
}

// HasDataQuality returns a boolean if a field has been set.
func (o *Environment) HasDataQuality() bool {
	if o != nil && !IsNil(o.DataQuality) {
		return true
	}

	return false
}

// SetDataQuality gets a reference to the given string and assigns it to the DataQuality field.
func (o *Environment) SetDataQuality(v string) {
	o.DataQuality = &v
}

// GetIbx returns the Ibx field value
func (o *Environment) GetIbx() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ibx
}

// GetIbxOk returns a tuple with the Ibx field value
// and a boolean to check if the value has been set.
func (o *Environment) GetIbxOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ibx, true
}

// SetIbx sets field value
func (o *Environment) SetIbx(v string) {
	o.Ibx = v
}

// GetReading returns the Reading field value
func (o *Environment) GetReading() EnvironmentValueWithUnit {
	if o == nil {
		var ret EnvironmentValueWithUnit
		return ret
	}

	return o.Reading
}

// GetReadingOk returns a tuple with the Reading field value
// and a boolean to check if the value has been set.
func (o *Environment) GetReadingOk() (*EnvironmentValueWithUnit, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reading, true
}

// SetReading sets field value
func (o *Environment) SetReading(v EnvironmentValueWithUnit) {
	o.Reading = v
}

// GetReadingTime returns the ReadingTime field value if set, zero value otherwise.
func (o *Environment) GetReadingTime() string {
	if o == nil || IsNil(o.ReadingTime) {
		var ret string
		return ret
	}
	return *o.ReadingTime
}

// GetReadingTimeOk returns a tuple with the ReadingTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Environment) GetReadingTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ReadingTime) {
		return nil, false
	}
	return o.ReadingTime, true
}

// HasReadingTime returns a boolean if a field has been set.
func (o *Environment) HasReadingTime() bool {
	if o != nil && !IsNil(o.ReadingTime) {
		return true
	}

	return false
}

// SetReadingTime gets a reference to the given string and assigns it to the ReadingTime field.
func (o *Environment) SetReadingTime(v string) {
	o.ReadingTime = &v
}

// GetStreamId returns the StreamId field value
func (o *Environment) GetStreamId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StreamId
}

// GetStreamIdOk returns a tuple with the StreamId field value
// and a boolean to check if the value has been set.
func (o *Environment) GetStreamIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StreamId, true
}

// SetStreamId sets field value
func (o *Environment) SetStreamId(v string) {
	o.StreamId = v
}

// GetTag returns the Tag field value
func (o *Environment) GetTag() EnvironmentTagDetails {
	if o == nil {
		var ret EnvironmentTagDetails
		return ret
	}

	return o.Tag
}

// GetTagOk returns a tuple with the Tag field value
// and a boolean to check if the value has been set.
func (o *Environment) GetTagOk() (*EnvironmentTagDetails, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tag, true
}

// SetTag sets field value
func (o *Environment) SetTag(v EnvironmentTagDetails) {
	o.Tag = v
}

func (o Environment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Environment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["asset"] = o.Asset
	if !IsNil(o.DataQuality) {
		toSerialize["dataQuality"] = o.DataQuality
	}
	toSerialize["ibx"] = o.Ibx
	toSerialize["reading"] = o.Reading
	if !IsNil(o.ReadingTime) {
		toSerialize["readingTime"] = o.ReadingTime
	}
	toSerialize["streamId"] = o.StreamId
	toSerialize["tag"] = o.Tag

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Environment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"asset",
		"ibx",
		"reading",
		"streamId",
		"tag",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEnvironment := _Environment{}

	err = json.Unmarshal(data, &varEnvironment)

	if err != nil {
		return err
	}

	*o = Environment(varEnvironment)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "asset")
		delete(additionalProperties, "dataQuality")
		delete(additionalProperties, "ibx")
		delete(additionalProperties, "reading")
		delete(additionalProperties, "readingTime")
		delete(additionalProperties, "streamId")
		delete(additionalProperties, "tag")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEnvironment struct {
	value *Environment
	isSet bool
}

func (v NullableEnvironment) Get() *Environment {
	return v.value
}

func (v *NullableEnvironment) Set(val *Environment) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironment) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironment(val *Environment) *NullableEnvironment {
	return &NullableEnvironment{value: val, isSet: true}
}

func (v NullableEnvironment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


