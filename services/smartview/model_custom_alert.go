/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
	"fmt"
)

// checks if the CustomAlert type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomAlert{}

// CustomAlert Custom Alert messages are sent when user-defined alert conditions become true. The message contains the data point value that triggered the alert.
type CustomAlert struct {
	AccountNumber string `json:"accountNumber"`
	Ibx []string `json:"ibx"`
	User *string `json:"user,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CustomAlert CustomAlert

// NewCustomAlert instantiates a new CustomAlert object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomAlert(accountNumber string, ibx []string) *CustomAlert {
	this := CustomAlert{}
	this.AccountNumber = accountNumber
	this.Ibx = ibx
	return &this
}

// NewCustomAlertWithDefaults instantiates a new CustomAlert object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomAlertWithDefaults() *CustomAlert {
	this := CustomAlert{}
	return &this
}

// GetAccountNumber returns the AccountNumber field value
func (o *CustomAlert) GetAccountNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountNumber
}

// GetAccountNumberOk returns a tuple with the AccountNumber field value
// and a boolean to check if the value has been set.
func (o *CustomAlert) GetAccountNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountNumber, true
}

// SetAccountNumber sets field value
func (o *CustomAlert) SetAccountNumber(v string) {
	o.AccountNumber = v
}

// GetIbx returns the Ibx field value
func (o *CustomAlert) GetIbx() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Ibx
}

// GetIbxOk returns a tuple with the Ibx field value
// and a boolean to check if the value has been set.
func (o *CustomAlert) GetIbxOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ibx, true
}

// SetIbx sets field value
func (o *CustomAlert) SetIbx(v []string) {
	o.Ibx = v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *CustomAlert) GetUser() string {
	if o == nil || IsNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomAlert) GetUserOk() (*string, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *CustomAlert) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *CustomAlert) SetUser(v string) {
	o.User = &v
}

func (o CustomAlert) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomAlert) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["accountNumber"] = o.AccountNumber
	toSerialize["ibx"] = o.Ibx
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CustomAlert) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"accountNumber",
		"ibx",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomAlert := _CustomAlert{}

	err = json.Unmarshal(data, &varCustomAlert)

	if err != nil {
		return err
	}

	*o = CustomAlert(varCustomAlert)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "accountNumber")
		delete(additionalProperties, "ibx")
		delete(additionalProperties, "user")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCustomAlert struct {
	value *CustomAlert
	isSet bool
}

func (v NullableCustomAlert) Get() *CustomAlert {
	return v.value
}

func (v *NullableCustomAlert) Set(val *CustomAlert) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomAlert) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomAlert) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomAlert(val *CustomAlert) *NullableCustomAlert {
	return &NullableCustomAlert{value: val, isSet: true}
}

func (v NullableCustomAlert) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomAlert) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


