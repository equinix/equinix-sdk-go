/*
Smart View Environmental API

Empower yourself with Environmental APIs. The API makes it possible to fetch current environmental data including humidity and temperature for a single sensor (identified by IBX code and sensor ID) or for all the sensors within an IBX (identified by IBX code) in a paginated way. When fetching all sensor readings you can apply additional sort criteria.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
	"fmt"
)

// ValueWithUnitDoubleTemperatureUnitUnit Unit for value.
type ValueWithUnitDoubleTemperatureUnitUnit string

// List of ValueWithUnitDoubleTemperatureUnit_unit
const (
	VALUEWITHUNITDOUBLETEMPERATUREUNITUNIT_CELSIUS ValueWithUnitDoubleTemperatureUnitUnit = "CELSIUS"
	VALUEWITHUNITDOUBLETEMPERATUREUNITUNIT_FAHRENHEIT ValueWithUnitDoubleTemperatureUnitUnit = "FAHRENHEIT"
)

// All allowed values of ValueWithUnitDoubleTemperatureUnitUnit enum
var AllowedValueWithUnitDoubleTemperatureUnitUnitEnumValues = []ValueWithUnitDoubleTemperatureUnitUnit{
	"CELSIUS",
	"FAHRENHEIT",
}

func (v *ValueWithUnitDoubleTemperatureUnitUnit) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ValueWithUnitDoubleTemperatureUnitUnit(value)
	for _, existing := range AllowedValueWithUnitDoubleTemperatureUnitUnitEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ValueWithUnitDoubleTemperatureUnitUnit", value)
}

// NewValueWithUnitDoubleTemperatureUnitUnitFromValue returns a pointer to a valid ValueWithUnitDoubleTemperatureUnitUnit
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewValueWithUnitDoubleTemperatureUnitUnitFromValue(v string) (*ValueWithUnitDoubleTemperatureUnitUnit, error) {
	ev := ValueWithUnitDoubleTemperatureUnitUnit(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ValueWithUnitDoubleTemperatureUnitUnit: valid values are %v", v, AllowedValueWithUnitDoubleTemperatureUnitUnitEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ValueWithUnitDoubleTemperatureUnitUnit) IsValid() bool {
	for _, existing := range AllowedValueWithUnitDoubleTemperatureUnitUnitEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ValueWithUnitDoubleTemperatureUnit_unit value
func (v ValueWithUnitDoubleTemperatureUnitUnit) Ptr() *ValueWithUnitDoubleTemperatureUnitUnit {
	return &v
}

type NullableValueWithUnitDoubleTemperatureUnitUnit struct {
	value *ValueWithUnitDoubleTemperatureUnitUnit
	isSet bool
}

func (v NullableValueWithUnitDoubleTemperatureUnitUnit) Get() *ValueWithUnitDoubleTemperatureUnitUnit {
	return v.value
}

func (v *NullableValueWithUnitDoubleTemperatureUnitUnit) Set(val *ValueWithUnitDoubleTemperatureUnitUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableValueWithUnitDoubleTemperatureUnitUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableValueWithUnitDoubleTemperatureUnitUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValueWithUnitDoubleTemperatureUnitUnit(val *ValueWithUnitDoubleTemperatureUnitUnit) *NullableValueWithUnitDoubleTemperatureUnitUnit {
	return &NullableValueWithUnitDoubleTemperatureUnitUnit{value: val, isSet: true}
}

func (v NullableValueWithUnitDoubleTemperatureUnitUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValueWithUnitDoubleTemperatureUnitUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

