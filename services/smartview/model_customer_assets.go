/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
)

// checks if the CustomerAssets type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomerAssets{}

// CustomerAssets struct for CustomerAssets
type CustomerAssets struct {
	Assets []map[string]interface{} `json:"assets,omitempty"`
	AssetsName []map[string]interface{} `json:"assetsName,omitempty"`
	Type *string `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CustomerAssets CustomerAssets

// NewCustomerAssets instantiates a new CustomerAssets object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomerAssets() *CustomerAssets {
	this := CustomerAssets{}
	return &this
}

// NewCustomerAssetsWithDefaults instantiates a new CustomerAssets object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomerAssetsWithDefaults() *CustomerAssets {
	this := CustomerAssets{}
	return &this
}

// GetAssets returns the Assets field value if set, zero value otherwise.
func (o *CustomerAssets) GetAssets() []map[string]interface{} {
	if o == nil || IsNil(o.Assets) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Assets
}

// GetAssetsOk returns a tuple with the Assets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerAssets) GetAssetsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Assets) {
		return nil, false
	}
	return o.Assets, true
}

// HasAssets returns a boolean if a field has been set.
func (o *CustomerAssets) HasAssets() bool {
	if o != nil && !IsNil(o.Assets) {
		return true
	}

	return false
}

// SetAssets gets a reference to the given []map[string]interface{} and assigns it to the Assets field.
func (o *CustomerAssets) SetAssets(v []map[string]interface{}) {
	o.Assets = v
}

// GetAssetsName returns the AssetsName field value if set, zero value otherwise.
func (o *CustomerAssets) GetAssetsName() []map[string]interface{} {
	if o == nil || IsNil(o.AssetsName) {
		var ret []map[string]interface{}
		return ret
	}
	return o.AssetsName
}

// GetAssetsNameOk returns a tuple with the AssetsName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerAssets) GetAssetsNameOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.AssetsName) {
		return nil, false
	}
	return o.AssetsName, true
}

// HasAssetsName returns a boolean if a field has been set.
func (o *CustomerAssets) HasAssetsName() bool {
	if o != nil && !IsNil(o.AssetsName) {
		return true
	}

	return false
}

// SetAssetsName gets a reference to the given []map[string]interface{} and assigns it to the AssetsName field.
func (o *CustomerAssets) SetAssetsName(v []map[string]interface{}) {
	o.AssetsName = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CustomerAssets) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerAssets) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CustomerAssets) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CustomerAssets) SetType(v string) {
	o.Type = &v
}

func (o CustomerAssets) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomerAssets) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Assets) {
		toSerialize["assets"] = o.Assets
	}
	if !IsNil(o.AssetsName) {
		toSerialize["assetsName"] = o.AssetsName
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CustomerAssets) UnmarshalJSON(data []byte) (err error) {
	varCustomerAssets := _CustomerAssets{}

	err = json.Unmarshal(data, &varCustomerAssets)

	if err != nil {
		return err
	}

	*o = CustomerAssets(varCustomerAssets)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "assets")
		delete(additionalProperties, "assetsName")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCustomerAssets struct {
	value *CustomerAssets
	isSet bool
}

func (v NullableCustomerAssets) Get() *CustomerAssets {
	return v.value
}

func (v *NullableCustomerAssets) Set(val *CustomerAssets) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerAssets) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerAssets) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerAssets(val *CustomerAssets) *NullableCustomerAssets {
	return &NullableCustomerAssets{value: val, isSet: true}
}

func (v NullableCustomerAssets) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerAssets) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


