/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
	"fmt"
)

// CircuitsMapWithCageName the model 'CircuitsMapWithCageName'
type CircuitsMapWithCageName string

// List of CircuitsMapWithCage_name
const (
	CIRCUITSMAPWITHCAGENAME__877483_0 CircuitsMapWithCageName = "877483.0"
)

// All allowed values of CircuitsMapWithCageName enum
var AllowedCircuitsMapWithCageNameEnumValues = []CircuitsMapWithCageName{
	"877483.0",
}

func (v *CircuitsMapWithCageName) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CircuitsMapWithCageName(value)
	for _, existing := range AllowedCircuitsMapWithCageNameEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CircuitsMapWithCageName", value)
}

// NewCircuitsMapWithCageNameFromValue returns a pointer to a valid CircuitsMapWithCageName
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCircuitsMapWithCageNameFromValue(v string) (*CircuitsMapWithCageName, error) {
	ev := CircuitsMapWithCageName(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CircuitsMapWithCageName: valid values are %v", v, AllowedCircuitsMapWithCageNameEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CircuitsMapWithCageName) IsValid() bool {
	for _, existing := range AllowedCircuitsMapWithCageNameEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CircuitsMapWithCage_name value
func (v CircuitsMapWithCageName) Ptr() *CircuitsMapWithCageName {
	return &v
}

type NullableCircuitsMapWithCageName struct {
	value *CircuitsMapWithCageName
	isSet bool
}

func (v NullableCircuitsMapWithCageName) Get() *CircuitsMapWithCageName {
	return v.value
}

func (v *NullableCircuitsMapWithCageName) Set(val *CircuitsMapWithCageName) {
	v.value = val
	v.isSet = true
}

func (v NullableCircuitsMapWithCageName) IsSet() bool {
	return v.isSet
}

func (v *NullableCircuitsMapWithCageName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCircuitsMapWithCageName(val *CircuitsMapWithCageName) *NullableCircuitsMapWithCageName {
	return &NullableCircuitsMapWithCageName{value: val, isSet: true}
}

func (v NullableCircuitsMapWithCageName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCircuitsMapWithCageName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

