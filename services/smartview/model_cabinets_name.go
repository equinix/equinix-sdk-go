/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
	"fmt"
)

// CabinetsName the model 'CabinetsName'
type CabinetsName string

// List of Cabinets_name
const (
	CABINETSNAME_CH1050004300105 CabinetsName = "CH1:05:000430:0105"
)

// All allowed values of CabinetsName enum
var AllowedCabinetsNameEnumValues = []CabinetsName{
	"CH1:05:000430:0105",
}

func (v *CabinetsName) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CabinetsName(value)
	for _, existing := range AllowedCabinetsNameEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CabinetsName", value)
}

// NewCabinetsNameFromValue returns a pointer to a valid CabinetsName
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCabinetsNameFromValue(v string) (*CabinetsName, error) {
	ev := CabinetsName(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CabinetsName: valid values are %v", v, AllowedCabinetsNameEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CabinetsName) IsValid() bool {
	for _, existing := range AllowedCabinetsNameEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Cabinets_name value
func (v CabinetsName) Ptr() *CabinetsName {
	return &v
}

type NullableCabinetsName struct {
	value *CabinetsName
	isSet bool
}

func (v NullableCabinetsName) Get() *CabinetsName {
	return v.value
}

func (v *NullableCabinetsName) Set(val *CabinetsName) {
	v.value = val
	v.isSet = true
}

func (v NullableCabinetsName) IsSet() bool {
	return v.isSet
}

func (v *NullableCabinetsName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCabinetsName(val *CabinetsName) *NullableCabinetsName {
	return &NullableCabinetsName{value: val, isSet: true}
}

func (v NullableCabinetsName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCabinetsName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

