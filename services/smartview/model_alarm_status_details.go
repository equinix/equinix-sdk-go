/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
)

// checks if the AlarmStatusDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlarmStatusDetails{}

// AlarmStatusDetails status details
type AlarmStatusDetails struct {
	// status acknowledged
	Acknowledged *bool `json:"acknowledged,omitempty"`
	// status acknowledgement time
	AcknowledgementTime *string `json:"acknowledgementTime,omitempty"`
	// status active
	Active *bool `json:"active,omitempty"`
	// status cleared
	Cleared *bool `json:"cleared,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AlarmStatusDetails AlarmStatusDetails

// NewAlarmStatusDetails instantiates a new AlarmStatusDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlarmStatusDetails() *AlarmStatusDetails {
	this := AlarmStatusDetails{}
	return &this
}

// NewAlarmStatusDetailsWithDefaults instantiates a new AlarmStatusDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlarmStatusDetailsWithDefaults() *AlarmStatusDetails {
	this := AlarmStatusDetails{}
	return &this
}

// GetAcknowledged returns the Acknowledged field value if set, zero value otherwise.
func (o *AlarmStatusDetails) GetAcknowledged() bool {
	if o == nil || IsNil(o.Acknowledged) {
		var ret bool
		return ret
	}
	return *o.Acknowledged
}

// GetAcknowledgedOk returns a tuple with the Acknowledged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlarmStatusDetails) GetAcknowledgedOk() (*bool, bool) {
	if o == nil || IsNil(o.Acknowledged) {
		return nil, false
	}
	return o.Acknowledged, true
}

// HasAcknowledged returns a boolean if a field has been set.
func (o *AlarmStatusDetails) HasAcknowledged() bool {
	if o != nil && !IsNil(o.Acknowledged) {
		return true
	}

	return false
}

// SetAcknowledged gets a reference to the given bool and assigns it to the Acknowledged field.
func (o *AlarmStatusDetails) SetAcknowledged(v bool) {
	o.Acknowledged = &v
}

// GetAcknowledgementTime returns the AcknowledgementTime field value if set, zero value otherwise.
func (o *AlarmStatusDetails) GetAcknowledgementTime() string {
	if o == nil || IsNil(o.AcknowledgementTime) {
		var ret string
		return ret
	}
	return *o.AcknowledgementTime
}

// GetAcknowledgementTimeOk returns a tuple with the AcknowledgementTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlarmStatusDetails) GetAcknowledgementTimeOk() (*string, bool) {
	if o == nil || IsNil(o.AcknowledgementTime) {
		return nil, false
	}
	return o.AcknowledgementTime, true
}

// HasAcknowledgementTime returns a boolean if a field has been set.
func (o *AlarmStatusDetails) HasAcknowledgementTime() bool {
	if o != nil && !IsNil(o.AcknowledgementTime) {
		return true
	}

	return false
}

// SetAcknowledgementTime gets a reference to the given string and assigns it to the AcknowledgementTime field.
func (o *AlarmStatusDetails) SetAcknowledgementTime(v string) {
	o.AcknowledgementTime = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *AlarmStatusDetails) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlarmStatusDetails) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *AlarmStatusDetails) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *AlarmStatusDetails) SetActive(v bool) {
	o.Active = &v
}

// GetCleared returns the Cleared field value if set, zero value otherwise.
func (o *AlarmStatusDetails) GetCleared() bool {
	if o == nil || IsNil(o.Cleared) {
		var ret bool
		return ret
	}
	return *o.Cleared
}

// GetClearedOk returns a tuple with the Cleared field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlarmStatusDetails) GetClearedOk() (*bool, bool) {
	if o == nil || IsNil(o.Cleared) {
		return nil, false
	}
	return o.Cleared, true
}

// HasCleared returns a boolean if a field has been set.
func (o *AlarmStatusDetails) HasCleared() bool {
	if o != nil && !IsNil(o.Cleared) {
		return true
	}

	return false
}

// SetCleared gets a reference to the given bool and assigns it to the Cleared field.
func (o *AlarmStatusDetails) SetCleared(v bool) {
	o.Cleared = &v
}

func (o AlarmStatusDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlarmStatusDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Acknowledged) {
		toSerialize["acknowledged"] = o.Acknowledged
	}
	if !IsNil(o.AcknowledgementTime) {
		toSerialize["acknowledgementTime"] = o.AcknowledgementTime
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Cleared) {
		toSerialize["cleared"] = o.Cleared
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AlarmStatusDetails) UnmarshalJSON(data []byte) (err error) {
	varAlarmStatusDetails := _AlarmStatusDetails{}

	err = json.Unmarshal(data, &varAlarmStatusDetails)

	if err != nil {
		return err
	}

	*o = AlarmStatusDetails(varAlarmStatusDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "acknowledged")
		delete(additionalProperties, "acknowledgementTime")
		delete(additionalProperties, "active")
		delete(additionalProperties, "cleared")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAlarmStatusDetails struct {
	value *AlarmStatusDetails
	isSet bool
}

func (v NullableAlarmStatusDetails) Get() *AlarmStatusDetails {
	return v.value
}

func (v *NullableAlarmStatusDetails) Set(val *AlarmStatusDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableAlarmStatusDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableAlarmStatusDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlarmStatusDetails(val *AlarmStatusDetails) *NullableAlarmStatusDetails {
	return &NullableAlarmStatusDetails{value: val, isSet: true}
}

func (v NullableAlarmStatusDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlarmStatusDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


