/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
	"fmt"
)

// checks if the WebhookChannelConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebhookChannelConfiguration{}

// WebhookChannelConfiguration The configuration for a 'WEBHOOK' channel
type WebhookChannelConfiguration struct {
	BatchSize *int32 `json:"batchSize,omitempty"`
	NumberOfConcurrentCalls *int32 `json:"numberOfConcurrentCalls,omitempty"`
	NumberOfRetries *int32 `json:"numberOfRetries,omitempty"`
	SslCertificate *string `json:"sslCertificate,omitempty"`
	Url string `json:"url"`
	AdditionalProperties map[string]interface{}
}

type _WebhookChannelConfiguration WebhookChannelConfiguration

// NewWebhookChannelConfiguration instantiates a new WebhookChannelConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhookChannelConfiguration(url string) *WebhookChannelConfiguration {
	this := WebhookChannelConfiguration{}
	this.Url = url
	return &this
}

// NewWebhookChannelConfigurationWithDefaults instantiates a new WebhookChannelConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookChannelConfigurationWithDefaults() *WebhookChannelConfiguration {
	this := WebhookChannelConfiguration{}
	return &this
}

// GetBatchSize returns the BatchSize field value if set, zero value otherwise.
func (o *WebhookChannelConfiguration) GetBatchSize() int32 {
	if o == nil || IsNil(o.BatchSize) {
		var ret int32
		return ret
	}
	return *o.BatchSize
}

// GetBatchSizeOk returns a tuple with the BatchSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookChannelConfiguration) GetBatchSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.BatchSize) {
		return nil, false
	}
	return o.BatchSize, true
}

// HasBatchSize returns a boolean if a field has been set.
func (o *WebhookChannelConfiguration) HasBatchSize() bool {
	if o != nil && !IsNil(o.BatchSize) {
		return true
	}

	return false
}

// SetBatchSize gets a reference to the given int32 and assigns it to the BatchSize field.
func (o *WebhookChannelConfiguration) SetBatchSize(v int32) {
	o.BatchSize = &v
}

// GetNumberOfConcurrentCalls returns the NumberOfConcurrentCalls field value if set, zero value otherwise.
func (o *WebhookChannelConfiguration) GetNumberOfConcurrentCalls() int32 {
	if o == nil || IsNil(o.NumberOfConcurrentCalls) {
		var ret int32
		return ret
	}
	return *o.NumberOfConcurrentCalls
}

// GetNumberOfConcurrentCallsOk returns a tuple with the NumberOfConcurrentCalls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookChannelConfiguration) GetNumberOfConcurrentCallsOk() (*int32, bool) {
	if o == nil || IsNil(o.NumberOfConcurrentCalls) {
		return nil, false
	}
	return o.NumberOfConcurrentCalls, true
}

// HasNumberOfConcurrentCalls returns a boolean if a field has been set.
func (o *WebhookChannelConfiguration) HasNumberOfConcurrentCalls() bool {
	if o != nil && !IsNil(o.NumberOfConcurrentCalls) {
		return true
	}

	return false
}

// SetNumberOfConcurrentCalls gets a reference to the given int32 and assigns it to the NumberOfConcurrentCalls field.
func (o *WebhookChannelConfiguration) SetNumberOfConcurrentCalls(v int32) {
	o.NumberOfConcurrentCalls = &v
}

// GetNumberOfRetries returns the NumberOfRetries field value if set, zero value otherwise.
func (o *WebhookChannelConfiguration) GetNumberOfRetries() int32 {
	if o == nil || IsNil(o.NumberOfRetries) {
		var ret int32
		return ret
	}
	return *o.NumberOfRetries
}

// GetNumberOfRetriesOk returns a tuple with the NumberOfRetries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookChannelConfiguration) GetNumberOfRetriesOk() (*int32, bool) {
	if o == nil || IsNil(o.NumberOfRetries) {
		return nil, false
	}
	return o.NumberOfRetries, true
}

// HasNumberOfRetries returns a boolean if a field has been set.
func (o *WebhookChannelConfiguration) HasNumberOfRetries() bool {
	if o != nil && !IsNil(o.NumberOfRetries) {
		return true
	}

	return false
}

// SetNumberOfRetries gets a reference to the given int32 and assigns it to the NumberOfRetries field.
func (o *WebhookChannelConfiguration) SetNumberOfRetries(v int32) {
	o.NumberOfRetries = &v
}

// GetSslCertificate returns the SslCertificate field value if set, zero value otherwise.
func (o *WebhookChannelConfiguration) GetSslCertificate() string {
	if o == nil || IsNil(o.SslCertificate) {
		var ret string
		return ret
	}
	return *o.SslCertificate
}

// GetSslCertificateOk returns a tuple with the SslCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookChannelConfiguration) GetSslCertificateOk() (*string, bool) {
	if o == nil || IsNil(o.SslCertificate) {
		return nil, false
	}
	return o.SslCertificate, true
}

// HasSslCertificate returns a boolean if a field has been set.
func (o *WebhookChannelConfiguration) HasSslCertificate() bool {
	if o != nil && !IsNil(o.SslCertificate) {
		return true
	}

	return false
}

// SetSslCertificate gets a reference to the given string and assigns it to the SslCertificate field.
func (o *WebhookChannelConfiguration) SetSslCertificate(v string) {
	o.SslCertificate = &v
}

// GetUrl returns the Url field value
func (o *WebhookChannelConfiguration) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *WebhookChannelConfiguration) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *WebhookChannelConfiguration) SetUrl(v string) {
	o.Url = v
}

func (o WebhookChannelConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebhookChannelConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BatchSize) {
		toSerialize["batchSize"] = o.BatchSize
	}
	if !IsNil(o.NumberOfConcurrentCalls) {
		toSerialize["numberOfConcurrentCalls"] = o.NumberOfConcurrentCalls
	}
	if !IsNil(o.NumberOfRetries) {
		toSerialize["numberOfRetries"] = o.NumberOfRetries
	}
	if !IsNil(o.SslCertificate) {
		toSerialize["sslCertificate"] = o.SslCertificate
	}
	toSerialize["url"] = o.Url

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WebhookChannelConfiguration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWebhookChannelConfiguration := _WebhookChannelConfiguration{}

	err = json.Unmarshal(data, &varWebhookChannelConfiguration)

	if err != nil {
		return err
	}

	*o = WebhookChannelConfiguration(varWebhookChannelConfiguration)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "batchSize")
		delete(additionalProperties, "numberOfConcurrentCalls")
		delete(additionalProperties, "numberOfRetries")
		delete(additionalProperties, "sslCertificate")
		delete(additionalProperties, "url")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWebhookChannelConfiguration struct {
	value *WebhookChannelConfiguration
	isSet bool
}

func (v NullableWebhookChannelConfiguration) Get() *WebhookChannelConfiguration {
	return v.value
}

func (v *NullableWebhookChannelConfiguration) Set(val *WebhookChannelConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookChannelConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookChannelConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookChannelConfiguration(val *WebhookChannelConfiguration) *NullableWebhookChannelConfiguration {
	return &NullableWebhookChannelConfiguration{value: val, isSet: true}
}

func (v NullableWebhookChannelConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookChannelConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


