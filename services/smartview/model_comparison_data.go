/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
)

// checks if the ComparisonData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComparisonData{}

// ComparisonData comparison of readings with the current reading for specified datapoint 
type ComparisonData struct {
	Datapoint *ComparisonDataDatapoint `json:"datapoint,omitempty"`
	// comparison for the current value of the datapoint with the last  month's value 
	LastMonth *float32 `json:"lastMonth,omitempty"`
	// comparison for the current value of the datapoint with the last  quarter's value  
	LastQuarter *float32 `json:"lastQuarter,omitempty"`
	// comparison for the current value of the datapoint with last week's  value 
	LastWeek *float32 `json:"lastWeek,omitempty"`
	// comparison for the current value of the datapoint with yesterday's  value 
	Yesterday *float32 `json:"yesterday,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ComparisonData ComparisonData

// NewComparisonData instantiates a new ComparisonData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComparisonData() *ComparisonData {
	this := ComparisonData{}
	return &this
}

// NewComparisonDataWithDefaults instantiates a new ComparisonData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComparisonDataWithDefaults() *ComparisonData {
	this := ComparisonData{}
	return &this
}

// GetDatapoint returns the Datapoint field value if set, zero value otherwise.
func (o *ComparisonData) GetDatapoint() ComparisonDataDatapoint {
	if o == nil || IsNil(o.Datapoint) {
		var ret ComparisonDataDatapoint
		return ret
	}
	return *o.Datapoint
}

// GetDatapointOk returns a tuple with the Datapoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComparisonData) GetDatapointOk() (*ComparisonDataDatapoint, bool) {
	if o == nil || IsNil(o.Datapoint) {
		return nil, false
	}
	return o.Datapoint, true
}

// HasDatapoint returns a boolean if a field has been set.
func (o *ComparisonData) HasDatapoint() bool {
	if o != nil && !IsNil(o.Datapoint) {
		return true
	}

	return false
}

// SetDatapoint gets a reference to the given ComparisonDataDatapoint and assigns it to the Datapoint field.
func (o *ComparisonData) SetDatapoint(v ComparisonDataDatapoint) {
	o.Datapoint = &v
}

// GetLastMonth returns the LastMonth field value if set, zero value otherwise.
func (o *ComparisonData) GetLastMonth() float32 {
	if o == nil || IsNil(o.LastMonth) {
		var ret float32
		return ret
	}
	return *o.LastMonth
}

// GetLastMonthOk returns a tuple with the LastMonth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComparisonData) GetLastMonthOk() (*float32, bool) {
	if o == nil || IsNil(o.LastMonth) {
		return nil, false
	}
	return o.LastMonth, true
}

// HasLastMonth returns a boolean if a field has been set.
func (o *ComparisonData) HasLastMonth() bool {
	if o != nil && !IsNil(o.LastMonth) {
		return true
	}

	return false
}

// SetLastMonth gets a reference to the given float32 and assigns it to the LastMonth field.
func (o *ComparisonData) SetLastMonth(v float32) {
	o.LastMonth = &v
}

// GetLastQuarter returns the LastQuarter field value if set, zero value otherwise.
func (o *ComparisonData) GetLastQuarter() float32 {
	if o == nil || IsNil(o.LastQuarter) {
		var ret float32
		return ret
	}
	return *o.LastQuarter
}

// GetLastQuarterOk returns a tuple with the LastQuarter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComparisonData) GetLastQuarterOk() (*float32, bool) {
	if o == nil || IsNil(o.LastQuarter) {
		return nil, false
	}
	return o.LastQuarter, true
}

// HasLastQuarter returns a boolean if a field has been set.
func (o *ComparisonData) HasLastQuarter() bool {
	if o != nil && !IsNil(o.LastQuarter) {
		return true
	}

	return false
}

// SetLastQuarter gets a reference to the given float32 and assigns it to the LastQuarter field.
func (o *ComparisonData) SetLastQuarter(v float32) {
	o.LastQuarter = &v
}

// GetLastWeek returns the LastWeek field value if set, zero value otherwise.
func (o *ComparisonData) GetLastWeek() float32 {
	if o == nil || IsNil(o.LastWeek) {
		var ret float32
		return ret
	}
	return *o.LastWeek
}

// GetLastWeekOk returns a tuple with the LastWeek field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComparisonData) GetLastWeekOk() (*float32, bool) {
	if o == nil || IsNil(o.LastWeek) {
		return nil, false
	}
	return o.LastWeek, true
}

// HasLastWeek returns a boolean if a field has been set.
func (o *ComparisonData) HasLastWeek() bool {
	if o != nil && !IsNil(o.LastWeek) {
		return true
	}

	return false
}

// SetLastWeek gets a reference to the given float32 and assigns it to the LastWeek field.
func (o *ComparisonData) SetLastWeek(v float32) {
	o.LastWeek = &v
}

// GetYesterday returns the Yesterday field value if set, zero value otherwise.
func (o *ComparisonData) GetYesterday() float32 {
	if o == nil || IsNil(o.Yesterday) {
		var ret float32
		return ret
	}
	return *o.Yesterday
}

// GetYesterdayOk returns a tuple with the Yesterday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComparisonData) GetYesterdayOk() (*float32, bool) {
	if o == nil || IsNil(o.Yesterday) {
		return nil, false
	}
	return o.Yesterday, true
}

// HasYesterday returns a boolean if a field has been set.
func (o *ComparisonData) HasYesterday() bool {
	if o != nil && !IsNil(o.Yesterday) {
		return true
	}

	return false
}

// SetYesterday gets a reference to the given float32 and assigns it to the Yesterday field.
func (o *ComparisonData) SetYesterday(v float32) {
	o.Yesterday = &v
}

func (o ComparisonData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComparisonData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Datapoint) {
		toSerialize["datapoint"] = o.Datapoint
	}
	if !IsNil(o.LastMonth) {
		toSerialize["lastMonth"] = o.LastMonth
	}
	if !IsNil(o.LastQuarter) {
		toSerialize["lastQuarter"] = o.LastQuarter
	}
	if !IsNil(o.LastWeek) {
		toSerialize["lastWeek"] = o.LastWeek
	}
	if !IsNil(o.Yesterday) {
		toSerialize["yesterday"] = o.Yesterday
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ComparisonData) UnmarshalJSON(data []byte) (err error) {
	varComparisonData := _ComparisonData{}

	err = json.Unmarshal(data, &varComparisonData)

	if err != nil {
		return err
	}

	*o = ComparisonData(varComparisonData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "datapoint")
		delete(additionalProperties, "lastMonth")
		delete(additionalProperties, "lastQuarter")
		delete(additionalProperties, "lastWeek")
		delete(additionalProperties, "yesterday")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableComparisonData struct {
	value *ComparisonData
	isSet bool
}

func (v NullableComparisonData) Get() *ComparisonData {
	return v.value
}

func (v *NullableComparisonData) Set(val *ComparisonData) {
	v.value = val
	v.isSet = true
}

func (v NullableComparisonData) IsSet() bool {
	return v.isSet
}

func (v *NullableComparisonData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComparisonData(val *ComparisonData) *NullableComparisonData {
	return &NullableComparisonData{value: val, isSet: true}
}

func (v NullableComparisonData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComparisonData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


