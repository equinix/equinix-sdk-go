/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
	"fmt"
)

// checks if the MeteredPowerAssetDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MeteredPowerAssetDetails{}

// MeteredPowerAssetDetails asset details
type MeteredPowerAssetDetails struct {
	// asset id
	Id string `json:"id"`
	// asset type
	Type *string `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MeteredPowerAssetDetails MeteredPowerAssetDetails

// NewMeteredPowerAssetDetails instantiates a new MeteredPowerAssetDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMeteredPowerAssetDetails(id string) *MeteredPowerAssetDetails {
	this := MeteredPowerAssetDetails{}
	this.Id = id
	return &this
}

// NewMeteredPowerAssetDetailsWithDefaults instantiates a new MeteredPowerAssetDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMeteredPowerAssetDetailsWithDefaults() *MeteredPowerAssetDetails {
	this := MeteredPowerAssetDetails{}
	return &this
}

// GetId returns the Id field value
func (o *MeteredPowerAssetDetails) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MeteredPowerAssetDetails) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MeteredPowerAssetDetails) SetId(v string) {
	o.Id = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *MeteredPowerAssetDetails) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteredPowerAssetDetails) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *MeteredPowerAssetDetails) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *MeteredPowerAssetDetails) SetType(v string) {
	o.Type = &v
}

func (o MeteredPowerAssetDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MeteredPowerAssetDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MeteredPowerAssetDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMeteredPowerAssetDetails := _MeteredPowerAssetDetails{}

	err = json.Unmarshal(data, &varMeteredPowerAssetDetails)

	if err != nil {
		return err
	}

	*o = MeteredPowerAssetDetails(varMeteredPowerAssetDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMeteredPowerAssetDetails struct {
	value *MeteredPowerAssetDetails
	isSet bool
}

func (v NullableMeteredPowerAssetDetails) Get() *MeteredPowerAssetDetails {
	return v.value
}

func (v *NullableMeteredPowerAssetDetails) Set(val *MeteredPowerAssetDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableMeteredPowerAssetDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableMeteredPowerAssetDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeteredPowerAssetDetails(val *MeteredPowerAssetDetails) *NullableMeteredPowerAssetDetails {
	return &NullableMeteredPowerAssetDetails{value: val, isSet: true}
}

func (v NullableMeteredPowerAssetDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeteredPowerAssetDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


