/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
	"fmt"
)

// AssetAssetClassificationInner the model 'AssetAssetClassificationInner'
type AssetAssetClassificationInner string

// List of Asset_assetClassification_inner
const (
	ASSETASSETCLASSIFICATIONINNER_MECHANICAL AssetAssetClassificationInner = "MECHANICAL"
	ASSETASSETCLASSIFICATIONINNER_ENVIRONMENTAL AssetAssetClassificationInner = "ENVIRONMENTAL"
	ASSETASSETCLASSIFICATIONINNER_ELECTRICAL AssetAssetClassificationInner = "ELECTRICAL"
)

// All allowed values of AssetAssetClassificationInner enum
var AllowedAssetAssetClassificationInnerEnumValues = []AssetAssetClassificationInner{
	"MECHANICAL",
	"ENVIRONMENTAL",
	"ELECTRICAL",
}

func (v *AssetAssetClassificationInner) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AssetAssetClassificationInner(value)
	for _, existing := range AllowedAssetAssetClassificationInnerEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AssetAssetClassificationInner", value)
}

// NewAssetAssetClassificationInnerFromValue returns a pointer to a valid AssetAssetClassificationInner
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAssetAssetClassificationInnerFromValue(v string) (*AssetAssetClassificationInner, error) {
	ev := AssetAssetClassificationInner(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AssetAssetClassificationInner: valid values are %v", v, AllowedAssetAssetClassificationInnerEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AssetAssetClassificationInner) IsValid() bool {
	for _, existing := range AllowedAssetAssetClassificationInnerEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Asset_assetClassification_inner value
func (v AssetAssetClassificationInner) Ptr() *AssetAssetClassificationInner {
	return &v
}

type NullableAssetAssetClassificationInner struct {
	value *AssetAssetClassificationInner
	isSet bool
}

func (v NullableAssetAssetClassificationInner) Get() *AssetAssetClassificationInner {
	return v.value
}

func (v *NullableAssetAssetClassificationInner) Set(val *AssetAssetClassificationInner) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetAssetClassificationInner) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetAssetClassificationInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetAssetClassificationInner(val *AssetAssetClassificationInner) *NullableAssetAssetClassificationInner {
	return &NullableAssetAssetClassificationInner{value: val, isSet: true}
}

func (v NullableAssetAssetClassificationInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetAssetClassificationInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

