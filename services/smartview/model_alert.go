/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
	"fmt"
)

// checks if the Alert type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Alert{}

// Alert message data
type Alert struct {
	Asset AlertAssetDetails `json:"asset"`
	// conditional
	Conditional *string `json:"conditional,omitempty"`
	// data quality: Good | Bad | Uncertain
	DataQuality *string `json:"dataQuality,omitempty"`
	// event type
	EventType *string `json:"eventType,omitempty"`
	// heartbeat
	Heartbeat *bool `json:"heartbeat,omitempty"`
	// ibx
	Ibx string `json:"ibx"`
	// id
	Id *string `json:"id,omitempty"`
	// region
	Region *string `json:"region,omitempty"`
	// unique message id
	StreamId string `json:"streamId"`
	Tag AlertTagDetails `json:"tag"`
	Threshold AlertThresholdDetails `json:"threshold"`
	// alert triggered time
	TriggeredTime *string `json:"triggeredTime,omitempty"`
	// type
	Type *string `json:"type,omitempty"`
	// type id
	TypeId *string `json:"typeId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Alert Alert

// NewAlert instantiates a new Alert object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlert(asset AlertAssetDetails, ibx string, streamId string, tag AlertTagDetails, threshold AlertThresholdDetails) *Alert {
	this := Alert{}
	this.Asset = asset
	this.Ibx = ibx
	this.StreamId = streamId
	this.Tag = tag
	this.Threshold = threshold
	return &this
}

// NewAlertWithDefaults instantiates a new Alert object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertWithDefaults() *Alert {
	this := Alert{}
	return &this
}

// GetAsset returns the Asset field value
func (o *Alert) GetAsset() AlertAssetDetails {
	if o == nil {
		var ret AlertAssetDetails
		return ret
	}

	return o.Asset
}

// GetAssetOk returns a tuple with the Asset field value
// and a boolean to check if the value has been set.
func (o *Alert) GetAssetOk() (*AlertAssetDetails, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Asset, true
}

// SetAsset sets field value
func (o *Alert) SetAsset(v AlertAssetDetails) {
	o.Asset = v
}

// GetConditional returns the Conditional field value if set, zero value otherwise.
func (o *Alert) GetConditional() string {
	if o == nil || IsNil(o.Conditional) {
		var ret string
		return ret
	}
	return *o.Conditional
}

// GetConditionalOk returns a tuple with the Conditional field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetConditionalOk() (*string, bool) {
	if o == nil || IsNil(o.Conditional) {
		return nil, false
	}
	return o.Conditional, true
}

// HasConditional returns a boolean if a field has been set.
func (o *Alert) HasConditional() bool {
	if o != nil && !IsNil(o.Conditional) {
		return true
	}

	return false
}

// SetConditional gets a reference to the given string and assigns it to the Conditional field.
func (o *Alert) SetConditional(v string) {
	o.Conditional = &v
}

// GetDataQuality returns the DataQuality field value if set, zero value otherwise.
func (o *Alert) GetDataQuality() string {
	if o == nil || IsNil(o.DataQuality) {
		var ret string
		return ret
	}
	return *o.DataQuality
}

// GetDataQualityOk returns a tuple with the DataQuality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetDataQualityOk() (*string, bool) {
	if o == nil || IsNil(o.DataQuality) {
		return nil, false
	}
	return o.DataQuality, true
}

// HasDataQuality returns a boolean if a field has been set.
func (o *Alert) HasDataQuality() bool {
	if o != nil && !IsNil(o.DataQuality) {
		return true
	}

	return false
}

// SetDataQuality gets a reference to the given string and assigns it to the DataQuality field.
func (o *Alert) SetDataQuality(v string) {
	o.DataQuality = &v
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *Alert) GetEventType() string {
	if o == nil || IsNil(o.EventType) {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetEventTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *Alert) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *Alert) SetEventType(v string) {
	o.EventType = &v
}

// GetHeartbeat returns the Heartbeat field value if set, zero value otherwise.
func (o *Alert) GetHeartbeat() bool {
	if o == nil || IsNil(o.Heartbeat) {
		var ret bool
		return ret
	}
	return *o.Heartbeat
}

// GetHeartbeatOk returns a tuple with the Heartbeat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetHeartbeatOk() (*bool, bool) {
	if o == nil || IsNil(o.Heartbeat) {
		return nil, false
	}
	return o.Heartbeat, true
}

// HasHeartbeat returns a boolean if a field has been set.
func (o *Alert) HasHeartbeat() bool {
	if o != nil && !IsNil(o.Heartbeat) {
		return true
	}

	return false
}

// SetHeartbeat gets a reference to the given bool and assigns it to the Heartbeat field.
func (o *Alert) SetHeartbeat(v bool) {
	o.Heartbeat = &v
}

// GetIbx returns the Ibx field value
func (o *Alert) GetIbx() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ibx
}

// GetIbxOk returns a tuple with the Ibx field value
// and a boolean to check if the value has been set.
func (o *Alert) GetIbxOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ibx, true
}

// SetIbx sets field value
func (o *Alert) SetIbx(v string) {
	o.Ibx = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Alert) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Alert) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Alert) SetId(v string) {
	o.Id = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *Alert) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *Alert) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *Alert) SetRegion(v string) {
	o.Region = &v
}

// GetStreamId returns the StreamId field value
func (o *Alert) GetStreamId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StreamId
}

// GetStreamIdOk returns a tuple with the StreamId field value
// and a boolean to check if the value has been set.
func (o *Alert) GetStreamIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StreamId, true
}

// SetStreamId sets field value
func (o *Alert) SetStreamId(v string) {
	o.StreamId = v
}

// GetTag returns the Tag field value
func (o *Alert) GetTag() AlertTagDetails {
	if o == nil {
		var ret AlertTagDetails
		return ret
	}

	return o.Tag
}

// GetTagOk returns a tuple with the Tag field value
// and a boolean to check if the value has been set.
func (o *Alert) GetTagOk() (*AlertTagDetails, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tag, true
}

// SetTag sets field value
func (o *Alert) SetTag(v AlertTagDetails) {
	o.Tag = v
}

// GetThreshold returns the Threshold field value
func (o *Alert) GetThreshold() AlertThresholdDetails {
	if o == nil {
		var ret AlertThresholdDetails
		return ret
	}

	return o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value
// and a boolean to check if the value has been set.
func (o *Alert) GetThresholdOk() (*AlertThresholdDetails, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Threshold, true
}

// SetThreshold sets field value
func (o *Alert) SetThreshold(v AlertThresholdDetails) {
	o.Threshold = v
}

// GetTriggeredTime returns the TriggeredTime field value if set, zero value otherwise.
func (o *Alert) GetTriggeredTime() string {
	if o == nil || IsNil(o.TriggeredTime) {
		var ret string
		return ret
	}
	return *o.TriggeredTime
}

// GetTriggeredTimeOk returns a tuple with the TriggeredTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetTriggeredTimeOk() (*string, bool) {
	if o == nil || IsNil(o.TriggeredTime) {
		return nil, false
	}
	return o.TriggeredTime, true
}

// HasTriggeredTime returns a boolean if a field has been set.
func (o *Alert) HasTriggeredTime() bool {
	if o != nil && !IsNil(o.TriggeredTime) {
		return true
	}

	return false
}

// SetTriggeredTime gets a reference to the given string and assigns it to the TriggeredTime field.
func (o *Alert) SetTriggeredTime(v string) {
	o.TriggeredTime = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Alert) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Alert) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Alert) SetType(v string) {
	o.Type = &v
}

// GetTypeId returns the TypeId field value if set, zero value otherwise.
func (o *Alert) GetTypeId() string {
	if o == nil || IsNil(o.TypeId) {
		var ret string
		return ret
	}
	return *o.TypeId
}

// GetTypeIdOk returns a tuple with the TypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetTypeIdOk() (*string, bool) {
	if o == nil || IsNil(o.TypeId) {
		return nil, false
	}
	return o.TypeId, true
}

// HasTypeId returns a boolean if a field has been set.
func (o *Alert) HasTypeId() bool {
	if o != nil && !IsNil(o.TypeId) {
		return true
	}

	return false
}

// SetTypeId gets a reference to the given string and assigns it to the TypeId field.
func (o *Alert) SetTypeId(v string) {
	o.TypeId = &v
}

func (o Alert) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Alert) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["asset"] = o.Asset
	if !IsNil(o.Conditional) {
		toSerialize["conditional"] = o.Conditional
	}
	if !IsNil(o.DataQuality) {
		toSerialize["dataQuality"] = o.DataQuality
	}
	if !IsNil(o.EventType) {
		toSerialize["eventType"] = o.EventType
	}
	if !IsNil(o.Heartbeat) {
		toSerialize["heartbeat"] = o.Heartbeat
	}
	toSerialize["ibx"] = o.Ibx
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	toSerialize["streamId"] = o.StreamId
	toSerialize["tag"] = o.Tag
	toSerialize["threshold"] = o.Threshold
	if !IsNil(o.TriggeredTime) {
		toSerialize["triggeredTime"] = o.TriggeredTime
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.TypeId) {
		toSerialize["typeId"] = o.TypeId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Alert) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"asset",
		"ibx",
		"streamId",
		"tag",
		"threshold",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAlert := _Alert{}

	err = json.Unmarshal(data, &varAlert)

	if err != nil {
		return err
	}

	*o = Alert(varAlert)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "asset")
		delete(additionalProperties, "conditional")
		delete(additionalProperties, "dataQuality")
		delete(additionalProperties, "eventType")
		delete(additionalProperties, "heartbeat")
		delete(additionalProperties, "ibx")
		delete(additionalProperties, "id")
		delete(additionalProperties, "region")
		delete(additionalProperties, "streamId")
		delete(additionalProperties, "tag")
		delete(additionalProperties, "threshold")
		delete(additionalProperties, "triggeredTime")
		delete(additionalProperties, "type")
		delete(additionalProperties, "typeId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAlert struct {
	value *Alert
	isSet bool
}

func (v NullableAlert) Get() *Alert {
	return v.value
}

func (v *NullableAlert) Set(val *Alert) {
	v.value = val
	v.isSet = true
}

func (v NullableAlert) IsSet() bool {
	return v.isSet
}

func (v *NullableAlert) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlert(val *Alert) *NullableAlert {
	return &NullableAlert{value: val, isSet: true}
}

func (v NullableAlert) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlert) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


