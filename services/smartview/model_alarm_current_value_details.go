/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
)

// checks if the AlarmCurrentValueDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlarmCurrentValueDetails{}

// AlarmCurrentValueDetails currentValue details
type AlarmCurrentValueDetails struct {
	// current value type
	Type *string `json:"type,omitempty"`
	// current value unit
	Unit *string `json:"unit,omitempty"`
	// current value value
	Value *string `json:"value,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AlarmCurrentValueDetails AlarmCurrentValueDetails

// NewAlarmCurrentValueDetails instantiates a new AlarmCurrentValueDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlarmCurrentValueDetails() *AlarmCurrentValueDetails {
	this := AlarmCurrentValueDetails{}
	return &this
}

// NewAlarmCurrentValueDetailsWithDefaults instantiates a new AlarmCurrentValueDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlarmCurrentValueDetailsWithDefaults() *AlarmCurrentValueDetails {
	this := AlarmCurrentValueDetails{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AlarmCurrentValueDetails) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlarmCurrentValueDetails) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AlarmCurrentValueDetails) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AlarmCurrentValueDetails) SetType(v string) {
	o.Type = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *AlarmCurrentValueDetails) GetUnit() string {
	if o == nil || IsNil(o.Unit) {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlarmCurrentValueDetails) GetUnitOk() (*string, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *AlarmCurrentValueDetails) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *AlarmCurrentValueDetails) SetUnit(v string) {
	o.Unit = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *AlarmCurrentValueDetails) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlarmCurrentValueDetails) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *AlarmCurrentValueDetails) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *AlarmCurrentValueDetails) SetValue(v string) {
	o.Value = &v
}

func (o AlarmCurrentValueDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlarmCurrentValueDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AlarmCurrentValueDetails) UnmarshalJSON(data []byte) (err error) {
	varAlarmCurrentValueDetails := _AlarmCurrentValueDetails{}

	err = json.Unmarshal(data, &varAlarmCurrentValueDetails)

	if err != nil {
		return err
	}

	*o = AlarmCurrentValueDetails(varAlarmCurrentValueDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "unit")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAlarmCurrentValueDetails struct {
	value *AlarmCurrentValueDetails
	isSet bool
}

func (v NullableAlarmCurrentValueDetails) Get() *AlarmCurrentValueDetails {
	return v.value
}

func (v *NullableAlarmCurrentValueDetails) Set(val *AlarmCurrentValueDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableAlarmCurrentValueDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableAlarmCurrentValueDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlarmCurrentValueDetails(val *AlarmCurrentValueDetails) *NullableAlarmCurrentValueDetails {
	return &NullableAlarmCurrentValueDetails{value: val, isSet: true}
}

func (v NullableAlarmCurrentValueDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlarmCurrentValueDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


