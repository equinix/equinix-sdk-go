/*
Smart View Environmental API

Empower yourself with Environmental APIs. The API makes it possible to fetch current environmental data including humidity and temperature for a single sensor (identified by IBX code and sensor ID) or for all the sensors within an IBX (identified by IBX code) in a paginated way. When fetching all sensor readings you can apply additional sort criteria.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
	"fmt"
)

// Mixin1LevelTypeParameter the model 'Mixin1LevelTypeParameter'
type Mixin1LevelTypeParameter string

// List of Mixin1_levelType_parameter
const (
	MIXIN1LEVELTYPEPARAMETER_IBX Mixin1LevelTypeParameter = "IBX"
	MIXIN1LEVELTYPEPARAMETER_ZONE Mixin1LevelTypeParameter = "ZONE"
	MIXIN1LEVELTYPEPARAMETER_CAGE Mixin1LevelTypeParameter = "CAGE"
	MIXIN1LEVELTYPEPARAMETER_SENSOR Mixin1LevelTypeParameter = "SENSOR"
)

// All allowed values of Mixin1LevelTypeParameter enum
var AllowedMixin1LevelTypeParameterEnumValues = []Mixin1LevelTypeParameter{
	"IBX",
	"ZONE",
	"CAGE",
	"SENSOR",
}

func (v *Mixin1LevelTypeParameter) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Mixin1LevelTypeParameter(value)
	for _, existing := range AllowedMixin1LevelTypeParameterEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Mixin1LevelTypeParameter", value)
}

// NewMixin1LevelTypeParameterFromValue returns a pointer to a valid Mixin1LevelTypeParameter
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMixin1LevelTypeParameterFromValue(v string) (*Mixin1LevelTypeParameter, error) {
	ev := Mixin1LevelTypeParameter(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Mixin1LevelTypeParameter: valid values are %v", v, AllowedMixin1LevelTypeParameterEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Mixin1LevelTypeParameter) IsValid() bool {
	for _, existing := range AllowedMixin1LevelTypeParameterEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Mixin1_levelType_parameter value
func (v Mixin1LevelTypeParameter) Ptr() *Mixin1LevelTypeParameter {
	return &v
}

type NullableMixin1LevelTypeParameter struct {
	value *Mixin1LevelTypeParameter
	isSet bool
}

func (v NullableMixin1LevelTypeParameter) Get() *Mixin1LevelTypeParameter {
	return v.value
}

func (v *NullableMixin1LevelTypeParameter) Set(val *Mixin1LevelTypeParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableMixin1LevelTypeParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableMixin1LevelTypeParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMixin1LevelTypeParameter(val *Mixin1LevelTypeParameter) *NullableMixin1LevelTypeParameter {
	return &NullableMixin1LevelTypeParameter{value: val, isSet: true}
}

func (v NullableMixin1LevelTypeParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMixin1LevelTypeParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

