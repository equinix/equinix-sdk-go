/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
)

// checks if the StatusInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StatusInfo{}

// StatusInfo struct for StatusInfo
type StatusInfo struct {
	// [1000|3001|3002|3003|4000] are the possible status codes
	Code *float32 `json:"code,omitempty"`
	// [Ok|Permission Denied|Invalid Account number|Invalid IBX|Invalid LevelType|Invalid LevelValue|Invalid Interval|Invalid From/To Date|INVALID_SESSION|INVALID_SESSION_IBX|INTERNAL_ERROR] are the possible messages
	Msg *string `json:"msg,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StatusInfo StatusInfo

// NewStatusInfo instantiates a new StatusInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatusInfo() *StatusInfo {
	this := StatusInfo{}
	return &this
}

// NewStatusInfoWithDefaults instantiates a new StatusInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatusInfoWithDefaults() *StatusInfo {
	this := StatusInfo{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *StatusInfo) GetCode() float32 {
	if o == nil || IsNil(o.Code) {
		var ret float32
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusInfo) GetCodeOk() (*float32, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *StatusInfo) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given float32 and assigns it to the Code field.
func (o *StatusInfo) SetCode(v float32) {
	o.Code = &v
}

// GetMsg returns the Msg field value if set, zero value otherwise.
func (o *StatusInfo) GetMsg() string {
	if o == nil || IsNil(o.Msg) {
		var ret string
		return ret
	}
	return *o.Msg
}

// GetMsgOk returns a tuple with the Msg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusInfo) GetMsgOk() (*string, bool) {
	if o == nil || IsNil(o.Msg) {
		return nil, false
	}
	return o.Msg, true
}

// HasMsg returns a boolean if a field has been set.
func (o *StatusInfo) HasMsg() bool {
	if o != nil && !IsNil(o.Msg) {
		return true
	}

	return false
}

// SetMsg gets a reference to the given string and assigns it to the Msg field.
func (o *StatusInfo) SetMsg(v string) {
	o.Msg = &v
}

func (o StatusInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StatusInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Msg) {
		toSerialize["msg"] = o.Msg
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StatusInfo) UnmarshalJSON(data []byte) (err error) {
	varStatusInfo := _StatusInfo{}

	err = json.Unmarshal(data, &varStatusInfo)

	if err != nil {
		return err
	}

	*o = StatusInfo(varStatusInfo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "code")
		delete(additionalProperties, "msg")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStatusInfo struct {
	value *StatusInfo
	isSet bool
}

func (v NullableStatusInfo) Get() *StatusInfo {
	return v.value
}

func (v *NullableStatusInfo) Set(val *StatusInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableStatusInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableStatusInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatusInfo(val *StatusInfo) *NullableStatusInfo {
	return &NullableStatusInfo{value: val, isSet: true}
}

func (v NullableStatusInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatusInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


