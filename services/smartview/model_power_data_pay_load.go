/*
Smart View Environmental API

Empower yourself with Environmental APIs. The API makes it possible to fetch current environmental data including humidity and temperature for a single sensor (identified by IBX code and sensor ID) or for all the sensors within an IBX (identified by IBX code) in a paginated way. When fetching all sensor readings you can apply additional sort criteria.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
)

// checks if the PowerDataPayLoad type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PowerDataPayLoad{}

// PowerDataPayLoad struct for PowerDataPayLoad
type PowerDataPayLoad struct {
	// customer account number
	AccountNo *string `json:"accountNo,omitempty"`
	// instantaneous current amp reading on circuits
	Amps *float32 `json:"amps,omitempty"`
	// maximum kVA draw allowed for the cabinet|cabinet description when the levelType is cabinet. Null otherwise.
	CabinetRating *float32 `json:"cabinetRating,omitempty"`
	ComparisonData *ComparisonData `json:"comparisonData,omitempty"`
	// The maximum power draw contractually allowable in a  private cage.  
	ContractualKva *float32 `json:"contractualKva,omitempty"`
	CustomerName *string `json:"customerName,omitempty"`
	// ibx code
	Ibx *string `json:"ibx,omitempty"`
	// returns boolean based on breakertip alarm
	IsAlarm *string `json:"isAlarm,omitempty"`
	// power consumption in kva
	Kva *float32 `json:"kva,omitempty"`
	// measure of real power expressed in kilowatt applicable for ibxs that have capability of energy meter reading|value will be \"NA\" for AMER and APAC regions  
	Kw *string `json:"kw,omitempty"`
	// date-time when the latest value was updated (epoc - milliseconds). 
	LastUpdatedTime *string `json:"lastUpdatedTime,omitempty"`
	LevelType *PowerDataPayLoadLevelType `json:"levelType,omitempty"`
	// power hierarchy node levelValue linked to the power data
	LevelValue *string `json:"levelValue,omitempty"`
	PeakKvaLastSevenDays *float32 `json:"peakKvaLastSevenDays,omitempty"`
	PeakKvaLastSevenDaysContractualKva *float32 `json:"peakKvaLastSevenDaysContractualKva,omitempty"`
	PeakKvaLastSevenDaysPercentage *float32 `json:"peakKvaLastSevenDaysPercentage,omitempty"`
	PeakKvaLastSevenDaysTime *int32 `json:"peakKvaLastSevenDaysTime,omitempty"`
	// calculated field kva / contractualKva
	PercentageKva *float32 `json:"percentageKva,omitempty"`
	// The ratio between real power and apparent power in a circuit.(kW/kVA)|value will be \"NA\" for AMER and APAC regions 
	PowerFactor *string `json:"powerFactor,omitempty"`
	// the sum of instantaneous power draw reading on all the primary  circuits within the levelType. 
	PrimaryKva *float32 `json:"primaryKva,omitempty"`
	// date-time when the latest value was read in (epoc - milliseconds). 
	ReadingTime *string `json:"readingTime,omitempty"`
	// the sum of instantaneous power draw reading on all the redundant  circuits within the levelType. 
	RedundantKva *float32 `json:"redundantKva,omitempty"`
	// circuit description when the levelType is circuit. Null otherwise.
	SoldAmps *int32 `json:"soldAmps,omitempty"`
	// maximum amp draw allowable on a circuit
	SoldKva *float32 `json:"soldKva,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PowerDataPayLoad PowerDataPayLoad

// NewPowerDataPayLoad instantiates a new PowerDataPayLoad object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPowerDataPayLoad() *PowerDataPayLoad {
	this := PowerDataPayLoad{}
	return &this
}

// NewPowerDataPayLoadWithDefaults instantiates a new PowerDataPayLoad object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPowerDataPayLoadWithDefaults() *PowerDataPayLoad {
	this := PowerDataPayLoad{}
	return &this
}

// GetAccountNo returns the AccountNo field value if set, zero value otherwise.
func (o *PowerDataPayLoad) GetAccountNo() string {
	if o == nil || IsNil(o.AccountNo) {
		var ret string
		return ret
	}
	return *o.AccountNo
}

// GetAccountNoOk returns a tuple with the AccountNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerDataPayLoad) GetAccountNoOk() (*string, bool) {
	if o == nil || IsNil(o.AccountNo) {
		return nil, false
	}
	return o.AccountNo, true
}

// HasAccountNo returns a boolean if a field has been set.
func (o *PowerDataPayLoad) HasAccountNo() bool {
	if o != nil && !IsNil(o.AccountNo) {
		return true
	}

	return false
}

// SetAccountNo gets a reference to the given string and assigns it to the AccountNo field.
func (o *PowerDataPayLoad) SetAccountNo(v string) {
	o.AccountNo = &v
}

// GetAmps returns the Amps field value if set, zero value otherwise.
func (o *PowerDataPayLoad) GetAmps() float32 {
	if o == nil || IsNil(o.Amps) {
		var ret float32
		return ret
	}
	return *o.Amps
}

// GetAmpsOk returns a tuple with the Amps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerDataPayLoad) GetAmpsOk() (*float32, bool) {
	if o == nil || IsNil(o.Amps) {
		return nil, false
	}
	return o.Amps, true
}

// HasAmps returns a boolean if a field has been set.
func (o *PowerDataPayLoad) HasAmps() bool {
	if o != nil && !IsNil(o.Amps) {
		return true
	}

	return false
}

// SetAmps gets a reference to the given float32 and assigns it to the Amps field.
func (o *PowerDataPayLoad) SetAmps(v float32) {
	o.Amps = &v
}

// GetCabinetRating returns the CabinetRating field value if set, zero value otherwise.
func (o *PowerDataPayLoad) GetCabinetRating() float32 {
	if o == nil || IsNil(o.CabinetRating) {
		var ret float32
		return ret
	}
	return *o.CabinetRating
}

// GetCabinetRatingOk returns a tuple with the CabinetRating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerDataPayLoad) GetCabinetRatingOk() (*float32, bool) {
	if o == nil || IsNil(o.CabinetRating) {
		return nil, false
	}
	return o.CabinetRating, true
}

// HasCabinetRating returns a boolean if a field has been set.
func (o *PowerDataPayLoad) HasCabinetRating() bool {
	if o != nil && !IsNil(o.CabinetRating) {
		return true
	}

	return false
}

// SetCabinetRating gets a reference to the given float32 and assigns it to the CabinetRating field.
func (o *PowerDataPayLoad) SetCabinetRating(v float32) {
	o.CabinetRating = &v
}

// GetComparisonData returns the ComparisonData field value if set, zero value otherwise.
func (o *PowerDataPayLoad) GetComparisonData() ComparisonData {
	if o == nil || IsNil(o.ComparisonData) {
		var ret ComparisonData
		return ret
	}
	return *o.ComparisonData
}

// GetComparisonDataOk returns a tuple with the ComparisonData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerDataPayLoad) GetComparisonDataOk() (*ComparisonData, bool) {
	if o == nil || IsNil(o.ComparisonData) {
		return nil, false
	}
	return o.ComparisonData, true
}

// HasComparisonData returns a boolean if a field has been set.
func (o *PowerDataPayLoad) HasComparisonData() bool {
	if o != nil && !IsNil(o.ComparisonData) {
		return true
	}

	return false
}

// SetComparisonData gets a reference to the given ComparisonData and assigns it to the ComparisonData field.
func (o *PowerDataPayLoad) SetComparisonData(v ComparisonData) {
	o.ComparisonData = &v
}

// GetContractualKva returns the ContractualKva field value if set, zero value otherwise.
func (o *PowerDataPayLoad) GetContractualKva() float32 {
	if o == nil || IsNil(o.ContractualKva) {
		var ret float32
		return ret
	}
	return *o.ContractualKva
}

// GetContractualKvaOk returns a tuple with the ContractualKva field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerDataPayLoad) GetContractualKvaOk() (*float32, bool) {
	if o == nil || IsNil(o.ContractualKva) {
		return nil, false
	}
	return o.ContractualKva, true
}

// HasContractualKva returns a boolean if a field has been set.
func (o *PowerDataPayLoad) HasContractualKva() bool {
	if o != nil && !IsNil(o.ContractualKva) {
		return true
	}

	return false
}

// SetContractualKva gets a reference to the given float32 and assigns it to the ContractualKva field.
func (o *PowerDataPayLoad) SetContractualKva(v float32) {
	o.ContractualKva = &v
}

// GetCustomerName returns the CustomerName field value if set, zero value otherwise.
func (o *PowerDataPayLoad) GetCustomerName() string {
	if o == nil || IsNil(o.CustomerName) {
		var ret string
		return ret
	}
	return *o.CustomerName
}

// GetCustomerNameOk returns a tuple with the CustomerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerDataPayLoad) GetCustomerNameOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerName) {
		return nil, false
	}
	return o.CustomerName, true
}

// HasCustomerName returns a boolean if a field has been set.
func (o *PowerDataPayLoad) HasCustomerName() bool {
	if o != nil && !IsNil(o.CustomerName) {
		return true
	}

	return false
}

// SetCustomerName gets a reference to the given string and assigns it to the CustomerName field.
func (o *PowerDataPayLoad) SetCustomerName(v string) {
	o.CustomerName = &v
}

// GetIbx returns the Ibx field value if set, zero value otherwise.
func (o *PowerDataPayLoad) GetIbx() string {
	if o == nil || IsNil(o.Ibx) {
		var ret string
		return ret
	}
	return *o.Ibx
}

// GetIbxOk returns a tuple with the Ibx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerDataPayLoad) GetIbxOk() (*string, bool) {
	if o == nil || IsNil(o.Ibx) {
		return nil, false
	}
	return o.Ibx, true
}

// HasIbx returns a boolean if a field has been set.
func (o *PowerDataPayLoad) HasIbx() bool {
	if o != nil && !IsNil(o.Ibx) {
		return true
	}

	return false
}

// SetIbx gets a reference to the given string and assigns it to the Ibx field.
func (o *PowerDataPayLoad) SetIbx(v string) {
	o.Ibx = &v
}

// GetIsAlarm returns the IsAlarm field value if set, zero value otherwise.
func (o *PowerDataPayLoad) GetIsAlarm() string {
	if o == nil || IsNil(o.IsAlarm) {
		var ret string
		return ret
	}
	return *o.IsAlarm
}

// GetIsAlarmOk returns a tuple with the IsAlarm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerDataPayLoad) GetIsAlarmOk() (*string, bool) {
	if o == nil || IsNil(o.IsAlarm) {
		return nil, false
	}
	return o.IsAlarm, true
}

// HasIsAlarm returns a boolean if a field has been set.
func (o *PowerDataPayLoad) HasIsAlarm() bool {
	if o != nil && !IsNil(o.IsAlarm) {
		return true
	}

	return false
}

// SetIsAlarm gets a reference to the given string and assigns it to the IsAlarm field.
func (o *PowerDataPayLoad) SetIsAlarm(v string) {
	o.IsAlarm = &v
}

// GetKva returns the Kva field value if set, zero value otherwise.
func (o *PowerDataPayLoad) GetKva() float32 {
	if o == nil || IsNil(o.Kva) {
		var ret float32
		return ret
	}
	return *o.Kva
}

// GetKvaOk returns a tuple with the Kva field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerDataPayLoad) GetKvaOk() (*float32, bool) {
	if o == nil || IsNil(o.Kva) {
		return nil, false
	}
	return o.Kva, true
}

// HasKva returns a boolean if a field has been set.
func (o *PowerDataPayLoad) HasKva() bool {
	if o != nil && !IsNil(o.Kva) {
		return true
	}

	return false
}

// SetKva gets a reference to the given float32 and assigns it to the Kva field.
func (o *PowerDataPayLoad) SetKva(v float32) {
	o.Kva = &v
}

// GetKw returns the Kw field value if set, zero value otherwise.
func (o *PowerDataPayLoad) GetKw() string {
	if o == nil || IsNil(o.Kw) {
		var ret string
		return ret
	}
	return *o.Kw
}

// GetKwOk returns a tuple with the Kw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerDataPayLoad) GetKwOk() (*string, bool) {
	if o == nil || IsNil(o.Kw) {
		return nil, false
	}
	return o.Kw, true
}

// HasKw returns a boolean if a field has been set.
func (o *PowerDataPayLoad) HasKw() bool {
	if o != nil && !IsNil(o.Kw) {
		return true
	}

	return false
}

// SetKw gets a reference to the given string and assigns it to the Kw field.
func (o *PowerDataPayLoad) SetKw(v string) {
	o.Kw = &v
}

// GetLastUpdatedTime returns the LastUpdatedTime field value if set, zero value otherwise.
func (o *PowerDataPayLoad) GetLastUpdatedTime() string {
	if o == nil || IsNil(o.LastUpdatedTime) {
		var ret string
		return ret
	}
	return *o.LastUpdatedTime
}

// GetLastUpdatedTimeOk returns a tuple with the LastUpdatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerDataPayLoad) GetLastUpdatedTimeOk() (*string, bool) {
	if o == nil || IsNil(o.LastUpdatedTime) {
		return nil, false
	}
	return o.LastUpdatedTime, true
}

// HasLastUpdatedTime returns a boolean if a field has been set.
func (o *PowerDataPayLoad) HasLastUpdatedTime() bool {
	if o != nil && !IsNil(o.LastUpdatedTime) {
		return true
	}

	return false
}

// SetLastUpdatedTime gets a reference to the given string and assigns it to the LastUpdatedTime field.
func (o *PowerDataPayLoad) SetLastUpdatedTime(v string) {
	o.LastUpdatedTime = &v
}

// GetLevelType returns the LevelType field value if set, zero value otherwise.
func (o *PowerDataPayLoad) GetLevelType() PowerDataPayLoadLevelType {
	if o == nil || IsNil(o.LevelType) {
		var ret PowerDataPayLoadLevelType
		return ret
	}
	return *o.LevelType
}

// GetLevelTypeOk returns a tuple with the LevelType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerDataPayLoad) GetLevelTypeOk() (*PowerDataPayLoadLevelType, bool) {
	if o == nil || IsNil(o.LevelType) {
		return nil, false
	}
	return o.LevelType, true
}

// HasLevelType returns a boolean if a field has been set.
func (o *PowerDataPayLoad) HasLevelType() bool {
	if o != nil && !IsNil(o.LevelType) {
		return true
	}

	return false
}

// SetLevelType gets a reference to the given PowerDataPayLoadLevelType and assigns it to the LevelType field.
func (o *PowerDataPayLoad) SetLevelType(v PowerDataPayLoadLevelType) {
	o.LevelType = &v
}

// GetLevelValue returns the LevelValue field value if set, zero value otherwise.
func (o *PowerDataPayLoad) GetLevelValue() string {
	if o == nil || IsNil(o.LevelValue) {
		var ret string
		return ret
	}
	return *o.LevelValue
}

// GetLevelValueOk returns a tuple with the LevelValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerDataPayLoad) GetLevelValueOk() (*string, bool) {
	if o == nil || IsNil(o.LevelValue) {
		return nil, false
	}
	return o.LevelValue, true
}

// HasLevelValue returns a boolean if a field has been set.
func (o *PowerDataPayLoad) HasLevelValue() bool {
	if o != nil && !IsNil(o.LevelValue) {
		return true
	}

	return false
}

// SetLevelValue gets a reference to the given string and assigns it to the LevelValue field.
func (o *PowerDataPayLoad) SetLevelValue(v string) {
	o.LevelValue = &v
}

// GetPeakKvaLastSevenDays returns the PeakKvaLastSevenDays field value if set, zero value otherwise.
func (o *PowerDataPayLoad) GetPeakKvaLastSevenDays() float32 {
	if o == nil || IsNil(o.PeakKvaLastSevenDays) {
		var ret float32
		return ret
	}
	return *o.PeakKvaLastSevenDays
}

// GetPeakKvaLastSevenDaysOk returns a tuple with the PeakKvaLastSevenDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerDataPayLoad) GetPeakKvaLastSevenDaysOk() (*float32, bool) {
	if o == nil || IsNil(o.PeakKvaLastSevenDays) {
		return nil, false
	}
	return o.PeakKvaLastSevenDays, true
}

// HasPeakKvaLastSevenDays returns a boolean if a field has been set.
func (o *PowerDataPayLoad) HasPeakKvaLastSevenDays() bool {
	if o != nil && !IsNil(o.PeakKvaLastSevenDays) {
		return true
	}

	return false
}

// SetPeakKvaLastSevenDays gets a reference to the given float32 and assigns it to the PeakKvaLastSevenDays field.
func (o *PowerDataPayLoad) SetPeakKvaLastSevenDays(v float32) {
	o.PeakKvaLastSevenDays = &v
}

// GetPeakKvaLastSevenDaysContractualKva returns the PeakKvaLastSevenDaysContractualKva field value if set, zero value otherwise.
func (o *PowerDataPayLoad) GetPeakKvaLastSevenDaysContractualKva() float32 {
	if o == nil || IsNil(o.PeakKvaLastSevenDaysContractualKva) {
		var ret float32
		return ret
	}
	return *o.PeakKvaLastSevenDaysContractualKva
}

// GetPeakKvaLastSevenDaysContractualKvaOk returns a tuple with the PeakKvaLastSevenDaysContractualKva field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerDataPayLoad) GetPeakKvaLastSevenDaysContractualKvaOk() (*float32, bool) {
	if o == nil || IsNil(o.PeakKvaLastSevenDaysContractualKva) {
		return nil, false
	}
	return o.PeakKvaLastSevenDaysContractualKva, true
}

// HasPeakKvaLastSevenDaysContractualKva returns a boolean if a field has been set.
func (o *PowerDataPayLoad) HasPeakKvaLastSevenDaysContractualKva() bool {
	if o != nil && !IsNil(o.PeakKvaLastSevenDaysContractualKva) {
		return true
	}

	return false
}

// SetPeakKvaLastSevenDaysContractualKva gets a reference to the given float32 and assigns it to the PeakKvaLastSevenDaysContractualKva field.
func (o *PowerDataPayLoad) SetPeakKvaLastSevenDaysContractualKva(v float32) {
	o.PeakKvaLastSevenDaysContractualKva = &v
}

// GetPeakKvaLastSevenDaysPercentage returns the PeakKvaLastSevenDaysPercentage field value if set, zero value otherwise.
func (o *PowerDataPayLoad) GetPeakKvaLastSevenDaysPercentage() float32 {
	if o == nil || IsNil(o.PeakKvaLastSevenDaysPercentage) {
		var ret float32
		return ret
	}
	return *o.PeakKvaLastSevenDaysPercentage
}

// GetPeakKvaLastSevenDaysPercentageOk returns a tuple with the PeakKvaLastSevenDaysPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerDataPayLoad) GetPeakKvaLastSevenDaysPercentageOk() (*float32, bool) {
	if o == nil || IsNil(o.PeakKvaLastSevenDaysPercentage) {
		return nil, false
	}
	return o.PeakKvaLastSevenDaysPercentage, true
}

// HasPeakKvaLastSevenDaysPercentage returns a boolean if a field has been set.
func (o *PowerDataPayLoad) HasPeakKvaLastSevenDaysPercentage() bool {
	if o != nil && !IsNil(o.PeakKvaLastSevenDaysPercentage) {
		return true
	}

	return false
}

// SetPeakKvaLastSevenDaysPercentage gets a reference to the given float32 and assigns it to the PeakKvaLastSevenDaysPercentage field.
func (o *PowerDataPayLoad) SetPeakKvaLastSevenDaysPercentage(v float32) {
	o.PeakKvaLastSevenDaysPercentage = &v
}

// GetPeakKvaLastSevenDaysTime returns the PeakKvaLastSevenDaysTime field value if set, zero value otherwise.
func (o *PowerDataPayLoad) GetPeakKvaLastSevenDaysTime() int32 {
	if o == nil || IsNil(o.PeakKvaLastSevenDaysTime) {
		var ret int32
		return ret
	}
	return *o.PeakKvaLastSevenDaysTime
}

// GetPeakKvaLastSevenDaysTimeOk returns a tuple with the PeakKvaLastSevenDaysTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerDataPayLoad) GetPeakKvaLastSevenDaysTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.PeakKvaLastSevenDaysTime) {
		return nil, false
	}
	return o.PeakKvaLastSevenDaysTime, true
}

// HasPeakKvaLastSevenDaysTime returns a boolean if a field has been set.
func (o *PowerDataPayLoad) HasPeakKvaLastSevenDaysTime() bool {
	if o != nil && !IsNil(o.PeakKvaLastSevenDaysTime) {
		return true
	}

	return false
}

// SetPeakKvaLastSevenDaysTime gets a reference to the given int32 and assigns it to the PeakKvaLastSevenDaysTime field.
func (o *PowerDataPayLoad) SetPeakKvaLastSevenDaysTime(v int32) {
	o.PeakKvaLastSevenDaysTime = &v
}

// GetPercentageKva returns the PercentageKva field value if set, zero value otherwise.
func (o *PowerDataPayLoad) GetPercentageKva() float32 {
	if o == nil || IsNil(o.PercentageKva) {
		var ret float32
		return ret
	}
	return *o.PercentageKva
}

// GetPercentageKvaOk returns a tuple with the PercentageKva field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerDataPayLoad) GetPercentageKvaOk() (*float32, bool) {
	if o == nil || IsNil(o.PercentageKva) {
		return nil, false
	}
	return o.PercentageKva, true
}

// HasPercentageKva returns a boolean if a field has been set.
func (o *PowerDataPayLoad) HasPercentageKva() bool {
	if o != nil && !IsNil(o.PercentageKva) {
		return true
	}

	return false
}

// SetPercentageKva gets a reference to the given float32 and assigns it to the PercentageKva field.
func (o *PowerDataPayLoad) SetPercentageKva(v float32) {
	o.PercentageKva = &v
}

// GetPowerFactor returns the PowerFactor field value if set, zero value otherwise.
func (o *PowerDataPayLoad) GetPowerFactor() string {
	if o == nil || IsNil(o.PowerFactor) {
		var ret string
		return ret
	}
	return *o.PowerFactor
}

// GetPowerFactorOk returns a tuple with the PowerFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerDataPayLoad) GetPowerFactorOk() (*string, bool) {
	if o == nil || IsNil(o.PowerFactor) {
		return nil, false
	}
	return o.PowerFactor, true
}

// HasPowerFactor returns a boolean if a field has been set.
func (o *PowerDataPayLoad) HasPowerFactor() bool {
	if o != nil && !IsNil(o.PowerFactor) {
		return true
	}

	return false
}

// SetPowerFactor gets a reference to the given string and assigns it to the PowerFactor field.
func (o *PowerDataPayLoad) SetPowerFactor(v string) {
	o.PowerFactor = &v
}

// GetPrimaryKva returns the PrimaryKva field value if set, zero value otherwise.
func (o *PowerDataPayLoad) GetPrimaryKva() float32 {
	if o == nil || IsNil(o.PrimaryKva) {
		var ret float32
		return ret
	}
	return *o.PrimaryKva
}

// GetPrimaryKvaOk returns a tuple with the PrimaryKva field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerDataPayLoad) GetPrimaryKvaOk() (*float32, bool) {
	if o == nil || IsNil(o.PrimaryKva) {
		return nil, false
	}
	return o.PrimaryKva, true
}

// HasPrimaryKva returns a boolean if a field has been set.
func (o *PowerDataPayLoad) HasPrimaryKva() bool {
	if o != nil && !IsNil(o.PrimaryKva) {
		return true
	}

	return false
}

// SetPrimaryKva gets a reference to the given float32 and assigns it to the PrimaryKva field.
func (o *PowerDataPayLoad) SetPrimaryKva(v float32) {
	o.PrimaryKva = &v
}

// GetReadingTime returns the ReadingTime field value if set, zero value otherwise.
func (o *PowerDataPayLoad) GetReadingTime() string {
	if o == nil || IsNil(o.ReadingTime) {
		var ret string
		return ret
	}
	return *o.ReadingTime
}

// GetReadingTimeOk returns a tuple with the ReadingTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerDataPayLoad) GetReadingTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ReadingTime) {
		return nil, false
	}
	return o.ReadingTime, true
}

// HasReadingTime returns a boolean if a field has been set.
func (o *PowerDataPayLoad) HasReadingTime() bool {
	if o != nil && !IsNil(o.ReadingTime) {
		return true
	}

	return false
}

// SetReadingTime gets a reference to the given string and assigns it to the ReadingTime field.
func (o *PowerDataPayLoad) SetReadingTime(v string) {
	o.ReadingTime = &v
}

// GetRedundantKva returns the RedundantKva field value if set, zero value otherwise.
func (o *PowerDataPayLoad) GetRedundantKva() float32 {
	if o == nil || IsNil(o.RedundantKva) {
		var ret float32
		return ret
	}
	return *o.RedundantKva
}

// GetRedundantKvaOk returns a tuple with the RedundantKva field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerDataPayLoad) GetRedundantKvaOk() (*float32, bool) {
	if o == nil || IsNil(o.RedundantKva) {
		return nil, false
	}
	return o.RedundantKva, true
}

// HasRedundantKva returns a boolean if a field has been set.
func (o *PowerDataPayLoad) HasRedundantKva() bool {
	if o != nil && !IsNil(o.RedundantKva) {
		return true
	}

	return false
}

// SetRedundantKva gets a reference to the given float32 and assigns it to the RedundantKva field.
func (o *PowerDataPayLoad) SetRedundantKva(v float32) {
	o.RedundantKva = &v
}

// GetSoldAmps returns the SoldAmps field value if set, zero value otherwise.
func (o *PowerDataPayLoad) GetSoldAmps() int32 {
	if o == nil || IsNil(o.SoldAmps) {
		var ret int32
		return ret
	}
	return *o.SoldAmps
}

// GetSoldAmpsOk returns a tuple with the SoldAmps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerDataPayLoad) GetSoldAmpsOk() (*int32, bool) {
	if o == nil || IsNil(o.SoldAmps) {
		return nil, false
	}
	return o.SoldAmps, true
}

// HasSoldAmps returns a boolean if a field has been set.
func (o *PowerDataPayLoad) HasSoldAmps() bool {
	if o != nil && !IsNil(o.SoldAmps) {
		return true
	}

	return false
}

// SetSoldAmps gets a reference to the given int32 and assigns it to the SoldAmps field.
func (o *PowerDataPayLoad) SetSoldAmps(v int32) {
	o.SoldAmps = &v
}

// GetSoldKva returns the SoldKva field value if set, zero value otherwise.
func (o *PowerDataPayLoad) GetSoldKva() float32 {
	if o == nil || IsNil(o.SoldKva) {
		var ret float32
		return ret
	}
	return *o.SoldKva
}

// GetSoldKvaOk returns a tuple with the SoldKva field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerDataPayLoad) GetSoldKvaOk() (*float32, bool) {
	if o == nil || IsNil(o.SoldKva) {
		return nil, false
	}
	return o.SoldKva, true
}

// HasSoldKva returns a boolean if a field has been set.
func (o *PowerDataPayLoad) HasSoldKva() bool {
	if o != nil && !IsNil(o.SoldKva) {
		return true
	}

	return false
}

// SetSoldKva gets a reference to the given float32 and assigns it to the SoldKva field.
func (o *PowerDataPayLoad) SetSoldKva(v float32) {
	o.SoldKva = &v
}

func (o PowerDataPayLoad) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PowerDataPayLoad) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountNo) {
		toSerialize["accountNo"] = o.AccountNo
	}
	if !IsNil(o.Amps) {
		toSerialize["amps"] = o.Amps
	}
	if !IsNil(o.CabinetRating) {
		toSerialize["cabinetRating"] = o.CabinetRating
	}
	if !IsNil(o.ComparisonData) {
		toSerialize["comparisonData"] = o.ComparisonData
	}
	if !IsNil(o.ContractualKva) {
		toSerialize["contractualKva"] = o.ContractualKva
	}
	if !IsNil(o.CustomerName) {
		toSerialize["customerName"] = o.CustomerName
	}
	if !IsNil(o.Ibx) {
		toSerialize["ibx"] = o.Ibx
	}
	if !IsNil(o.IsAlarm) {
		toSerialize["isAlarm"] = o.IsAlarm
	}
	if !IsNil(o.Kva) {
		toSerialize["kva"] = o.Kva
	}
	if !IsNil(o.Kw) {
		toSerialize["kw"] = o.Kw
	}
	if !IsNil(o.LastUpdatedTime) {
		toSerialize["lastUpdatedTime"] = o.LastUpdatedTime
	}
	if !IsNil(o.LevelType) {
		toSerialize["levelType"] = o.LevelType
	}
	if !IsNil(o.LevelValue) {
		toSerialize["levelValue"] = o.LevelValue
	}
	if !IsNil(o.PeakKvaLastSevenDays) {
		toSerialize["peakKvaLastSevenDays"] = o.PeakKvaLastSevenDays
	}
	if !IsNil(o.PeakKvaLastSevenDaysContractualKva) {
		toSerialize["peakKvaLastSevenDaysContractualKva"] = o.PeakKvaLastSevenDaysContractualKva
	}
	if !IsNil(o.PeakKvaLastSevenDaysPercentage) {
		toSerialize["peakKvaLastSevenDaysPercentage"] = o.PeakKvaLastSevenDaysPercentage
	}
	if !IsNil(o.PeakKvaLastSevenDaysTime) {
		toSerialize["peakKvaLastSevenDaysTime"] = o.PeakKvaLastSevenDaysTime
	}
	if !IsNil(o.PercentageKva) {
		toSerialize["percentageKva"] = o.PercentageKva
	}
	if !IsNil(o.PowerFactor) {
		toSerialize["powerFactor"] = o.PowerFactor
	}
	if !IsNil(o.PrimaryKva) {
		toSerialize["primaryKva"] = o.PrimaryKva
	}
	if !IsNil(o.ReadingTime) {
		toSerialize["readingTime"] = o.ReadingTime
	}
	if !IsNil(o.RedundantKva) {
		toSerialize["redundantKva"] = o.RedundantKva
	}
	if !IsNil(o.SoldAmps) {
		toSerialize["soldAmps"] = o.SoldAmps
	}
	if !IsNil(o.SoldKva) {
		toSerialize["soldKva"] = o.SoldKva
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PowerDataPayLoad) UnmarshalJSON(data []byte) (err error) {
	varPowerDataPayLoad := _PowerDataPayLoad{}

	err = json.Unmarshal(data, &varPowerDataPayLoad)

	if err != nil {
		return err
	}

	*o = PowerDataPayLoad(varPowerDataPayLoad)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "accountNo")
		delete(additionalProperties, "amps")
		delete(additionalProperties, "cabinetRating")
		delete(additionalProperties, "comparisonData")
		delete(additionalProperties, "contractualKva")
		delete(additionalProperties, "customerName")
		delete(additionalProperties, "ibx")
		delete(additionalProperties, "isAlarm")
		delete(additionalProperties, "kva")
		delete(additionalProperties, "kw")
		delete(additionalProperties, "lastUpdatedTime")
		delete(additionalProperties, "levelType")
		delete(additionalProperties, "levelValue")
		delete(additionalProperties, "peakKvaLastSevenDays")
		delete(additionalProperties, "peakKvaLastSevenDaysContractualKva")
		delete(additionalProperties, "peakKvaLastSevenDaysPercentage")
		delete(additionalProperties, "peakKvaLastSevenDaysTime")
		delete(additionalProperties, "percentageKva")
		delete(additionalProperties, "powerFactor")
		delete(additionalProperties, "primaryKva")
		delete(additionalProperties, "readingTime")
		delete(additionalProperties, "redundantKva")
		delete(additionalProperties, "soldAmps")
		delete(additionalProperties, "soldKva")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePowerDataPayLoad struct {
	value *PowerDataPayLoad
	isSet bool
}

func (v NullablePowerDataPayLoad) Get() *PowerDataPayLoad {
	return v.value
}

func (v *NullablePowerDataPayLoad) Set(val *PowerDataPayLoad) {
	v.value = val
	v.isSet = true
}

func (v NullablePowerDataPayLoad) IsSet() bool {
	return v.isSet
}

func (v *NullablePowerDataPayLoad) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePowerDataPayLoad(val *PowerDataPayLoad) *NullablePowerDataPayLoad {
	return &NullablePowerDataPayLoad{value: val, isSet: true}
}

func (v NullablePowerDataPayLoad) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePowerDataPayLoad) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


