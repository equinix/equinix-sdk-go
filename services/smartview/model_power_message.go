/*
Smart View Environmental API

Empower yourself with Environmental APIs. The API makes it possible to fetch current environmental data including humidity and temperature for a single sensor (identified by IBX code and sensor ID) or for all the sensors within an IBX (identified by IBX code) in a paginated way. When fetching all sensor readings you can apply additional sort criteria.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
	"fmt"
)

// checks if the PowerMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PowerMessage{}

// PowerMessage Power messages provide the latest power usage data at the circuit-level.
type PowerMessage struct {
	AccountNumber string `json:"accountNumber"`
	Ibx []string `json:"ibx"`
	AdditionalProperties map[string]interface{}
}

type _PowerMessage PowerMessage

// NewPowerMessage instantiates a new PowerMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPowerMessage(accountNumber string, ibx []string) *PowerMessage {
	this := PowerMessage{}
	this.AccountNumber = accountNumber
	this.Ibx = ibx
	return &this
}

// NewPowerMessageWithDefaults instantiates a new PowerMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPowerMessageWithDefaults() *PowerMessage {
	this := PowerMessage{}
	return &this
}

// GetAccountNumber returns the AccountNumber field value
func (o *PowerMessage) GetAccountNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountNumber
}

// GetAccountNumberOk returns a tuple with the AccountNumber field value
// and a boolean to check if the value has been set.
func (o *PowerMessage) GetAccountNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountNumber, true
}

// SetAccountNumber sets field value
func (o *PowerMessage) SetAccountNumber(v string) {
	o.AccountNumber = v
}

// GetIbx returns the Ibx field value
func (o *PowerMessage) GetIbx() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Ibx
}

// GetIbxOk returns a tuple with the Ibx field value
// and a boolean to check if the value has been set.
func (o *PowerMessage) GetIbxOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ibx, true
}

// SetIbx sets field value
func (o *PowerMessage) SetIbx(v []string) {
	o.Ibx = v
}

func (o PowerMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PowerMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["accountNumber"] = o.AccountNumber
	toSerialize["ibx"] = o.Ibx

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PowerMessage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"accountNumber",
		"ibx",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPowerMessage := _PowerMessage{}

	err = json.Unmarshal(data, &varPowerMessage)

	if err != nil {
		return err
	}

	*o = PowerMessage(varPowerMessage)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "accountNumber")
		delete(additionalProperties, "ibx")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePowerMessage struct {
	value *PowerMessage
	isSet bool
}

func (v NullablePowerMessage) Get() *PowerMessage {
	return v.value
}

func (v *NullablePowerMessage) Set(val *PowerMessage) {
	v.value = val
	v.isSet = true
}

func (v NullablePowerMessage) IsSet() bool {
	return v.isSet
}

func (v *NullablePowerMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePowerMessage(val *PowerMessage) *NullablePowerMessage {
	return &NullablePowerMessage{value: val, isSet: true}
}

func (v NullablePowerMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePowerMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


