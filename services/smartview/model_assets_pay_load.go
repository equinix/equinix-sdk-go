/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
)

// checks if the AssetsPayLoad type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssetsPayLoad{}

// AssetsPayLoad struct for AssetsPayLoad
type AssetsPayLoad struct {
	AssetsList []AssetsArray `json:"assetsList,omitempty"`
	TotalCount *int32 `json:"totalCount,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AssetsPayLoad AssetsPayLoad

// NewAssetsPayLoad instantiates a new AssetsPayLoad object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssetsPayLoad() *AssetsPayLoad {
	this := AssetsPayLoad{}
	return &this
}

// NewAssetsPayLoadWithDefaults instantiates a new AssetsPayLoad object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssetsPayLoadWithDefaults() *AssetsPayLoad {
	this := AssetsPayLoad{}
	return &this
}

// GetAssetsList returns the AssetsList field value if set, zero value otherwise.
func (o *AssetsPayLoad) GetAssetsList() []AssetsArray {
	if o == nil || IsNil(o.AssetsList) {
		var ret []AssetsArray
		return ret
	}
	return o.AssetsList
}

// GetAssetsListOk returns a tuple with the AssetsList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetsPayLoad) GetAssetsListOk() ([]AssetsArray, bool) {
	if o == nil || IsNil(o.AssetsList) {
		return nil, false
	}
	return o.AssetsList, true
}

// HasAssetsList returns a boolean if a field has been set.
func (o *AssetsPayLoad) HasAssetsList() bool {
	if o != nil && !IsNil(o.AssetsList) {
		return true
	}

	return false
}

// SetAssetsList gets a reference to the given []AssetsArray and assigns it to the AssetsList field.
func (o *AssetsPayLoad) SetAssetsList(v []AssetsArray) {
	o.AssetsList = v
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise.
func (o *AssetsPayLoad) GetTotalCount() int32 {
	if o == nil || IsNil(o.TotalCount) {
		var ret int32
		return ret
	}
	return *o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetsPayLoad) GetTotalCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalCount) {
		return nil, false
	}
	return o.TotalCount, true
}

// HasTotalCount returns a boolean if a field has been set.
func (o *AssetsPayLoad) HasTotalCount() bool {
	if o != nil && !IsNil(o.TotalCount) {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given int32 and assigns it to the TotalCount field.
func (o *AssetsPayLoad) SetTotalCount(v int32) {
	o.TotalCount = &v
}

func (o AssetsPayLoad) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssetsPayLoad) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AssetsList) {
		toSerialize["assetsList"] = o.AssetsList
	}
	if !IsNil(o.TotalCount) {
		toSerialize["totalCount"] = o.TotalCount
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AssetsPayLoad) UnmarshalJSON(data []byte) (err error) {
	varAssetsPayLoad := _AssetsPayLoad{}

	err = json.Unmarshal(data, &varAssetsPayLoad)

	if err != nil {
		return err
	}

	*o = AssetsPayLoad(varAssetsPayLoad)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "assetsList")
		delete(additionalProperties, "totalCount")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAssetsPayLoad struct {
	value *AssetsPayLoad
	isSet bool
}

func (v NullableAssetsPayLoad) Get() *AssetsPayLoad {
	return v.value
}

func (v *NullableAssetsPayLoad) Set(val *AssetsPayLoad) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetsPayLoad) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetsPayLoad) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetsPayLoad(val *AssetsPayLoad) *NullableAssetsPayLoad {
	return &NullableAssetsPayLoad{value: val, isSet: true}
}

func (v NullableAssetsPayLoad) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetsPayLoad) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


