/*
Smart View Environmental API

Empower yourself with Environmental APIs. The API makes it possible to fetch current environmental data including humidity and temperature for a single sensor (identified by IBX code and sensor ID) or for all the sensors within an IBX (identified by IBX code) in a paginated way. When fetching all sensor readings you can apply additional sort criteria.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
	"fmt"
)

// Mixin1IntervalParameter the model 'Mixin1IntervalParameter'
type Mixin1IntervalParameter string

// List of Mixin1_interval_parameter
const (
	MIXIN1INTERVALPARAMETER_READING Mixin1IntervalParameter = "reading"
	MIXIN1INTERVALPARAMETER__1H Mixin1IntervalParameter = "1h"
	MIXIN1INTERVALPARAMETER__1D Mixin1IntervalParameter = "1d"
)

// All allowed values of Mixin1IntervalParameter enum
var AllowedMixin1IntervalParameterEnumValues = []Mixin1IntervalParameter{
	"reading",
	"1h",
	"1d",
}

func (v *Mixin1IntervalParameter) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Mixin1IntervalParameter(value)
	for _, existing := range AllowedMixin1IntervalParameterEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Mixin1IntervalParameter", value)
}

// NewMixin1IntervalParameterFromValue returns a pointer to a valid Mixin1IntervalParameter
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMixin1IntervalParameterFromValue(v string) (*Mixin1IntervalParameter, error) {
	ev := Mixin1IntervalParameter(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Mixin1IntervalParameter: valid values are %v", v, AllowedMixin1IntervalParameterEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Mixin1IntervalParameter) IsValid() bool {
	for _, existing := range AllowedMixin1IntervalParameterEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Mixin1_interval_parameter value
func (v Mixin1IntervalParameter) Ptr() *Mixin1IntervalParameter {
	return &v
}

type NullableMixin1IntervalParameter struct {
	value *Mixin1IntervalParameter
	isSet bool
}

func (v NullableMixin1IntervalParameter) Get() *Mixin1IntervalParameter {
	return v.value
}

func (v *NullableMixin1IntervalParameter) Set(val *Mixin1IntervalParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableMixin1IntervalParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableMixin1IntervalParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMixin1IntervalParameter(val *Mixin1IntervalParameter) *NullableMixin1IntervalParameter {
	return &NullableMixin1IntervalParameter{value: val, isSet: true}
}

func (v NullableMixin1IntervalParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMixin1IntervalParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

