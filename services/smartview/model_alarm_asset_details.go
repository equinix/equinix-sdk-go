/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
)

// checks if the AlarmAssetDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlarmAssetDetails{}

// AlarmAssetDetails asset details
type AlarmAssetDetails struct {
	// asset classification
	Classification *string `json:"classification,omitempty"`
	// asset id
	Id *string `json:"id,omitempty"`
	// asset type
	Type *string `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AlarmAssetDetails AlarmAssetDetails

// NewAlarmAssetDetails instantiates a new AlarmAssetDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlarmAssetDetails() *AlarmAssetDetails {
	this := AlarmAssetDetails{}
	return &this
}

// NewAlarmAssetDetailsWithDefaults instantiates a new AlarmAssetDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlarmAssetDetailsWithDefaults() *AlarmAssetDetails {
	this := AlarmAssetDetails{}
	return &this
}

// GetClassification returns the Classification field value if set, zero value otherwise.
func (o *AlarmAssetDetails) GetClassification() string {
	if o == nil || IsNil(o.Classification) {
		var ret string
		return ret
	}
	return *o.Classification
}

// GetClassificationOk returns a tuple with the Classification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlarmAssetDetails) GetClassificationOk() (*string, bool) {
	if o == nil || IsNil(o.Classification) {
		return nil, false
	}
	return o.Classification, true
}

// HasClassification returns a boolean if a field has been set.
func (o *AlarmAssetDetails) HasClassification() bool {
	if o != nil && !IsNil(o.Classification) {
		return true
	}

	return false
}

// SetClassification gets a reference to the given string and assigns it to the Classification field.
func (o *AlarmAssetDetails) SetClassification(v string) {
	o.Classification = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AlarmAssetDetails) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlarmAssetDetails) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AlarmAssetDetails) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AlarmAssetDetails) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AlarmAssetDetails) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlarmAssetDetails) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AlarmAssetDetails) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AlarmAssetDetails) SetType(v string) {
	o.Type = &v
}

func (o AlarmAssetDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlarmAssetDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Classification) {
		toSerialize["classification"] = o.Classification
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AlarmAssetDetails) UnmarshalJSON(data []byte) (err error) {
	varAlarmAssetDetails := _AlarmAssetDetails{}

	err = json.Unmarshal(data, &varAlarmAssetDetails)

	if err != nil {
		return err
	}

	*o = AlarmAssetDetails(varAlarmAssetDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "classification")
		delete(additionalProperties, "id")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAlarmAssetDetails struct {
	value *AlarmAssetDetails
	isSet bool
}

func (v NullableAlarmAssetDetails) Get() *AlarmAssetDetails {
	return v.value
}

func (v *NullableAlarmAssetDetails) Set(val *AlarmAssetDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableAlarmAssetDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableAlarmAssetDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlarmAssetDetails(val *AlarmAssetDetails) *NullableAlarmAssetDetails {
	return &NullableAlarmAssetDetails{value: val, isSet: true}
}

func (v NullableAlarmAssetDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlarmAssetDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


