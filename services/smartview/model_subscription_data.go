/*
Smart View Environmental API

Empower yourself with Environmental APIs. The API makes it possible to fetch current environmental data including humidity and temperature for a single sensor (identified by IBX code and sensor ID) or for all the sensors within an IBX (identified by IBX code) in a paginated way. When fetching all sensor readings you can apply additional sort criteria.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
)

// checks if the SubscriptionData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionData{}

// SubscriptionData struct for SubscriptionData
type SubscriptionData struct {
	// alarm message data
	AlarmMessageData []AlarmMessageData `json:"alarmMessageData,omitempty"`
	// alert message data
	AlertMessageData []AlertMessageData `json:"alertMessageData,omitempty"`
	// environment message data
	EnvironmentMessageData []EnvironmentMessageData `json:"environmentMessageData,omitempty"`
	// metered-power message data
	MeteredPowerMessageData []MeteredPowerMessageData `json:"meteredPowerMessageData,omitempty"`
	Pagination *Pagination `json:"pagination,omitempty"`
	// power message data
	PowerMessageData []PowerMessageData `json:"powerMessageData,omitempty"`
	// tag-point message data
	TagPointMessageData []TagPointMessageData `json:"tagPointMessageData,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SubscriptionData SubscriptionData

// NewSubscriptionData instantiates a new SubscriptionData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionData() *SubscriptionData {
	this := SubscriptionData{}
	return &this
}

// NewSubscriptionDataWithDefaults instantiates a new SubscriptionData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionDataWithDefaults() *SubscriptionData {
	this := SubscriptionData{}
	return &this
}

// GetAlarmMessageData returns the AlarmMessageData field value if set, zero value otherwise.
func (o *SubscriptionData) GetAlarmMessageData() []AlarmMessageData {
	if o == nil || IsNil(o.AlarmMessageData) {
		var ret []AlarmMessageData
		return ret
	}
	return o.AlarmMessageData
}

// GetAlarmMessageDataOk returns a tuple with the AlarmMessageData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionData) GetAlarmMessageDataOk() ([]AlarmMessageData, bool) {
	if o == nil || IsNil(o.AlarmMessageData) {
		return nil, false
	}
	return o.AlarmMessageData, true
}

// HasAlarmMessageData returns a boolean if a field has been set.
func (o *SubscriptionData) HasAlarmMessageData() bool {
	if o != nil && !IsNil(o.AlarmMessageData) {
		return true
	}

	return false
}

// SetAlarmMessageData gets a reference to the given []AlarmMessageData and assigns it to the AlarmMessageData field.
func (o *SubscriptionData) SetAlarmMessageData(v []AlarmMessageData) {
	o.AlarmMessageData = v
}

// GetAlertMessageData returns the AlertMessageData field value if set, zero value otherwise.
func (o *SubscriptionData) GetAlertMessageData() []AlertMessageData {
	if o == nil || IsNil(o.AlertMessageData) {
		var ret []AlertMessageData
		return ret
	}
	return o.AlertMessageData
}

// GetAlertMessageDataOk returns a tuple with the AlertMessageData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionData) GetAlertMessageDataOk() ([]AlertMessageData, bool) {
	if o == nil || IsNil(o.AlertMessageData) {
		return nil, false
	}
	return o.AlertMessageData, true
}

// HasAlertMessageData returns a boolean if a field has been set.
func (o *SubscriptionData) HasAlertMessageData() bool {
	if o != nil && !IsNil(o.AlertMessageData) {
		return true
	}

	return false
}

// SetAlertMessageData gets a reference to the given []AlertMessageData and assigns it to the AlertMessageData field.
func (o *SubscriptionData) SetAlertMessageData(v []AlertMessageData) {
	o.AlertMessageData = v
}

// GetEnvironmentMessageData returns the EnvironmentMessageData field value if set, zero value otherwise.
func (o *SubscriptionData) GetEnvironmentMessageData() []EnvironmentMessageData {
	if o == nil || IsNil(o.EnvironmentMessageData) {
		var ret []EnvironmentMessageData
		return ret
	}
	return o.EnvironmentMessageData
}

// GetEnvironmentMessageDataOk returns a tuple with the EnvironmentMessageData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionData) GetEnvironmentMessageDataOk() ([]EnvironmentMessageData, bool) {
	if o == nil || IsNil(o.EnvironmentMessageData) {
		return nil, false
	}
	return o.EnvironmentMessageData, true
}

// HasEnvironmentMessageData returns a boolean if a field has been set.
func (o *SubscriptionData) HasEnvironmentMessageData() bool {
	if o != nil && !IsNil(o.EnvironmentMessageData) {
		return true
	}

	return false
}

// SetEnvironmentMessageData gets a reference to the given []EnvironmentMessageData and assigns it to the EnvironmentMessageData field.
func (o *SubscriptionData) SetEnvironmentMessageData(v []EnvironmentMessageData) {
	o.EnvironmentMessageData = v
}

// GetMeteredPowerMessageData returns the MeteredPowerMessageData field value if set, zero value otherwise.
func (o *SubscriptionData) GetMeteredPowerMessageData() []MeteredPowerMessageData {
	if o == nil || IsNil(o.MeteredPowerMessageData) {
		var ret []MeteredPowerMessageData
		return ret
	}
	return o.MeteredPowerMessageData
}

// GetMeteredPowerMessageDataOk returns a tuple with the MeteredPowerMessageData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionData) GetMeteredPowerMessageDataOk() ([]MeteredPowerMessageData, bool) {
	if o == nil || IsNil(o.MeteredPowerMessageData) {
		return nil, false
	}
	return o.MeteredPowerMessageData, true
}

// HasMeteredPowerMessageData returns a boolean if a field has been set.
func (o *SubscriptionData) HasMeteredPowerMessageData() bool {
	if o != nil && !IsNil(o.MeteredPowerMessageData) {
		return true
	}

	return false
}

// SetMeteredPowerMessageData gets a reference to the given []MeteredPowerMessageData and assigns it to the MeteredPowerMessageData field.
func (o *SubscriptionData) SetMeteredPowerMessageData(v []MeteredPowerMessageData) {
	o.MeteredPowerMessageData = v
}

// GetPagination returns the Pagination field value if set, zero value otherwise.
func (o *SubscriptionData) GetPagination() Pagination {
	if o == nil || IsNil(o.Pagination) {
		var ret Pagination
		return ret
	}
	return *o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionData) GetPaginationOk() (*Pagination, bool) {
	if o == nil || IsNil(o.Pagination) {
		return nil, false
	}
	return o.Pagination, true
}

// HasPagination returns a boolean if a field has been set.
func (o *SubscriptionData) HasPagination() bool {
	if o != nil && !IsNil(o.Pagination) {
		return true
	}

	return false
}

// SetPagination gets a reference to the given Pagination and assigns it to the Pagination field.
func (o *SubscriptionData) SetPagination(v Pagination) {
	o.Pagination = &v
}

// GetPowerMessageData returns the PowerMessageData field value if set, zero value otherwise.
func (o *SubscriptionData) GetPowerMessageData() []PowerMessageData {
	if o == nil || IsNil(o.PowerMessageData) {
		var ret []PowerMessageData
		return ret
	}
	return o.PowerMessageData
}

// GetPowerMessageDataOk returns a tuple with the PowerMessageData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionData) GetPowerMessageDataOk() ([]PowerMessageData, bool) {
	if o == nil || IsNil(o.PowerMessageData) {
		return nil, false
	}
	return o.PowerMessageData, true
}

// HasPowerMessageData returns a boolean if a field has been set.
func (o *SubscriptionData) HasPowerMessageData() bool {
	if o != nil && !IsNil(o.PowerMessageData) {
		return true
	}

	return false
}

// SetPowerMessageData gets a reference to the given []PowerMessageData and assigns it to the PowerMessageData field.
func (o *SubscriptionData) SetPowerMessageData(v []PowerMessageData) {
	o.PowerMessageData = v
}

// GetTagPointMessageData returns the TagPointMessageData field value if set, zero value otherwise.
func (o *SubscriptionData) GetTagPointMessageData() []TagPointMessageData {
	if o == nil || IsNil(o.TagPointMessageData) {
		var ret []TagPointMessageData
		return ret
	}
	return o.TagPointMessageData
}

// GetTagPointMessageDataOk returns a tuple with the TagPointMessageData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionData) GetTagPointMessageDataOk() ([]TagPointMessageData, bool) {
	if o == nil || IsNil(o.TagPointMessageData) {
		return nil, false
	}
	return o.TagPointMessageData, true
}

// HasTagPointMessageData returns a boolean if a field has been set.
func (o *SubscriptionData) HasTagPointMessageData() bool {
	if o != nil && !IsNil(o.TagPointMessageData) {
		return true
	}

	return false
}

// SetTagPointMessageData gets a reference to the given []TagPointMessageData and assigns it to the TagPointMessageData field.
func (o *SubscriptionData) SetTagPointMessageData(v []TagPointMessageData) {
	o.TagPointMessageData = v
}

func (o SubscriptionData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AlarmMessageData) {
		toSerialize["alarmMessageData"] = o.AlarmMessageData
	}
	if !IsNil(o.AlertMessageData) {
		toSerialize["alertMessageData"] = o.AlertMessageData
	}
	if !IsNil(o.EnvironmentMessageData) {
		toSerialize["environmentMessageData"] = o.EnvironmentMessageData
	}
	if !IsNil(o.MeteredPowerMessageData) {
		toSerialize["meteredPowerMessageData"] = o.MeteredPowerMessageData
	}
	if !IsNil(o.Pagination) {
		toSerialize["pagination"] = o.Pagination
	}
	if !IsNil(o.PowerMessageData) {
		toSerialize["powerMessageData"] = o.PowerMessageData
	}
	if !IsNil(o.TagPointMessageData) {
		toSerialize["tagPointMessageData"] = o.TagPointMessageData
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SubscriptionData) UnmarshalJSON(data []byte) (err error) {
	varSubscriptionData := _SubscriptionData{}

	err = json.Unmarshal(data, &varSubscriptionData)

	if err != nil {
		return err
	}

	*o = SubscriptionData(varSubscriptionData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "alarmMessageData")
		delete(additionalProperties, "alertMessageData")
		delete(additionalProperties, "environmentMessageData")
		delete(additionalProperties, "meteredPowerMessageData")
		delete(additionalProperties, "pagination")
		delete(additionalProperties, "powerMessageData")
		delete(additionalProperties, "tagPointMessageData")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSubscriptionData struct {
	value *SubscriptionData
	isSet bool
}

func (v NullableSubscriptionData) Get() *SubscriptionData {
	return v.value
}

func (v *NullableSubscriptionData) Set(val *SubscriptionData) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionData) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionData(val *SubscriptionData) *NullableSubscriptionData {
	return &NullableSubscriptionData{value: val, isSet: true}
}

func (v NullableSubscriptionData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


