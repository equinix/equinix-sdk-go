/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
)

// checks if the AssetDetailResponsePayLoad type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssetDetailResponsePayLoad{}

// AssetDetailResponsePayLoad struct for AssetDetailResponsePayLoad
type AssetDetailResponsePayLoad struct {
	AssetDetails []AssetDetails `json:"assetDetails,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AssetDetailResponsePayLoad AssetDetailResponsePayLoad

// NewAssetDetailResponsePayLoad instantiates a new AssetDetailResponsePayLoad object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssetDetailResponsePayLoad() *AssetDetailResponsePayLoad {
	this := AssetDetailResponsePayLoad{}
	return &this
}

// NewAssetDetailResponsePayLoadWithDefaults instantiates a new AssetDetailResponsePayLoad object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssetDetailResponsePayLoadWithDefaults() *AssetDetailResponsePayLoad {
	this := AssetDetailResponsePayLoad{}
	return &this
}

// GetAssetDetails returns the AssetDetails field value if set, zero value otherwise.
func (o *AssetDetailResponsePayLoad) GetAssetDetails() []AssetDetails {
	if o == nil || IsNil(o.AssetDetails) {
		var ret []AssetDetails
		return ret
	}
	return o.AssetDetails
}

// GetAssetDetailsOk returns a tuple with the AssetDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDetailResponsePayLoad) GetAssetDetailsOk() ([]AssetDetails, bool) {
	if o == nil || IsNil(o.AssetDetails) {
		return nil, false
	}
	return o.AssetDetails, true
}

// HasAssetDetails returns a boolean if a field has been set.
func (o *AssetDetailResponsePayLoad) HasAssetDetails() bool {
	if o != nil && !IsNil(o.AssetDetails) {
		return true
	}

	return false
}

// SetAssetDetails gets a reference to the given []AssetDetails and assigns it to the AssetDetails field.
func (o *AssetDetailResponsePayLoad) SetAssetDetails(v []AssetDetails) {
	o.AssetDetails = v
}

func (o AssetDetailResponsePayLoad) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssetDetailResponsePayLoad) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AssetDetails) {
		toSerialize["assetDetails"] = o.AssetDetails
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AssetDetailResponsePayLoad) UnmarshalJSON(data []byte) (err error) {
	varAssetDetailResponsePayLoad := _AssetDetailResponsePayLoad{}

	err = json.Unmarshal(data, &varAssetDetailResponsePayLoad)

	if err != nil {
		return err
	}

	*o = AssetDetailResponsePayLoad(varAssetDetailResponsePayLoad)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "assetDetails")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAssetDetailResponsePayLoad struct {
	value *AssetDetailResponsePayLoad
	isSet bool
}

func (v NullableAssetDetailResponsePayLoad) Get() *AssetDetailResponsePayLoad {
	return v.value
}

func (v *NullableAssetDetailResponsePayLoad) Set(val *AssetDetailResponsePayLoad) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetDetailResponsePayLoad) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetDetailResponsePayLoad) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetDetailResponsePayLoad(val *AssetDetailResponsePayLoad) *NullableAssetDetailResponsePayLoad {
	return &NullableAssetDetailResponsePayLoad{value: val, isSet: true}
}

func (v NullableAssetDetailResponsePayLoad) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetDetailResponsePayLoad) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


