/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
	"fmt"
)

// checks if the TagPoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TagPoint{}

// TagPoint message data
type TagPoint struct {
	// data quality: Good | Bad | Uncertain
	DataQuality string `json:"dataQuality"`
	// ibx
	Ibx string `json:"ibx"`
	Reading TagPointValueWithUnit `json:"reading"`
	// message reading time
	ReadingTime string `json:"readingTime"`
	// unique message id
	StreamId string `json:"streamId"`
	Tag TagDetails `json:"tag"`
	AdditionalProperties map[string]interface{}
}

type _TagPoint TagPoint

// NewTagPoint instantiates a new TagPoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagPoint(dataQuality string, ibx string, reading TagPointValueWithUnit, readingTime string, streamId string, tag TagDetails) *TagPoint {
	this := TagPoint{}
	this.DataQuality = dataQuality
	this.Ibx = ibx
	this.Reading = reading
	this.ReadingTime = readingTime
	this.StreamId = streamId
	this.Tag = tag
	return &this
}

// NewTagPointWithDefaults instantiates a new TagPoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagPointWithDefaults() *TagPoint {
	this := TagPoint{}
	return &this
}

// GetDataQuality returns the DataQuality field value
func (o *TagPoint) GetDataQuality() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DataQuality
}

// GetDataQualityOk returns a tuple with the DataQuality field value
// and a boolean to check if the value has been set.
func (o *TagPoint) GetDataQualityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataQuality, true
}

// SetDataQuality sets field value
func (o *TagPoint) SetDataQuality(v string) {
	o.DataQuality = v
}

// GetIbx returns the Ibx field value
func (o *TagPoint) GetIbx() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ibx
}

// GetIbxOk returns a tuple with the Ibx field value
// and a boolean to check if the value has been set.
func (o *TagPoint) GetIbxOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ibx, true
}

// SetIbx sets field value
func (o *TagPoint) SetIbx(v string) {
	o.Ibx = v
}

// GetReading returns the Reading field value
func (o *TagPoint) GetReading() TagPointValueWithUnit {
	if o == nil {
		var ret TagPointValueWithUnit
		return ret
	}

	return o.Reading
}

// GetReadingOk returns a tuple with the Reading field value
// and a boolean to check if the value has been set.
func (o *TagPoint) GetReadingOk() (*TagPointValueWithUnit, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reading, true
}

// SetReading sets field value
func (o *TagPoint) SetReading(v TagPointValueWithUnit) {
	o.Reading = v
}

// GetReadingTime returns the ReadingTime field value
func (o *TagPoint) GetReadingTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReadingTime
}

// GetReadingTimeOk returns a tuple with the ReadingTime field value
// and a boolean to check if the value has been set.
func (o *TagPoint) GetReadingTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReadingTime, true
}

// SetReadingTime sets field value
func (o *TagPoint) SetReadingTime(v string) {
	o.ReadingTime = v
}

// GetStreamId returns the StreamId field value
func (o *TagPoint) GetStreamId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StreamId
}

// GetStreamIdOk returns a tuple with the StreamId field value
// and a boolean to check if the value has been set.
func (o *TagPoint) GetStreamIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StreamId, true
}

// SetStreamId sets field value
func (o *TagPoint) SetStreamId(v string) {
	o.StreamId = v
}

// GetTag returns the Tag field value
func (o *TagPoint) GetTag() TagDetails {
	if o == nil {
		var ret TagDetails
		return ret
	}

	return o.Tag
}

// GetTagOk returns a tuple with the Tag field value
// and a boolean to check if the value has been set.
func (o *TagPoint) GetTagOk() (*TagDetails, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tag, true
}

// SetTag sets field value
func (o *TagPoint) SetTag(v TagDetails) {
	o.Tag = v
}

func (o TagPoint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TagPoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dataQuality"] = o.DataQuality
	toSerialize["ibx"] = o.Ibx
	toSerialize["reading"] = o.Reading
	toSerialize["readingTime"] = o.ReadingTime
	toSerialize["streamId"] = o.StreamId
	toSerialize["tag"] = o.Tag

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TagPoint) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dataQuality",
		"ibx",
		"reading",
		"readingTime",
		"streamId",
		"tag",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTagPoint := _TagPoint{}

	err = json.Unmarshal(data, &varTagPoint)

	if err != nil {
		return err
	}

	*o = TagPoint(varTagPoint)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "dataQuality")
		delete(additionalProperties, "ibx")
		delete(additionalProperties, "reading")
		delete(additionalProperties, "readingTime")
		delete(additionalProperties, "streamId")
		delete(additionalProperties, "tag")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTagPoint struct {
	value *TagPoint
	isSet bool
}

func (v NullableTagPoint) Get() *TagPoint {
	return v.value
}

func (v *NullableTagPoint) Set(val *TagPoint) {
	v.value = val
	v.isSet = true
}

func (v NullableTagPoint) IsSet() bool {
	return v.isSet
}

func (v *NullableTagPoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagPoint(val *TagPoint) *NullableTagPoint {
	return &NullableTagPoint{value: val, isSet: true}
}

func (v NullableTagPoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagPoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


