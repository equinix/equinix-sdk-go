/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
	"fmt"
)

// SubscriptionResponseStatus the model 'SubscriptionResponseStatus'
type SubscriptionResponseStatus string

// List of SubscriptionResponse_status
const (
	SUBSCRIPTIONRESPONSESTATUS_PENDING SubscriptionResponseStatus = "PENDING"
	SUBSCRIPTIONRESPONSESTATUS_ACTIVE SubscriptionResponseStatus = "ACTIVE"
	SUBSCRIPTIONRESPONSESTATUS_FAILED SubscriptionResponseStatus = "FAILED"
	SUBSCRIPTIONRESPONSESTATUS_DELETE_IN_PROGRESS SubscriptionResponseStatus = "DELETE_IN_PROGRESS"
	SUBSCRIPTIONRESPONSESTATUS_DELETED SubscriptionResponseStatus = "DELETED"
)

// All allowed values of SubscriptionResponseStatus enum
var AllowedSubscriptionResponseStatusEnumValues = []SubscriptionResponseStatus{
	"PENDING",
	"ACTIVE",
	"FAILED",
	"DELETE_IN_PROGRESS",
	"DELETED",
}

func (v *SubscriptionResponseStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SubscriptionResponseStatus(value)
	for _, existing := range AllowedSubscriptionResponseStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SubscriptionResponseStatus", value)
}

// NewSubscriptionResponseStatusFromValue returns a pointer to a valid SubscriptionResponseStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSubscriptionResponseStatusFromValue(v string) (*SubscriptionResponseStatus, error) {
	ev := SubscriptionResponseStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SubscriptionResponseStatus: valid values are %v", v, AllowedSubscriptionResponseStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SubscriptionResponseStatus) IsValid() bool {
	for _, existing := range AllowedSubscriptionResponseStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SubscriptionResponse_status value
func (v SubscriptionResponseStatus) Ptr() *SubscriptionResponseStatus {
	return &v
}

type NullableSubscriptionResponseStatus struct {
	value *SubscriptionResponseStatus
	isSet bool
}

func (v NullableSubscriptionResponseStatus) Get() *SubscriptionResponseStatus {
	return v.value
}

func (v *NullableSubscriptionResponseStatus) Set(val *SubscriptionResponseStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionResponseStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionResponseStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionResponseStatus(val *SubscriptionResponseStatus) *NullableSubscriptionResponseStatus {
	return &NullableSubscriptionResponseStatus{value: val, isSet: true}
}

func (v NullableSubscriptionResponseStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionResponseStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

