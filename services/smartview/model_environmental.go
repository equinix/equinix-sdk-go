/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
	"fmt"
)

// checks if the Environmental type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Environmental{}

// Environmental Environmental messages provide the latest temperature and humidity readings at the IBX and zone levels.
type Environmental struct {
	AccountNumber string `json:"accountNumber"`
	Ibx []string `json:"ibx"`
	// This field is not required. If not provided in the request, subscription will include all environmental messages at the IBX, zone, and cage levels. If granularity is specified, at least one level must be provided.
	Level []EnvironmentalLevelInner `json:"level,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Environmental Environmental

// NewEnvironmental instantiates a new Environmental object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmental(accountNumber string, ibx []string) *Environmental {
	this := Environmental{}
	this.AccountNumber = accountNumber
	this.Ibx = ibx
	return &this
}

// NewEnvironmentalWithDefaults instantiates a new Environmental object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentalWithDefaults() *Environmental {
	this := Environmental{}
	return &this
}

// GetAccountNumber returns the AccountNumber field value
func (o *Environmental) GetAccountNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountNumber
}

// GetAccountNumberOk returns a tuple with the AccountNumber field value
// and a boolean to check if the value has been set.
func (o *Environmental) GetAccountNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountNumber, true
}

// SetAccountNumber sets field value
func (o *Environmental) SetAccountNumber(v string) {
	o.AccountNumber = v
}

// GetIbx returns the Ibx field value
func (o *Environmental) GetIbx() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Ibx
}

// GetIbxOk returns a tuple with the Ibx field value
// and a boolean to check if the value has been set.
func (o *Environmental) GetIbxOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ibx, true
}

// SetIbx sets field value
func (o *Environmental) SetIbx(v []string) {
	o.Ibx = v
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *Environmental) GetLevel() []EnvironmentalLevelInner {
	if o == nil || IsNil(o.Level) {
		var ret []EnvironmentalLevelInner
		return ret
	}
	return o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Environmental) GetLevelOk() ([]EnvironmentalLevelInner, bool) {
	if o == nil || IsNil(o.Level) {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *Environmental) HasLevel() bool {
	if o != nil && !IsNil(o.Level) {
		return true
	}

	return false
}

// SetLevel gets a reference to the given []EnvironmentalLevelInner and assigns it to the Level field.
func (o *Environmental) SetLevel(v []EnvironmentalLevelInner) {
	o.Level = v
}

func (o Environmental) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Environmental) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["accountNumber"] = o.AccountNumber
	toSerialize["ibx"] = o.Ibx
	if !IsNil(o.Level) {
		toSerialize["level"] = o.Level
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Environmental) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"accountNumber",
		"ibx",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEnvironmental := _Environmental{}

	err = json.Unmarshal(data, &varEnvironmental)

	if err != nil {
		return err
	}

	*o = Environmental(varEnvironmental)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "accountNumber")
		delete(additionalProperties, "ibx")
		delete(additionalProperties, "level")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEnvironmental struct {
	value *Environmental
	isSet bool
}

func (v NullableEnvironmental) Get() *Environmental {
	return v.value
}

func (v *NullableEnvironmental) Set(val *Environmental) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmental) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmental) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmental(val *Environmental) *NullableEnvironmental {
	return &NullableEnvironmental{value: val, isSet: true}
}

func (v NullableEnvironmental) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmental) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


