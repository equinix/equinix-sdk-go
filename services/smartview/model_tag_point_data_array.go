/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
)

// checks if the TagPointDataArray type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TagPointDataArray{}

// TagPointDataArray Tag Point is a property of the Asset it is linked to. 
type TagPointDataArray struct {
	// Generic label for the tag point    
	AlarmStatus *string `json:"alarmStatus,omitempty"`
	// date time when the tag point value was read from the device. 
	ReadingTime *string `json:"readingTime,omitempty"`
	// Generic label for the tag point 
	TagDisplayName *string `json:"tagDisplayName,omitempty"`
	// ID for the tagPoint - Unique Identifier for the Tag Point 
	TagId *string `json:"tagId,omitempty"`
	// Unit of measure for the data value for the tag point 
	Uom *string `json:"uom,omitempty"`
	// Current data value for the tag point 
	Value *string `json:"value,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TagPointDataArray TagPointDataArray

// NewTagPointDataArray instantiates a new TagPointDataArray object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagPointDataArray() *TagPointDataArray {
	this := TagPointDataArray{}
	return &this
}

// NewTagPointDataArrayWithDefaults instantiates a new TagPointDataArray object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagPointDataArrayWithDefaults() *TagPointDataArray {
	this := TagPointDataArray{}
	return &this
}

// GetAlarmStatus returns the AlarmStatus field value if set, zero value otherwise.
func (o *TagPointDataArray) GetAlarmStatus() string {
	if o == nil || IsNil(o.AlarmStatus) {
		var ret string
		return ret
	}
	return *o.AlarmStatus
}

// GetAlarmStatusOk returns a tuple with the AlarmStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagPointDataArray) GetAlarmStatusOk() (*string, bool) {
	if o == nil || IsNil(o.AlarmStatus) {
		return nil, false
	}
	return o.AlarmStatus, true
}

// HasAlarmStatus returns a boolean if a field has been set.
func (o *TagPointDataArray) HasAlarmStatus() bool {
	if o != nil && !IsNil(o.AlarmStatus) {
		return true
	}

	return false
}

// SetAlarmStatus gets a reference to the given string and assigns it to the AlarmStatus field.
func (o *TagPointDataArray) SetAlarmStatus(v string) {
	o.AlarmStatus = &v
}

// GetReadingTime returns the ReadingTime field value if set, zero value otherwise.
func (o *TagPointDataArray) GetReadingTime() string {
	if o == nil || IsNil(o.ReadingTime) {
		var ret string
		return ret
	}
	return *o.ReadingTime
}

// GetReadingTimeOk returns a tuple with the ReadingTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagPointDataArray) GetReadingTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ReadingTime) {
		return nil, false
	}
	return o.ReadingTime, true
}

// HasReadingTime returns a boolean if a field has been set.
func (o *TagPointDataArray) HasReadingTime() bool {
	if o != nil && !IsNil(o.ReadingTime) {
		return true
	}

	return false
}

// SetReadingTime gets a reference to the given string and assigns it to the ReadingTime field.
func (o *TagPointDataArray) SetReadingTime(v string) {
	o.ReadingTime = &v
}

// GetTagDisplayName returns the TagDisplayName field value if set, zero value otherwise.
func (o *TagPointDataArray) GetTagDisplayName() string {
	if o == nil || IsNil(o.TagDisplayName) {
		var ret string
		return ret
	}
	return *o.TagDisplayName
}

// GetTagDisplayNameOk returns a tuple with the TagDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagPointDataArray) GetTagDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.TagDisplayName) {
		return nil, false
	}
	return o.TagDisplayName, true
}

// HasTagDisplayName returns a boolean if a field has been set.
func (o *TagPointDataArray) HasTagDisplayName() bool {
	if o != nil && !IsNil(o.TagDisplayName) {
		return true
	}

	return false
}

// SetTagDisplayName gets a reference to the given string and assigns it to the TagDisplayName field.
func (o *TagPointDataArray) SetTagDisplayName(v string) {
	o.TagDisplayName = &v
}

// GetTagId returns the TagId field value if set, zero value otherwise.
func (o *TagPointDataArray) GetTagId() string {
	if o == nil || IsNil(o.TagId) {
		var ret string
		return ret
	}
	return *o.TagId
}

// GetTagIdOk returns a tuple with the TagId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagPointDataArray) GetTagIdOk() (*string, bool) {
	if o == nil || IsNil(o.TagId) {
		return nil, false
	}
	return o.TagId, true
}

// HasTagId returns a boolean if a field has been set.
func (o *TagPointDataArray) HasTagId() bool {
	if o != nil && !IsNil(o.TagId) {
		return true
	}

	return false
}

// SetTagId gets a reference to the given string and assigns it to the TagId field.
func (o *TagPointDataArray) SetTagId(v string) {
	o.TagId = &v
}

// GetUom returns the Uom field value if set, zero value otherwise.
func (o *TagPointDataArray) GetUom() string {
	if o == nil || IsNil(o.Uom) {
		var ret string
		return ret
	}
	return *o.Uom
}

// GetUomOk returns a tuple with the Uom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagPointDataArray) GetUomOk() (*string, bool) {
	if o == nil || IsNil(o.Uom) {
		return nil, false
	}
	return o.Uom, true
}

// HasUom returns a boolean if a field has been set.
func (o *TagPointDataArray) HasUom() bool {
	if o != nil && !IsNil(o.Uom) {
		return true
	}

	return false
}

// SetUom gets a reference to the given string and assigns it to the Uom field.
func (o *TagPointDataArray) SetUom(v string) {
	o.Uom = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *TagPointDataArray) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagPointDataArray) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *TagPointDataArray) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *TagPointDataArray) SetValue(v string) {
	o.Value = &v
}

func (o TagPointDataArray) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TagPointDataArray) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AlarmStatus) {
		toSerialize["alarmStatus"] = o.AlarmStatus
	}
	if !IsNil(o.ReadingTime) {
		toSerialize["readingTime"] = o.ReadingTime
	}
	if !IsNil(o.TagDisplayName) {
		toSerialize["tagDisplayName"] = o.TagDisplayName
	}
	if !IsNil(o.TagId) {
		toSerialize["tagId"] = o.TagId
	}
	if !IsNil(o.Uom) {
		toSerialize["uom"] = o.Uom
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TagPointDataArray) UnmarshalJSON(data []byte) (err error) {
	varTagPointDataArray := _TagPointDataArray{}

	err = json.Unmarshal(data, &varTagPointDataArray)

	if err != nil {
		return err
	}

	*o = TagPointDataArray(varTagPointDataArray)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "alarmStatus")
		delete(additionalProperties, "readingTime")
		delete(additionalProperties, "tagDisplayName")
		delete(additionalProperties, "tagId")
		delete(additionalProperties, "uom")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTagPointDataArray struct {
	value *TagPointDataArray
	isSet bool
}

func (v NullableTagPointDataArray) Get() *TagPointDataArray {
	return v.value
}

func (v *NullableTagPointDataArray) Set(val *TagPointDataArray) {
	v.value = val
	v.isSet = true
}

func (v NullableTagPointDataArray) IsSet() bool {
	return v.isSet
}

func (v *NullableTagPointDataArray) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagPointDataArray(val *TagPointDataArray) *NullableTagPointDataArray {
	return &NullableTagPointDataArray{value: val, isSet: true}
}

func (v NullableTagPointDataArray) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagPointDataArray) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


