/*
Smart View Environmental API

Empower yourself with Environmental APIs. The API makes it possible to fetch current environmental data including humidity and temperature for a single sensor (identified by IBX code and sensor ID) or for all the sensors within an IBX (identified by IBX code) in a paginated way. When fetching all sensor readings you can apply additional sort criteria.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
	"fmt"
)

// GetAssetClassificationParameter the model 'GetAssetClassificationParameter'
type GetAssetClassificationParameter string

// List of getAsset_classification_parameter
const (
	GETASSETCLASSIFICATIONPARAMETER_ELECTRICAL GetAssetClassificationParameter = "Electrical"
	GETASSETCLASSIFICATIONPARAMETER_MECHANICAL GetAssetClassificationParameter = "Mechanical"
)

// All allowed values of GetAssetClassificationParameter enum
var AllowedGetAssetClassificationParameterEnumValues = []GetAssetClassificationParameter{
	"Electrical",
	"Mechanical",
}

func (v *GetAssetClassificationParameter) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GetAssetClassificationParameter(value)
	for _, existing := range AllowedGetAssetClassificationParameterEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GetAssetClassificationParameter", value)
}

// NewGetAssetClassificationParameterFromValue returns a pointer to a valid GetAssetClassificationParameter
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGetAssetClassificationParameterFromValue(v string) (*GetAssetClassificationParameter, error) {
	ev := GetAssetClassificationParameter(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GetAssetClassificationParameter: valid values are %v", v, AllowedGetAssetClassificationParameterEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GetAssetClassificationParameter) IsValid() bool {
	for _, existing := range AllowedGetAssetClassificationParameterEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to getAsset_classification_parameter value
func (v GetAssetClassificationParameter) Ptr() *GetAssetClassificationParameter {
	return &v
}

type NullableGetAssetClassificationParameter struct {
	value *GetAssetClassificationParameter
	isSet bool
}

func (v NullableGetAssetClassificationParameter) Get() *GetAssetClassificationParameter {
	return v.value
}

func (v *NullableGetAssetClassificationParameter) Set(val *GetAssetClassificationParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableGetAssetClassificationParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableGetAssetClassificationParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetAssetClassificationParameter(val *GetAssetClassificationParameter) *NullableGetAssetClassificationParameter {
	return &NullableGetAssetClassificationParameter{value: val, isSet: true}
}

func (v NullableGetAssetClassificationParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetAssetClassificationParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

