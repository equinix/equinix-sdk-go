/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
)

// checks if the AlertDto1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlertDto1{}

// AlertDto1 struct for AlertDto1
type AlertDto1 struct {
	AccountNo *string `json:"accountNo,omitempty"`
	// isAlertPaused
	AlertPaused *bool `json:"alertPaused,omitempty"`
	AlertType *AlertType `json:"alertType,omitempty"`
	ConditionalAlert *string `json:"conditionalAlert,omitempty"`
	Country *string `json:"country,omitempty"`
	CreatedBy *string `json:"createdBy,omitempty"`
	// createdOn
	CreatedOn *float32 `json:"createdOn,omitempty"`
	CustomerAssets []CustomerAssets `json:"customerAssets,omitempty"`
	EnabledAction *string `json:"enabledAction,omitempty"`
	FormatedSection *string `json:"formatedSection,omitempty"`
	HeartbeatType *string `json:"heartbeatType,omitempty"`
	Ibx *string `json:"ibx,omitempty"`
	Id *string `json:"id,omitempty"`
	InfraAssets []CustomerAssets `json:"infraAssets,omitempty"`
	IsDuplicate *bool `json:"isDuplicate,omitempty"`
	// lastTriggeredOn
	LastTriggeredOn *float32 `json:"lastTriggeredOn,omitempty"`
	Metro *string `json:"metro,omitempty"`
	// modifiedOn
	ModifiedOn *float32 `json:"modifiedOn,omitempty"`
	Recipients []RecipientsArray `json:"recipients,omitempty"`
	Region *string `json:"region,omitempty"`
	Section *string `json:"section,omitempty"`
	Status *string `json:"status,omitempty"`
	ThresholdUnit *string `json:"thresholdUnit,omitempty"`
	ThresholdValue *string `json:"thresholdValue,omitempty"`
	ThresholdValueMax *string `json:"thresholdValueMax,omitempty"`
	ThresholdValueMin *string `json:"thresholdValueMin,omitempty"`
	Ucmid *string `json:"ucmid,omitempty"`
	Uom *string `json:"uom,omitempty"`
	UserId *string `json:"userId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AlertDto1 AlertDto1

// NewAlertDto1 instantiates a new AlertDto1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertDto1() *AlertDto1 {
	this := AlertDto1{}
	return &this
}

// NewAlertDto1WithDefaults instantiates a new AlertDto1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertDto1WithDefaults() *AlertDto1 {
	this := AlertDto1{}
	return &this
}

// GetAccountNo returns the AccountNo field value if set, zero value otherwise.
func (o *AlertDto1) GetAccountNo() string {
	if o == nil || IsNil(o.AccountNo) {
		var ret string
		return ret
	}
	return *o.AccountNo
}

// GetAccountNoOk returns a tuple with the AccountNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertDto1) GetAccountNoOk() (*string, bool) {
	if o == nil || IsNil(o.AccountNo) {
		return nil, false
	}
	return o.AccountNo, true
}

// HasAccountNo returns a boolean if a field has been set.
func (o *AlertDto1) HasAccountNo() bool {
	if o != nil && !IsNil(o.AccountNo) {
		return true
	}

	return false
}

// SetAccountNo gets a reference to the given string and assigns it to the AccountNo field.
func (o *AlertDto1) SetAccountNo(v string) {
	o.AccountNo = &v
}

// GetAlertPaused returns the AlertPaused field value if set, zero value otherwise.
func (o *AlertDto1) GetAlertPaused() bool {
	if o == nil || IsNil(o.AlertPaused) {
		var ret bool
		return ret
	}
	return *o.AlertPaused
}

// GetAlertPausedOk returns a tuple with the AlertPaused field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertDto1) GetAlertPausedOk() (*bool, bool) {
	if o == nil || IsNil(o.AlertPaused) {
		return nil, false
	}
	return o.AlertPaused, true
}

// HasAlertPaused returns a boolean if a field has been set.
func (o *AlertDto1) HasAlertPaused() bool {
	if o != nil && !IsNil(o.AlertPaused) {
		return true
	}

	return false
}

// SetAlertPaused gets a reference to the given bool and assigns it to the AlertPaused field.
func (o *AlertDto1) SetAlertPaused(v bool) {
	o.AlertPaused = &v
}

// GetAlertType returns the AlertType field value if set, zero value otherwise.
func (o *AlertDto1) GetAlertType() AlertType {
	if o == nil || IsNil(o.AlertType) {
		var ret AlertType
		return ret
	}
	return *o.AlertType
}

// GetAlertTypeOk returns a tuple with the AlertType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertDto1) GetAlertTypeOk() (*AlertType, bool) {
	if o == nil || IsNil(o.AlertType) {
		return nil, false
	}
	return o.AlertType, true
}

// HasAlertType returns a boolean if a field has been set.
func (o *AlertDto1) HasAlertType() bool {
	if o != nil && !IsNil(o.AlertType) {
		return true
	}

	return false
}

// SetAlertType gets a reference to the given AlertType and assigns it to the AlertType field.
func (o *AlertDto1) SetAlertType(v AlertType) {
	o.AlertType = &v
}

// GetConditionalAlert returns the ConditionalAlert field value if set, zero value otherwise.
func (o *AlertDto1) GetConditionalAlert() string {
	if o == nil || IsNil(o.ConditionalAlert) {
		var ret string
		return ret
	}
	return *o.ConditionalAlert
}

// GetConditionalAlertOk returns a tuple with the ConditionalAlert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertDto1) GetConditionalAlertOk() (*string, bool) {
	if o == nil || IsNil(o.ConditionalAlert) {
		return nil, false
	}
	return o.ConditionalAlert, true
}

// HasConditionalAlert returns a boolean if a field has been set.
func (o *AlertDto1) HasConditionalAlert() bool {
	if o != nil && !IsNil(o.ConditionalAlert) {
		return true
	}

	return false
}

// SetConditionalAlert gets a reference to the given string and assigns it to the ConditionalAlert field.
func (o *AlertDto1) SetConditionalAlert(v string) {
	o.ConditionalAlert = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *AlertDto1) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertDto1) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *AlertDto1) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *AlertDto1) SetCountry(v string) {
	o.Country = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *AlertDto1) GetCreatedBy() string {
	if o == nil || IsNil(o.CreatedBy) {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertDto1) GetCreatedByOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *AlertDto1) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *AlertDto1) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

// GetCreatedOn returns the CreatedOn field value if set, zero value otherwise.
func (o *AlertDto1) GetCreatedOn() float32 {
	if o == nil || IsNil(o.CreatedOn) {
		var ret float32
		return ret
	}
	return *o.CreatedOn
}

// GetCreatedOnOk returns a tuple with the CreatedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertDto1) GetCreatedOnOk() (*float32, bool) {
	if o == nil || IsNil(o.CreatedOn) {
		return nil, false
	}
	return o.CreatedOn, true
}

// HasCreatedOn returns a boolean if a field has been set.
func (o *AlertDto1) HasCreatedOn() bool {
	if o != nil && !IsNil(o.CreatedOn) {
		return true
	}

	return false
}

// SetCreatedOn gets a reference to the given float32 and assigns it to the CreatedOn field.
func (o *AlertDto1) SetCreatedOn(v float32) {
	o.CreatedOn = &v
}

// GetCustomerAssets returns the CustomerAssets field value if set, zero value otherwise.
func (o *AlertDto1) GetCustomerAssets() []CustomerAssets {
	if o == nil || IsNil(o.CustomerAssets) {
		var ret []CustomerAssets
		return ret
	}
	return o.CustomerAssets
}

// GetCustomerAssetsOk returns a tuple with the CustomerAssets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertDto1) GetCustomerAssetsOk() ([]CustomerAssets, bool) {
	if o == nil || IsNil(o.CustomerAssets) {
		return nil, false
	}
	return o.CustomerAssets, true
}

// HasCustomerAssets returns a boolean if a field has been set.
func (o *AlertDto1) HasCustomerAssets() bool {
	if o != nil && !IsNil(o.CustomerAssets) {
		return true
	}

	return false
}

// SetCustomerAssets gets a reference to the given []CustomerAssets and assigns it to the CustomerAssets field.
func (o *AlertDto1) SetCustomerAssets(v []CustomerAssets) {
	o.CustomerAssets = v
}

// GetEnabledAction returns the EnabledAction field value if set, zero value otherwise.
func (o *AlertDto1) GetEnabledAction() string {
	if o == nil || IsNil(o.EnabledAction) {
		var ret string
		return ret
	}
	return *o.EnabledAction
}

// GetEnabledActionOk returns a tuple with the EnabledAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertDto1) GetEnabledActionOk() (*string, bool) {
	if o == nil || IsNil(o.EnabledAction) {
		return nil, false
	}
	return o.EnabledAction, true
}

// HasEnabledAction returns a boolean if a field has been set.
func (o *AlertDto1) HasEnabledAction() bool {
	if o != nil && !IsNil(o.EnabledAction) {
		return true
	}

	return false
}

// SetEnabledAction gets a reference to the given string and assigns it to the EnabledAction field.
func (o *AlertDto1) SetEnabledAction(v string) {
	o.EnabledAction = &v
}

// GetFormatedSection returns the FormatedSection field value if set, zero value otherwise.
func (o *AlertDto1) GetFormatedSection() string {
	if o == nil || IsNil(o.FormatedSection) {
		var ret string
		return ret
	}
	return *o.FormatedSection
}

// GetFormatedSectionOk returns a tuple with the FormatedSection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertDto1) GetFormatedSectionOk() (*string, bool) {
	if o == nil || IsNil(o.FormatedSection) {
		return nil, false
	}
	return o.FormatedSection, true
}

// HasFormatedSection returns a boolean if a field has been set.
func (o *AlertDto1) HasFormatedSection() bool {
	if o != nil && !IsNil(o.FormatedSection) {
		return true
	}

	return false
}

// SetFormatedSection gets a reference to the given string and assigns it to the FormatedSection field.
func (o *AlertDto1) SetFormatedSection(v string) {
	o.FormatedSection = &v
}

// GetHeartbeatType returns the HeartbeatType field value if set, zero value otherwise.
func (o *AlertDto1) GetHeartbeatType() string {
	if o == nil || IsNil(o.HeartbeatType) {
		var ret string
		return ret
	}
	return *o.HeartbeatType
}

// GetHeartbeatTypeOk returns a tuple with the HeartbeatType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertDto1) GetHeartbeatTypeOk() (*string, bool) {
	if o == nil || IsNil(o.HeartbeatType) {
		return nil, false
	}
	return o.HeartbeatType, true
}

// HasHeartbeatType returns a boolean if a field has been set.
func (o *AlertDto1) HasHeartbeatType() bool {
	if o != nil && !IsNil(o.HeartbeatType) {
		return true
	}

	return false
}

// SetHeartbeatType gets a reference to the given string and assigns it to the HeartbeatType field.
func (o *AlertDto1) SetHeartbeatType(v string) {
	o.HeartbeatType = &v
}

// GetIbx returns the Ibx field value if set, zero value otherwise.
func (o *AlertDto1) GetIbx() string {
	if o == nil || IsNil(o.Ibx) {
		var ret string
		return ret
	}
	return *o.Ibx
}

// GetIbxOk returns a tuple with the Ibx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertDto1) GetIbxOk() (*string, bool) {
	if o == nil || IsNil(o.Ibx) {
		return nil, false
	}
	return o.Ibx, true
}

// HasIbx returns a boolean if a field has been set.
func (o *AlertDto1) HasIbx() bool {
	if o != nil && !IsNil(o.Ibx) {
		return true
	}

	return false
}

// SetIbx gets a reference to the given string and assigns it to the Ibx field.
func (o *AlertDto1) SetIbx(v string) {
	o.Ibx = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AlertDto1) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertDto1) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AlertDto1) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AlertDto1) SetId(v string) {
	o.Id = &v
}

// GetInfraAssets returns the InfraAssets field value if set, zero value otherwise.
func (o *AlertDto1) GetInfraAssets() []CustomerAssets {
	if o == nil || IsNil(o.InfraAssets) {
		var ret []CustomerAssets
		return ret
	}
	return o.InfraAssets
}

// GetInfraAssetsOk returns a tuple with the InfraAssets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertDto1) GetInfraAssetsOk() ([]CustomerAssets, bool) {
	if o == nil || IsNil(o.InfraAssets) {
		return nil, false
	}
	return o.InfraAssets, true
}

// HasInfraAssets returns a boolean if a field has been set.
func (o *AlertDto1) HasInfraAssets() bool {
	if o != nil && !IsNil(o.InfraAssets) {
		return true
	}

	return false
}

// SetInfraAssets gets a reference to the given []CustomerAssets and assigns it to the InfraAssets field.
func (o *AlertDto1) SetInfraAssets(v []CustomerAssets) {
	o.InfraAssets = v
}

// GetIsDuplicate returns the IsDuplicate field value if set, zero value otherwise.
func (o *AlertDto1) GetIsDuplicate() bool {
	if o == nil || IsNil(o.IsDuplicate) {
		var ret bool
		return ret
	}
	return *o.IsDuplicate
}

// GetIsDuplicateOk returns a tuple with the IsDuplicate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertDto1) GetIsDuplicateOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDuplicate) {
		return nil, false
	}
	return o.IsDuplicate, true
}

// HasIsDuplicate returns a boolean if a field has been set.
func (o *AlertDto1) HasIsDuplicate() bool {
	if o != nil && !IsNil(o.IsDuplicate) {
		return true
	}

	return false
}

// SetIsDuplicate gets a reference to the given bool and assigns it to the IsDuplicate field.
func (o *AlertDto1) SetIsDuplicate(v bool) {
	o.IsDuplicate = &v
}

// GetLastTriggeredOn returns the LastTriggeredOn field value if set, zero value otherwise.
func (o *AlertDto1) GetLastTriggeredOn() float32 {
	if o == nil || IsNil(o.LastTriggeredOn) {
		var ret float32
		return ret
	}
	return *o.LastTriggeredOn
}

// GetLastTriggeredOnOk returns a tuple with the LastTriggeredOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertDto1) GetLastTriggeredOnOk() (*float32, bool) {
	if o == nil || IsNil(o.LastTriggeredOn) {
		return nil, false
	}
	return o.LastTriggeredOn, true
}

// HasLastTriggeredOn returns a boolean if a field has been set.
func (o *AlertDto1) HasLastTriggeredOn() bool {
	if o != nil && !IsNil(o.LastTriggeredOn) {
		return true
	}

	return false
}

// SetLastTriggeredOn gets a reference to the given float32 and assigns it to the LastTriggeredOn field.
func (o *AlertDto1) SetLastTriggeredOn(v float32) {
	o.LastTriggeredOn = &v
}

// GetMetro returns the Metro field value if set, zero value otherwise.
func (o *AlertDto1) GetMetro() string {
	if o == nil || IsNil(o.Metro) {
		var ret string
		return ret
	}
	return *o.Metro
}

// GetMetroOk returns a tuple with the Metro field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertDto1) GetMetroOk() (*string, bool) {
	if o == nil || IsNil(o.Metro) {
		return nil, false
	}
	return o.Metro, true
}

// HasMetro returns a boolean if a field has been set.
func (o *AlertDto1) HasMetro() bool {
	if o != nil && !IsNil(o.Metro) {
		return true
	}

	return false
}

// SetMetro gets a reference to the given string and assigns it to the Metro field.
func (o *AlertDto1) SetMetro(v string) {
	o.Metro = &v
}

// GetModifiedOn returns the ModifiedOn field value if set, zero value otherwise.
func (o *AlertDto1) GetModifiedOn() float32 {
	if o == nil || IsNil(o.ModifiedOn) {
		var ret float32
		return ret
	}
	return *o.ModifiedOn
}

// GetModifiedOnOk returns a tuple with the ModifiedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertDto1) GetModifiedOnOk() (*float32, bool) {
	if o == nil || IsNil(o.ModifiedOn) {
		return nil, false
	}
	return o.ModifiedOn, true
}

// HasModifiedOn returns a boolean if a field has been set.
func (o *AlertDto1) HasModifiedOn() bool {
	if o != nil && !IsNil(o.ModifiedOn) {
		return true
	}

	return false
}

// SetModifiedOn gets a reference to the given float32 and assigns it to the ModifiedOn field.
func (o *AlertDto1) SetModifiedOn(v float32) {
	o.ModifiedOn = &v
}

// GetRecipients returns the Recipients field value if set, zero value otherwise.
func (o *AlertDto1) GetRecipients() []RecipientsArray {
	if o == nil || IsNil(o.Recipients) {
		var ret []RecipientsArray
		return ret
	}
	return o.Recipients
}

// GetRecipientsOk returns a tuple with the Recipients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertDto1) GetRecipientsOk() ([]RecipientsArray, bool) {
	if o == nil || IsNil(o.Recipients) {
		return nil, false
	}
	return o.Recipients, true
}

// HasRecipients returns a boolean if a field has been set.
func (o *AlertDto1) HasRecipients() bool {
	if o != nil && !IsNil(o.Recipients) {
		return true
	}

	return false
}

// SetRecipients gets a reference to the given []RecipientsArray and assigns it to the Recipients field.
func (o *AlertDto1) SetRecipients(v []RecipientsArray) {
	o.Recipients = v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *AlertDto1) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertDto1) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *AlertDto1) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *AlertDto1) SetRegion(v string) {
	o.Region = &v
}

// GetSection returns the Section field value if set, zero value otherwise.
func (o *AlertDto1) GetSection() string {
	if o == nil || IsNil(o.Section) {
		var ret string
		return ret
	}
	return *o.Section
}

// GetSectionOk returns a tuple with the Section field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertDto1) GetSectionOk() (*string, bool) {
	if o == nil || IsNil(o.Section) {
		return nil, false
	}
	return o.Section, true
}

// HasSection returns a boolean if a field has been set.
func (o *AlertDto1) HasSection() bool {
	if o != nil && !IsNil(o.Section) {
		return true
	}

	return false
}

// SetSection gets a reference to the given string and assigns it to the Section field.
func (o *AlertDto1) SetSection(v string) {
	o.Section = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *AlertDto1) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertDto1) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *AlertDto1) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *AlertDto1) SetStatus(v string) {
	o.Status = &v
}

// GetThresholdUnit returns the ThresholdUnit field value if set, zero value otherwise.
func (o *AlertDto1) GetThresholdUnit() string {
	if o == nil || IsNil(o.ThresholdUnit) {
		var ret string
		return ret
	}
	return *o.ThresholdUnit
}

// GetThresholdUnitOk returns a tuple with the ThresholdUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertDto1) GetThresholdUnitOk() (*string, bool) {
	if o == nil || IsNil(o.ThresholdUnit) {
		return nil, false
	}
	return o.ThresholdUnit, true
}

// HasThresholdUnit returns a boolean if a field has been set.
func (o *AlertDto1) HasThresholdUnit() bool {
	if o != nil && !IsNil(o.ThresholdUnit) {
		return true
	}

	return false
}

// SetThresholdUnit gets a reference to the given string and assigns it to the ThresholdUnit field.
func (o *AlertDto1) SetThresholdUnit(v string) {
	o.ThresholdUnit = &v
}

// GetThresholdValue returns the ThresholdValue field value if set, zero value otherwise.
func (o *AlertDto1) GetThresholdValue() string {
	if o == nil || IsNil(o.ThresholdValue) {
		var ret string
		return ret
	}
	return *o.ThresholdValue
}

// GetThresholdValueOk returns a tuple with the ThresholdValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertDto1) GetThresholdValueOk() (*string, bool) {
	if o == nil || IsNil(o.ThresholdValue) {
		return nil, false
	}
	return o.ThresholdValue, true
}

// HasThresholdValue returns a boolean if a field has been set.
func (o *AlertDto1) HasThresholdValue() bool {
	if o != nil && !IsNil(o.ThresholdValue) {
		return true
	}

	return false
}

// SetThresholdValue gets a reference to the given string and assigns it to the ThresholdValue field.
func (o *AlertDto1) SetThresholdValue(v string) {
	o.ThresholdValue = &v
}

// GetThresholdValueMax returns the ThresholdValueMax field value if set, zero value otherwise.
func (o *AlertDto1) GetThresholdValueMax() string {
	if o == nil || IsNil(o.ThresholdValueMax) {
		var ret string
		return ret
	}
	return *o.ThresholdValueMax
}

// GetThresholdValueMaxOk returns a tuple with the ThresholdValueMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertDto1) GetThresholdValueMaxOk() (*string, bool) {
	if o == nil || IsNil(o.ThresholdValueMax) {
		return nil, false
	}
	return o.ThresholdValueMax, true
}

// HasThresholdValueMax returns a boolean if a field has been set.
func (o *AlertDto1) HasThresholdValueMax() bool {
	if o != nil && !IsNil(o.ThresholdValueMax) {
		return true
	}

	return false
}

// SetThresholdValueMax gets a reference to the given string and assigns it to the ThresholdValueMax field.
func (o *AlertDto1) SetThresholdValueMax(v string) {
	o.ThresholdValueMax = &v
}

// GetThresholdValueMin returns the ThresholdValueMin field value if set, zero value otherwise.
func (o *AlertDto1) GetThresholdValueMin() string {
	if o == nil || IsNil(o.ThresholdValueMin) {
		var ret string
		return ret
	}
	return *o.ThresholdValueMin
}

// GetThresholdValueMinOk returns a tuple with the ThresholdValueMin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertDto1) GetThresholdValueMinOk() (*string, bool) {
	if o == nil || IsNil(o.ThresholdValueMin) {
		return nil, false
	}
	return o.ThresholdValueMin, true
}

// HasThresholdValueMin returns a boolean if a field has been set.
func (o *AlertDto1) HasThresholdValueMin() bool {
	if o != nil && !IsNil(o.ThresholdValueMin) {
		return true
	}

	return false
}

// SetThresholdValueMin gets a reference to the given string and assigns it to the ThresholdValueMin field.
func (o *AlertDto1) SetThresholdValueMin(v string) {
	o.ThresholdValueMin = &v
}

// GetUcmid returns the Ucmid field value if set, zero value otherwise.
func (o *AlertDto1) GetUcmid() string {
	if o == nil || IsNil(o.Ucmid) {
		var ret string
		return ret
	}
	return *o.Ucmid
}

// GetUcmidOk returns a tuple with the Ucmid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertDto1) GetUcmidOk() (*string, bool) {
	if o == nil || IsNil(o.Ucmid) {
		return nil, false
	}
	return o.Ucmid, true
}

// HasUcmid returns a boolean if a field has been set.
func (o *AlertDto1) HasUcmid() bool {
	if o != nil && !IsNil(o.Ucmid) {
		return true
	}

	return false
}

// SetUcmid gets a reference to the given string and assigns it to the Ucmid field.
func (o *AlertDto1) SetUcmid(v string) {
	o.Ucmid = &v
}

// GetUom returns the Uom field value if set, zero value otherwise.
func (o *AlertDto1) GetUom() string {
	if o == nil || IsNil(o.Uom) {
		var ret string
		return ret
	}
	return *o.Uom
}

// GetUomOk returns a tuple with the Uom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertDto1) GetUomOk() (*string, bool) {
	if o == nil || IsNil(o.Uom) {
		return nil, false
	}
	return o.Uom, true
}

// HasUom returns a boolean if a field has been set.
func (o *AlertDto1) HasUom() bool {
	if o != nil && !IsNil(o.Uom) {
		return true
	}

	return false
}

// SetUom gets a reference to the given string and assigns it to the Uom field.
func (o *AlertDto1) SetUom(v string) {
	o.Uom = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *AlertDto1) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertDto1) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *AlertDto1) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *AlertDto1) SetUserId(v string) {
	o.UserId = &v
}

func (o AlertDto1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertDto1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountNo) {
		toSerialize["accountNo"] = o.AccountNo
	}
	if !IsNil(o.AlertPaused) {
		toSerialize["alertPaused"] = o.AlertPaused
	}
	if !IsNil(o.AlertType) {
		toSerialize["alertType"] = o.AlertType
	}
	if !IsNil(o.ConditionalAlert) {
		toSerialize["conditionalAlert"] = o.ConditionalAlert
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.CreatedOn) {
		toSerialize["createdOn"] = o.CreatedOn
	}
	if !IsNil(o.CustomerAssets) {
		toSerialize["customerAssets"] = o.CustomerAssets
	}
	if !IsNil(o.EnabledAction) {
		toSerialize["enabledAction"] = o.EnabledAction
	}
	if !IsNil(o.FormatedSection) {
		toSerialize["formatedSection"] = o.FormatedSection
	}
	if !IsNil(o.HeartbeatType) {
		toSerialize["heartbeatType"] = o.HeartbeatType
	}
	if !IsNil(o.Ibx) {
		toSerialize["ibx"] = o.Ibx
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.InfraAssets) {
		toSerialize["infraAssets"] = o.InfraAssets
	}
	if !IsNil(o.IsDuplicate) {
		toSerialize["isDuplicate"] = o.IsDuplicate
	}
	if !IsNil(o.LastTriggeredOn) {
		toSerialize["lastTriggeredOn"] = o.LastTriggeredOn
	}
	if !IsNil(o.Metro) {
		toSerialize["metro"] = o.Metro
	}
	if !IsNil(o.ModifiedOn) {
		toSerialize["modifiedOn"] = o.ModifiedOn
	}
	if !IsNil(o.Recipients) {
		toSerialize["recipients"] = o.Recipients
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.Section) {
		toSerialize["section"] = o.Section
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.ThresholdUnit) {
		toSerialize["thresholdUnit"] = o.ThresholdUnit
	}
	if !IsNil(o.ThresholdValue) {
		toSerialize["thresholdValue"] = o.ThresholdValue
	}
	if !IsNil(o.ThresholdValueMax) {
		toSerialize["thresholdValueMax"] = o.ThresholdValueMax
	}
	if !IsNil(o.ThresholdValueMin) {
		toSerialize["thresholdValueMin"] = o.ThresholdValueMin
	}
	if !IsNil(o.Ucmid) {
		toSerialize["ucmid"] = o.Ucmid
	}
	if !IsNil(o.Uom) {
		toSerialize["uom"] = o.Uom
	}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AlertDto1) UnmarshalJSON(data []byte) (err error) {
	varAlertDto1 := _AlertDto1{}

	err = json.Unmarshal(data, &varAlertDto1)

	if err != nil {
		return err
	}

	*o = AlertDto1(varAlertDto1)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "accountNo")
		delete(additionalProperties, "alertPaused")
		delete(additionalProperties, "alertType")
		delete(additionalProperties, "conditionalAlert")
		delete(additionalProperties, "country")
		delete(additionalProperties, "createdBy")
		delete(additionalProperties, "createdOn")
		delete(additionalProperties, "customerAssets")
		delete(additionalProperties, "enabledAction")
		delete(additionalProperties, "formatedSection")
		delete(additionalProperties, "heartbeatType")
		delete(additionalProperties, "ibx")
		delete(additionalProperties, "id")
		delete(additionalProperties, "infraAssets")
		delete(additionalProperties, "isDuplicate")
		delete(additionalProperties, "lastTriggeredOn")
		delete(additionalProperties, "metro")
		delete(additionalProperties, "modifiedOn")
		delete(additionalProperties, "recipients")
		delete(additionalProperties, "region")
		delete(additionalProperties, "section")
		delete(additionalProperties, "status")
		delete(additionalProperties, "thresholdUnit")
		delete(additionalProperties, "thresholdValue")
		delete(additionalProperties, "thresholdValueMax")
		delete(additionalProperties, "thresholdValueMin")
		delete(additionalProperties, "ucmid")
		delete(additionalProperties, "uom")
		delete(additionalProperties, "userId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAlertDto1 struct {
	value *AlertDto1
	isSet bool
}

func (v NullableAlertDto1) Get() *AlertDto1 {
	return v.value
}

func (v *NullableAlertDto1) Set(val *AlertDto1) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertDto1) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertDto1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertDto1(val *AlertDto1) *NullableAlertDto1 {
	return &NullableAlertDto1{value: val, isSet: true}
}

func (v NullableAlertDto1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertDto1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


