/*
Smart View Environmental API

Empower yourself with Environmental APIs. The API makes it possible to fetch current environmental data including humidity and temperature for a single sensor (identified by IBX code and sensor ID) or for all the sensors within an IBX (identified by IBX code) in a paginated way. When fetching all sensor readings you can apply additional sort criteria.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
)

// checks if the TrendingPowerDataPayLoad type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrendingPowerDataPayLoad{}

// TrendingPowerDataPayLoad struct for TrendingPowerDataPayLoad
type TrendingPowerDataPayLoad struct {
	AccountNumber *string `json:"accountNumber,omitempty"`
	Data []ComparisonDataTrend `json:"data,omitempty"`
	Ibx *string `json:"ibx,omitempty"`
	Interval *TrendingPowerDataPayLoadInterval `json:"interval,omitempty"`
	LevelType *TrendingPowerDataPayLoadLevelType `json:"levelType,omitempty"`
	// ibx code, cage unique space id, cabinet unique space id and serial number for levelType ibx, cage, cabinet, circuit resp.
	LevelValue *string `json:"levelValue,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TrendingPowerDataPayLoad TrendingPowerDataPayLoad

// NewTrendingPowerDataPayLoad instantiates a new TrendingPowerDataPayLoad object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrendingPowerDataPayLoad() *TrendingPowerDataPayLoad {
	this := TrendingPowerDataPayLoad{}
	return &this
}

// NewTrendingPowerDataPayLoadWithDefaults instantiates a new TrendingPowerDataPayLoad object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrendingPowerDataPayLoadWithDefaults() *TrendingPowerDataPayLoad {
	this := TrendingPowerDataPayLoad{}
	return &this
}

// GetAccountNumber returns the AccountNumber field value if set, zero value otherwise.
func (o *TrendingPowerDataPayLoad) GetAccountNumber() string {
	if o == nil || IsNil(o.AccountNumber) {
		var ret string
		return ret
	}
	return *o.AccountNumber
}

// GetAccountNumberOk returns a tuple with the AccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrendingPowerDataPayLoad) GetAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.AccountNumber) {
		return nil, false
	}
	return o.AccountNumber, true
}

// HasAccountNumber returns a boolean if a field has been set.
func (o *TrendingPowerDataPayLoad) HasAccountNumber() bool {
	if o != nil && !IsNil(o.AccountNumber) {
		return true
	}

	return false
}

// SetAccountNumber gets a reference to the given string and assigns it to the AccountNumber field.
func (o *TrendingPowerDataPayLoad) SetAccountNumber(v string) {
	o.AccountNumber = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *TrendingPowerDataPayLoad) GetData() []ComparisonDataTrend {
	if o == nil || IsNil(o.Data) {
		var ret []ComparisonDataTrend
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrendingPowerDataPayLoad) GetDataOk() ([]ComparisonDataTrend, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *TrendingPowerDataPayLoad) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []ComparisonDataTrend and assigns it to the Data field.
func (o *TrendingPowerDataPayLoad) SetData(v []ComparisonDataTrend) {
	o.Data = v
}

// GetIbx returns the Ibx field value if set, zero value otherwise.
func (o *TrendingPowerDataPayLoad) GetIbx() string {
	if o == nil || IsNil(o.Ibx) {
		var ret string
		return ret
	}
	return *o.Ibx
}

// GetIbxOk returns a tuple with the Ibx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrendingPowerDataPayLoad) GetIbxOk() (*string, bool) {
	if o == nil || IsNil(o.Ibx) {
		return nil, false
	}
	return o.Ibx, true
}

// HasIbx returns a boolean if a field has been set.
func (o *TrendingPowerDataPayLoad) HasIbx() bool {
	if o != nil && !IsNil(o.Ibx) {
		return true
	}

	return false
}

// SetIbx gets a reference to the given string and assigns it to the Ibx field.
func (o *TrendingPowerDataPayLoad) SetIbx(v string) {
	o.Ibx = &v
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *TrendingPowerDataPayLoad) GetInterval() TrendingPowerDataPayLoadInterval {
	if o == nil || IsNil(o.Interval) {
		var ret TrendingPowerDataPayLoadInterval
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrendingPowerDataPayLoad) GetIntervalOk() (*TrendingPowerDataPayLoadInterval, bool) {
	if o == nil || IsNil(o.Interval) {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *TrendingPowerDataPayLoad) HasInterval() bool {
	if o != nil && !IsNil(o.Interval) {
		return true
	}

	return false
}

// SetInterval gets a reference to the given TrendingPowerDataPayLoadInterval and assigns it to the Interval field.
func (o *TrendingPowerDataPayLoad) SetInterval(v TrendingPowerDataPayLoadInterval) {
	o.Interval = &v
}

// GetLevelType returns the LevelType field value if set, zero value otherwise.
func (o *TrendingPowerDataPayLoad) GetLevelType() TrendingPowerDataPayLoadLevelType {
	if o == nil || IsNil(o.LevelType) {
		var ret TrendingPowerDataPayLoadLevelType
		return ret
	}
	return *o.LevelType
}

// GetLevelTypeOk returns a tuple with the LevelType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrendingPowerDataPayLoad) GetLevelTypeOk() (*TrendingPowerDataPayLoadLevelType, bool) {
	if o == nil || IsNil(o.LevelType) {
		return nil, false
	}
	return o.LevelType, true
}

// HasLevelType returns a boolean if a field has been set.
func (o *TrendingPowerDataPayLoad) HasLevelType() bool {
	if o != nil && !IsNil(o.LevelType) {
		return true
	}

	return false
}

// SetLevelType gets a reference to the given TrendingPowerDataPayLoadLevelType and assigns it to the LevelType field.
func (o *TrendingPowerDataPayLoad) SetLevelType(v TrendingPowerDataPayLoadLevelType) {
	o.LevelType = &v
}

// GetLevelValue returns the LevelValue field value if set, zero value otherwise.
func (o *TrendingPowerDataPayLoad) GetLevelValue() string {
	if o == nil || IsNil(o.LevelValue) {
		var ret string
		return ret
	}
	return *o.LevelValue
}

// GetLevelValueOk returns a tuple with the LevelValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrendingPowerDataPayLoad) GetLevelValueOk() (*string, bool) {
	if o == nil || IsNil(o.LevelValue) {
		return nil, false
	}
	return o.LevelValue, true
}

// HasLevelValue returns a boolean if a field has been set.
func (o *TrendingPowerDataPayLoad) HasLevelValue() bool {
	if o != nil && !IsNil(o.LevelValue) {
		return true
	}

	return false
}

// SetLevelValue gets a reference to the given string and assigns it to the LevelValue field.
func (o *TrendingPowerDataPayLoad) SetLevelValue(v string) {
	o.LevelValue = &v
}

func (o TrendingPowerDataPayLoad) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrendingPowerDataPayLoad) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountNumber) {
		toSerialize["accountNumber"] = o.AccountNumber
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Ibx) {
		toSerialize["ibx"] = o.Ibx
	}
	if !IsNil(o.Interval) {
		toSerialize["interval"] = o.Interval
	}
	if !IsNil(o.LevelType) {
		toSerialize["levelType"] = o.LevelType
	}
	if !IsNil(o.LevelValue) {
		toSerialize["levelValue"] = o.LevelValue
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TrendingPowerDataPayLoad) UnmarshalJSON(data []byte) (err error) {
	varTrendingPowerDataPayLoad := _TrendingPowerDataPayLoad{}

	err = json.Unmarshal(data, &varTrendingPowerDataPayLoad)

	if err != nil {
		return err
	}

	*o = TrendingPowerDataPayLoad(varTrendingPowerDataPayLoad)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "accountNumber")
		delete(additionalProperties, "data")
		delete(additionalProperties, "ibx")
		delete(additionalProperties, "interval")
		delete(additionalProperties, "levelType")
		delete(additionalProperties, "levelValue")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTrendingPowerDataPayLoad struct {
	value *TrendingPowerDataPayLoad
	isSet bool
}

func (v NullableTrendingPowerDataPayLoad) Get() *TrendingPowerDataPayLoad {
	return v.value
}

func (v *NullableTrendingPowerDataPayLoad) Set(val *TrendingPowerDataPayLoad) {
	v.value = val
	v.isSet = true
}

func (v NullableTrendingPowerDataPayLoad) IsSet() bool {
	return v.isSet
}

func (v *NullableTrendingPowerDataPayLoad) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrendingPowerDataPayLoad(val *TrendingPowerDataPayLoad) *NullableTrendingPowerDataPayLoad {
	return &NullableTrendingPowerDataPayLoad{value: val, isSet: true}
}

func (v NullableTrendingPowerDataPayLoad) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrendingPowerDataPayLoad) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


