/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
	"fmt"
)

// ErrorStatusType [INFO|ERROR] are the possible values
type ErrorStatusType string

// List of Error_status_type
const (
	ERRORSTATUSTYPE_ERROR ErrorStatusType = "ERROR"
)

// All allowed values of ErrorStatusType enum
var AllowedErrorStatusTypeEnumValues = []ErrorStatusType{
	"ERROR",
}

func (v *ErrorStatusType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ErrorStatusType(value)
	for _, existing := range AllowedErrorStatusTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ErrorStatusType", value)
}

// NewErrorStatusTypeFromValue returns a pointer to a valid ErrorStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewErrorStatusTypeFromValue(v string) (*ErrorStatusType, error) {
	ev := ErrorStatusType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ErrorStatusType: valid values are %v", v, AllowedErrorStatusTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ErrorStatusType) IsValid() bool {
	for _, existing := range AllowedErrorStatusTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Error_status_type value
func (v ErrorStatusType) Ptr() *ErrorStatusType {
	return &v
}

type NullableErrorStatusType struct {
	value *ErrorStatusType
	isSet bool
}

func (v NullableErrorStatusType) Get() *ErrorStatusType {
	return v.value
}

func (v *NullableErrorStatusType) Set(val *ErrorStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorStatusType(val *ErrorStatusType) *NullableErrorStatusType {
	return &NullableErrorStatusType{value: val, isSet: true}
}

func (v NullableErrorStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

