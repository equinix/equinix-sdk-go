/*
Smart View Environmental API

Empower yourself with Environmental APIs. The API makes it possible to fetch current environmental data including humidity and temperature for a single sensor (identified by IBX code and sensor ID) or for all the sensors within an IBX (identified by IBX code) in a paginated way. When fetching all sensor readings you can apply additional sort criteria.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
	"fmt"
)

// checks if the Asset type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Asset{}

// Asset Asset messages provide the latest readings for environmental, electrical, and mechanical assets within an IBX
type Asset struct {
	AccountNumber string `json:"accountNumber"`
	// Asset Classification value if specified, otherwise all allowable classifications
	AssetClassification []AssetAssetClassificationInner `json:"assetClassification,omitempty"`
	AssetId []string `json:"assetId,omitempty"`
	Ibx []string `json:"ibx"`
	AdditionalProperties map[string]interface{}
}

type _Asset Asset

// NewAsset instantiates a new Asset object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAsset(accountNumber string, ibx []string) *Asset {
	this := Asset{}
	this.AccountNumber = accountNumber
	this.Ibx = ibx
	return &this
}

// NewAssetWithDefaults instantiates a new Asset object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssetWithDefaults() *Asset {
	this := Asset{}
	return &this
}

// GetAccountNumber returns the AccountNumber field value
func (o *Asset) GetAccountNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountNumber
}

// GetAccountNumberOk returns a tuple with the AccountNumber field value
// and a boolean to check if the value has been set.
func (o *Asset) GetAccountNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountNumber, true
}

// SetAccountNumber sets field value
func (o *Asset) SetAccountNumber(v string) {
	o.AccountNumber = v
}

// GetAssetClassification returns the AssetClassification field value if set, zero value otherwise.
func (o *Asset) GetAssetClassification() []AssetAssetClassificationInner {
	if o == nil || IsNil(o.AssetClassification) {
		var ret []AssetAssetClassificationInner
		return ret
	}
	return o.AssetClassification
}

// GetAssetClassificationOk returns a tuple with the AssetClassification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Asset) GetAssetClassificationOk() ([]AssetAssetClassificationInner, bool) {
	if o == nil || IsNil(o.AssetClassification) {
		return nil, false
	}
	return o.AssetClassification, true
}

// HasAssetClassification returns a boolean if a field has been set.
func (o *Asset) HasAssetClassification() bool {
	if o != nil && !IsNil(o.AssetClassification) {
		return true
	}

	return false
}

// SetAssetClassification gets a reference to the given []AssetAssetClassificationInner and assigns it to the AssetClassification field.
func (o *Asset) SetAssetClassification(v []AssetAssetClassificationInner) {
	o.AssetClassification = v
}

// GetAssetId returns the AssetId field value if set, zero value otherwise.
func (o *Asset) GetAssetId() []string {
	if o == nil || IsNil(o.AssetId) {
		var ret []string
		return ret
	}
	return o.AssetId
}

// GetAssetIdOk returns a tuple with the AssetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Asset) GetAssetIdOk() ([]string, bool) {
	if o == nil || IsNil(o.AssetId) {
		return nil, false
	}
	return o.AssetId, true
}

// HasAssetId returns a boolean if a field has been set.
func (o *Asset) HasAssetId() bool {
	if o != nil && !IsNil(o.AssetId) {
		return true
	}

	return false
}

// SetAssetId gets a reference to the given []string and assigns it to the AssetId field.
func (o *Asset) SetAssetId(v []string) {
	o.AssetId = v
}

// GetIbx returns the Ibx field value
func (o *Asset) GetIbx() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Ibx
}

// GetIbxOk returns a tuple with the Ibx field value
// and a boolean to check if the value has been set.
func (o *Asset) GetIbxOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ibx, true
}

// SetIbx sets field value
func (o *Asset) SetIbx(v []string) {
	o.Ibx = v
}

func (o Asset) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Asset) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["accountNumber"] = o.AccountNumber
	if !IsNil(o.AssetClassification) {
		toSerialize["assetClassification"] = o.AssetClassification
	}
	if !IsNil(o.AssetId) {
		toSerialize["assetId"] = o.AssetId
	}
	toSerialize["ibx"] = o.Ibx

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Asset) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"accountNumber",
		"ibx",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAsset := _Asset{}

	err = json.Unmarshal(data, &varAsset)

	if err != nil {
		return err
	}

	*o = Asset(varAsset)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "accountNumber")
		delete(additionalProperties, "assetClassification")
		delete(additionalProperties, "assetId")
		delete(additionalProperties, "ibx")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAsset struct {
	value *Asset
	isSet bool
}

func (v NullableAsset) Get() *Asset {
	return v.value
}

func (v *NullableAsset) Set(val *Asset) {
	v.value = val
	v.isSet = true
}

func (v NullableAsset) IsSet() bool {
	return v.isSet
}

func (v *NullableAsset) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAsset(val *Asset) *NullableAsset {
	return &NullableAsset{value: val, isSet: true}
}

func (v NullableAsset) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAsset) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


