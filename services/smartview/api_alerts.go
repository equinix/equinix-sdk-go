/*
Smart View Environmental API

Empower yourself with Environmental APIs. The API makes it possible to fetch current environmental data including humidity and temperature for a single sensor (identified by IBX code and sensor ID) or for all the sensors within an IBX (identified by IBX code) in a paginated way. When fetching all sensor readings you can apply additional sort criteria.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// AlertsApiService AlertsApi service
type AlertsApiService service

type ApiGetAlertsRequest struct {
	ctx context.Context
	ApiService *AlertsApiService
	authorization *string
	pageNum *string
	limit *string
	ibx *string
	category *string
	eventType *string
	accountNo *string
	orderBy *string
	sortBy *string
}

// The OAuth Bearer token. Please add the prefix &#39;Bearer &#39; before the token.
func (r ApiGetAlertsRequest) Authorization(authorization string) ApiGetAlertsRequest {
	r.authorization = &authorization
	return r
}

// Page Number
func (r ApiGetAlertsRequest) PageNum(pageNum string) ApiGetAlertsRequest {
	r.pageNum = &pageNum
	return r
}

// Limit
func (r ApiGetAlertsRequest) Limit(limit string) ApiGetAlertsRequest {
	r.limit = &limit
	return r
}

// IBX
func (r ApiGetAlertsRequest) Ibx(ibx string) ApiGetAlertsRequest {
	r.ibx = &ibx
	return r
}

// Category
func (r ApiGetAlertsRequest) Category(category string) ApiGetAlertsRequest {
	r.category = &category
	return r
}

// Event Type.
func (r ApiGetAlertsRequest) EventType(eventType string) ApiGetAlertsRequest {
	r.eventType = &eventType
	return r
}

// Account Number
func (r ApiGetAlertsRequest) AccountNo(accountNo string) ApiGetAlertsRequest {
	r.accountNo = &accountNo
	return r
}

// order by ascending or descending 
func (r ApiGetAlertsRequest) OrderBy(orderBy string) ApiGetAlertsRequest {
	r.orderBy = &orderBy
	return r
}

// sortBy value 
func (r ApiGetAlertsRequest) SortBy(sortBy string) ApiGetAlertsRequest {
	r.sortBy = &sortBy
	return r
}

func (r ApiGetAlertsRequest) Execute() (*Alerts, *http.Response, error) {
	return r.ApiService.GetAlertsExecute(r)
}

/*
GetAlerts obtain active SmartView alerts.

The get alert endpoint returns alert info for inputs (ibx,category,event type,account number,page number,limit, order by, sort by).


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAlertsRequest
*/
func (a *AlertsApiService) GetAlerts(ctx context.Context) ApiGetAlertsRequest {
	return ApiGetAlertsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Alerts
func (a *AlertsApiService) GetAlertsExecute(r ApiGetAlertsRequest) (*Alerts, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Alerts
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertsApiService.GetAlerts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/smartview/v1/alerts/getAlerts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.pageNum == nil {
		return localVarReturnValue, nil, reportError("pageNum is required and must be specified")
	}
	if r.limit == nil {
		return localVarReturnValue, nil, reportError("limit is required and must be specified")
	}

	if r.ibx != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ibx", r.ibx, "")
	}
	if r.category != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "category", r.category, "")
	}
	if r.eventType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "eventType", r.eventType, "")
	}
	if r.accountNo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "accountNo", r.accountNo, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "pageNum", r.pageNum, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", r.sortBy, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v PowerDataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
