/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
)

// checks if the GenericRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GenericRequest{}

// GenericRequest struct for GenericRequest
type GenericRequest struct {
	// customer account number
	AccountNo *string `json:"accountNo,omitempty"`
	// asset classification
	Classification *string `json:"classification,omitempty"`
	// ibx code
	Ibx *string `json:"ibx,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GenericRequest GenericRequest

// NewGenericRequest instantiates a new GenericRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGenericRequest() *GenericRequest {
	this := GenericRequest{}
	return &this
}

// NewGenericRequestWithDefaults instantiates a new GenericRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGenericRequestWithDefaults() *GenericRequest {
	this := GenericRequest{}
	return &this
}

// GetAccountNo returns the AccountNo field value if set, zero value otherwise.
func (o *GenericRequest) GetAccountNo() string {
	if o == nil || IsNil(o.AccountNo) {
		var ret string
		return ret
	}
	return *o.AccountNo
}

// GetAccountNoOk returns a tuple with the AccountNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenericRequest) GetAccountNoOk() (*string, bool) {
	if o == nil || IsNil(o.AccountNo) {
		return nil, false
	}
	return o.AccountNo, true
}

// HasAccountNo returns a boolean if a field has been set.
func (o *GenericRequest) HasAccountNo() bool {
	if o != nil && !IsNil(o.AccountNo) {
		return true
	}

	return false
}

// SetAccountNo gets a reference to the given string and assigns it to the AccountNo field.
func (o *GenericRequest) SetAccountNo(v string) {
	o.AccountNo = &v
}

// GetClassification returns the Classification field value if set, zero value otherwise.
func (o *GenericRequest) GetClassification() string {
	if o == nil || IsNil(o.Classification) {
		var ret string
		return ret
	}
	return *o.Classification
}

// GetClassificationOk returns a tuple with the Classification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenericRequest) GetClassificationOk() (*string, bool) {
	if o == nil || IsNil(o.Classification) {
		return nil, false
	}
	return o.Classification, true
}

// HasClassification returns a boolean if a field has been set.
func (o *GenericRequest) HasClassification() bool {
	if o != nil && !IsNil(o.Classification) {
		return true
	}

	return false
}

// SetClassification gets a reference to the given string and assigns it to the Classification field.
func (o *GenericRequest) SetClassification(v string) {
	o.Classification = &v
}

// GetIbx returns the Ibx field value if set, zero value otherwise.
func (o *GenericRequest) GetIbx() string {
	if o == nil || IsNil(o.Ibx) {
		var ret string
		return ret
	}
	return *o.Ibx
}

// GetIbxOk returns a tuple with the Ibx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenericRequest) GetIbxOk() (*string, bool) {
	if o == nil || IsNil(o.Ibx) {
		return nil, false
	}
	return o.Ibx, true
}

// HasIbx returns a boolean if a field has been set.
func (o *GenericRequest) HasIbx() bool {
	if o != nil && !IsNil(o.Ibx) {
		return true
	}

	return false
}

// SetIbx gets a reference to the given string and assigns it to the Ibx field.
func (o *GenericRequest) SetIbx(v string) {
	o.Ibx = &v
}

func (o GenericRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GenericRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountNo) {
		toSerialize["accountNo"] = o.AccountNo
	}
	if !IsNil(o.Classification) {
		toSerialize["classification"] = o.Classification
	}
	if !IsNil(o.Ibx) {
		toSerialize["ibx"] = o.Ibx
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GenericRequest) UnmarshalJSON(data []byte) (err error) {
	varGenericRequest := _GenericRequest{}

	err = json.Unmarshal(data, &varGenericRequest)

	if err != nil {
		return err
	}

	*o = GenericRequest(varGenericRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "accountNo")
		delete(additionalProperties, "classification")
		delete(additionalProperties, "ibx")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGenericRequest struct {
	value *GenericRequest
	isSet bool
}

func (v NullableGenericRequest) Get() *GenericRequest {
	return v.value
}

func (v *NullableGenericRequest) Set(val *GenericRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGenericRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGenericRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenericRequest(val *GenericRequest) *NullableGenericRequest {
	return &NullableGenericRequest{value: val, isSet: true}
}

func (v NullableGenericRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenericRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


