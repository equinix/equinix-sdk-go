/*
Smart View Environmental API

Empower yourself with Environmental APIs. The API makes it possible to fetch current environmental data including humidity and temperature for a single sensor (identified by IBX code and sensor ID) or for all the sensors within an IBX (identified by IBX code) in a paginated way. When fetching all sensor readings you can apply additional sort criteria.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
	"fmt"
)

// checks if the AlarmMessageData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlarmMessageData{}

// AlarmMessageData alarm message data
type AlarmMessageData struct {
	Data Alarm `json:"data"`
	// message type
	Type string `json:"type"`
	AdditionalProperties map[string]interface{}
}

type _AlarmMessageData AlarmMessageData

// NewAlarmMessageData instantiates a new AlarmMessageData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlarmMessageData(data Alarm, type_ string) *AlarmMessageData {
	this := AlarmMessageData{}
	this.Data = data
	this.Type = type_
	return &this
}

// NewAlarmMessageDataWithDefaults instantiates a new AlarmMessageData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlarmMessageDataWithDefaults() *AlarmMessageData {
	this := AlarmMessageData{}
	var type_ string = "system-alert"
	this.Type = type_
	return &this
}

// GetData returns the Data field value
func (o *AlarmMessageData) GetData() Alarm {
	if o == nil {
		var ret Alarm
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *AlarmMessageData) GetDataOk() (*Alarm, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *AlarmMessageData) SetData(v Alarm) {
	o.Data = v
}

// GetType returns the Type field value
func (o *AlarmMessageData) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AlarmMessageData) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AlarmMessageData) SetType(v string) {
	o.Type = v
}

func (o AlarmMessageData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlarmMessageData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	toSerialize["type"] = o.Type

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AlarmMessageData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAlarmMessageData := _AlarmMessageData{}

	err = json.Unmarshal(data, &varAlarmMessageData)

	if err != nil {
		return err
	}

	*o = AlarmMessageData(varAlarmMessageData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "data")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAlarmMessageData struct {
	value *AlarmMessageData
	isSet bool
}

func (v NullableAlarmMessageData) Get() *AlarmMessageData {
	return v.value
}

func (v *NullableAlarmMessageData) Set(val *AlarmMessageData) {
	v.value = val
	v.isSet = true
}

func (v NullableAlarmMessageData) IsSet() bool {
	return v.isSet
}

func (v *NullableAlarmMessageData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlarmMessageData(val *AlarmMessageData) *NullableAlarmMessageData {
	return &NullableAlarmMessageData{value: val, isSet: true}
}

func (v NullableAlarmMessageData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlarmMessageData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


