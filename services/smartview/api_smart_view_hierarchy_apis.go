/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// SmartViewHierarchyAPIsApiService SmartViewHierarchyAPIsApi service
type SmartViewHierarchyAPIsApiService service

type ApiGetLocationHierarchyRequest struct {
	ctx context.Context
	ApiService *SmartViewHierarchyAPIsApiService
	authorization *string
	accountNo *string
	authorization2 *string
	ibx *string
}

// Specify the OAuth Bearer token with prefix &#39;Bearer &#39;.
func (r ApiGetLocationHierarchyRequest) Authorization(authorization string) ApiGetLocationHierarchyRequest {
	r.authorization = &authorization
	return r
}

// Customer Account Number
func (r ApiGetLocationHierarchyRequest) AccountNo(accountNo string) ApiGetLocationHierarchyRequest {
	r.accountNo = &accountNo
	return r
}

// The OAuth Bearer token. Please add the prefix &#39;Bearer &#39; before the token.
func (r ApiGetLocationHierarchyRequest) Authorization2(authorization2 string) ApiGetLocationHierarchyRequest {
	r.authorization2 = &authorization2
	return r
}

// IBX Code
func (r ApiGetLocationHierarchyRequest) Ibx(ibx string) ApiGetLocationHierarchyRequest {
	r.ibx = &ibx
	return r
}

func (r ApiGetLocationHierarchyRequest) Execute() ([]HierarchyNode, *http.Response, error) {
	return r.ApiService.GetLocationHierarchyExecute(r)
}

/*
GetLocationHierarchy Fetch the Location Hierarchy

The location hierarchy endpoint returns the location hierarchy. This endpoint provides data for invoking other APIs such as Environmental APIs that require location hierarchy information.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetLocationHierarchyRequest
*/
func (a *SmartViewHierarchyAPIsApiService) GetLocationHierarchy(ctx context.Context) ApiGetLocationHierarchyRequest {
	return ApiGetLocationHierarchyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []HierarchyNode
func (a *SmartViewHierarchyAPIsApiService) GetLocationHierarchyExecute(r ApiGetLocationHierarchyRequest) ([]HierarchyNode, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []HierarchyNode
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SmartViewHierarchyAPIsApiService.GetLocationHierarchy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/smartview/v1/hierarchy/location"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.accountNo == nil {
		return localVarReturnValue, nil, reportError("accountNo is required and must be specified")
	}
	if r.authorization2 == nil {
		return localVarReturnValue, nil, reportError("authorization2 is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "accountNo", r.accountNo, "")
	if r.ibx != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ibx", r.ibx, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization2, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPowerHierarchyRequest struct {
	ctx context.Context
	ApiService *SmartViewHierarchyAPIsApiService
	authorization *string
	accountNo *string
	authorization2 *string
	ibx *string
}

// Specify the OAuth Bearer token with prefix &#39;Bearer &#39;.
func (r ApiGetPowerHierarchyRequest) Authorization(authorization string) ApiGetPowerHierarchyRequest {
	r.authorization = &authorization
	return r
}

// Customer Account Number
func (r ApiGetPowerHierarchyRequest) AccountNo(accountNo string) ApiGetPowerHierarchyRequest {
	r.accountNo = &accountNo
	return r
}

// The OAuth Bearer token. Please add the prefix &#39;Bearer &#39; before the token.
func (r ApiGetPowerHierarchyRequest) Authorization2(authorization2 string) ApiGetPowerHierarchyRequest {
	r.authorization2 = &authorization2
	return r
}

// IBX Code
func (r ApiGetPowerHierarchyRequest) Ibx(ibx string) ApiGetPowerHierarchyRequest {
	r.ibx = &ibx
	return r
}

func (r ApiGetPowerHierarchyRequest) Execute() ([]PowerHierarchyNode, *http.Response, error) {
	return r.ApiService.GetPowerHierarchyExecute(r)
}

/*
GetPowerHierarchy Fetch the Power Hierarchy

The power hierarchy endpoint returns the power hierarchy. This endpoint provides data for invoking other APIs such as Power APIs that require power hierarchy information.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetPowerHierarchyRequest
*/
func (a *SmartViewHierarchyAPIsApiService) GetPowerHierarchy(ctx context.Context) ApiGetPowerHierarchyRequest {
	return ApiGetPowerHierarchyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []PowerHierarchyNode
func (a *SmartViewHierarchyAPIsApiService) GetPowerHierarchyExecute(r ApiGetPowerHierarchyRequest) ([]PowerHierarchyNode, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PowerHierarchyNode
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SmartViewHierarchyAPIsApiService.GetPowerHierarchy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/smartview/v1/hierarchy/power"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.accountNo == nil {
		return localVarReturnValue, nil, reportError("accountNo is required and must be specified")
	}
	if r.authorization2 == nil {
		return localVarReturnValue, nil, reportError("authorization2 is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "accountNo", r.accountNo, "")
	if r.ibx != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ibx", r.ibx, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization2, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
