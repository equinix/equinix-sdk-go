/*
Smart View Environmental API

Empower yourself with Environmental APIs. The API makes it possible to fetch current environmental data including humidity and temperature for a single sensor (identified by IBX code and sensor ID) or for all the sensors within an IBX (identified by IBX code) in a paginated way. When fetching all sensor readings you can apply additional sort criteria.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
)

// checks if the Cages type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Cages{}

// Cages struct for Cages
type Cages struct {
	Cabinets []Cabinets `json:"cabinets,omitempty"`
	// Cage Unique Space Id
	Name *string `json:"name,omitempty"`
	// type of the asset
	Type *string `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Cages Cages

// NewCages instantiates a new Cages object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCages() *Cages {
	this := Cages{}
	return &this
}

// NewCagesWithDefaults instantiates a new Cages object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCagesWithDefaults() *Cages {
	this := Cages{}
	return &this
}

// GetCabinets returns the Cabinets field value if set, zero value otherwise.
func (o *Cages) GetCabinets() []Cabinets {
	if o == nil || IsNil(o.Cabinets) {
		var ret []Cabinets
		return ret
	}
	return o.Cabinets
}

// GetCabinetsOk returns a tuple with the Cabinets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cages) GetCabinetsOk() ([]Cabinets, bool) {
	if o == nil || IsNil(o.Cabinets) {
		return nil, false
	}
	return o.Cabinets, true
}

// HasCabinets returns a boolean if a field has been set.
func (o *Cages) HasCabinets() bool {
	if o != nil && !IsNil(o.Cabinets) {
		return true
	}

	return false
}

// SetCabinets gets a reference to the given []Cabinets and assigns it to the Cabinets field.
func (o *Cages) SetCabinets(v []Cabinets) {
	o.Cabinets = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Cages) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cages) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Cages) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Cages) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Cages) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cages) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Cages) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Cages) SetType(v string) {
	o.Type = &v
}

func (o Cages) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Cages) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cabinets) {
		toSerialize["cabinets"] = o.Cabinets
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Cages) UnmarshalJSON(data []byte) (err error) {
	varCages := _Cages{}

	err = json.Unmarshal(data, &varCages)

	if err != nil {
		return err
	}

	*o = Cages(varCages)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cabinets")
		delete(additionalProperties, "name")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCages struct {
	value *Cages
	isSet bool
}

func (v NullableCages) Get() *Cages {
	return v.value
}

func (v *NullableCages) Set(val *Cages) {
	v.value = val
	v.isSet = true
}

func (v NullableCages) IsSet() bool {
	return v.isSet
}

func (v *NullableCages) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCages(val *Cages) *NullableCages {
	return &NullableCages{value: val, isSet: true}
}

func (v NullableCages) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCages) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


