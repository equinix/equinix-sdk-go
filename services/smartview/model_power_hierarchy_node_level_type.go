/*
Smart View Environmental API

Empower yourself with Environmental APIs. The API makes it possible to fetch current environmental data including humidity and temperature for a single sensor (identified by IBX code and sensor ID) or for all the sensors within an IBX (identified by IBX code) in a paginated way. When fetching all sensor readings you can apply additional sort criteria.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
	"fmt"
)

// PowerHierarchyNodeLevelType levelType indicates which level in the power hierarchy  does the node belong to. 
type PowerHierarchyNodeLevelType string

// List of PowerHierarchyNode_levelType
const (
	POWERHIERARCHYNODELEVELTYPE_IBX PowerHierarchyNodeLevelType = "ibx"
	POWERHIERARCHYNODELEVELTYPE_CAGE PowerHierarchyNodeLevelType = "cage"
	POWERHIERARCHYNODELEVELTYPE_CABINET PowerHierarchyNodeLevelType = "cabinet"
	POWERHIERARCHYNODELEVELTYPE_CIRCUIT PowerHierarchyNodeLevelType = "circuit"
)

// All allowed values of PowerHierarchyNodeLevelType enum
var AllowedPowerHierarchyNodeLevelTypeEnumValues = []PowerHierarchyNodeLevelType{
	"ibx",
	"cage",
	"cabinet",
	"circuit",
}

func (v *PowerHierarchyNodeLevelType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PowerHierarchyNodeLevelType(value)
	for _, existing := range AllowedPowerHierarchyNodeLevelTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PowerHierarchyNodeLevelType", value)
}

// NewPowerHierarchyNodeLevelTypeFromValue returns a pointer to a valid PowerHierarchyNodeLevelType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPowerHierarchyNodeLevelTypeFromValue(v string) (*PowerHierarchyNodeLevelType, error) {
	ev := PowerHierarchyNodeLevelType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PowerHierarchyNodeLevelType: valid values are %v", v, AllowedPowerHierarchyNodeLevelTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PowerHierarchyNodeLevelType) IsValid() bool {
	for _, existing := range AllowedPowerHierarchyNodeLevelTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PowerHierarchyNode_levelType value
func (v PowerHierarchyNodeLevelType) Ptr() *PowerHierarchyNodeLevelType {
	return &v
}

type NullablePowerHierarchyNodeLevelType struct {
	value *PowerHierarchyNodeLevelType
	isSet bool
}

func (v NullablePowerHierarchyNodeLevelType) Get() *PowerHierarchyNodeLevelType {
	return v.value
}

func (v *NullablePowerHierarchyNodeLevelType) Set(val *PowerHierarchyNodeLevelType) {
	v.value = val
	v.isSet = true
}

func (v NullablePowerHierarchyNodeLevelType) IsSet() bool {
	return v.isSet
}

func (v *NullablePowerHierarchyNodeLevelType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePowerHierarchyNodeLevelType(val *PowerHierarchyNodeLevelType) *NullablePowerHierarchyNodeLevelType {
	return &NullablePowerHierarchyNodeLevelType{value: val, isSet: true}
}

func (v NullablePowerHierarchyNodeLevelType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePowerHierarchyNodeLevelType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

