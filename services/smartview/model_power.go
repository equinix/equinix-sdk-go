/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
	"fmt"
)

// checks if the Power type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Power{}

// Power message data
type Power struct {
	// account number
	AccountNumber *string `json:"accountNumber,omitempty"`
	ApparentPower *PowerApparentPowerValueWithUnit `json:"apparentPower,omitempty"`
	Asset PowerAssetDetails `json:"asset"`
	// cabinet
	Cabinet *string `json:"cabinet,omitempty"`
	CabinetRating *PowerCabinetRatingValueWithUnit `json:"cabinetRating,omitempty"`
	// cage
	Cage *string `json:"cage,omitempty"`
	// circuit type
	CircuitType *string `json:"circuitType,omitempty"`
	ContractualPower *PowerContractualPowerValueWithUnit `json:"contractualPower,omitempty"`
	Current *PowerCurrentValueWithUnit `json:"current,omitempty"`
	// description
	Description *string `json:"description,omitempty"`
	// ibx
	Ibx string `json:"ibx"`
	// last updated time
	LastUpdated *string `json:"lastUpdated,omitempty"`
	// oid
	Oid *string `json:"oid,omitempty"`
	PeakLastSevenDays *PowerPeakLastSevenDaysValueWithUnit `json:"peakLastSevenDays,omitempty"`
	PeakLastSevenDaysContractualPower *PowerPeakLastSevenDaysContractualPowerValueWithUnit `json:"peakLastSevenDaysContractualPower,omitempty"`
	PeakLastSevenDaysRatio *PowerPeakLastSevenDaysRatioValueWithUnit `json:"peakLastSevenDaysRatio,omitempty"`
	// peak last seven days time
	PeakLastSevenDaysTime *string `json:"peakLastSevenDaysTime,omitempty"`
	PowerConsumptionToContractual *PowerPowerConsumptionToContractualValueWithUnit `json:"powerConsumptionToContractual,omitempty"`
	PowerFactor *PowerPowerFactorValueWithUnit `json:"powerFactor,omitempty"`
	// message reading time
	ReadingTime *string `json:"readingTime,omitempty"`
	RealPower *PowerRealPowerValueWithUnit `json:"realPower,omitempty"`
	SoldCurrent *PowerSoldCurrentValueWithUnit `json:"soldCurrent,omitempty"`
	SoldPower *PowerSoldPowerValueWithUnit `json:"soldPower,omitempty"`
	// unique message id
	StreamId string `json:"streamId"`
	AdditionalProperties map[string]interface{}
}

type _Power Power

// NewPower instantiates a new Power object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPower(asset PowerAssetDetails, ibx string, streamId string) *Power {
	this := Power{}
	this.Asset = asset
	this.Ibx = ibx
	this.StreamId = streamId
	return &this
}

// NewPowerWithDefaults instantiates a new Power object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPowerWithDefaults() *Power {
	this := Power{}
	return &this
}

// GetAccountNumber returns the AccountNumber field value if set, zero value otherwise.
func (o *Power) GetAccountNumber() string {
	if o == nil || IsNil(o.AccountNumber) {
		var ret string
		return ret
	}
	return *o.AccountNumber
}

// GetAccountNumberOk returns a tuple with the AccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Power) GetAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.AccountNumber) {
		return nil, false
	}
	return o.AccountNumber, true
}

// HasAccountNumber returns a boolean if a field has been set.
func (o *Power) HasAccountNumber() bool {
	if o != nil && !IsNil(o.AccountNumber) {
		return true
	}

	return false
}

// SetAccountNumber gets a reference to the given string and assigns it to the AccountNumber field.
func (o *Power) SetAccountNumber(v string) {
	o.AccountNumber = &v
}

// GetApparentPower returns the ApparentPower field value if set, zero value otherwise.
func (o *Power) GetApparentPower() PowerApparentPowerValueWithUnit {
	if o == nil || IsNil(o.ApparentPower) {
		var ret PowerApparentPowerValueWithUnit
		return ret
	}
	return *o.ApparentPower
}

// GetApparentPowerOk returns a tuple with the ApparentPower field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Power) GetApparentPowerOk() (*PowerApparentPowerValueWithUnit, bool) {
	if o == nil || IsNil(o.ApparentPower) {
		return nil, false
	}
	return o.ApparentPower, true
}

// HasApparentPower returns a boolean if a field has been set.
func (o *Power) HasApparentPower() bool {
	if o != nil && !IsNil(o.ApparentPower) {
		return true
	}

	return false
}

// SetApparentPower gets a reference to the given PowerApparentPowerValueWithUnit and assigns it to the ApparentPower field.
func (o *Power) SetApparentPower(v PowerApparentPowerValueWithUnit) {
	o.ApparentPower = &v
}

// GetAsset returns the Asset field value
func (o *Power) GetAsset() PowerAssetDetails {
	if o == nil {
		var ret PowerAssetDetails
		return ret
	}

	return o.Asset
}

// GetAssetOk returns a tuple with the Asset field value
// and a boolean to check if the value has been set.
func (o *Power) GetAssetOk() (*PowerAssetDetails, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Asset, true
}

// SetAsset sets field value
func (o *Power) SetAsset(v PowerAssetDetails) {
	o.Asset = v
}

// GetCabinet returns the Cabinet field value if set, zero value otherwise.
func (o *Power) GetCabinet() string {
	if o == nil || IsNil(o.Cabinet) {
		var ret string
		return ret
	}
	return *o.Cabinet
}

// GetCabinetOk returns a tuple with the Cabinet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Power) GetCabinetOk() (*string, bool) {
	if o == nil || IsNil(o.Cabinet) {
		return nil, false
	}
	return o.Cabinet, true
}

// HasCabinet returns a boolean if a field has been set.
func (o *Power) HasCabinet() bool {
	if o != nil && !IsNil(o.Cabinet) {
		return true
	}

	return false
}

// SetCabinet gets a reference to the given string and assigns it to the Cabinet field.
func (o *Power) SetCabinet(v string) {
	o.Cabinet = &v
}

// GetCabinetRating returns the CabinetRating field value if set, zero value otherwise.
func (o *Power) GetCabinetRating() PowerCabinetRatingValueWithUnit {
	if o == nil || IsNil(o.CabinetRating) {
		var ret PowerCabinetRatingValueWithUnit
		return ret
	}
	return *o.CabinetRating
}

// GetCabinetRatingOk returns a tuple with the CabinetRating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Power) GetCabinetRatingOk() (*PowerCabinetRatingValueWithUnit, bool) {
	if o == nil || IsNil(o.CabinetRating) {
		return nil, false
	}
	return o.CabinetRating, true
}

// HasCabinetRating returns a boolean if a field has been set.
func (o *Power) HasCabinetRating() bool {
	if o != nil && !IsNil(o.CabinetRating) {
		return true
	}

	return false
}

// SetCabinetRating gets a reference to the given PowerCabinetRatingValueWithUnit and assigns it to the CabinetRating field.
func (o *Power) SetCabinetRating(v PowerCabinetRatingValueWithUnit) {
	o.CabinetRating = &v
}

// GetCage returns the Cage field value if set, zero value otherwise.
func (o *Power) GetCage() string {
	if o == nil || IsNil(o.Cage) {
		var ret string
		return ret
	}
	return *o.Cage
}

// GetCageOk returns a tuple with the Cage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Power) GetCageOk() (*string, bool) {
	if o == nil || IsNil(o.Cage) {
		return nil, false
	}
	return o.Cage, true
}

// HasCage returns a boolean if a field has been set.
func (o *Power) HasCage() bool {
	if o != nil && !IsNil(o.Cage) {
		return true
	}

	return false
}

// SetCage gets a reference to the given string and assigns it to the Cage field.
func (o *Power) SetCage(v string) {
	o.Cage = &v
}

// GetCircuitType returns the CircuitType field value if set, zero value otherwise.
func (o *Power) GetCircuitType() string {
	if o == nil || IsNil(o.CircuitType) {
		var ret string
		return ret
	}
	return *o.CircuitType
}

// GetCircuitTypeOk returns a tuple with the CircuitType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Power) GetCircuitTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CircuitType) {
		return nil, false
	}
	return o.CircuitType, true
}

// HasCircuitType returns a boolean if a field has been set.
func (o *Power) HasCircuitType() bool {
	if o != nil && !IsNil(o.CircuitType) {
		return true
	}

	return false
}

// SetCircuitType gets a reference to the given string and assigns it to the CircuitType field.
func (o *Power) SetCircuitType(v string) {
	o.CircuitType = &v
}

// GetContractualPower returns the ContractualPower field value if set, zero value otherwise.
func (o *Power) GetContractualPower() PowerContractualPowerValueWithUnit {
	if o == nil || IsNil(o.ContractualPower) {
		var ret PowerContractualPowerValueWithUnit
		return ret
	}
	return *o.ContractualPower
}

// GetContractualPowerOk returns a tuple with the ContractualPower field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Power) GetContractualPowerOk() (*PowerContractualPowerValueWithUnit, bool) {
	if o == nil || IsNil(o.ContractualPower) {
		return nil, false
	}
	return o.ContractualPower, true
}

// HasContractualPower returns a boolean if a field has been set.
func (o *Power) HasContractualPower() bool {
	if o != nil && !IsNil(o.ContractualPower) {
		return true
	}

	return false
}

// SetContractualPower gets a reference to the given PowerContractualPowerValueWithUnit and assigns it to the ContractualPower field.
func (o *Power) SetContractualPower(v PowerContractualPowerValueWithUnit) {
	o.ContractualPower = &v
}

// GetCurrent returns the Current field value if set, zero value otherwise.
func (o *Power) GetCurrent() PowerCurrentValueWithUnit {
	if o == nil || IsNil(o.Current) {
		var ret PowerCurrentValueWithUnit
		return ret
	}
	return *o.Current
}

// GetCurrentOk returns a tuple with the Current field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Power) GetCurrentOk() (*PowerCurrentValueWithUnit, bool) {
	if o == nil || IsNil(o.Current) {
		return nil, false
	}
	return o.Current, true
}

// HasCurrent returns a boolean if a field has been set.
func (o *Power) HasCurrent() bool {
	if o != nil && !IsNil(o.Current) {
		return true
	}

	return false
}

// SetCurrent gets a reference to the given PowerCurrentValueWithUnit and assigns it to the Current field.
func (o *Power) SetCurrent(v PowerCurrentValueWithUnit) {
	o.Current = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Power) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Power) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Power) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Power) SetDescription(v string) {
	o.Description = &v
}

// GetIbx returns the Ibx field value
func (o *Power) GetIbx() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ibx
}

// GetIbxOk returns a tuple with the Ibx field value
// and a boolean to check if the value has been set.
func (o *Power) GetIbxOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ibx, true
}

// SetIbx sets field value
func (o *Power) SetIbx(v string) {
	o.Ibx = v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *Power) GetLastUpdated() string {
	if o == nil || IsNil(o.LastUpdated) {
		var ret string
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Power) GetLastUpdatedOk() (*string, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *Power) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given string and assigns it to the LastUpdated field.
func (o *Power) SetLastUpdated(v string) {
	o.LastUpdated = &v
}

// GetOid returns the Oid field value if set, zero value otherwise.
func (o *Power) GetOid() string {
	if o == nil || IsNil(o.Oid) {
		var ret string
		return ret
	}
	return *o.Oid
}

// GetOidOk returns a tuple with the Oid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Power) GetOidOk() (*string, bool) {
	if o == nil || IsNil(o.Oid) {
		return nil, false
	}
	return o.Oid, true
}

// HasOid returns a boolean if a field has been set.
func (o *Power) HasOid() bool {
	if o != nil && !IsNil(o.Oid) {
		return true
	}

	return false
}

// SetOid gets a reference to the given string and assigns it to the Oid field.
func (o *Power) SetOid(v string) {
	o.Oid = &v
}

// GetPeakLastSevenDays returns the PeakLastSevenDays field value if set, zero value otherwise.
func (o *Power) GetPeakLastSevenDays() PowerPeakLastSevenDaysValueWithUnit {
	if o == nil || IsNil(o.PeakLastSevenDays) {
		var ret PowerPeakLastSevenDaysValueWithUnit
		return ret
	}
	return *o.PeakLastSevenDays
}

// GetPeakLastSevenDaysOk returns a tuple with the PeakLastSevenDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Power) GetPeakLastSevenDaysOk() (*PowerPeakLastSevenDaysValueWithUnit, bool) {
	if o == nil || IsNil(o.PeakLastSevenDays) {
		return nil, false
	}
	return o.PeakLastSevenDays, true
}

// HasPeakLastSevenDays returns a boolean if a field has been set.
func (o *Power) HasPeakLastSevenDays() bool {
	if o != nil && !IsNil(o.PeakLastSevenDays) {
		return true
	}

	return false
}

// SetPeakLastSevenDays gets a reference to the given PowerPeakLastSevenDaysValueWithUnit and assigns it to the PeakLastSevenDays field.
func (o *Power) SetPeakLastSevenDays(v PowerPeakLastSevenDaysValueWithUnit) {
	o.PeakLastSevenDays = &v
}

// GetPeakLastSevenDaysContractualPower returns the PeakLastSevenDaysContractualPower field value if set, zero value otherwise.
func (o *Power) GetPeakLastSevenDaysContractualPower() PowerPeakLastSevenDaysContractualPowerValueWithUnit {
	if o == nil || IsNil(o.PeakLastSevenDaysContractualPower) {
		var ret PowerPeakLastSevenDaysContractualPowerValueWithUnit
		return ret
	}
	return *o.PeakLastSevenDaysContractualPower
}

// GetPeakLastSevenDaysContractualPowerOk returns a tuple with the PeakLastSevenDaysContractualPower field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Power) GetPeakLastSevenDaysContractualPowerOk() (*PowerPeakLastSevenDaysContractualPowerValueWithUnit, bool) {
	if o == nil || IsNil(o.PeakLastSevenDaysContractualPower) {
		return nil, false
	}
	return o.PeakLastSevenDaysContractualPower, true
}

// HasPeakLastSevenDaysContractualPower returns a boolean if a field has been set.
func (o *Power) HasPeakLastSevenDaysContractualPower() bool {
	if o != nil && !IsNil(o.PeakLastSevenDaysContractualPower) {
		return true
	}

	return false
}

// SetPeakLastSevenDaysContractualPower gets a reference to the given PowerPeakLastSevenDaysContractualPowerValueWithUnit and assigns it to the PeakLastSevenDaysContractualPower field.
func (o *Power) SetPeakLastSevenDaysContractualPower(v PowerPeakLastSevenDaysContractualPowerValueWithUnit) {
	o.PeakLastSevenDaysContractualPower = &v
}

// GetPeakLastSevenDaysRatio returns the PeakLastSevenDaysRatio field value if set, zero value otherwise.
func (o *Power) GetPeakLastSevenDaysRatio() PowerPeakLastSevenDaysRatioValueWithUnit {
	if o == nil || IsNil(o.PeakLastSevenDaysRatio) {
		var ret PowerPeakLastSevenDaysRatioValueWithUnit
		return ret
	}
	return *o.PeakLastSevenDaysRatio
}

// GetPeakLastSevenDaysRatioOk returns a tuple with the PeakLastSevenDaysRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Power) GetPeakLastSevenDaysRatioOk() (*PowerPeakLastSevenDaysRatioValueWithUnit, bool) {
	if o == nil || IsNil(o.PeakLastSevenDaysRatio) {
		return nil, false
	}
	return o.PeakLastSevenDaysRatio, true
}

// HasPeakLastSevenDaysRatio returns a boolean if a field has been set.
func (o *Power) HasPeakLastSevenDaysRatio() bool {
	if o != nil && !IsNil(o.PeakLastSevenDaysRatio) {
		return true
	}

	return false
}

// SetPeakLastSevenDaysRatio gets a reference to the given PowerPeakLastSevenDaysRatioValueWithUnit and assigns it to the PeakLastSevenDaysRatio field.
func (o *Power) SetPeakLastSevenDaysRatio(v PowerPeakLastSevenDaysRatioValueWithUnit) {
	o.PeakLastSevenDaysRatio = &v
}

// GetPeakLastSevenDaysTime returns the PeakLastSevenDaysTime field value if set, zero value otherwise.
func (o *Power) GetPeakLastSevenDaysTime() string {
	if o == nil || IsNil(o.PeakLastSevenDaysTime) {
		var ret string
		return ret
	}
	return *o.PeakLastSevenDaysTime
}

// GetPeakLastSevenDaysTimeOk returns a tuple with the PeakLastSevenDaysTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Power) GetPeakLastSevenDaysTimeOk() (*string, bool) {
	if o == nil || IsNil(o.PeakLastSevenDaysTime) {
		return nil, false
	}
	return o.PeakLastSevenDaysTime, true
}

// HasPeakLastSevenDaysTime returns a boolean if a field has been set.
func (o *Power) HasPeakLastSevenDaysTime() bool {
	if o != nil && !IsNil(o.PeakLastSevenDaysTime) {
		return true
	}

	return false
}

// SetPeakLastSevenDaysTime gets a reference to the given string and assigns it to the PeakLastSevenDaysTime field.
func (o *Power) SetPeakLastSevenDaysTime(v string) {
	o.PeakLastSevenDaysTime = &v
}

// GetPowerConsumptionToContractual returns the PowerConsumptionToContractual field value if set, zero value otherwise.
func (o *Power) GetPowerConsumptionToContractual() PowerPowerConsumptionToContractualValueWithUnit {
	if o == nil || IsNil(o.PowerConsumptionToContractual) {
		var ret PowerPowerConsumptionToContractualValueWithUnit
		return ret
	}
	return *o.PowerConsumptionToContractual
}

// GetPowerConsumptionToContractualOk returns a tuple with the PowerConsumptionToContractual field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Power) GetPowerConsumptionToContractualOk() (*PowerPowerConsumptionToContractualValueWithUnit, bool) {
	if o == nil || IsNil(o.PowerConsumptionToContractual) {
		return nil, false
	}
	return o.PowerConsumptionToContractual, true
}

// HasPowerConsumptionToContractual returns a boolean if a field has been set.
func (o *Power) HasPowerConsumptionToContractual() bool {
	if o != nil && !IsNil(o.PowerConsumptionToContractual) {
		return true
	}

	return false
}

// SetPowerConsumptionToContractual gets a reference to the given PowerPowerConsumptionToContractualValueWithUnit and assigns it to the PowerConsumptionToContractual field.
func (o *Power) SetPowerConsumptionToContractual(v PowerPowerConsumptionToContractualValueWithUnit) {
	o.PowerConsumptionToContractual = &v
}

// GetPowerFactor returns the PowerFactor field value if set, zero value otherwise.
func (o *Power) GetPowerFactor() PowerPowerFactorValueWithUnit {
	if o == nil || IsNil(o.PowerFactor) {
		var ret PowerPowerFactorValueWithUnit
		return ret
	}
	return *o.PowerFactor
}

// GetPowerFactorOk returns a tuple with the PowerFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Power) GetPowerFactorOk() (*PowerPowerFactorValueWithUnit, bool) {
	if o == nil || IsNil(o.PowerFactor) {
		return nil, false
	}
	return o.PowerFactor, true
}

// HasPowerFactor returns a boolean if a field has been set.
func (o *Power) HasPowerFactor() bool {
	if o != nil && !IsNil(o.PowerFactor) {
		return true
	}

	return false
}

// SetPowerFactor gets a reference to the given PowerPowerFactorValueWithUnit and assigns it to the PowerFactor field.
func (o *Power) SetPowerFactor(v PowerPowerFactorValueWithUnit) {
	o.PowerFactor = &v
}

// GetReadingTime returns the ReadingTime field value if set, zero value otherwise.
func (o *Power) GetReadingTime() string {
	if o == nil || IsNil(o.ReadingTime) {
		var ret string
		return ret
	}
	return *o.ReadingTime
}

// GetReadingTimeOk returns a tuple with the ReadingTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Power) GetReadingTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ReadingTime) {
		return nil, false
	}
	return o.ReadingTime, true
}

// HasReadingTime returns a boolean if a field has been set.
func (o *Power) HasReadingTime() bool {
	if o != nil && !IsNil(o.ReadingTime) {
		return true
	}

	return false
}

// SetReadingTime gets a reference to the given string and assigns it to the ReadingTime field.
func (o *Power) SetReadingTime(v string) {
	o.ReadingTime = &v
}

// GetRealPower returns the RealPower field value if set, zero value otherwise.
func (o *Power) GetRealPower() PowerRealPowerValueWithUnit {
	if o == nil || IsNil(o.RealPower) {
		var ret PowerRealPowerValueWithUnit
		return ret
	}
	return *o.RealPower
}

// GetRealPowerOk returns a tuple with the RealPower field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Power) GetRealPowerOk() (*PowerRealPowerValueWithUnit, bool) {
	if o == nil || IsNil(o.RealPower) {
		return nil, false
	}
	return o.RealPower, true
}

// HasRealPower returns a boolean if a field has been set.
func (o *Power) HasRealPower() bool {
	if o != nil && !IsNil(o.RealPower) {
		return true
	}

	return false
}

// SetRealPower gets a reference to the given PowerRealPowerValueWithUnit and assigns it to the RealPower field.
func (o *Power) SetRealPower(v PowerRealPowerValueWithUnit) {
	o.RealPower = &v
}

// GetSoldCurrent returns the SoldCurrent field value if set, zero value otherwise.
func (o *Power) GetSoldCurrent() PowerSoldCurrentValueWithUnit {
	if o == nil || IsNil(o.SoldCurrent) {
		var ret PowerSoldCurrentValueWithUnit
		return ret
	}
	return *o.SoldCurrent
}

// GetSoldCurrentOk returns a tuple with the SoldCurrent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Power) GetSoldCurrentOk() (*PowerSoldCurrentValueWithUnit, bool) {
	if o == nil || IsNil(o.SoldCurrent) {
		return nil, false
	}
	return o.SoldCurrent, true
}

// HasSoldCurrent returns a boolean if a field has been set.
func (o *Power) HasSoldCurrent() bool {
	if o != nil && !IsNil(o.SoldCurrent) {
		return true
	}

	return false
}

// SetSoldCurrent gets a reference to the given PowerSoldCurrentValueWithUnit and assigns it to the SoldCurrent field.
func (o *Power) SetSoldCurrent(v PowerSoldCurrentValueWithUnit) {
	o.SoldCurrent = &v
}

// GetSoldPower returns the SoldPower field value if set, zero value otherwise.
func (o *Power) GetSoldPower() PowerSoldPowerValueWithUnit {
	if o == nil || IsNil(o.SoldPower) {
		var ret PowerSoldPowerValueWithUnit
		return ret
	}
	return *o.SoldPower
}

// GetSoldPowerOk returns a tuple with the SoldPower field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Power) GetSoldPowerOk() (*PowerSoldPowerValueWithUnit, bool) {
	if o == nil || IsNil(o.SoldPower) {
		return nil, false
	}
	return o.SoldPower, true
}

// HasSoldPower returns a boolean if a field has been set.
func (o *Power) HasSoldPower() bool {
	if o != nil && !IsNil(o.SoldPower) {
		return true
	}

	return false
}

// SetSoldPower gets a reference to the given PowerSoldPowerValueWithUnit and assigns it to the SoldPower field.
func (o *Power) SetSoldPower(v PowerSoldPowerValueWithUnit) {
	o.SoldPower = &v
}

// GetStreamId returns the StreamId field value
func (o *Power) GetStreamId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StreamId
}

// GetStreamIdOk returns a tuple with the StreamId field value
// and a boolean to check if the value has been set.
func (o *Power) GetStreamIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StreamId, true
}

// SetStreamId sets field value
func (o *Power) SetStreamId(v string) {
	o.StreamId = v
}

func (o Power) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Power) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountNumber) {
		toSerialize["accountNumber"] = o.AccountNumber
	}
	if !IsNil(o.ApparentPower) {
		toSerialize["apparentPower"] = o.ApparentPower
	}
	toSerialize["asset"] = o.Asset
	if !IsNil(o.Cabinet) {
		toSerialize["cabinet"] = o.Cabinet
	}
	if !IsNil(o.CabinetRating) {
		toSerialize["cabinetRating"] = o.CabinetRating
	}
	if !IsNil(o.Cage) {
		toSerialize["cage"] = o.Cage
	}
	if !IsNil(o.CircuitType) {
		toSerialize["circuitType"] = o.CircuitType
	}
	if !IsNil(o.ContractualPower) {
		toSerialize["contractualPower"] = o.ContractualPower
	}
	if !IsNil(o.Current) {
		toSerialize["current"] = o.Current
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["ibx"] = o.Ibx
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.Oid) {
		toSerialize["oid"] = o.Oid
	}
	if !IsNil(o.PeakLastSevenDays) {
		toSerialize["peakLastSevenDays"] = o.PeakLastSevenDays
	}
	if !IsNil(o.PeakLastSevenDaysContractualPower) {
		toSerialize["peakLastSevenDaysContractualPower"] = o.PeakLastSevenDaysContractualPower
	}
	if !IsNil(o.PeakLastSevenDaysRatio) {
		toSerialize["peakLastSevenDaysRatio"] = o.PeakLastSevenDaysRatio
	}
	if !IsNil(o.PeakLastSevenDaysTime) {
		toSerialize["peakLastSevenDaysTime"] = o.PeakLastSevenDaysTime
	}
	if !IsNil(o.PowerConsumptionToContractual) {
		toSerialize["powerConsumptionToContractual"] = o.PowerConsumptionToContractual
	}
	if !IsNil(o.PowerFactor) {
		toSerialize["powerFactor"] = o.PowerFactor
	}
	if !IsNil(o.ReadingTime) {
		toSerialize["readingTime"] = o.ReadingTime
	}
	if !IsNil(o.RealPower) {
		toSerialize["realPower"] = o.RealPower
	}
	if !IsNil(o.SoldCurrent) {
		toSerialize["soldCurrent"] = o.SoldCurrent
	}
	if !IsNil(o.SoldPower) {
		toSerialize["soldPower"] = o.SoldPower
	}
	toSerialize["streamId"] = o.StreamId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Power) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"asset",
		"ibx",
		"streamId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPower := _Power{}

	err = json.Unmarshal(data, &varPower)

	if err != nil {
		return err
	}

	*o = Power(varPower)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "accountNumber")
		delete(additionalProperties, "apparentPower")
		delete(additionalProperties, "asset")
		delete(additionalProperties, "cabinet")
		delete(additionalProperties, "cabinetRating")
		delete(additionalProperties, "cage")
		delete(additionalProperties, "circuitType")
		delete(additionalProperties, "contractualPower")
		delete(additionalProperties, "current")
		delete(additionalProperties, "description")
		delete(additionalProperties, "ibx")
		delete(additionalProperties, "lastUpdated")
		delete(additionalProperties, "oid")
		delete(additionalProperties, "peakLastSevenDays")
		delete(additionalProperties, "peakLastSevenDaysContractualPower")
		delete(additionalProperties, "peakLastSevenDaysRatio")
		delete(additionalProperties, "peakLastSevenDaysTime")
		delete(additionalProperties, "powerConsumptionToContractual")
		delete(additionalProperties, "powerFactor")
		delete(additionalProperties, "readingTime")
		delete(additionalProperties, "realPower")
		delete(additionalProperties, "soldCurrent")
		delete(additionalProperties, "soldPower")
		delete(additionalProperties, "streamId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePower struct {
	value *Power
	isSet bool
}

func (v NullablePower) Get() *Power {
	return v.value
}

func (v *NullablePower) Set(val *Power) {
	v.value = val
	v.isSet = true
}

func (v NullablePower) IsSet() bool {
	return v.isSet
}

func (v *NullablePower) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePower(val *Power) *NullablePower {
	return &NullablePower{value: val, isSet: true}
}

func (v NullablePower) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePower) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


