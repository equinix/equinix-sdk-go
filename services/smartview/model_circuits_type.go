/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
	"fmt"
)

// CircuitsType the model 'CircuitsType'
type CircuitsType string

// List of Circuits_type
const (
	CIRCUITSTYPE_CIRCUIT CircuitsType = "circuit"
)

// All allowed values of CircuitsType enum
var AllowedCircuitsTypeEnumValues = []CircuitsType{
	"circuit",
}

func (v *CircuitsType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CircuitsType(value)
	for _, existing := range AllowedCircuitsTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CircuitsType", value)
}

// NewCircuitsTypeFromValue returns a pointer to a valid CircuitsType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCircuitsTypeFromValue(v string) (*CircuitsType, error) {
	ev := CircuitsType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CircuitsType: valid values are %v", v, AllowedCircuitsTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CircuitsType) IsValid() bool {
	for _, existing := range AllowedCircuitsTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Circuits_type value
func (v CircuitsType) Ptr() *CircuitsType {
	return &v
}

type NullableCircuitsType struct {
	value *CircuitsType
	isSet bool
}

func (v NullableCircuitsType) Get() *CircuitsType {
	return v.value
}

func (v *NullableCircuitsType) Set(val *CircuitsType) {
	v.value = val
	v.isSet = true
}

func (v NullableCircuitsType) IsSet() bool {
	return v.isSet
}

func (v *NullableCircuitsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCircuitsType(val *CircuitsType) *NullableCircuitsType {
	return &NullableCircuitsType{value: val, isSet: true}
}

func (v NullableCircuitsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCircuitsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

