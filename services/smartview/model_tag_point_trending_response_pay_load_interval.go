/*
Smart View Environmental API

Empower yourself with Environmental APIs. The API makes it possible to fetch current environmental data including humidity and temperature for a single sensor (identified by IBX code and sensor ID) or for all the sensors within an IBX (identified by IBX code) in a paginated way. When fetching all sensor readings you can apply additional sort criteria.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
	"fmt"
)

// TagPointTrendingResponsePayLoadInterval data sampling interval
type TagPointTrendingResponsePayLoadInterval string

// List of TagPointTrendingResponse_payLoad_interval
const (
	TAGPOINTTRENDINGRESPONSEPAYLOADINTERVAL__5M TagPointTrendingResponsePayLoadInterval = "5m"
	TAGPOINTTRENDINGRESPONSEPAYLOADINTERVAL__15M TagPointTrendingResponsePayLoadInterval = "15m"
	TAGPOINTTRENDINGRESPONSEPAYLOADINTERVAL__1H TagPointTrendingResponsePayLoadInterval = "1h"
	TAGPOINTTRENDINGRESPONSEPAYLOADINTERVAL__1D TagPointTrendingResponsePayLoadInterval = "1d"
)

// All allowed values of TagPointTrendingResponsePayLoadInterval enum
var AllowedTagPointTrendingResponsePayLoadIntervalEnumValues = []TagPointTrendingResponsePayLoadInterval{
	"5m",
	"15m",
	"1h",
	"1d",
}

func (v *TagPointTrendingResponsePayLoadInterval) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TagPointTrendingResponsePayLoadInterval(value)
	for _, existing := range AllowedTagPointTrendingResponsePayLoadIntervalEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TagPointTrendingResponsePayLoadInterval", value)
}

// NewTagPointTrendingResponsePayLoadIntervalFromValue returns a pointer to a valid TagPointTrendingResponsePayLoadInterval
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTagPointTrendingResponsePayLoadIntervalFromValue(v string) (*TagPointTrendingResponsePayLoadInterval, error) {
	ev := TagPointTrendingResponsePayLoadInterval(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TagPointTrendingResponsePayLoadInterval: valid values are %v", v, AllowedTagPointTrendingResponsePayLoadIntervalEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TagPointTrendingResponsePayLoadInterval) IsValid() bool {
	for _, existing := range AllowedTagPointTrendingResponsePayLoadIntervalEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TagPointTrendingResponse_payLoad_interval value
func (v TagPointTrendingResponsePayLoadInterval) Ptr() *TagPointTrendingResponsePayLoadInterval {
	return &v
}

type NullableTagPointTrendingResponsePayLoadInterval struct {
	value *TagPointTrendingResponsePayLoadInterval
	isSet bool
}

func (v NullableTagPointTrendingResponsePayLoadInterval) Get() *TagPointTrendingResponsePayLoadInterval {
	return v.value
}

func (v *NullableTagPointTrendingResponsePayLoadInterval) Set(val *TagPointTrendingResponsePayLoadInterval) {
	v.value = val
	v.isSet = true
}

func (v NullableTagPointTrendingResponsePayLoadInterval) IsSet() bool {
	return v.isSet
}

func (v *NullableTagPointTrendingResponsePayLoadInterval) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagPointTrendingResponsePayLoadInterval(val *TagPointTrendingResponsePayLoadInterval) *NullableTagPointTrendingResponsePayLoadInterval {
	return &NullableTagPointTrendingResponsePayLoadInterval{value: val, isSet: true}
}

func (v NullableTagPointTrendingResponsePayLoadInterval) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagPointTrendingResponsePayLoadInterval) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

