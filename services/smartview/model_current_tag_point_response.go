/*
Smart View Environmental API

Empower yourself with Environmental APIs. The API makes it possible to fetch current environmental data including humidity and temperature for a single sensor (identified by IBX code and sensor ID) or for all the sensors within an IBX (identified by IBX code) in a paginated way. When fetching all sensor readings you can apply additional sort criteria.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
)

// checks if the CurrentTagPointResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CurrentTagPointResponse{}

// CurrentTagPointResponse response object for tagpoint/current POST request
type CurrentTagPointResponse struct {
	// total number of current tag point
	TotalCount map[string]interface{} `json:"totalCount,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CurrentTagPointResponse CurrentTagPointResponse

// NewCurrentTagPointResponse instantiates a new CurrentTagPointResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCurrentTagPointResponse() *CurrentTagPointResponse {
	this := CurrentTagPointResponse{}
	return &this
}

// NewCurrentTagPointResponseWithDefaults instantiates a new CurrentTagPointResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCurrentTagPointResponseWithDefaults() *CurrentTagPointResponse {
	this := CurrentTagPointResponse{}
	return &this
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise.
func (o *CurrentTagPointResponse) GetTotalCount() map[string]interface{} {
	if o == nil || IsNil(o.TotalCount) {
		var ret map[string]interface{}
		return ret
	}
	return o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrentTagPointResponse) GetTotalCountOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.TotalCount) {
		return map[string]interface{}{}, false
	}
	return o.TotalCount, true
}

// HasTotalCount returns a boolean if a field has been set.
func (o *CurrentTagPointResponse) HasTotalCount() bool {
	if o != nil && !IsNil(o.TotalCount) {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given map[string]interface{} and assigns it to the TotalCount field.
func (o *CurrentTagPointResponse) SetTotalCount(v map[string]interface{}) {
	o.TotalCount = v
}

func (o CurrentTagPointResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CurrentTagPointResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TotalCount) {
		toSerialize["totalCount"] = o.TotalCount
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CurrentTagPointResponse) UnmarshalJSON(data []byte) (err error) {
	varCurrentTagPointResponse := _CurrentTagPointResponse{}

	err = json.Unmarshal(data, &varCurrentTagPointResponse)

	if err != nil {
		return err
	}

	*o = CurrentTagPointResponse(varCurrentTagPointResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "totalCount")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCurrentTagPointResponse struct {
	value *CurrentTagPointResponse
	isSet bool
}

func (v NullableCurrentTagPointResponse) Get() *CurrentTagPointResponse {
	return v.value
}

func (v *NullableCurrentTagPointResponse) Set(val *CurrentTagPointResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrentTagPointResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrentTagPointResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrentTagPointResponse(val *CurrentTagPointResponse) *NullableCurrentTagPointResponse {
	return &NullableCurrentTagPointResponse{value: val, isSet: true}
}

func (v NullableCurrentTagPointResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrentTagPointResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


