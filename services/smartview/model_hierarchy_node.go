/*
Smart View Environmental API

Empower yourself with Environmental APIs. The API makes it possible to fetch current environmental data including humidity and temperature for a single sensor (identified by IBX code and sensor ID) or for all the sensors within an IBX (identified by IBX code) in a paginated way. When fetching all sensor readings you can apply additional sort criteria.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
)

// checks if the HierarchyNode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HierarchyNode{}

// HierarchyNode struct for HierarchyNode
type HierarchyNode struct {
	PayLoad *HierarchyNodePayLoad `json:"payLoad,omitempty"`
	Status *AssetDetailResponseStatus `json:"status,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HierarchyNode HierarchyNode

// NewHierarchyNode instantiates a new HierarchyNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHierarchyNode() *HierarchyNode {
	this := HierarchyNode{}
	return &this
}

// NewHierarchyNodeWithDefaults instantiates a new HierarchyNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHierarchyNodeWithDefaults() *HierarchyNode {
	this := HierarchyNode{}
	return &this
}

// GetPayLoad returns the PayLoad field value if set, zero value otherwise.
func (o *HierarchyNode) GetPayLoad() HierarchyNodePayLoad {
	if o == nil || IsNil(o.PayLoad) {
		var ret HierarchyNodePayLoad
		return ret
	}
	return *o.PayLoad
}

// GetPayLoadOk returns a tuple with the PayLoad field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HierarchyNode) GetPayLoadOk() (*HierarchyNodePayLoad, bool) {
	if o == nil || IsNil(o.PayLoad) {
		return nil, false
	}
	return o.PayLoad, true
}

// HasPayLoad returns a boolean if a field has been set.
func (o *HierarchyNode) HasPayLoad() bool {
	if o != nil && !IsNil(o.PayLoad) {
		return true
	}

	return false
}

// SetPayLoad gets a reference to the given HierarchyNodePayLoad and assigns it to the PayLoad field.
func (o *HierarchyNode) SetPayLoad(v HierarchyNodePayLoad) {
	o.PayLoad = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *HierarchyNode) GetStatus() AssetDetailResponseStatus {
	if o == nil || IsNil(o.Status) {
		var ret AssetDetailResponseStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HierarchyNode) GetStatusOk() (*AssetDetailResponseStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *HierarchyNode) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given AssetDetailResponseStatus and assigns it to the Status field.
func (o *HierarchyNode) SetStatus(v AssetDetailResponseStatus) {
	o.Status = &v
}

func (o HierarchyNode) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HierarchyNode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PayLoad) {
		toSerialize["payLoad"] = o.PayLoad
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HierarchyNode) UnmarshalJSON(data []byte) (err error) {
	varHierarchyNode := _HierarchyNode{}

	err = json.Unmarshal(data, &varHierarchyNode)

	if err != nil {
		return err
	}

	*o = HierarchyNode(varHierarchyNode)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "payLoad")
		delete(additionalProperties, "status")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHierarchyNode struct {
	value *HierarchyNode
	isSet bool
}

func (v NullableHierarchyNode) Get() *HierarchyNode {
	return v.value
}

func (v *NullableHierarchyNode) Set(val *HierarchyNode) {
	v.value = val
	v.isSet = true
}

func (v NullableHierarchyNode) IsSet() bool {
	return v.isSet
}

func (v *NullableHierarchyNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHierarchyNode(val *HierarchyNode) *NullableHierarchyNode {
	return &NullableHierarchyNode{value: val, isSet: true}
}

func (v NullableHierarchyNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHierarchyNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


