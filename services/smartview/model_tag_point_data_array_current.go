/*
Smart View Environmental API

Empower yourself with Environmental APIs. The API makes it possible to fetch current environmental data including humidity and temperature for a single sensor (identified by IBX code and sensor ID) or for all the sensors within an IBX (identified by IBX code) in a paginated way. When fetching all sensor readings you can apply additional sort criteria.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
)

// checks if the TagPointDataArrayCurrent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TagPointDataArrayCurrent{}

// TagPointDataArrayCurrent Tag Point is a property of the Asset it is linked to. 
type TagPointDataArrayCurrent struct {
	// date time when the tag point value was read from the device.           
	ReadingTime *string `json:"readingTime,omitempty"`
	// Generic label for the tag point 
	TagDisplayName *string `json:"tagDisplayName,omitempty"`
	// ID for the tagPoint - Unique Identifier for the Tag Point 
	TagId *string `json:"tagId,omitempty"`
	// Unit of measure for the data value for the tag point 
	Uom *string `json:"uom,omitempty"`
	// Current data value for the tag point 
	Value *string `json:"value,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TagPointDataArrayCurrent TagPointDataArrayCurrent

// NewTagPointDataArrayCurrent instantiates a new TagPointDataArrayCurrent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagPointDataArrayCurrent() *TagPointDataArrayCurrent {
	this := TagPointDataArrayCurrent{}
	return &this
}

// NewTagPointDataArrayCurrentWithDefaults instantiates a new TagPointDataArrayCurrent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagPointDataArrayCurrentWithDefaults() *TagPointDataArrayCurrent {
	this := TagPointDataArrayCurrent{}
	return &this
}

// GetReadingTime returns the ReadingTime field value if set, zero value otherwise.
func (o *TagPointDataArrayCurrent) GetReadingTime() string {
	if o == nil || IsNil(o.ReadingTime) {
		var ret string
		return ret
	}
	return *o.ReadingTime
}

// GetReadingTimeOk returns a tuple with the ReadingTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagPointDataArrayCurrent) GetReadingTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ReadingTime) {
		return nil, false
	}
	return o.ReadingTime, true
}

// HasReadingTime returns a boolean if a field has been set.
func (o *TagPointDataArrayCurrent) HasReadingTime() bool {
	if o != nil && !IsNil(o.ReadingTime) {
		return true
	}

	return false
}

// SetReadingTime gets a reference to the given string and assigns it to the ReadingTime field.
func (o *TagPointDataArrayCurrent) SetReadingTime(v string) {
	o.ReadingTime = &v
}

// GetTagDisplayName returns the TagDisplayName field value if set, zero value otherwise.
func (o *TagPointDataArrayCurrent) GetTagDisplayName() string {
	if o == nil || IsNil(o.TagDisplayName) {
		var ret string
		return ret
	}
	return *o.TagDisplayName
}

// GetTagDisplayNameOk returns a tuple with the TagDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagPointDataArrayCurrent) GetTagDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.TagDisplayName) {
		return nil, false
	}
	return o.TagDisplayName, true
}

// HasTagDisplayName returns a boolean if a field has been set.
func (o *TagPointDataArrayCurrent) HasTagDisplayName() bool {
	if o != nil && !IsNil(o.TagDisplayName) {
		return true
	}

	return false
}

// SetTagDisplayName gets a reference to the given string and assigns it to the TagDisplayName field.
func (o *TagPointDataArrayCurrent) SetTagDisplayName(v string) {
	o.TagDisplayName = &v
}

// GetTagId returns the TagId field value if set, zero value otherwise.
func (o *TagPointDataArrayCurrent) GetTagId() string {
	if o == nil || IsNil(o.TagId) {
		var ret string
		return ret
	}
	return *o.TagId
}

// GetTagIdOk returns a tuple with the TagId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagPointDataArrayCurrent) GetTagIdOk() (*string, bool) {
	if o == nil || IsNil(o.TagId) {
		return nil, false
	}
	return o.TagId, true
}

// HasTagId returns a boolean if a field has been set.
func (o *TagPointDataArrayCurrent) HasTagId() bool {
	if o != nil && !IsNil(o.TagId) {
		return true
	}

	return false
}

// SetTagId gets a reference to the given string and assigns it to the TagId field.
func (o *TagPointDataArrayCurrent) SetTagId(v string) {
	o.TagId = &v
}

// GetUom returns the Uom field value if set, zero value otherwise.
func (o *TagPointDataArrayCurrent) GetUom() string {
	if o == nil || IsNil(o.Uom) {
		var ret string
		return ret
	}
	return *o.Uom
}

// GetUomOk returns a tuple with the Uom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagPointDataArrayCurrent) GetUomOk() (*string, bool) {
	if o == nil || IsNil(o.Uom) {
		return nil, false
	}
	return o.Uom, true
}

// HasUom returns a boolean if a field has been set.
func (o *TagPointDataArrayCurrent) HasUom() bool {
	if o != nil && !IsNil(o.Uom) {
		return true
	}

	return false
}

// SetUom gets a reference to the given string and assigns it to the Uom field.
func (o *TagPointDataArrayCurrent) SetUom(v string) {
	o.Uom = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *TagPointDataArrayCurrent) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagPointDataArrayCurrent) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *TagPointDataArrayCurrent) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *TagPointDataArrayCurrent) SetValue(v string) {
	o.Value = &v
}

func (o TagPointDataArrayCurrent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TagPointDataArrayCurrent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ReadingTime) {
		toSerialize["readingTime"] = o.ReadingTime
	}
	if !IsNil(o.TagDisplayName) {
		toSerialize["tagDisplayName"] = o.TagDisplayName
	}
	if !IsNil(o.TagId) {
		toSerialize["tagId"] = o.TagId
	}
	if !IsNil(o.Uom) {
		toSerialize["uom"] = o.Uom
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TagPointDataArrayCurrent) UnmarshalJSON(data []byte) (err error) {
	varTagPointDataArrayCurrent := _TagPointDataArrayCurrent{}

	err = json.Unmarshal(data, &varTagPointDataArrayCurrent)

	if err != nil {
		return err
	}

	*o = TagPointDataArrayCurrent(varTagPointDataArrayCurrent)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "readingTime")
		delete(additionalProperties, "tagDisplayName")
		delete(additionalProperties, "tagId")
		delete(additionalProperties, "uom")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTagPointDataArrayCurrent struct {
	value *TagPointDataArrayCurrent
	isSet bool
}

func (v NullableTagPointDataArrayCurrent) Get() *TagPointDataArrayCurrent {
	return v.value
}

func (v *NullableTagPointDataArrayCurrent) Set(val *TagPointDataArrayCurrent) {
	v.value = val
	v.isSet = true
}

func (v NullableTagPointDataArrayCurrent) IsSet() bool {
	return v.isSet
}

func (v *NullableTagPointDataArrayCurrent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagPointDataArrayCurrent(val *TagPointDataArrayCurrent) *NullableTagPointDataArrayCurrent {
	return &NullableTagPointDataArrayCurrent{value: val, isSet: true}
}

func (v NullableTagPointDataArrayCurrent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagPointDataArrayCurrent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


