/*
Smart View Environmental API

Empower yourself with Environmental APIs. The API makes it possible to fetch current environmental data including humidity and temperature for a single sensor (identified by IBX code and sensor ID) or for all the sensors within an IBX (identified by IBX code) in a paginated way. When fetching all sensor readings you can apply additional sort criteria.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
	"fmt"
)

// CircuitsName the model 'CircuitsName'
type CircuitsName string

// List of Circuits_name
const (
	CIRCUITSNAME__877484_0 CircuitsName = "877484.0"
)

// All allowed values of CircuitsName enum
var AllowedCircuitsNameEnumValues = []CircuitsName{
	"877484.0",
}

func (v *CircuitsName) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CircuitsName(value)
	for _, existing := range AllowedCircuitsNameEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CircuitsName", value)
}

// NewCircuitsNameFromValue returns a pointer to a valid CircuitsName
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCircuitsNameFromValue(v string) (*CircuitsName, error) {
	ev := CircuitsName(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CircuitsName: valid values are %v", v, AllowedCircuitsNameEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CircuitsName) IsValid() bool {
	for _, existing := range AllowedCircuitsNameEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Circuits_name value
func (v CircuitsName) Ptr() *CircuitsName {
	return &v
}

type NullableCircuitsName struct {
	value *CircuitsName
	isSet bool
}

func (v NullableCircuitsName) Get() *CircuitsName {
	return v.value
}

func (v *NullableCircuitsName) Set(val *CircuitsName) {
	v.value = val
	v.isSet = true
}

func (v NullableCircuitsName) IsSet() bool {
	return v.isSet
}

func (v *NullableCircuitsName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCircuitsName(val *CircuitsName) *NullableCircuitsName {
	return &NullableCircuitsName{value: val, isSet: true}
}

func (v NullableCircuitsName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCircuitsName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

