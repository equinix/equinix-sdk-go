/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
	"fmt"
)

// checks if the PowerPeakLastSevenDaysValueWithUnit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PowerPeakLastSevenDaysValueWithUnit{}

// PowerPeakLastSevenDaysValueWithUnit peakLastSevenDays details
type PowerPeakLastSevenDaysValueWithUnit struct {
	// PeakLastSevenDays reading unit
	Unit string `json:"unit"`
	// PeakLastSevenDays reading value
	Value string `json:"value"`
	AdditionalProperties map[string]interface{}
}

type _PowerPeakLastSevenDaysValueWithUnit PowerPeakLastSevenDaysValueWithUnit

// NewPowerPeakLastSevenDaysValueWithUnit instantiates a new PowerPeakLastSevenDaysValueWithUnit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPowerPeakLastSevenDaysValueWithUnit(unit string, value string) *PowerPeakLastSevenDaysValueWithUnit {
	this := PowerPeakLastSevenDaysValueWithUnit{}
	this.Unit = unit
	this.Value = value
	return &this
}

// NewPowerPeakLastSevenDaysValueWithUnitWithDefaults instantiates a new PowerPeakLastSevenDaysValueWithUnit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPowerPeakLastSevenDaysValueWithUnitWithDefaults() *PowerPeakLastSevenDaysValueWithUnit {
	this := PowerPeakLastSevenDaysValueWithUnit{}
	return &this
}

// GetUnit returns the Unit field value
func (o *PowerPeakLastSevenDaysValueWithUnit) GetUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Unit
}

// GetUnitOk returns a tuple with the Unit field value
// and a boolean to check if the value has been set.
func (o *PowerPeakLastSevenDaysValueWithUnit) GetUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Unit, true
}

// SetUnit sets field value
func (o *PowerPeakLastSevenDaysValueWithUnit) SetUnit(v string) {
	o.Unit = v
}

// GetValue returns the Value field value
func (o *PowerPeakLastSevenDaysValueWithUnit) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *PowerPeakLastSevenDaysValueWithUnit) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *PowerPeakLastSevenDaysValueWithUnit) SetValue(v string) {
	o.Value = v
}

func (o PowerPeakLastSevenDaysValueWithUnit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PowerPeakLastSevenDaysValueWithUnit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["unit"] = o.Unit
	toSerialize["value"] = o.Value

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PowerPeakLastSevenDaysValueWithUnit) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"unit",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPowerPeakLastSevenDaysValueWithUnit := _PowerPeakLastSevenDaysValueWithUnit{}

	err = json.Unmarshal(data, &varPowerPeakLastSevenDaysValueWithUnit)

	if err != nil {
		return err
	}

	*o = PowerPeakLastSevenDaysValueWithUnit(varPowerPeakLastSevenDaysValueWithUnit)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "unit")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePowerPeakLastSevenDaysValueWithUnit struct {
	value *PowerPeakLastSevenDaysValueWithUnit
	isSet bool
}

func (v NullablePowerPeakLastSevenDaysValueWithUnit) Get() *PowerPeakLastSevenDaysValueWithUnit {
	return v.value
}

func (v *NullablePowerPeakLastSevenDaysValueWithUnit) Set(val *PowerPeakLastSevenDaysValueWithUnit) {
	v.value = val
	v.isSet = true
}

func (v NullablePowerPeakLastSevenDaysValueWithUnit) IsSet() bool {
	return v.isSet
}

func (v *NullablePowerPeakLastSevenDaysValueWithUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePowerPeakLastSevenDaysValueWithUnit(val *PowerPeakLastSevenDaysValueWithUnit) *NullablePowerPeakLastSevenDaysValueWithUnit {
	return &NullablePowerPeakLastSevenDaysValueWithUnit{value: val, isSet: true}
}

func (v NullablePowerPeakLastSevenDaysValueWithUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePowerPeakLastSevenDaysValueWithUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


