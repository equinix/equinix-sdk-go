/*
Smart View Environmental API

Empower yourself with Environmental APIs. The API makes it possible to fetch current environmental data including humidity and temperature for a single sensor (identified by IBX code and sensor ID) or for all the sensors within an IBX (identified by IBX code) in a paginated way. When fetching all sensor readings you can apply additional sort criteria.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
)

// checks if the PowerDataError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PowerDataError{}

// PowerDataError struct for PowerDataError
type PowerDataError struct {
	PayLoad map[string]interface{} `json:"payLoad,omitempty"`
	Status *PowerDataErrorStatus `json:"status,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PowerDataError PowerDataError

// NewPowerDataError instantiates a new PowerDataError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPowerDataError() *PowerDataError {
	this := PowerDataError{}
	return &this
}

// NewPowerDataErrorWithDefaults instantiates a new PowerDataError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPowerDataErrorWithDefaults() *PowerDataError {
	this := PowerDataError{}
	return &this
}

// GetPayLoad returns the PayLoad field value if set, zero value otherwise.
func (o *PowerDataError) GetPayLoad() map[string]interface{} {
	if o == nil || IsNil(o.PayLoad) {
		var ret map[string]interface{}
		return ret
	}
	return o.PayLoad
}

// GetPayLoadOk returns a tuple with the PayLoad field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerDataError) GetPayLoadOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.PayLoad) {
		return map[string]interface{}{}, false
	}
	return o.PayLoad, true
}

// HasPayLoad returns a boolean if a field has been set.
func (o *PowerDataError) HasPayLoad() bool {
	if o != nil && !IsNil(o.PayLoad) {
		return true
	}

	return false
}

// SetPayLoad gets a reference to the given map[string]interface{} and assigns it to the PayLoad field.
func (o *PowerDataError) SetPayLoad(v map[string]interface{}) {
	o.PayLoad = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *PowerDataError) GetStatus() PowerDataErrorStatus {
	if o == nil || IsNil(o.Status) {
		var ret PowerDataErrorStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerDataError) GetStatusOk() (*PowerDataErrorStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *PowerDataError) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given PowerDataErrorStatus and assigns it to the Status field.
func (o *PowerDataError) SetStatus(v PowerDataErrorStatus) {
	o.Status = &v
}

func (o PowerDataError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PowerDataError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PayLoad) {
		toSerialize["payLoad"] = o.PayLoad
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PowerDataError) UnmarshalJSON(data []byte) (err error) {
	varPowerDataError := _PowerDataError{}

	err = json.Unmarshal(data, &varPowerDataError)

	if err != nil {
		return err
	}

	*o = PowerDataError(varPowerDataError)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "payLoad")
		delete(additionalProperties, "status")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePowerDataError struct {
	value *PowerDataError
	isSet bool
}

func (v NullablePowerDataError) Get() *PowerDataError {
	return v.value
}

func (v *NullablePowerDataError) Set(val *PowerDataError) {
	v.value = val
	v.isSet = true
}

func (v NullablePowerDataError) IsSet() bool {
	return v.isSet
}

func (v *NullablePowerDataError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePowerDataError(val *PowerDataError) *NullablePowerDataError {
	return &NullablePowerDataError{value: val, isSet: true}
}

func (v NullablePowerDataError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePowerDataError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


