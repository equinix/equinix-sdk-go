/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
	"fmt"
)

// checks if the EnvironmentAssetDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvironmentAssetDetails{}

// EnvironmentAssetDetails asset details
type EnvironmentAssetDetails struct {
	// asset id
	Id string `json:"id"`
	// asset level
	Level string `json:"level"`
	AdditionalProperties map[string]interface{}
}

type _EnvironmentAssetDetails EnvironmentAssetDetails

// NewEnvironmentAssetDetails instantiates a new EnvironmentAssetDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentAssetDetails(id string, level string) *EnvironmentAssetDetails {
	this := EnvironmentAssetDetails{}
	this.Id = id
	this.Level = level
	return &this
}

// NewEnvironmentAssetDetailsWithDefaults instantiates a new EnvironmentAssetDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentAssetDetailsWithDefaults() *EnvironmentAssetDetails {
	this := EnvironmentAssetDetails{}
	return &this
}

// GetId returns the Id field value
func (o *EnvironmentAssetDetails) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *EnvironmentAssetDetails) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *EnvironmentAssetDetails) SetId(v string) {
	o.Id = v
}

// GetLevel returns the Level field value
func (o *EnvironmentAssetDetails) GetLevel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Level
}

// GetLevelOk returns a tuple with the Level field value
// and a boolean to check if the value has been set.
func (o *EnvironmentAssetDetails) GetLevelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Level, true
}

// SetLevel sets field value
func (o *EnvironmentAssetDetails) SetLevel(v string) {
	o.Level = v
}

func (o EnvironmentAssetDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvironmentAssetDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["level"] = o.Level

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EnvironmentAssetDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"level",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEnvironmentAssetDetails := _EnvironmentAssetDetails{}

	err = json.Unmarshal(data, &varEnvironmentAssetDetails)

	if err != nil {
		return err
	}

	*o = EnvironmentAssetDetails(varEnvironmentAssetDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "level")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEnvironmentAssetDetails struct {
	value *EnvironmentAssetDetails
	isSet bool
}

func (v NullableEnvironmentAssetDetails) Get() *EnvironmentAssetDetails {
	return v.value
}

func (v *NullableEnvironmentAssetDetails) Set(val *EnvironmentAssetDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentAssetDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentAssetDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentAssetDetails(val *EnvironmentAssetDetails) *NullableEnvironmentAssetDetails {
	return &NullableEnvironmentAssetDetails{value: val, isSet: true}
}

func (v NullableEnvironmentAssetDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentAssetDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


