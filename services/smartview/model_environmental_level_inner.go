/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
	"fmt"
)

// EnvironmentalLevelInner the model 'EnvironmentalLevelInner'
type EnvironmentalLevelInner string

// List of Environmental_level_inner
const (
	ENVIRONMENTALLEVELINNER_ZONE EnvironmentalLevelInner = "ZONE"
	ENVIRONMENTALLEVELINNER_IBX EnvironmentalLevelInner = "IBX"
	ENVIRONMENTALLEVELINNER_CAGE EnvironmentalLevelInner = "CAGE"
)

// All allowed values of EnvironmentalLevelInner enum
var AllowedEnvironmentalLevelInnerEnumValues = []EnvironmentalLevelInner{
	"ZONE",
	"IBX",
	"CAGE",
}

func (v *EnvironmentalLevelInner) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnvironmentalLevelInner(value)
	for _, existing := range AllowedEnvironmentalLevelInnerEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnvironmentalLevelInner", value)
}

// NewEnvironmentalLevelInnerFromValue returns a pointer to a valid EnvironmentalLevelInner
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnvironmentalLevelInnerFromValue(v string) (*EnvironmentalLevelInner, error) {
	ev := EnvironmentalLevelInner(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnvironmentalLevelInner: valid values are %v", v, AllowedEnvironmentalLevelInnerEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnvironmentalLevelInner) IsValid() bool {
	for _, existing := range AllowedEnvironmentalLevelInnerEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Environmental_level_inner value
func (v EnvironmentalLevelInner) Ptr() *EnvironmentalLevelInner {
	return &v
}

type NullableEnvironmentalLevelInner struct {
	value *EnvironmentalLevelInner
	isSet bool
}

func (v NullableEnvironmentalLevelInner) Get() *EnvironmentalLevelInner {
	return v.value
}

func (v *NullableEnvironmentalLevelInner) Set(val *EnvironmentalLevelInner) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentalLevelInner) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentalLevelInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentalLevelInner(val *EnvironmentalLevelInner) *NullableEnvironmentalLevelInner {
	return &NullableEnvironmentalLevelInner{value: val, isSet: true}
}

func (v NullableEnvironmentalLevelInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentalLevelInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

