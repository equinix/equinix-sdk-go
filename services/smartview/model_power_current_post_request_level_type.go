/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
	"fmt"
)

// PowerCurrentPostRequestLevelType level type allowed value [ibx|cage|cabinet|circuit]
type PowerCurrentPostRequestLevelType string

// List of PowerCurrentPostRequest_levelType
const (
	POWERCURRENTPOSTREQUESTLEVELTYPE_IBX PowerCurrentPostRequestLevelType = "ibx"
	POWERCURRENTPOSTREQUESTLEVELTYPE_CAGE PowerCurrentPostRequestLevelType = "cage"
	POWERCURRENTPOSTREQUESTLEVELTYPE_CABINET PowerCurrentPostRequestLevelType = "cabinet"
	POWERCURRENTPOSTREQUESTLEVELTYPE_CIRCUIT PowerCurrentPostRequestLevelType = "circuit"
)

// All allowed values of PowerCurrentPostRequestLevelType enum
var AllowedPowerCurrentPostRequestLevelTypeEnumValues = []PowerCurrentPostRequestLevelType{
	"ibx",
	"cage",
	"cabinet",
	"circuit",
}

func (v *PowerCurrentPostRequestLevelType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PowerCurrentPostRequestLevelType(value)
	for _, existing := range AllowedPowerCurrentPostRequestLevelTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PowerCurrentPostRequestLevelType", value)
}

// NewPowerCurrentPostRequestLevelTypeFromValue returns a pointer to a valid PowerCurrentPostRequestLevelType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPowerCurrentPostRequestLevelTypeFromValue(v string) (*PowerCurrentPostRequestLevelType, error) {
	ev := PowerCurrentPostRequestLevelType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PowerCurrentPostRequestLevelType: valid values are %v", v, AllowedPowerCurrentPostRequestLevelTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PowerCurrentPostRequestLevelType) IsValid() bool {
	for _, existing := range AllowedPowerCurrentPostRequestLevelTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PowerCurrentPostRequest_levelType value
func (v PowerCurrentPostRequestLevelType) Ptr() *PowerCurrentPostRequestLevelType {
	return &v
}

type NullablePowerCurrentPostRequestLevelType struct {
	value *PowerCurrentPostRequestLevelType
	isSet bool
}

func (v NullablePowerCurrentPostRequestLevelType) Get() *PowerCurrentPostRequestLevelType {
	return v.value
}

func (v *NullablePowerCurrentPostRequestLevelType) Set(val *PowerCurrentPostRequestLevelType) {
	v.value = val
	v.isSet = true
}

func (v NullablePowerCurrentPostRequestLevelType) IsSet() bool {
	return v.isSet
}

func (v *NullablePowerCurrentPostRequestLevelType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePowerCurrentPostRequestLevelType(val *PowerCurrentPostRequestLevelType) *NullablePowerCurrentPostRequestLevelType {
	return &NullablePowerCurrentPostRequestLevelType{value: val, isSet: true}
}

func (v NullablePowerCurrentPostRequestLevelType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePowerCurrentPostRequestLevelType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

