/*
Smart View Environmental API

Empower yourself with Environmental APIs. The API makes it possible to fetch current environmental data including humidity and temperature for a single sensor (identified by IBX code and sensor ID) or for all the sensors within an IBX (identified by IBX code) in a paginated way. When fetching all sensor readings you can apply additional sort criteria.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
)

// checks if the ConditionalAlert type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConditionalAlert{}

// ConditionalAlert struct for ConditionalAlert
type ConditionalAlert struct {
	AffectedCustomerAsset *string `json:"affectedCustomerAsset,omitempty"`
	AlertType *string `json:"alertType,omitempty"`
	Asset *string `json:"asset,omitempty"`
	Assetname *string `json:"assetname,omitempty"`
	Assettype *string `json:"assettype,omitempty"`
	Condalerttypeid *string `json:"condalerttypeid,omitempty"`
	Condassetclassification *string `json:"condassetclassification,omitempty"`
	Condassetid *string `json:"condassetid,omitempty"`
	Condcurrentvalue *string `json:"condcurrentvalue,omitempty"`
	Condeventtype *string `json:"condeventtype,omitempty"`
	Condtagid *string `json:"condtagid,omitempty"`
	CustomerAssets *string `json:"customerAssets,omitempty"`
	Ibx *string `json:"ibx,omitempty"`
	InfraAssets *string `json:"infraAssets,omitempty"`
	MeasurementType *string `json:"measurementType,omitempty"`
	Region *string `json:"region,omitempty"`
	Section *string `json:"section,omitempty"`
	ThresholdUnit *string `json:"thresholdUnit,omitempty"`
	ThresholdValue *string `json:"thresholdValue,omitempty"`
	ThresholdValueMax *string `json:"thresholdValueMax,omitempty"`
	ThresholdValueMin *string `json:"thresholdValueMin,omitempty"`
	Uom *string `json:"uom,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ConditionalAlert ConditionalAlert

// NewConditionalAlert instantiates a new ConditionalAlert object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConditionalAlert() *ConditionalAlert {
	this := ConditionalAlert{}
	return &this
}

// NewConditionalAlertWithDefaults instantiates a new ConditionalAlert object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionalAlertWithDefaults() *ConditionalAlert {
	this := ConditionalAlert{}
	return &this
}

// GetAffectedCustomerAsset returns the AffectedCustomerAsset field value if set, zero value otherwise.
func (o *ConditionalAlert) GetAffectedCustomerAsset() string {
	if o == nil || IsNil(o.AffectedCustomerAsset) {
		var ret string
		return ret
	}
	return *o.AffectedCustomerAsset
}

// GetAffectedCustomerAssetOk returns a tuple with the AffectedCustomerAsset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionalAlert) GetAffectedCustomerAssetOk() (*string, bool) {
	if o == nil || IsNil(o.AffectedCustomerAsset) {
		return nil, false
	}
	return o.AffectedCustomerAsset, true
}

// HasAffectedCustomerAsset returns a boolean if a field has been set.
func (o *ConditionalAlert) HasAffectedCustomerAsset() bool {
	if o != nil && !IsNil(o.AffectedCustomerAsset) {
		return true
	}

	return false
}

// SetAffectedCustomerAsset gets a reference to the given string and assigns it to the AffectedCustomerAsset field.
func (o *ConditionalAlert) SetAffectedCustomerAsset(v string) {
	o.AffectedCustomerAsset = &v
}

// GetAlertType returns the AlertType field value if set, zero value otherwise.
func (o *ConditionalAlert) GetAlertType() string {
	if o == nil || IsNil(o.AlertType) {
		var ret string
		return ret
	}
	return *o.AlertType
}

// GetAlertTypeOk returns a tuple with the AlertType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionalAlert) GetAlertTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AlertType) {
		return nil, false
	}
	return o.AlertType, true
}

// HasAlertType returns a boolean if a field has been set.
func (o *ConditionalAlert) HasAlertType() bool {
	if o != nil && !IsNil(o.AlertType) {
		return true
	}

	return false
}

// SetAlertType gets a reference to the given string and assigns it to the AlertType field.
func (o *ConditionalAlert) SetAlertType(v string) {
	o.AlertType = &v
}

// GetAsset returns the Asset field value if set, zero value otherwise.
func (o *ConditionalAlert) GetAsset() string {
	if o == nil || IsNil(o.Asset) {
		var ret string
		return ret
	}
	return *o.Asset
}

// GetAssetOk returns a tuple with the Asset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionalAlert) GetAssetOk() (*string, bool) {
	if o == nil || IsNil(o.Asset) {
		return nil, false
	}
	return o.Asset, true
}

// HasAsset returns a boolean if a field has been set.
func (o *ConditionalAlert) HasAsset() bool {
	if o != nil && !IsNil(o.Asset) {
		return true
	}

	return false
}

// SetAsset gets a reference to the given string and assigns it to the Asset field.
func (o *ConditionalAlert) SetAsset(v string) {
	o.Asset = &v
}

// GetAssetname returns the Assetname field value if set, zero value otherwise.
func (o *ConditionalAlert) GetAssetname() string {
	if o == nil || IsNil(o.Assetname) {
		var ret string
		return ret
	}
	return *o.Assetname
}

// GetAssetnameOk returns a tuple with the Assetname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionalAlert) GetAssetnameOk() (*string, bool) {
	if o == nil || IsNil(o.Assetname) {
		return nil, false
	}
	return o.Assetname, true
}

// HasAssetname returns a boolean if a field has been set.
func (o *ConditionalAlert) HasAssetname() bool {
	if o != nil && !IsNil(o.Assetname) {
		return true
	}

	return false
}

// SetAssetname gets a reference to the given string and assigns it to the Assetname field.
func (o *ConditionalAlert) SetAssetname(v string) {
	o.Assetname = &v
}

// GetAssettype returns the Assettype field value if set, zero value otherwise.
func (o *ConditionalAlert) GetAssettype() string {
	if o == nil || IsNil(o.Assettype) {
		var ret string
		return ret
	}
	return *o.Assettype
}

// GetAssettypeOk returns a tuple with the Assettype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionalAlert) GetAssettypeOk() (*string, bool) {
	if o == nil || IsNil(o.Assettype) {
		return nil, false
	}
	return o.Assettype, true
}

// HasAssettype returns a boolean if a field has been set.
func (o *ConditionalAlert) HasAssettype() bool {
	if o != nil && !IsNil(o.Assettype) {
		return true
	}

	return false
}

// SetAssettype gets a reference to the given string and assigns it to the Assettype field.
func (o *ConditionalAlert) SetAssettype(v string) {
	o.Assettype = &v
}

// GetCondalerttypeid returns the Condalerttypeid field value if set, zero value otherwise.
func (o *ConditionalAlert) GetCondalerttypeid() string {
	if o == nil || IsNil(o.Condalerttypeid) {
		var ret string
		return ret
	}
	return *o.Condalerttypeid
}

// GetCondalerttypeidOk returns a tuple with the Condalerttypeid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionalAlert) GetCondalerttypeidOk() (*string, bool) {
	if o == nil || IsNil(o.Condalerttypeid) {
		return nil, false
	}
	return o.Condalerttypeid, true
}

// HasCondalerttypeid returns a boolean if a field has been set.
func (o *ConditionalAlert) HasCondalerttypeid() bool {
	if o != nil && !IsNil(o.Condalerttypeid) {
		return true
	}

	return false
}

// SetCondalerttypeid gets a reference to the given string and assigns it to the Condalerttypeid field.
func (o *ConditionalAlert) SetCondalerttypeid(v string) {
	o.Condalerttypeid = &v
}

// GetCondassetclassification returns the Condassetclassification field value if set, zero value otherwise.
func (o *ConditionalAlert) GetCondassetclassification() string {
	if o == nil || IsNil(o.Condassetclassification) {
		var ret string
		return ret
	}
	return *o.Condassetclassification
}

// GetCondassetclassificationOk returns a tuple with the Condassetclassification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionalAlert) GetCondassetclassificationOk() (*string, bool) {
	if o == nil || IsNil(o.Condassetclassification) {
		return nil, false
	}
	return o.Condassetclassification, true
}

// HasCondassetclassification returns a boolean if a field has been set.
func (o *ConditionalAlert) HasCondassetclassification() bool {
	if o != nil && !IsNil(o.Condassetclassification) {
		return true
	}

	return false
}

// SetCondassetclassification gets a reference to the given string and assigns it to the Condassetclassification field.
func (o *ConditionalAlert) SetCondassetclassification(v string) {
	o.Condassetclassification = &v
}

// GetCondassetid returns the Condassetid field value if set, zero value otherwise.
func (o *ConditionalAlert) GetCondassetid() string {
	if o == nil || IsNil(o.Condassetid) {
		var ret string
		return ret
	}
	return *o.Condassetid
}

// GetCondassetidOk returns a tuple with the Condassetid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionalAlert) GetCondassetidOk() (*string, bool) {
	if o == nil || IsNil(o.Condassetid) {
		return nil, false
	}
	return o.Condassetid, true
}

// HasCondassetid returns a boolean if a field has been set.
func (o *ConditionalAlert) HasCondassetid() bool {
	if o != nil && !IsNil(o.Condassetid) {
		return true
	}

	return false
}

// SetCondassetid gets a reference to the given string and assigns it to the Condassetid field.
func (o *ConditionalAlert) SetCondassetid(v string) {
	o.Condassetid = &v
}

// GetCondcurrentvalue returns the Condcurrentvalue field value if set, zero value otherwise.
func (o *ConditionalAlert) GetCondcurrentvalue() string {
	if o == nil || IsNil(o.Condcurrentvalue) {
		var ret string
		return ret
	}
	return *o.Condcurrentvalue
}

// GetCondcurrentvalueOk returns a tuple with the Condcurrentvalue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionalAlert) GetCondcurrentvalueOk() (*string, bool) {
	if o == nil || IsNil(o.Condcurrentvalue) {
		return nil, false
	}
	return o.Condcurrentvalue, true
}

// HasCondcurrentvalue returns a boolean if a field has been set.
func (o *ConditionalAlert) HasCondcurrentvalue() bool {
	if o != nil && !IsNil(o.Condcurrentvalue) {
		return true
	}

	return false
}

// SetCondcurrentvalue gets a reference to the given string and assigns it to the Condcurrentvalue field.
func (o *ConditionalAlert) SetCondcurrentvalue(v string) {
	o.Condcurrentvalue = &v
}

// GetCondeventtype returns the Condeventtype field value if set, zero value otherwise.
func (o *ConditionalAlert) GetCondeventtype() string {
	if o == nil || IsNil(o.Condeventtype) {
		var ret string
		return ret
	}
	return *o.Condeventtype
}

// GetCondeventtypeOk returns a tuple with the Condeventtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionalAlert) GetCondeventtypeOk() (*string, bool) {
	if o == nil || IsNil(o.Condeventtype) {
		return nil, false
	}
	return o.Condeventtype, true
}

// HasCondeventtype returns a boolean if a field has been set.
func (o *ConditionalAlert) HasCondeventtype() bool {
	if o != nil && !IsNil(o.Condeventtype) {
		return true
	}

	return false
}

// SetCondeventtype gets a reference to the given string and assigns it to the Condeventtype field.
func (o *ConditionalAlert) SetCondeventtype(v string) {
	o.Condeventtype = &v
}

// GetCondtagid returns the Condtagid field value if set, zero value otherwise.
func (o *ConditionalAlert) GetCondtagid() string {
	if o == nil || IsNil(o.Condtagid) {
		var ret string
		return ret
	}
	return *o.Condtagid
}

// GetCondtagidOk returns a tuple with the Condtagid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionalAlert) GetCondtagidOk() (*string, bool) {
	if o == nil || IsNil(o.Condtagid) {
		return nil, false
	}
	return o.Condtagid, true
}

// HasCondtagid returns a boolean if a field has been set.
func (o *ConditionalAlert) HasCondtagid() bool {
	if o != nil && !IsNil(o.Condtagid) {
		return true
	}

	return false
}

// SetCondtagid gets a reference to the given string and assigns it to the Condtagid field.
func (o *ConditionalAlert) SetCondtagid(v string) {
	o.Condtagid = &v
}

// GetCustomerAssets returns the CustomerAssets field value if set, zero value otherwise.
func (o *ConditionalAlert) GetCustomerAssets() string {
	if o == nil || IsNil(o.CustomerAssets) {
		var ret string
		return ret
	}
	return *o.CustomerAssets
}

// GetCustomerAssetsOk returns a tuple with the CustomerAssets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionalAlert) GetCustomerAssetsOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerAssets) {
		return nil, false
	}
	return o.CustomerAssets, true
}

// HasCustomerAssets returns a boolean if a field has been set.
func (o *ConditionalAlert) HasCustomerAssets() bool {
	if o != nil && !IsNil(o.CustomerAssets) {
		return true
	}

	return false
}

// SetCustomerAssets gets a reference to the given string and assigns it to the CustomerAssets field.
func (o *ConditionalAlert) SetCustomerAssets(v string) {
	o.CustomerAssets = &v
}

// GetIbx returns the Ibx field value if set, zero value otherwise.
func (o *ConditionalAlert) GetIbx() string {
	if o == nil || IsNil(o.Ibx) {
		var ret string
		return ret
	}
	return *o.Ibx
}

// GetIbxOk returns a tuple with the Ibx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionalAlert) GetIbxOk() (*string, bool) {
	if o == nil || IsNil(o.Ibx) {
		return nil, false
	}
	return o.Ibx, true
}

// HasIbx returns a boolean if a field has been set.
func (o *ConditionalAlert) HasIbx() bool {
	if o != nil && !IsNil(o.Ibx) {
		return true
	}

	return false
}

// SetIbx gets a reference to the given string and assigns it to the Ibx field.
func (o *ConditionalAlert) SetIbx(v string) {
	o.Ibx = &v
}

// GetInfraAssets returns the InfraAssets field value if set, zero value otherwise.
func (o *ConditionalAlert) GetInfraAssets() string {
	if o == nil || IsNil(o.InfraAssets) {
		var ret string
		return ret
	}
	return *o.InfraAssets
}

// GetInfraAssetsOk returns a tuple with the InfraAssets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionalAlert) GetInfraAssetsOk() (*string, bool) {
	if o == nil || IsNil(o.InfraAssets) {
		return nil, false
	}
	return o.InfraAssets, true
}

// HasInfraAssets returns a boolean if a field has been set.
func (o *ConditionalAlert) HasInfraAssets() bool {
	if o != nil && !IsNil(o.InfraAssets) {
		return true
	}

	return false
}

// SetInfraAssets gets a reference to the given string and assigns it to the InfraAssets field.
func (o *ConditionalAlert) SetInfraAssets(v string) {
	o.InfraAssets = &v
}

// GetMeasurementType returns the MeasurementType field value if set, zero value otherwise.
func (o *ConditionalAlert) GetMeasurementType() string {
	if o == nil || IsNil(o.MeasurementType) {
		var ret string
		return ret
	}
	return *o.MeasurementType
}

// GetMeasurementTypeOk returns a tuple with the MeasurementType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionalAlert) GetMeasurementTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MeasurementType) {
		return nil, false
	}
	return o.MeasurementType, true
}

// HasMeasurementType returns a boolean if a field has been set.
func (o *ConditionalAlert) HasMeasurementType() bool {
	if o != nil && !IsNil(o.MeasurementType) {
		return true
	}

	return false
}

// SetMeasurementType gets a reference to the given string and assigns it to the MeasurementType field.
func (o *ConditionalAlert) SetMeasurementType(v string) {
	o.MeasurementType = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *ConditionalAlert) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionalAlert) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *ConditionalAlert) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *ConditionalAlert) SetRegion(v string) {
	o.Region = &v
}

// GetSection returns the Section field value if set, zero value otherwise.
func (o *ConditionalAlert) GetSection() string {
	if o == nil || IsNil(o.Section) {
		var ret string
		return ret
	}
	return *o.Section
}

// GetSectionOk returns a tuple with the Section field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionalAlert) GetSectionOk() (*string, bool) {
	if o == nil || IsNil(o.Section) {
		return nil, false
	}
	return o.Section, true
}

// HasSection returns a boolean if a field has been set.
func (o *ConditionalAlert) HasSection() bool {
	if o != nil && !IsNil(o.Section) {
		return true
	}

	return false
}

// SetSection gets a reference to the given string and assigns it to the Section field.
func (o *ConditionalAlert) SetSection(v string) {
	o.Section = &v
}

// GetThresholdUnit returns the ThresholdUnit field value if set, zero value otherwise.
func (o *ConditionalAlert) GetThresholdUnit() string {
	if o == nil || IsNil(o.ThresholdUnit) {
		var ret string
		return ret
	}
	return *o.ThresholdUnit
}

// GetThresholdUnitOk returns a tuple with the ThresholdUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionalAlert) GetThresholdUnitOk() (*string, bool) {
	if o == nil || IsNil(o.ThresholdUnit) {
		return nil, false
	}
	return o.ThresholdUnit, true
}

// HasThresholdUnit returns a boolean if a field has been set.
func (o *ConditionalAlert) HasThresholdUnit() bool {
	if o != nil && !IsNil(o.ThresholdUnit) {
		return true
	}

	return false
}

// SetThresholdUnit gets a reference to the given string and assigns it to the ThresholdUnit field.
func (o *ConditionalAlert) SetThresholdUnit(v string) {
	o.ThresholdUnit = &v
}

// GetThresholdValue returns the ThresholdValue field value if set, zero value otherwise.
func (o *ConditionalAlert) GetThresholdValue() string {
	if o == nil || IsNil(o.ThresholdValue) {
		var ret string
		return ret
	}
	return *o.ThresholdValue
}

// GetThresholdValueOk returns a tuple with the ThresholdValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionalAlert) GetThresholdValueOk() (*string, bool) {
	if o == nil || IsNil(o.ThresholdValue) {
		return nil, false
	}
	return o.ThresholdValue, true
}

// HasThresholdValue returns a boolean if a field has been set.
func (o *ConditionalAlert) HasThresholdValue() bool {
	if o != nil && !IsNil(o.ThresholdValue) {
		return true
	}

	return false
}

// SetThresholdValue gets a reference to the given string and assigns it to the ThresholdValue field.
func (o *ConditionalAlert) SetThresholdValue(v string) {
	o.ThresholdValue = &v
}

// GetThresholdValueMax returns the ThresholdValueMax field value if set, zero value otherwise.
func (o *ConditionalAlert) GetThresholdValueMax() string {
	if o == nil || IsNil(o.ThresholdValueMax) {
		var ret string
		return ret
	}
	return *o.ThresholdValueMax
}

// GetThresholdValueMaxOk returns a tuple with the ThresholdValueMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionalAlert) GetThresholdValueMaxOk() (*string, bool) {
	if o == nil || IsNil(o.ThresholdValueMax) {
		return nil, false
	}
	return o.ThresholdValueMax, true
}

// HasThresholdValueMax returns a boolean if a field has been set.
func (o *ConditionalAlert) HasThresholdValueMax() bool {
	if o != nil && !IsNil(o.ThresholdValueMax) {
		return true
	}

	return false
}

// SetThresholdValueMax gets a reference to the given string and assigns it to the ThresholdValueMax field.
func (o *ConditionalAlert) SetThresholdValueMax(v string) {
	o.ThresholdValueMax = &v
}

// GetThresholdValueMin returns the ThresholdValueMin field value if set, zero value otherwise.
func (o *ConditionalAlert) GetThresholdValueMin() string {
	if o == nil || IsNil(o.ThresholdValueMin) {
		var ret string
		return ret
	}
	return *o.ThresholdValueMin
}

// GetThresholdValueMinOk returns a tuple with the ThresholdValueMin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionalAlert) GetThresholdValueMinOk() (*string, bool) {
	if o == nil || IsNil(o.ThresholdValueMin) {
		return nil, false
	}
	return o.ThresholdValueMin, true
}

// HasThresholdValueMin returns a boolean if a field has been set.
func (o *ConditionalAlert) HasThresholdValueMin() bool {
	if o != nil && !IsNil(o.ThresholdValueMin) {
		return true
	}

	return false
}

// SetThresholdValueMin gets a reference to the given string and assigns it to the ThresholdValueMin field.
func (o *ConditionalAlert) SetThresholdValueMin(v string) {
	o.ThresholdValueMin = &v
}

// GetUom returns the Uom field value if set, zero value otherwise.
func (o *ConditionalAlert) GetUom() string {
	if o == nil || IsNil(o.Uom) {
		var ret string
		return ret
	}
	return *o.Uom
}

// GetUomOk returns a tuple with the Uom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionalAlert) GetUomOk() (*string, bool) {
	if o == nil || IsNil(o.Uom) {
		return nil, false
	}
	return o.Uom, true
}

// HasUom returns a boolean if a field has been set.
func (o *ConditionalAlert) HasUom() bool {
	if o != nil && !IsNil(o.Uom) {
		return true
	}

	return false
}

// SetUom gets a reference to the given string and assigns it to the Uom field.
func (o *ConditionalAlert) SetUom(v string) {
	o.Uom = &v
}

func (o ConditionalAlert) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConditionalAlert) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AffectedCustomerAsset) {
		toSerialize["affectedCustomerAsset"] = o.AffectedCustomerAsset
	}
	if !IsNil(o.AlertType) {
		toSerialize["alertType"] = o.AlertType
	}
	if !IsNil(o.Asset) {
		toSerialize["asset"] = o.Asset
	}
	if !IsNil(o.Assetname) {
		toSerialize["assetname"] = o.Assetname
	}
	if !IsNil(o.Assettype) {
		toSerialize["assettype"] = o.Assettype
	}
	if !IsNil(o.Condalerttypeid) {
		toSerialize["condalerttypeid"] = o.Condalerttypeid
	}
	if !IsNil(o.Condassetclassification) {
		toSerialize["condassetclassification"] = o.Condassetclassification
	}
	if !IsNil(o.Condassetid) {
		toSerialize["condassetid"] = o.Condassetid
	}
	if !IsNil(o.Condcurrentvalue) {
		toSerialize["condcurrentvalue"] = o.Condcurrentvalue
	}
	if !IsNil(o.Condeventtype) {
		toSerialize["condeventtype"] = o.Condeventtype
	}
	if !IsNil(o.Condtagid) {
		toSerialize["condtagid"] = o.Condtagid
	}
	if !IsNil(o.CustomerAssets) {
		toSerialize["customerAssets"] = o.CustomerAssets
	}
	if !IsNil(o.Ibx) {
		toSerialize["ibx"] = o.Ibx
	}
	if !IsNil(o.InfraAssets) {
		toSerialize["infraAssets"] = o.InfraAssets
	}
	if !IsNil(o.MeasurementType) {
		toSerialize["measurementType"] = o.MeasurementType
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.Section) {
		toSerialize["section"] = o.Section
	}
	if !IsNil(o.ThresholdUnit) {
		toSerialize["thresholdUnit"] = o.ThresholdUnit
	}
	if !IsNil(o.ThresholdValue) {
		toSerialize["thresholdValue"] = o.ThresholdValue
	}
	if !IsNil(o.ThresholdValueMax) {
		toSerialize["thresholdValueMax"] = o.ThresholdValueMax
	}
	if !IsNil(o.ThresholdValueMin) {
		toSerialize["thresholdValueMin"] = o.ThresholdValueMin
	}
	if !IsNil(o.Uom) {
		toSerialize["uom"] = o.Uom
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ConditionalAlert) UnmarshalJSON(data []byte) (err error) {
	varConditionalAlert := _ConditionalAlert{}

	err = json.Unmarshal(data, &varConditionalAlert)

	if err != nil {
		return err
	}

	*o = ConditionalAlert(varConditionalAlert)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "affectedCustomerAsset")
		delete(additionalProperties, "alertType")
		delete(additionalProperties, "asset")
		delete(additionalProperties, "assetname")
		delete(additionalProperties, "assettype")
		delete(additionalProperties, "condalerttypeid")
		delete(additionalProperties, "condassetclassification")
		delete(additionalProperties, "condassetid")
		delete(additionalProperties, "condcurrentvalue")
		delete(additionalProperties, "condeventtype")
		delete(additionalProperties, "condtagid")
		delete(additionalProperties, "customerAssets")
		delete(additionalProperties, "ibx")
		delete(additionalProperties, "infraAssets")
		delete(additionalProperties, "measurementType")
		delete(additionalProperties, "region")
		delete(additionalProperties, "section")
		delete(additionalProperties, "thresholdUnit")
		delete(additionalProperties, "thresholdValue")
		delete(additionalProperties, "thresholdValueMax")
		delete(additionalProperties, "thresholdValueMin")
		delete(additionalProperties, "uom")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableConditionalAlert struct {
	value *ConditionalAlert
	isSet bool
}

func (v NullableConditionalAlert) Get() *ConditionalAlert {
	return v.value
}

func (v *NullableConditionalAlert) Set(val *ConditionalAlert) {
	v.value = val
	v.isSet = true
}

func (v NullableConditionalAlert) IsSet() bool {
	return v.isSet
}

func (v *NullableConditionalAlert) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConditionalAlert(val *ConditionalAlert) *NullableConditionalAlert {
	return &NullableConditionalAlert{value: val, isSet: true}
}

func (v NullableConditionalAlert) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConditionalAlert) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


