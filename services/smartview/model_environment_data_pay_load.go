/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
)

// checks if the EnvironmentDataPayLoad type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvironmentDataPayLoad{}

// EnvironmentDataPayLoad struct for EnvironmentDataPayLoad
type EnvironmentDataPayLoad struct {
	// account number
	AccountNo *string `json:"accountNo,omitempty"`
	// cabinet unique space id
	Cabinet *string `json:"cabinet,omitempty"`
	// cage unique space id
	Cage *string `json:"cage,omitempty"`
	// current humidity
	Humidity *string `json:"humidity,omitempty"`
	// unit of measure for humidity
	HumidityUom *string `json:"humidityUom,omitempty"`
	// ibx code
	Ibx *string `json:"ibx,omitempty"`
	// sensor id
	Sensor *string `json:"sensor,omitempty"`
	// current temperature
	Temperature *string `json:"temperature,omitempty"`
	// unit of measure for temperature values
	TemperatureUom *string `json:"temperatureUom,omitempty"`
	// epoch timestamp when the current reading was read
	Timestamp *string `json:"timestamp,omitempty"`
	// zone unique space id
	Zone *string `json:"zone,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EnvironmentDataPayLoad EnvironmentDataPayLoad

// NewEnvironmentDataPayLoad instantiates a new EnvironmentDataPayLoad object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentDataPayLoad() *EnvironmentDataPayLoad {
	this := EnvironmentDataPayLoad{}
	return &this
}

// NewEnvironmentDataPayLoadWithDefaults instantiates a new EnvironmentDataPayLoad object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentDataPayLoadWithDefaults() *EnvironmentDataPayLoad {
	this := EnvironmentDataPayLoad{}
	return &this
}

// GetAccountNo returns the AccountNo field value if set, zero value otherwise.
func (o *EnvironmentDataPayLoad) GetAccountNo() string {
	if o == nil || IsNil(o.AccountNo) {
		var ret string
		return ret
	}
	return *o.AccountNo
}

// GetAccountNoOk returns a tuple with the AccountNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentDataPayLoad) GetAccountNoOk() (*string, bool) {
	if o == nil || IsNil(o.AccountNo) {
		return nil, false
	}
	return o.AccountNo, true
}

// HasAccountNo returns a boolean if a field has been set.
func (o *EnvironmentDataPayLoad) HasAccountNo() bool {
	if o != nil && !IsNil(o.AccountNo) {
		return true
	}

	return false
}

// SetAccountNo gets a reference to the given string and assigns it to the AccountNo field.
func (o *EnvironmentDataPayLoad) SetAccountNo(v string) {
	o.AccountNo = &v
}

// GetCabinet returns the Cabinet field value if set, zero value otherwise.
func (o *EnvironmentDataPayLoad) GetCabinet() string {
	if o == nil || IsNil(o.Cabinet) {
		var ret string
		return ret
	}
	return *o.Cabinet
}

// GetCabinetOk returns a tuple with the Cabinet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentDataPayLoad) GetCabinetOk() (*string, bool) {
	if o == nil || IsNil(o.Cabinet) {
		return nil, false
	}
	return o.Cabinet, true
}

// HasCabinet returns a boolean if a field has been set.
func (o *EnvironmentDataPayLoad) HasCabinet() bool {
	if o != nil && !IsNil(o.Cabinet) {
		return true
	}

	return false
}

// SetCabinet gets a reference to the given string and assigns it to the Cabinet field.
func (o *EnvironmentDataPayLoad) SetCabinet(v string) {
	o.Cabinet = &v
}

// GetCage returns the Cage field value if set, zero value otherwise.
func (o *EnvironmentDataPayLoad) GetCage() string {
	if o == nil || IsNil(o.Cage) {
		var ret string
		return ret
	}
	return *o.Cage
}

// GetCageOk returns a tuple with the Cage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentDataPayLoad) GetCageOk() (*string, bool) {
	if o == nil || IsNil(o.Cage) {
		return nil, false
	}
	return o.Cage, true
}

// HasCage returns a boolean if a field has been set.
func (o *EnvironmentDataPayLoad) HasCage() bool {
	if o != nil && !IsNil(o.Cage) {
		return true
	}

	return false
}

// SetCage gets a reference to the given string and assigns it to the Cage field.
func (o *EnvironmentDataPayLoad) SetCage(v string) {
	o.Cage = &v
}

// GetHumidity returns the Humidity field value if set, zero value otherwise.
func (o *EnvironmentDataPayLoad) GetHumidity() string {
	if o == nil || IsNil(o.Humidity) {
		var ret string
		return ret
	}
	return *o.Humidity
}

// GetHumidityOk returns a tuple with the Humidity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentDataPayLoad) GetHumidityOk() (*string, bool) {
	if o == nil || IsNil(o.Humidity) {
		return nil, false
	}
	return o.Humidity, true
}

// HasHumidity returns a boolean if a field has been set.
func (o *EnvironmentDataPayLoad) HasHumidity() bool {
	if o != nil && !IsNil(o.Humidity) {
		return true
	}

	return false
}

// SetHumidity gets a reference to the given string and assigns it to the Humidity field.
func (o *EnvironmentDataPayLoad) SetHumidity(v string) {
	o.Humidity = &v
}

// GetHumidityUom returns the HumidityUom field value if set, zero value otherwise.
func (o *EnvironmentDataPayLoad) GetHumidityUom() string {
	if o == nil || IsNil(o.HumidityUom) {
		var ret string
		return ret
	}
	return *o.HumidityUom
}

// GetHumidityUomOk returns a tuple with the HumidityUom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentDataPayLoad) GetHumidityUomOk() (*string, bool) {
	if o == nil || IsNil(o.HumidityUom) {
		return nil, false
	}
	return o.HumidityUom, true
}

// HasHumidityUom returns a boolean if a field has been set.
func (o *EnvironmentDataPayLoad) HasHumidityUom() bool {
	if o != nil && !IsNil(o.HumidityUom) {
		return true
	}

	return false
}

// SetHumidityUom gets a reference to the given string and assigns it to the HumidityUom field.
func (o *EnvironmentDataPayLoad) SetHumidityUom(v string) {
	o.HumidityUom = &v
}

// GetIbx returns the Ibx field value if set, zero value otherwise.
func (o *EnvironmentDataPayLoad) GetIbx() string {
	if o == nil || IsNil(o.Ibx) {
		var ret string
		return ret
	}
	return *o.Ibx
}

// GetIbxOk returns a tuple with the Ibx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentDataPayLoad) GetIbxOk() (*string, bool) {
	if o == nil || IsNil(o.Ibx) {
		return nil, false
	}
	return o.Ibx, true
}

// HasIbx returns a boolean if a field has been set.
func (o *EnvironmentDataPayLoad) HasIbx() bool {
	if o != nil && !IsNil(o.Ibx) {
		return true
	}

	return false
}

// SetIbx gets a reference to the given string and assigns it to the Ibx field.
func (o *EnvironmentDataPayLoad) SetIbx(v string) {
	o.Ibx = &v
}

// GetSensor returns the Sensor field value if set, zero value otherwise.
func (o *EnvironmentDataPayLoad) GetSensor() string {
	if o == nil || IsNil(o.Sensor) {
		var ret string
		return ret
	}
	return *o.Sensor
}

// GetSensorOk returns a tuple with the Sensor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentDataPayLoad) GetSensorOk() (*string, bool) {
	if o == nil || IsNil(o.Sensor) {
		return nil, false
	}
	return o.Sensor, true
}

// HasSensor returns a boolean if a field has been set.
func (o *EnvironmentDataPayLoad) HasSensor() bool {
	if o != nil && !IsNil(o.Sensor) {
		return true
	}

	return false
}

// SetSensor gets a reference to the given string and assigns it to the Sensor field.
func (o *EnvironmentDataPayLoad) SetSensor(v string) {
	o.Sensor = &v
}

// GetTemperature returns the Temperature field value if set, zero value otherwise.
func (o *EnvironmentDataPayLoad) GetTemperature() string {
	if o == nil || IsNil(o.Temperature) {
		var ret string
		return ret
	}
	return *o.Temperature
}

// GetTemperatureOk returns a tuple with the Temperature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentDataPayLoad) GetTemperatureOk() (*string, bool) {
	if o == nil || IsNil(o.Temperature) {
		return nil, false
	}
	return o.Temperature, true
}

// HasTemperature returns a boolean if a field has been set.
func (o *EnvironmentDataPayLoad) HasTemperature() bool {
	if o != nil && !IsNil(o.Temperature) {
		return true
	}

	return false
}

// SetTemperature gets a reference to the given string and assigns it to the Temperature field.
func (o *EnvironmentDataPayLoad) SetTemperature(v string) {
	o.Temperature = &v
}

// GetTemperatureUom returns the TemperatureUom field value if set, zero value otherwise.
func (o *EnvironmentDataPayLoad) GetTemperatureUom() string {
	if o == nil || IsNil(o.TemperatureUom) {
		var ret string
		return ret
	}
	return *o.TemperatureUom
}

// GetTemperatureUomOk returns a tuple with the TemperatureUom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentDataPayLoad) GetTemperatureUomOk() (*string, bool) {
	if o == nil || IsNil(o.TemperatureUom) {
		return nil, false
	}
	return o.TemperatureUom, true
}

// HasTemperatureUom returns a boolean if a field has been set.
func (o *EnvironmentDataPayLoad) HasTemperatureUom() bool {
	if o != nil && !IsNil(o.TemperatureUom) {
		return true
	}

	return false
}

// SetTemperatureUom gets a reference to the given string and assigns it to the TemperatureUom field.
func (o *EnvironmentDataPayLoad) SetTemperatureUom(v string) {
	o.TemperatureUom = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *EnvironmentDataPayLoad) GetTimestamp() string {
	if o == nil || IsNil(o.Timestamp) {
		var ret string
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentDataPayLoad) GetTimestampOk() (*string, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *EnvironmentDataPayLoad) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *EnvironmentDataPayLoad) SetTimestamp(v string) {
	o.Timestamp = &v
}

// GetZone returns the Zone field value if set, zero value otherwise.
func (o *EnvironmentDataPayLoad) GetZone() string {
	if o == nil || IsNil(o.Zone) {
		var ret string
		return ret
	}
	return *o.Zone
}

// GetZoneOk returns a tuple with the Zone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentDataPayLoad) GetZoneOk() (*string, bool) {
	if o == nil || IsNil(o.Zone) {
		return nil, false
	}
	return o.Zone, true
}

// HasZone returns a boolean if a field has been set.
func (o *EnvironmentDataPayLoad) HasZone() bool {
	if o != nil && !IsNil(o.Zone) {
		return true
	}

	return false
}

// SetZone gets a reference to the given string and assigns it to the Zone field.
func (o *EnvironmentDataPayLoad) SetZone(v string) {
	o.Zone = &v
}

func (o EnvironmentDataPayLoad) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvironmentDataPayLoad) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountNo) {
		toSerialize["accountNo"] = o.AccountNo
	}
	if !IsNil(o.Cabinet) {
		toSerialize["cabinet"] = o.Cabinet
	}
	if !IsNil(o.Cage) {
		toSerialize["cage"] = o.Cage
	}
	if !IsNil(o.Humidity) {
		toSerialize["humidity"] = o.Humidity
	}
	if !IsNil(o.HumidityUom) {
		toSerialize["humidityUom"] = o.HumidityUom
	}
	if !IsNil(o.Ibx) {
		toSerialize["ibx"] = o.Ibx
	}
	if !IsNil(o.Sensor) {
		toSerialize["sensor"] = o.Sensor
	}
	if !IsNil(o.Temperature) {
		toSerialize["temperature"] = o.Temperature
	}
	if !IsNil(o.TemperatureUom) {
		toSerialize["temperatureUom"] = o.TemperatureUom
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.Zone) {
		toSerialize["zone"] = o.Zone
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EnvironmentDataPayLoad) UnmarshalJSON(data []byte) (err error) {
	varEnvironmentDataPayLoad := _EnvironmentDataPayLoad{}

	err = json.Unmarshal(data, &varEnvironmentDataPayLoad)

	if err != nil {
		return err
	}

	*o = EnvironmentDataPayLoad(varEnvironmentDataPayLoad)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "accountNo")
		delete(additionalProperties, "cabinet")
		delete(additionalProperties, "cage")
		delete(additionalProperties, "humidity")
		delete(additionalProperties, "humidityUom")
		delete(additionalProperties, "ibx")
		delete(additionalProperties, "sensor")
		delete(additionalProperties, "temperature")
		delete(additionalProperties, "temperatureUom")
		delete(additionalProperties, "timestamp")
		delete(additionalProperties, "zone")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEnvironmentDataPayLoad struct {
	value *EnvironmentDataPayLoad
	isSet bool
}

func (v NullableEnvironmentDataPayLoad) Get() *EnvironmentDataPayLoad {
	return v.value
}

func (v *NullableEnvironmentDataPayLoad) Set(val *EnvironmentDataPayLoad) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentDataPayLoad) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentDataPayLoad) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentDataPayLoad(val *EnvironmentDataPayLoad) *NullableEnvironmentDataPayLoad {
	return &NullableEnvironmentDataPayLoad{value: val, isSet: true}
}

func (v NullableEnvironmentDataPayLoad) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentDataPayLoad) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


