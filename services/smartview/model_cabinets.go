/*
Smart View Environmental API

Empower yourself with Environmental APIs. The API makes it possible to fetch current environmental data including humidity and temperature for a single sensor (identified by IBX code and sensor ID) or for all the sensors within an IBX (identified by IBX code) in a paginated way. When fetching all sensor readings you can apply additional sort criteria.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
)

// checks if the Cabinets type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Cabinets{}

// Cabinets struct for Cabinets
type Cabinets struct {
	Circuits []Circuits `json:"circuits,omitempty"`
	Name *CabinetsName `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Cabinets Cabinets

// NewCabinets instantiates a new Cabinets object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCabinets() *Cabinets {
	this := Cabinets{}
	return &this
}

// NewCabinetsWithDefaults instantiates a new Cabinets object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCabinetsWithDefaults() *Cabinets {
	this := Cabinets{}
	return &this
}

// GetCircuits returns the Circuits field value if set, zero value otherwise.
func (o *Cabinets) GetCircuits() []Circuits {
	if o == nil || IsNil(o.Circuits) {
		var ret []Circuits
		return ret
	}
	return o.Circuits
}

// GetCircuitsOk returns a tuple with the Circuits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cabinets) GetCircuitsOk() ([]Circuits, bool) {
	if o == nil || IsNil(o.Circuits) {
		return nil, false
	}
	return o.Circuits, true
}

// HasCircuits returns a boolean if a field has been set.
func (o *Cabinets) HasCircuits() bool {
	if o != nil && !IsNil(o.Circuits) {
		return true
	}

	return false
}

// SetCircuits gets a reference to the given []Circuits and assigns it to the Circuits field.
func (o *Cabinets) SetCircuits(v []Circuits) {
	o.Circuits = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Cabinets) GetName() CabinetsName {
	if o == nil || IsNil(o.Name) {
		var ret CabinetsName
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cabinets) GetNameOk() (*CabinetsName, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Cabinets) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given CabinetsName and assigns it to the Name field.
func (o *Cabinets) SetName(v CabinetsName) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Cabinets) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cabinets) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Cabinets) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Cabinets) SetType(v string) {
	o.Type = &v
}

func (o Cabinets) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Cabinets) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Circuits) {
		toSerialize["circuits"] = o.Circuits
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Cabinets) UnmarshalJSON(data []byte) (err error) {
	varCabinets := _Cabinets{}

	err = json.Unmarshal(data, &varCabinets)

	if err != nil {
		return err
	}

	*o = Cabinets(varCabinets)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "circuits")
		delete(additionalProperties, "name")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCabinets struct {
	value *Cabinets
	isSet bool
}

func (v NullableCabinets) Get() *Cabinets {
	return v.value
}

func (v *NullableCabinets) Set(val *Cabinets) {
	v.value = val
	v.isSet = true
}

func (v NullableCabinets) IsSet() bool {
	return v.isSet
}

func (v *NullableCabinets) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCabinets(val *Cabinets) *NullableCabinets {
	return &NullableCabinets{value: val, isSet: true}
}

func (v NullableCabinets) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCabinets) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


