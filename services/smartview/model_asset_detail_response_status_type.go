/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
	"fmt"
)

// AssetDetailResponseStatusType [INFO|ERROR] are the possible values
type AssetDetailResponseStatusType string

// List of AssetDetailResponse_status_type
const (
	ASSETDETAILRESPONSESTATUSTYPE_INFO AssetDetailResponseStatusType = "INFO"
)

// All allowed values of AssetDetailResponseStatusType enum
var AllowedAssetDetailResponseStatusTypeEnumValues = []AssetDetailResponseStatusType{
	"INFO",
}

func (v *AssetDetailResponseStatusType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AssetDetailResponseStatusType(value)
	for _, existing := range AllowedAssetDetailResponseStatusTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AssetDetailResponseStatusType", value)
}

// NewAssetDetailResponseStatusTypeFromValue returns a pointer to a valid AssetDetailResponseStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAssetDetailResponseStatusTypeFromValue(v string) (*AssetDetailResponseStatusType, error) {
	ev := AssetDetailResponseStatusType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AssetDetailResponseStatusType: valid values are %v", v, AllowedAssetDetailResponseStatusTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AssetDetailResponseStatusType) IsValid() bool {
	for _, existing := range AllowedAssetDetailResponseStatusTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AssetDetailResponse_status_type value
func (v AssetDetailResponseStatusType) Ptr() *AssetDetailResponseStatusType {
	return &v
}

type NullableAssetDetailResponseStatusType struct {
	value *AssetDetailResponseStatusType
	isSet bool
}

func (v NullableAssetDetailResponseStatusType) Get() *AssetDetailResponseStatusType {
	return v.value
}

func (v *NullableAssetDetailResponseStatusType) Set(val *AssetDetailResponseStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetDetailResponseStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetDetailResponseStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetDetailResponseStatusType(val *AssetDetailResponseStatusType) *NullableAssetDetailResponseStatusType {
	return &NullableAssetDetailResponseStatusType{value: val, isSet: true}
}

func (v NullableAssetDetailResponseStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetDetailResponseStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

