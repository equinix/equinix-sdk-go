/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
)

// checks if the Channel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Channel{}

// Channel Subscription can be created using one channel.
type Channel struct {
	AwsIotCoreChannelConfiguration *AwsIotCoreChannelConfiguration `json:"awsIotCoreChannelConfiguration,omitempty"`
	AzureChannelConfiguration *AzureChannelConfiguration `json:"azureChannelConfiguration,omitempty"`
	ChannelType *ChannelChannelType `json:"channelType,omitempty"`
	WebhookChannelConfiguration *WebhookChannelConfiguration `json:"webhookChannelConfiguration,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Channel Channel

// NewChannel instantiates a new Channel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannel() *Channel {
	this := Channel{}
	return &this
}

// NewChannelWithDefaults instantiates a new Channel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelWithDefaults() *Channel {
	this := Channel{}
	return &this
}

// GetAwsIotCoreChannelConfiguration returns the AwsIotCoreChannelConfiguration field value if set, zero value otherwise.
func (o *Channel) GetAwsIotCoreChannelConfiguration() AwsIotCoreChannelConfiguration {
	if o == nil || IsNil(o.AwsIotCoreChannelConfiguration) {
		var ret AwsIotCoreChannelConfiguration
		return ret
	}
	return *o.AwsIotCoreChannelConfiguration
}

// GetAwsIotCoreChannelConfigurationOk returns a tuple with the AwsIotCoreChannelConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Channel) GetAwsIotCoreChannelConfigurationOk() (*AwsIotCoreChannelConfiguration, bool) {
	if o == nil || IsNil(o.AwsIotCoreChannelConfiguration) {
		return nil, false
	}
	return o.AwsIotCoreChannelConfiguration, true
}

// HasAwsIotCoreChannelConfiguration returns a boolean if a field has been set.
func (o *Channel) HasAwsIotCoreChannelConfiguration() bool {
	if o != nil && !IsNil(o.AwsIotCoreChannelConfiguration) {
		return true
	}

	return false
}

// SetAwsIotCoreChannelConfiguration gets a reference to the given AwsIotCoreChannelConfiguration and assigns it to the AwsIotCoreChannelConfiguration field.
func (o *Channel) SetAwsIotCoreChannelConfiguration(v AwsIotCoreChannelConfiguration) {
	o.AwsIotCoreChannelConfiguration = &v
}

// GetAzureChannelConfiguration returns the AzureChannelConfiguration field value if set, zero value otherwise.
func (o *Channel) GetAzureChannelConfiguration() AzureChannelConfiguration {
	if o == nil || IsNil(o.AzureChannelConfiguration) {
		var ret AzureChannelConfiguration
		return ret
	}
	return *o.AzureChannelConfiguration
}

// GetAzureChannelConfigurationOk returns a tuple with the AzureChannelConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Channel) GetAzureChannelConfigurationOk() (*AzureChannelConfiguration, bool) {
	if o == nil || IsNil(o.AzureChannelConfiguration) {
		return nil, false
	}
	return o.AzureChannelConfiguration, true
}

// HasAzureChannelConfiguration returns a boolean if a field has been set.
func (o *Channel) HasAzureChannelConfiguration() bool {
	if o != nil && !IsNil(o.AzureChannelConfiguration) {
		return true
	}

	return false
}

// SetAzureChannelConfiguration gets a reference to the given AzureChannelConfiguration and assigns it to the AzureChannelConfiguration field.
func (o *Channel) SetAzureChannelConfiguration(v AzureChannelConfiguration) {
	o.AzureChannelConfiguration = &v
}

// GetChannelType returns the ChannelType field value if set, zero value otherwise.
func (o *Channel) GetChannelType() ChannelChannelType {
	if o == nil || IsNil(o.ChannelType) {
		var ret ChannelChannelType
		return ret
	}
	return *o.ChannelType
}

// GetChannelTypeOk returns a tuple with the ChannelType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Channel) GetChannelTypeOk() (*ChannelChannelType, bool) {
	if o == nil || IsNil(o.ChannelType) {
		return nil, false
	}
	return o.ChannelType, true
}

// HasChannelType returns a boolean if a field has been set.
func (o *Channel) HasChannelType() bool {
	if o != nil && !IsNil(o.ChannelType) {
		return true
	}

	return false
}

// SetChannelType gets a reference to the given ChannelChannelType and assigns it to the ChannelType field.
func (o *Channel) SetChannelType(v ChannelChannelType) {
	o.ChannelType = &v
}

// GetWebhookChannelConfiguration returns the WebhookChannelConfiguration field value if set, zero value otherwise.
func (o *Channel) GetWebhookChannelConfiguration() WebhookChannelConfiguration {
	if o == nil || IsNil(o.WebhookChannelConfiguration) {
		var ret WebhookChannelConfiguration
		return ret
	}
	return *o.WebhookChannelConfiguration
}

// GetWebhookChannelConfigurationOk returns a tuple with the WebhookChannelConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Channel) GetWebhookChannelConfigurationOk() (*WebhookChannelConfiguration, bool) {
	if o == nil || IsNil(o.WebhookChannelConfiguration) {
		return nil, false
	}
	return o.WebhookChannelConfiguration, true
}

// HasWebhookChannelConfiguration returns a boolean if a field has been set.
func (o *Channel) HasWebhookChannelConfiguration() bool {
	if o != nil && !IsNil(o.WebhookChannelConfiguration) {
		return true
	}

	return false
}

// SetWebhookChannelConfiguration gets a reference to the given WebhookChannelConfiguration and assigns it to the WebhookChannelConfiguration field.
func (o *Channel) SetWebhookChannelConfiguration(v WebhookChannelConfiguration) {
	o.WebhookChannelConfiguration = &v
}

func (o Channel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Channel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AwsIotCoreChannelConfiguration) {
		toSerialize["awsIotCoreChannelConfiguration"] = o.AwsIotCoreChannelConfiguration
	}
	if !IsNil(o.AzureChannelConfiguration) {
		toSerialize["azureChannelConfiguration"] = o.AzureChannelConfiguration
	}
	if !IsNil(o.ChannelType) {
		toSerialize["channelType"] = o.ChannelType
	}
	if !IsNil(o.WebhookChannelConfiguration) {
		toSerialize["webhookChannelConfiguration"] = o.WebhookChannelConfiguration
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Channel) UnmarshalJSON(data []byte) (err error) {
	varChannel := _Channel{}

	err = json.Unmarshal(data, &varChannel)

	if err != nil {
		return err
	}

	*o = Channel(varChannel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "awsIotCoreChannelConfiguration")
		delete(additionalProperties, "azureChannelConfiguration")
		delete(additionalProperties, "channelType")
		delete(additionalProperties, "webhookChannelConfiguration")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableChannel struct {
	value *Channel
	isSet bool
}

func (v NullableChannel) Get() *Channel {
	return v.value
}

func (v *NullableChannel) Set(val *Channel) {
	v.value = val
	v.isSet = true
}

func (v NullableChannel) IsSet() bool {
	return v.isSet
}

func (v *NullableChannel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannel(val *Channel) *NullableChannel {
	return &NullableChannel{value: val, isSet: true}
}

func (v NullableChannel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


