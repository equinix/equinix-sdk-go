/*
Smart View Environmental API

Empower yourself with Environmental APIs. The API makes it possible to fetch current environmental data including humidity and temperature for a single sensor (identified by IBX code and sensor ID) or for all the sensors within an IBX (identified by IBX code) in a paginated way. When fetching all sensor readings you can apply additional sort criteria.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
)

// checks if the ApiErrorAdditionalInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiErrorAdditionalInfo{}

// ApiErrorAdditionalInfo struct for ApiErrorAdditionalInfo
type ApiErrorAdditionalInfo struct {
	ConstraintCode *string `json:"constraintCode,omitempty"`
	Reason *string `json:"reason,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ApiErrorAdditionalInfo ApiErrorAdditionalInfo

// NewApiErrorAdditionalInfo instantiates a new ApiErrorAdditionalInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiErrorAdditionalInfo() *ApiErrorAdditionalInfo {
	this := ApiErrorAdditionalInfo{}
	return &this
}

// NewApiErrorAdditionalInfoWithDefaults instantiates a new ApiErrorAdditionalInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiErrorAdditionalInfoWithDefaults() *ApiErrorAdditionalInfo {
	this := ApiErrorAdditionalInfo{}
	return &this
}

// GetConstraintCode returns the ConstraintCode field value if set, zero value otherwise.
func (o *ApiErrorAdditionalInfo) GetConstraintCode() string {
	if o == nil || IsNil(o.ConstraintCode) {
		var ret string
		return ret
	}
	return *o.ConstraintCode
}

// GetConstraintCodeOk returns a tuple with the ConstraintCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiErrorAdditionalInfo) GetConstraintCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ConstraintCode) {
		return nil, false
	}
	return o.ConstraintCode, true
}

// HasConstraintCode returns a boolean if a field has been set.
func (o *ApiErrorAdditionalInfo) HasConstraintCode() bool {
	if o != nil && !IsNil(o.ConstraintCode) {
		return true
	}

	return false
}

// SetConstraintCode gets a reference to the given string and assigns it to the ConstraintCode field.
func (o *ApiErrorAdditionalInfo) SetConstraintCode(v string) {
	o.ConstraintCode = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *ApiErrorAdditionalInfo) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiErrorAdditionalInfo) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *ApiErrorAdditionalInfo) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *ApiErrorAdditionalInfo) SetReason(v string) {
	o.Reason = &v
}

func (o ApiErrorAdditionalInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiErrorAdditionalInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConstraintCode) {
		toSerialize["constraintCode"] = o.ConstraintCode
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApiErrorAdditionalInfo) UnmarshalJSON(data []byte) (err error) {
	varApiErrorAdditionalInfo := _ApiErrorAdditionalInfo{}

	err = json.Unmarshal(data, &varApiErrorAdditionalInfo)

	if err != nil {
		return err
	}

	*o = ApiErrorAdditionalInfo(varApiErrorAdditionalInfo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "constraintCode")
		delete(additionalProperties, "reason")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApiErrorAdditionalInfo struct {
	value *ApiErrorAdditionalInfo
	isSet bool
}

func (v NullableApiErrorAdditionalInfo) Get() *ApiErrorAdditionalInfo {
	return v.value
}

func (v *NullableApiErrorAdditionalInfo) Set(val *ApiErrorAdditionalInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableApiErrorAdditionalInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableApiErrorAdditionalInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiErrorAdditionalInfo(val *ApiErrorAdditionalInfo) *NullableApiErrorAdditionalInfo {
	return &NullableApiErrorAdditionalInfo{value: val, isSet: true}
}

func (v NullableApiErrorAdditionalInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiErrorAdditionalInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


