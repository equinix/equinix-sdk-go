/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
	"fmt"
)

// GetSubscriptionDataMessageTypesParameterInner the model 'GetSubscriptionDataMessageTypesParameterInner'
type GetSubscriptionDataMessageTypesParameterInner string

// List of getSubscriptionData_messageTypes_parameter_inner
const (
	GETSUBSCRIPTIONDATAMESSAGETYPESPARAMETERINNER_ALARM GetSubscriptionDataMessageTypesParameterInner = "ALARM"
	GETSUBSCRIPTIONDATAMESSAGETYPESPARAMETERINNER_ALERT GetSubscriptionDataMessageTypesParameterInner = "ALERT"
	GETSUBSCRIPTIONDATAMESSAGETYPESPARAMETERINNER_ENVIRONMENTAL GetSubscriptionDataMessageTypesParameterInner = "ENVIRONMENTAL"
	GETSUBSCRIPTIONDATAMESSAGETYPESPARAMETERINNER_METERED_POWER GetSubscriptionDataMessageTypesParameterInner = "METERED_POWER"
	GETSUBSCRIPTIONDATAMESSAGETYPESPARAMETERINNER_POWER GetSubscriptionDataMessageTypesParameterInner = "POWER"
	GETSUBSCRIPTIONDATAMESSAGETYPESPARAMETERINNER_TAG_POINT GetSubscriptionDataMessageTypesParameterInner = "TAG_POINT"
)

// All allowed values of GetSubscriptionDataMessageTypesParameterInner enum
var AllowedGetSubscriptionDataMessageTypesParameterInnerEnumValues = []GetSubscriptionDataMessageTypesParameterInner{
	"ALARM",
	"ALERT",
	"ENVIRONMENTAL",
	"METERED_POWER",
	"POWER",
	"TAG_POINT",
}

func (v *GetSubscriptionDataMessageTypesParameterInner) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GetSubscriptionDataMessageTypesParameterInner(value)
	for _, existing := range AllowedGetSubscriptionDataMessageTypesParameterInnerEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GetSubscriptionDataMessageTypesParameterInner", value)
}

// NewGetSubscriptionDataMessageTypesParameterInnerFromValue returns a pointer to a valid GetSubscriptionDataMessageTypesParameterInner
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGetSubscriptionDataMessageTypesParameterInnerFromValue(v string) (*GetSubscriptionDataMessageTypesParameterInner, error) {
	ev := GetSubscriptionDataMessageTypesParameterInner(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GetSubscriptionDataMessageTypesParameterInner: valid values are %v", v, AllowedGetSubscriptionDataMessageTypesParameterInnerEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GetSubscriptionDataMessageTypesParameterInner) IsValid() bool {
	for _, existing := range AllowedGetSubscriptionDataMessageTypesParameterInnerEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to getSubscriptionData_messageTypes_parameter_inner value
func (v GetSubscriptionDataMessageTypesParameterInner) Ptr() *GetSubscriptionDataMessageTypesParameterInner {
	return &v
}

type NullableGetSubscriptionDataMessageTypesParameterInner struct {
	value *GetSubscriptionDataMessageTypesParameterInner
	isSet bool
}

func (v NullableGetSubscriptionDataMessageTypesParameterInner) Get() *GetSubscriptionDataMessageTypesParameterInner {
	return v.value
}

func (v *NullableGetSubscriptionDataMessageTypesParameterInner) Set(val *GetSubscriptionDataMessageTypesParameterInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGetSubscriptionDataMessageTypesParameterInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGetSubscriptionDataMessageTypesParameterInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetSubscriptionDataMessageTypesParameterInner(val *GetSubscriptionDataMessageTypesParameterInner) *NullableGetSubscriptionDataMessageTypesParameterInner {
	return &NullableGetSubscriptionDataMessageTypesParameterInner{value: val, isSet: true}
}

func (v NullableGetSubscriptionDataMessageTypesParameterInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetSubscriptionDataMessageTypesParameterInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

