/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
	"fmt"
)

// checks if the Alarm type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Alarm{}

// Alarm message data
type Alarm struct {
	Asset AlarmAssetDetails `json:"asset"`
	// condition name
	ConditionName *string `json:"conditionName,omitempty"`
	// country
	Country *string `json:"country,omitempty"`
	CurrentValue AlarmCurrentValueDetails `json:"currentValue"`
	// data quality: Good | Bad | Uncertain
	DataQuality *string `json:"dataQuality,omitempty"`
	// unique message id
	DefinitionId string `json:"definitionId"`
	// heartbeat
	Heartbeat *bool `json:"heartbeat,omitempty"`
	// ibx
	Ibx string `json:"ibx"`
	// metro
	Metro *string `json:"metro,omitempty"`
	// alarm normal processed time
	NormalProcessedTime *string `json:"normalProcessedTime,omitempty"`
	// alarm normal triggered time
	NormalTriggeredTime *string `json:"normalTriggeredTime,omitempty"`
	// alarm processed time
	ProcessedTime *string `json:"processedTime,omitempty"`
	// region
	Region *string `json:"region,omitempty"`
	// severity
	Severity *int32 `json:"severity,omitempty"`
	Status AlarmStatusDetails `json:"status"`
	// unique message id
	StreamId string `json:"streamId"`
	Tag AlarmTagDetails `json:"tag"`
	Threshold AlarmThresholdDetails `json:"threshold"`
	// trigger rule
	TriggerRule *string `json:"triggerRule,omitempty"`
	// alarm triggered time
	TriggeredTime *string `json:"triggeredTime,omitempty"`
	// type
	Type *string `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Alarm Alarm

// NewAlarm instantiates a new Alarm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlarm(asset AlarmAssetDetails, currentValue AlarmCurrentValueDetails, definitionId string, ibx string, status AlarmStatusDetails, streamId string, tag AlarmTagDetails, threshold AlarmThresholdDetails) *Alarm {
	this := Alarm{}
	this.Asset = asset
	this.CurrentValue = currentValue
	this.DefinitionId = definitionId
	this.Ibx = ibx
	this.Status = status
	this.StreamId = streamId
	this.Tag = tag
	this.Threshold = threshold
	return &this
}

// NewAlarmWithDefaults instantiates a new Alarm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlarmWithDefaults() *Alarm {
	this := Alarm{}
	return &this
}

// GetAsset returns the Asset field value
func (o *Alarm) GetAsset() AlarmAssetDetails {
	if o == nil {
		var ret AlarmAssetDetails
		return ret
	}

	return o.Asset
}

// GetAssetOk returns a tuple with the Asset field value
// and a boolean to check if the value has been set.
func (o *Alarm) GetAssetOk() (*AlarmAssetDetails, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Asset, true
}

// SetAsset sets field value
func (o *Alarm) SetAsset(v AlarmAssetDetails) {
	o.Asset = v
}

// GetConditionName returns the ConditionName field value if set, zero value otherwise.
func (o *Alarm) GetConditionName() string {
	if o == nil || IsNil(o.ConditionName) {
		var ret string
		return ret
	}
	return *o.ConditionName
}

// GetConditionNameOk returns a tuple with the ConditionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alarm) GetConditionNameOk() (*string, bool) {
	if o == nil || IsNil(o.ConditionName) {
		return nil, false
	}
	return o.ConditionName, true
}

// HasConditionName returns a boolean if a field has been set.
func (o *Alarm) HasConditionName() bool {
	if o != nil && !IsNil(o.ConditionName) {
		return true
	}

	return false
}

// SetConditionName gets a reference to the given string and assigns it to the ConditionName field.
func (o *Alarm) SetConditionName(v string) {
	o.ConditionName = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *Alarm) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alarm) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *Alarm) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *Alarm) SetCountry(v string) {
	o.Country = &v
}

// GetCurrentValue returns the CurrentValue field value
func (o *Alarm) GetCurrentValue() AlarmCurrentValueDetails {
	if o == nil {
		var ret AlarmCurrentValueDetails
		return ret
	}

	return o.CurrentValue
}

// GetCurrentValueOk returns a tuple with the CurrentValue field value
// and a boolean to check if the value has been set.
func (o *Alarm) GetCurrentValueOk() (*AlarmCurrentValueDetails, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrentValue, true
}

// SetCurrentValue sets field value
func (o *Alarm) SetCurrentValue(v AlarmCurrentValueDetails) {
	o.CurrentValue = v
}

// GetDataQuality returns the DataQuality field value if set, zero value otherwise.
func (o *Alarm) GetDataQuality() string {
	if o == nil || IsNil(o.DataQuality) {
		var ret string
		return ret
	}
	return *o.DataQuality
}

// GetDataQualityOk returns a tuple with the DataQuality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alarm) GetDataQualityOk() (*string, bool) {
	if o == nil || IsNil(o.DataQuality) {
		return nil, false
	}
	return o.DataQuality, true
}

// HasDataQuality returns a boolean if a field has been set.
func (o *Alarm) HasDataQuality() bool {
	if o != nil && !IsNil(o.DataQuality) {
		return true
	}

	return false
}

// SetDataQuality gets a reference to the given string and assigns it to the DataQuality field.
func (o *Alarm) SetDataQuality(v string) {
	o.DataQuality = &v
}

// GetDefinitionId returns the DefinitionId field value
func (o *Alarm) GetDefinitionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DefinitionId
}

// GetDefinitionIdOk returns a tuple with the DefinitionId field value
// and a boolean to check if the value has been set.
func (o *Alarm) GetDefinitionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefinitionId, true
}

// SetDefinitionId sets field value
func (o *Alarm) SetDefinitionId(v string) {
	o.DefinitionId = v
}

// GetHeartbeat returns the Heartbeat field value if set, zero value otherwise.
func (o *Alarm) GetHeartbeat() bool {
	if o == nil || IsNil(o.Heartbeat) {
		var ret bool
		return ret
	}
	return *o.Heartbeat
}

// GetHeartbeatOk returns a tuple with the Heartbeat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alarm) GetHeartbeatOk() (*bool, bool) {
	if o == nil || IsNil(o.Heartbeat) {
		return nil, false
	}
	return o.Heartbeat, true
}

// HasHeartbeat returns a boolean if a field has been set.
func (o *Alarm) HasHeartbeat() bool {
	if o != nil && !IsNil(o.Heartbeat) {
		return true
	}

	return false
}

// SetHeartbeat gets a reference to the given bool and assigns it to the Heartbeat field.
func (o *Alarm) SetHeartbeat(v bool) {
	o.Heartbeat = &v
}

// GetIbx returns the Ibx field value
func (o *Alarm) GetIbx() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ibx
}

// GetIbxOk returns a tuple with the Ibx field value
// and a boolean to check if the value has been set.
func (o *Alarm) GetIbxOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ibx, true
}

// SetIbx sets field value
func (o *Alarm) SetIbx(v string) {
	o.Ibx = v
}

// GetMetro returns the Metro field value if set, zero value otherwise.
func (o *Alarm) GetMetro() string {
	if o == nil || IsNil(o.Metro) {
		var ret string
		return ret
	}
	return *o.Metro
}

// GetMetroOk returns a tuple with the Metro field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alarm) GetMetroOk() (*string, bool) {
	if o == nil || IsNil(o.Metro) {
		return nil, false
	}
	return o.Metro, true
}

// HasMetro returns a boolean if a field has been set.
func (o *Alarm) HasMetro() bool {
	if o != nil && !IsNil(o.Metro) {
		return true
	}

	return false
}

// SetMetro gets a reference to the given string and assigns it to the Metro field.
func (o *Alarm) SetMetro(v string) {
	o.Metro = &v
}

// GetNormalProcessedTime returns the NormalProcessedTime field value if set, zero value otherwise.
func (o *Alarm) GetNormalProcessedTime() string {
	if o == nil || IsNil(o.NormalProcessedTime) {
		var ret string
		return ret
	}
	return *o.NormalProcessedTime
}

// GetNormalProcessedTimeOk returns a tuple with the NormalProcessedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alarm) GetNormalProcessedTimeOk() (*string, bool) {
	if o == nil || IsNil(o.NormalProcessedTime) {
		return nil, false
	}
	return o.NormalProcessedTime, true
}

// HasNormalProcessedTime returns a boolean if a field has been set.
func (o *Alarm) HasNormalProcessedTime() bool {
	if o != nil && !IsNil(o.NormalProcessedTime) {
		return true
	}

	return false
}

// SetNormalProcessedTime gets a reference to the given string and assigns it to the NormalProcessedTime field.
func (o *Alarm) SetNormalProcessedTime(v string) {
	o.NormalProcessedTime = &v
}

// GetNormalTriggeredTime returns the NormalTriggeredTime field value if set, zero value otherwise.
func (o *Alarm) GetNormalTriggeredTime() string {
	if o == nil || IsNil(o.NormalTriggeredTime) {
		var ret string
		return ret
	}
	return *o.NormalTriggeredTime
}

// GetNormalTriggeredTimeOk returns a tuple with the NormalTriggeredTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alarm) GetNormalTriggeredTimeOk() (*string, bool) {
	if o == nil || IsNil(o.NormalTriggeredTime) {
		return nil, false
	}
	return o.NormalTriggeredTime, true
}

// HasNormalTriggeredTime returns a boolean if a field has been set.
func (o *Alarm) HasNormalTriggeredTime() bool {
	if o != nil && !IsNil(o.NormalTriggeredTime) {
		return true
	}

	return false
}

// SetNormalTriggeredTime gets a reference to the given string and assigns it to the NormalTriggeredTime field.
func (o *Alarm) SetNormalTriggeredTime(v string) {
	o.NormalTriggeredTime = &v
}

// GetProcessedTime returns the ProcessedTime field value if set, zero value otherwise.
func (o *Alarm) GetProcessedTime() string {
	if o == nil || IsNil(o.ProcessedTime) {
		var ret string
		return ret
	}
	return *o.ProcessedTime
}

// GetProcessedTimeOk returns a tuple with the ProcessedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alarm) GetProcessedTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ProcessedTime) {
		return nil, false
	}
	return o.ProcessedTime, true
}

// HasProcessedTime returns a boolean if a field has been set.
func (o *Alarm) HasProcessedTime() bool {
	if o != nil && !IsNil(o.ProcessedTime) {
		return true
	}

	return false
}

// SetProcessedTime gets a reference to the given string and assigns it to the ProcessedTime field.
func (o *Alarm) SetProcessedTime(v string) {
	o.ProcessedTime = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *Alarm) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alarm) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *Alarm) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *Alarm) SetRegion(v string) {
	o.Region = &v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *Alarm) GetSeverity() int32 {
	if o == nil || IsNil(o.Severity) {
		var ret int32
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alarm) GetSeverityOk() (*int32, bool) {
	if o == nil || IsNil(o.Severity) {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *Alarm) HasSeverity() bool {
	if o != nil && !IsNil(o.Severity) {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given int32 and assigns it to the Severity field.
func (o *Alarm) SetSeverity(v int32) {
	o.Severity = &v
}

// GetStatus returns the Status field value
func (o *Alarm) GetStatus() AlarmStatusDetails {
	if o == nil {
		var ret AlarmStatusDetails
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Alarm) GetStatusOk() (*AlarmStatusDetails, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Alarm) SetStatus(v AlarmStatusDetails) {
	o.Status = v
}

// GetStreamId returns the StreamId field value
func (o *Alarm) GetStreamId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StreamId
}

// GetStreamIdOk returns a tuple with the StreamId field value
// and a boolean to check if the value has been set.
func (o *Alarm) GetStreamIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StreamId, true
}

// SetStreamId sets field value
func (o *Alarm) SetStreamId(v string) {
	o.StreamId = v
}

// GetTag returns the Tag field value
func (o *Alarm) GetTag() AlarmTagDetails {
	if o == nil {
		var ret AlarmTagDetails
		return ret
	}

	return o.Tag
}

// GetTagOk returns a tuple with the Tag field value
// and a boolean to check if the value has been set.
func (o *Alarm) GetTagOk() (*AlarmTagDetails, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tag, true
}

// SetTag sets field value
func (o *Alarm) SetTag(v AlarmTagDetails) {
	o.Tag = v
}

// GetThreshold returns the Threshold field value
func (o *Alarm) GetThreshold() AlarmThresholdDetails {
	if o == nil {
		var ret AlarmThresholdDetails
		return ret
	}

	return o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value
// and a boolean to check if the value has been set.
func (o *Alarm) GetThresholdOk() (*AlarmThresholdDetails, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Threshold, true
}

// SetThreshold sets field value
func (o *Alarm) SetThreshold(v AlarmThresholdDetails) {
	o.Threshold = v
}

// GetTriggerRule returns the TriggerRule field value if set, zero value otherwise.
func (o *Alarm) GetTriggerRule() string {
	if o == nil || IsNil(o.TriggerRule) {
		var ret string
		return ret
	}
	return *o.TriggerRule
}

// GetTriggerRuleOk returns a tuple with the TriggerRule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alarm) GetTriggerRuleOk() (*string, bool) {
	if o == nil || IsNil(o.TriggerRule) {
		return nil, false
	}
	return o.TriggerRule, true
}

// HasTriggerRule returns a boolean if a field has been set.
func (o *Alarm) HasTriggerRule() bool {
	if o != nil && !IsNil(o.TriggerRule) {
		return true
	}

	return false
}

// SetTriggerRule gets a reference to the given string and assigns it to the TriggerRule field.
func (o *Alarm) SetTriggerRule(v string) {
	o.TriggerRule = &v
}

// GetTriggeredTime returns the TriggeredTime field value if set, zero value otherwise.
func (o *Alarm) GetTriggeredTime() string {
	if o == nil || IsNil(o.TriggeredTime) {
		var ret string
		return ret
	}
	return *o.TriggeredTime
}

// GetTriggeredTimeOk returns a tuple with the TriggeredTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alarm) GetTriggeredTimeOk() (*string, bool) {
	if o == nil || IsNil(o.TriggeredTime) {
		return nil, false
	}
	return o.TriggeredTime, true
}

// HasTriggeredTime returns a boolean if a field has been set.
func (o *Alarm) HasTriggeredTime() bool {
	if o != nil && !IsNil(o.TriggeredTime) {
		return true
	}

	return false
}

// SetTriggeredTime gets a reference to the given string and assigns it to the TriggeredTime field.
func (o *Alarm) SetTriggeredTime(v string) {
	o.TriggeredTime = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Alarm) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alarm) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Alarm) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Alarm) SetType(v string) {
	o.Type = &v
}

func (o Alarm) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Alarm) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["asset"] = o.Asset
	if !IsNil(o.ConditionName) {
		toSerialize["conditionName"] = o.ConditionName
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	toSerialize["currentValue"] = o.CurrentValue
	if !IsNil(o.DataQuality) {
		toSerialize["dataQuality"] = o.DataQuality
	}
	toSerialize["definitionId"] = o.DefinitionId
	if !IsNil(o.Heartbeat) {
		toSerialize["heartbeat"] = o.Heartbeat
	}
	toSerialize["ibx"] = o.Ibx
	if !IsNil(o.Metro) {
		toSerialize["metro"] = o.Metro
	}
	if !IsNil(o.NormalProcessedTime) {
		toSerialize["normalProcessedTime"] = o.NormalProcessedTime
	}
	if !IsNil(o.NormalTriggeredTime) {
		toSerialize["normalTriggeredTime"] = o.NormalTriggeredTime
	}
	if !IsNil(o.ProcessedTime) {
		toSerialize["processedTime"] = o.ProcessedTime
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.Severity) {
		toSerialize["severity"] = o.Severity
	}
	toSerialize["status"] = o.Status
	toSerialize["streamId"] = o.StreamId
	toSerialize["tag"] = o.Tag
	toSerialize["threshold"] = o.Threshold
	if !IsNil(o.TriggerRule) {
		toSerialize["triggerRule"] = o.TriggerRule
	}
	if !IsNil(o.TriggeredTime) {
		toSerialize["triggeredTime"] = o.TriggeredTime
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Alarm) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"asset",
		"currentValue",
		"definitionId",
		"ibx",
		"status",
		"streamId",
		"tag",
		"threshold",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAlarm := _Alarm{}

	err = json.Unmarshal(data, &varAlarm)

	if err != nil {
		return err
	}

	*o = Alarm(varAlarm)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "asset")
		delete(additionalProperties, "conditionName")
		delete(additionalProperties, "country")
		delete(additionalProperties, "currentValue")
		delete(additionalProperties, "dataQuality")
		delete(additionalProperties, "definitionId")
		delete(additionalProperties, "heartbeat")
		delete(additionalProperties, "ibx")
		delete(additionalProperties, "metro")
		delete(additionalProperties, "normalProcessedTime")
		delete(additionalProperties, "normalTriggeredTime")
		delete(additionalProperties, "processedTime")
		delete(additionalProperties, "region")
		delete(additionalProperties, "severity")
		delete(additionalProperties, "status")
		delete(additionalProperties, "streamId")
		delete(additionalProperties, "tag")
		delete(additionalProperties, "threshold")
		delete(additionalProperties, "triggerRule")
		delete(additionalProperties, "triggeredTime")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAlarm struct {
	value *Alarm
	isSet bool
}

func (v NullableAlarm) Get() *Alarm {
	return v.value
}

func (v *NullableAlarm) Set(val *Alarm) {
	v.value = val
	v.isSet = true
}

func (v NullableAlarm) IsSet() bool {
	return v.isSet
}

func (v *NullableAlarm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlarm(val *Alarm) *NullableAlarm {
	return &NullableAlarm{value: val, isSet: true}
}

func (v NullableAlarm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlarm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


