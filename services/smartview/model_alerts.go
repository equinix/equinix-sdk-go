/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
)

// checks if the Alerts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Alerts{}

// Alerts struct for Alerts
type Alerts struct {
	PayLoad []AlertObj `json:"payLoad,omitempty"`
	Status *Status `json:"status,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Alerts Alerts

// NewAlerts instantiates a new Alerts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlerts() *Alerts {
	this := Alerts{}
	return &this
}

// NewAlertsWithDefaults instantiates a new Alerts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertsWithDefaults() *Alerts {
	this := Alerts{}
	return &this
}

// GetPayLoad returns the PayLoad field value if set, zero value otherwise.
func (o *Alerts) GetPayLoad() []AlertObj {
	if o == nil || IsNil(o.PayLoad) {
		var ret []AlertObj
		return ret
	}
	return o.PayLoad
}

// GetPayLoadOk returns a tuple with the PayLoad field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alerts) GetPayLoadOk() ([]AlertObj, bool) {
	if o == nil || IsNil(o.PayLoad) {
		return nil, false
	}
	return o.PayLoad, true
}

// HasPayLoad returns a boolean if a field has been set.
func (o *Alerts) HasPayLoad() bool {
	if o != nil && !IsNil(o.PayLoad) {
		return true
	}

	return false
}

// SetPayLoad gets a reference to the given []AlertObj and assigns it to the PayLoad field.
func (o *Alerts) SetPayLoad(v []AlertObj) {
	o.PayLoad = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Alerts) GetStatus() Status {
	if o == nil || IsNil(o.Status) {
		var ret Status
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alerts) GetStatusOk() (*Status, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Alerts) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given Status and assigns it to the Status field.
func (o *Alerts) SetStatus(v Status) {
	o.Status = &v
}

func (o Alerts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Alerts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PayLoad) {
		toSerialize["payLoad"] = o.PayLoad
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Alerts) UnmarshalJSON(data []byte) (err error) {
	varAlerts := _Alerts{}

	err = json.Unmarshal(data, &varAlerts)

	if err != nil {
		return err
	}

	*o = Alerts(varAlerts)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "payLoad")
		delete(additionalProperties, "status")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAlerts struct {
	value *Alerts
	isSet bool
}

func (v NullableAlerts) Get() *Alerts {
	return v.value
}

func (v *NullableAlerts) Set(val *Alerts) {
	v.value = val
	v.isSet = true
}

func (v NullableAlerts) IsSet() bool {
	return v.isSet
}

func (v *NullableAlerts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlerts(val *Alerts) *NullableAlerts {
	return &NullableAlerts{value: val, isSet: true}
}

func (v NullableAlerts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlerts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


