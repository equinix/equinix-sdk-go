/*
Smart View Environmental API

Empower yourself with Environmental APIs. The API makes it possible to fetch current environmental data including humidity and temperature for a single sensor (identified by IBX code and sensor ID) or for all the sensors within an IBX (identified by IBX code) in a paginated way. When fetching all sensor readings you can apply additional sort criteria.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
)

// checks if the AlertAssetDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlertAssetDetails{}

// AlertAssetDetails asset details
type AlertAssetDetails struct {
	// asset classification
	Classification *string `json:"classification,omitempty"`
	// asset id
	Id *string `json:"id,omitempty"`
	// asset type
	Type *string `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AlertAssetDetails AlertAssetDetails

// NewAlertAssetDetails instantiates a new AlertAssetDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertAssetDetails() *AlertAssetDetails {
	this := AlertAssetDetails{}
	return &this
}

// NewAlertAssetDetailsWithDefaults instantiates a new AlertAssetDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertAssetDetailsWithDefaults() *AlertAssetDetails {
	this := AlertAssetDetails{}
	return &this
}

// GetClassification returns the Classification field value if set, zero value otherwise.
func (o *AlertAssetDetails) GetClassification() string {
	if o == nil || IsNil(o.Classification) {
		var ret string
		return ret
	}
	return *o.Classification
}

// GetClassificationOk returns a tuple with the Classification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertAssetDetails) GetClassificationOk() (*string, bool) {
	if o == nil || IsNil(o.Classification) {
		return nil, false
	}
	return o.Classification, true
}

// HasClassification returns a boolean if a field has been set.
func (o *AlertAssetDetails) HasClassification() bool {
	if o != nil && !IsNil(o.Classification) {
		return true
	}

	return false
}

// SetClassification gets a reference to the given string and assigns it to the Classification field.
func (o *AlertAssetDetails) SetClassification(v string) {
	o.Classification = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AlertAssetDetails) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertAssetDetails) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AlertAssetDetails) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AlertAssetDetails) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AlertAssetDetails) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertAssetDetails) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AlertAssetDetails) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AlertAssetDetails) SetType(v string) {
	o.Type = &v
}

func (o AlertAssetDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertAssetDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Classification) {
		toSerialize["classification"] = o.Classification
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AlertAssetDetails) UnmarshalJSON(data []byte) (err error) {
	varAlertAssetDetails := _AlertAssetDetails{}

	err = json.Unmarshal(data, &varAlertAssetDetails)

	if err != nil {
		return err
	}

	*o = AlertAssetDetails(varAlertAssetDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "classification")
		delete(additionalProperties, "id")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAlertAssetDetails struct {
	value *AlertAssetDetails
	isSet bool
}

func (v NullableAlertAssetDetails) Get() *AlertAssetDetails {
	return v.value
}

func (v *NullableAlertAssetDetails) Set(val *AlertAssetDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertAssetDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertAssetDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertAssetDetails(val *AlertAssetDetails) *NullableAlertAssetDetails {
	return &NullableAlertAssetDetails{value: val, isSet: true}
}

func (v NullableAlertAssetDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertAssetDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


