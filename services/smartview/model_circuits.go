/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
)

// checks if the Circuits type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Circuits{}

// Circuits struct for Circuits
type Circuits struct {
	Name *CircuitsName `json:"name,omitempty"`
	Type *CircuitsType `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Circuits Circuits

// NewCircuits instantiates a new Circuits object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCircuits() *Circuits {
	this := Circuits{}
	return &this
}

// NewCircuitsWithDefaults instantiates a new Circuits object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCircuitsWithDefaults() *Circuits {
	this := Circuits{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Circuits) GetName() CircuitsName {
	if o == nil || IsNil(o.Name) {
		var ret CircuitsName
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Circuits) GetNameOk() (*CircuitsName, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Circuits) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given CircuitsName and assigns it to the Name field.
func (o *Circuits) SetName(v CircuitsName) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Circuits) GetType() CircuitsType {
	if o == nil || IsNil(o.Type) {
		var ret CircuitsType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Circuits) GetTypeOk() (*CircuitsType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Circuits) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given CircuitsType and assigns it to the Type field.
func (o *Circuits) SetType(v CircuitsType) {
	o.Type = &v
}

func (o Circuits) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Circuits) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Circuits) UnmarshalJSON(data []byte) (err error) {
	varCircuits := _Circuits{}

	err = json.Unmarshal(data, &varCircuits)

	if err != nil {
		return err
	}

	*o = Circuits(varCircuits)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCircuits struct {
	value *Circuits
	isSet bool
}

func (v NullableCircuits) Get() *Circuits {
	return v.value
}

func (v *NullableCircuits) Set(val *Circuits) {
	v.value = val
	v.isSet = true
}

func (v NullableCircuits) IsSet() bool {
	return v.isSet
}

func (v *NullableCircuits) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCircuits(val *Circuits) *NullableCircuits {
	return &NullableCircuits{value: val, isSet: true}
}

func (v NullableCircuits) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCircuits) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


