/*
Smart View Environmental API

Empower yourself with Environmental APIs. The API makes it possible to fetch current environmental data including humidity and temperature for a single sensor (identified by IBX code and sensor ID) or for all the sensors within an IBX (identified by IBX code) in a paginated way. When fetching all sensor readings you can apply additional sort criteria.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
)

// checks if the TrendingEnvironmentData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrendingEnvironmentData{}

// TrendingEnvironmentData struct for TrendingEnvironmentData
type TrendingEnvironmentData struct {
	PayLoad *TrendingEnvironmentDataPayLoad `json:"payLoad,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TrendingEnvironmentData TrendingEnvironmentData

// NewTrendingEnvironmentData instantiates a new TrendingEnvironmentData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrendingEnvironmentData() *TrendingEnvironmentData {
	this := TrendingEnvironmentData{}
	return &this
}

// NewTrendingEnvironmentDataWithDefaults instantiates a new TrendingEnvironmentData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrendingEnvironmentDataWithDefaults() *TrendingEnvironmentData {
	this := TrendingEnvironmentData{}
	return &this
}

// GetPayLoad returns the PayLoad field value if set, zero value otherwise.
func (o *TrendingEnvironmentData) GetPayLoad() TrendingEnvironmentDataPayLoad {
	if o == nil || IsNil(o.PayLoad) {
		var ret TrendingEnvironmentDataPayLoad
		return ret
	}
	return *o.PayLoad
}

// GetPayLoadOk returns a tuple with the PayLoad field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrendingEnvironmentData) GetPayLoadOk() (*TrendingEnvironmentDataPayLoad, bool) {
	if o == nil || IsNil(o.PayLoad) {
		return nil, false
	}
	return o.PayLoad, true
}

// HasPayLoad returns a boolean if a field has been set.
func (o *TrendingEnvironmentData) HasPayLoad() bool {
	if o != nil && !IsNil(o.PayLoad) {
		return true
	}

	return false
}

// SetPayLoad gets a reference to the given TrendingEnvironmentDataPayLoad and assigns it to the PayLoad field.
func (o *TrendingEnvironmentData) SetPayLoad(v TrendingEnvironmentDataPayLoad) {
	o.PayLoad = &v
}

func (o TrendingEnvironmentData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrendingEnvironmentData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PayLoad) {
		toSerialize["payLoad"] = o.PayLoad
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TrendingEnvironmentData) UnmarshalJSON(data []byte) (err error) {
	varTrendingEnvironmentData := _TrendingEnvironmentData{}

	err = json.Unmarshal(data, &varTrendingEnvironmentData)

	if err != nil {
		return err
	}

	*o = TrendingEnvironmentData(varTrendingEnvironmentData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "payLoad")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTrendingEnvironmentData struct {
	value *TrendingEnvironmentData
	isSet bool
}

func (v NullableTrendingEnvironmentData) Get() *TrendingEnvironmentData {
	return v.value
}

func (v *NullableTrendingEnvironmentData) Set(val *TrendingEnvironmentData) {
	v.value = val
	v.isSet = true
}

func (v NullableTrendingEnvironmentData) IsSet() bool {
	return v.isSet
}

func (v *NullableTrendingEnvironmentData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrendingEnvironmentData(val *TrendingEnvironmentData) *NullableTrendingEnvironmentData {
	return &NullableTrendingEnvironmentData{value: val, isSet: true}
}

func (v NullableTrendingEnvironmentData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrendingEnvironmentData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


