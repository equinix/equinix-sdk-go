/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
	"fmt"
)

// checks if the MeteredPowerValueWithUnit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MeteredPowerValueWithUnit{}

// MeteredPowerValueWithUnit reading details
type MeteredPowerValueWithUnit struct {
	// reading unit
	Unit *string `json:"unit,omitempty"`
	// reading value
	Value string `json:"value"`
	AdditionalProperties map[string]interface{}
}

type _MeteredPowerValueWithUnit MeteredPowerValueWithUnit

// NewMeteredPowerValueWithUnit instantiates a new MeteredPowerValueWithUnit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMeteredPowerValueWithUnit(value string) *MeteredPowerValueWithUnit {
	this := MeteredPowerValueWithUnit{}
	this.Value = value
	return &this
}

// NewMeteredPowerValueWithUnitWithDefaults instantiates a new MeteredPowerValueWithUnit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMeteredPowerValueWithUnitWithDefaults() *MeteredPowerValueWithUnit {
	this := MeteredPowerValueWithUnit{}
	return &this
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *MeteredPowerValueWithUnit) GetUnit() string {
	if o == nil || IsNil(o.Unit) {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteredPowerValueWithUnit) GetUnitOk() (*string, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *MeteredPowerValueWithUnit) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *MeteredPowerValueWithUnit) SetUnit(v string) {
	o.Unit = &v
}

// GetValue returns the Value field value
func (o *MeteredPowerValueWithUnit) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *MeteredPowerValueWithUnit) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *MeteredPowerValueWithUnit) SetValue(v string) {
	o.Value = v
}

func (o MeteredPowerValueWithUnit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MeteredPowerValueWithUnit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	toSerialize["value"] = o.Value

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MeteredPowerValueWithUnit) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMeteredPowerValueWithUnit := _MeteredPowerValueWithUnit{}

	err = json.Unmarshal(data, &varMeteredPowerValueWithUnit)

	if err != nil {
		return err
	}

	*o = MeteredPowerValueWithUnit(varMeteredPowerValueWithUnit)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "unit")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMeteredPowerValueWithUnit struct {
	value *MeteredPowerValueWithUnit
	isSet bool
}

func (v NullableMeteredPowerValueWithUnit) Get() *MeteredPowerValueWithUnit {
	return v.value
}

func (v *NullableMeteredPowerValueWithUnit) Set(val *MeteredPowerValueWithUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableMeteredPowerValueWithUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableMeteredPowerValueWithUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeteredPowerValueWithUnit(val *MeteredPowerValueWithUnit) *NullableMeteredPowerValueWithUnit {
	return &NullableMeteredPowerValueWithUnit{value: val, isSet: true}
}

func (v NullableMeteredPowerValueWithUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeteredPowerValueWithUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


