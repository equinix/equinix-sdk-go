/*
Smart View Environmental API

Empower yourself with Environmental APIs. The API makes it possible to fetch current environmental data including humidity and temperature for a single sensor (identified by IBX code and sensor ID) or for all the sensors within an IBX (identified by IBX code) in a paginated way. When fetching all sensor readings you can apply additional sort criteria.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
)

// checks if the TagPointDataStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TagPointDataStatus{}

// TagPointDataStatus struct for TagPointDataStatus
type TagPointDataStatus struct {
	// [Ok|Permission Denied|Invalid Account number|Invalid IBX|Invalid LevelType|Invalid LevelValue|Invalid Interval|Invalid From/To Date|INVALID_SESSION|INVALID_SESSION_IBX|INTERNAL_ERROR] are the
	Msg *string `json:"msg,omitempty"`
	// [1000|3001|3002|3003|4000] are the possible status codes
	Statuscode *float32 `json:"statuscode,omitempty"`
	Type *AssetDetailResponseStatusType `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TagPointDataStatus TagPointDataStatus

// NewTagPointDataStatus instantiates a new TagPointDataStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagPointDataStatus() *TagPointDataStatus {
	this := TagPointDataStatus{}
	return &this
}

// NewTagPointDataStatusWithDefaults instantiates a new TagPointDataStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagPointDataStatusWithDefaults() *TagPointDataStatus {
	this := TagPointDataStatus{}
	return &this
}

// GetMsg returns the Msg field value if set, zero value otherwise.
func (o *TagPointDataStatus) GetMsg() string {
	if o == nil || IsNil(o.Msg) {
		var ret string
		return ret
	}
	return *o.Msg
}

// GetMsgOk returns a tuple with the Msg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagPointDataStatus) GetMsgOk() (*string, bool) {
	if o == nil || IsNil(o.Msg) {
		return nil, false
	}
	return o.Msg, true
}

// HasMsg returns a boolean if a field has been set.
func (o *TagPointDataStatus) HasMsg() bool {
	if o != nil && !IsNil(o.Msg) {
		return true
	}

	return false
}

// SetMsg gets a reference to the given string and assigns it to the Msg field.
func (o *TagPointDataStatus) SetMsg(v string) {
	o.Msg = &v
}

// GetStatuscode returns the Statuscode field value if set, zero value otherwise.
func (o *TagPointDataStatus) GetStatuscode() float32 {
	if o == nil || IsNil(o.Statuscode) {
		var ret float32
		return ret
	}
	return *o.Statuscode
}

// GetStatuscodeOk returns a tuple with the Statuscode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagPointDataStatus) GetStatuscodeOk() (*float32, bool) {
	if o == nil || IsNil(o.Statuscode) {
		return nil, false
	}
	return o.Statuscode, true
}

// HasStatuscode returns a boolean if a field has been set.
func (o *TagPointDataStatus) HasStatuscode() bool {
	if o != nil && !IsNil(o.Statuscode) {
		return true
	}

	return false
}

// SetStatuscode gets a reference to the given float32 and assigns it to the Statuscode field.
func (o *TagPointDataStatus) SetStatuscode(v float32) {
	o.Statuscode = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TagPointDataStatus) GetType() AssetDetailResponseStatusType {
	if o == nil || IsNil(o.Type) {
		var ret AssetDetailResponseStatusType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagPointDataStatus) GetTypeOk() (*AssetDetailResponseStatusType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TagPointDataStatus) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given AssetDetailResponseStatusType and assigns it to the Type field.
func (o *TagPointDataStatus) SetType(v AssetDetailResponseStatusType) {
	o.Type = &v
}

func (o TagPointDataStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TagPointDataStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Msg) {
		toSerialize["msg"] = o.Msg
	}
	if !IsNil(o.Statuscode) {
		toSerialize["statuscode"] = o.Statuscode
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TagPointDataStatus) UnmarshalJSON(data []byte) (err error) {
	varTagPointDataStatus := _TagPointDataStatus{}

	err = json.Unmarshal(data, &varTagPointDataStatus)

	if err != nil {
		return err
	}

	*o = TagPointDataStatus(varTagPointDataStatus)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "msg")
		delete(additionalProperties, "statuscode")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTagPointDataStatus struct {
	value *TagPointDataStatus
	isSet bool
}

func (v NullableTagPointDataStatus) Get() *TagPointDataStatus {
	return v.value
}

func (v *NullableTagPointDataStatus) Set(val *TagPointDataStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableTagPointDataStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableTagPointDataStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagPointDataStatus(val *TagPointDataStatus) *NullableTagPointDataStatus {
	return &NullableTagPointDataStatus{value: val, isSet: true}
}

func (v NullableTagPointDataStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagPointDataStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


