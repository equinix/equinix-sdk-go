/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
	"fmt"
)

// PowerDataPayLoadLevelType power hierarchy node levelType linked to the power data
type PowerDataPayLoadLevelType string

// List of PowerData_payLoad_levelType
const (
	POWERDATAPAYLOADLEVELTYPE_IBX PowerDataPayLoadLevelType = "ibx"
	POWERDATAPAYLOADLEVELTYPE_CAGE PowerDataPayLoadLevelType = "cage"
	POWERDATAPAYLOADLEVELTYPE_CABINET PowerDataPayLoadLevelType = "cabinet"
	POWERDATAPAYLOADLEVELTYPE_CIRCUIT PowerDataPayLoadLevelType = "circuit"
)

// All allowed values of PowerDataPayLoadLevelType enum
var AllowedPowerDataPayLoadLevelTypeEnumValues = []PowerDataPayLoadLevelType{
	"ibx",
	"cage",
	"cabinet",
	"circuit",
}

func (v *PowerDataPayLoadLevelType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PowerDataPayLoadLevelType(value)
	for _, existing := range AllowedPowerDataPayLoadLevelTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PowerDataPayLoadLevelType", value)
}

// NewPowerDataPayLoadLevelTypeFromValue returns a pointer to a valid PowerDataPayLoadLevelType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPowerDataPayLoadLevelTypeFromValue(v string) (*PowerDataPayLoadLevelType, error) {
	ev := PowerDataPayLoadLevelType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PowerDataPayLoadLevelType: valid values are %v", v, AllowedPowerDataPayLoadLevelTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PowerDataPayLoadLevelType) IsValid() bool {
	for _, existing := range AllowedPowerDataPayLoadLevelTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PowerData_payLoad_levelType value
func (v PowerDataPayLoadLevelType) Ptr() *PowerDataPayLoadLevelType {
	return &v
}

type NullablePowerDataPayLoadLevelType struct {
	value *PowerDataPayLoadLevelType
	isSet bool
}

func (v NullablePowerDataPayLoadLevelType) Get() *PowerDataPayLoadLevelType {
	return v.value
}

func (v *NullablePowerDataPayLoadLevelType) Set(val *PowerDataPayLoadLevelType) {
	v.value = val
	v.isSet = true
}

func (v NullablePowerDataPayLoadLevelType) IsSet() bool {
	return v.isSet
}

func (v *NullablePowerDataPayLoadLevelType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePowerDataPayLoadLevelType(val *PowerDataPayLoadLevelType) *NullablePowerDataPayLoadLevelType {
	return &NullablePowerDataPayLoadLevelType{value: val, isSet: true}
}

func (v NullablePowerDataPayLoadLevelType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePowerDataPayLoadLevelType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

