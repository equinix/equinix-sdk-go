/*
Smart View Environmental API

Empower yourself with Environmental APIs. The API makes it possible to fetch current environmental data including humidity and temperature for a single sensor (identified by IBX code and sensor ID) or for all the sensors within an IBX (identified by IBX code) in a paginated way. When fetching all sensor readings you can apply additional sort criteria.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
	"fmt"
)

// checks if the SensorReading type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SensorReading{}

// SensorReading Single environmental sensor reading.
type SensorReading struct {
	Humidity *ValueWithUnit `json:"humidity,omitempty"`
	// The ibx identifier where the sensor is placed.
	Ibx string `json:"ibx"`
	// The sensor identifier.
	SensorId string `json:"sensorId"`
	Temperature *ValueWithUnit `json:"temperature,omitempty"`
	// The zone where the sensor is placed.
	ZoneId string `json:"zoneId"`
	AdditionalProperties map[string]interface{}
}

type _SensorReading SensorReading

// NewSensorReading instantiates a new SensorReading object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSensorReading(ibx string, sensorId string, zoneId string) *SensorReading {
	this := SensorReading{}
	this.Ibx = ibx
	this.SensorId = sensorId
	this.ZoneId = zoneId
	return &this
}

// NewSensorReadingWithDefaults instantiates a new SensorReading object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSensorReadingWithDefaults() *SensorReading {
	this := SensorReading{}
	return &this
}

// GetHumidity returns the Humidity field value if set, zero value otherwise.
func (o *SensorReading) GetHumidity() ValueWithUnit {
	if o == nil || IsNil(o.Humidity) {
		var ret ValueWithUnit
		return ret
	}
	return *o.Humidity
}

// GetHumidityOk returns a tuple with the Humidity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SensorReading) GetHumidityOk() (*ValueWithUnit, bool) {
	if o == nil || IsNil(o.Humidity) {
		return nil, false
	}
	return o.Humidity, true
}

// HasHumidity returns a boolean if a field has been set.
func (o *SensorReading) HasHumidity() bool {
	if o != nil && !IsNil(o.Humidity) {
		return true
	}

	return false
}

// SetHumidity gets a reference to the given ValueWithUnit and assigns it to the Humidity field.
func (o *SensorReading) SetHumidity(v ValueWithUnit) {
	o.Humidity = &v
}

// GetIbx returns the Ibx field value
func (o *SensorReading) GetIbx() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ibx
}

// GetIbxOk returns a tuple with the Ibx field value
// and a boolean to check if the value has been set.
func (o *SensorReading) GetIbxOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ibx, true
}

// SetIbx sets field value
func (o *SensorReading) SetIbx(v string) {
	o.Ibx = v
}

// GetSensorId returns the SensorId field value
func (o *SensorReading) GetSensorId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SensorId
}

// GetSensorIdOk returns a tuple with the SensorId field value
// and a boolean to check if the value has been set.
func (o *SensorReading) GetSensorIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SensorId, true
}

// SetSensorId sets field value
func (o *SensorReading) SetSensorId(v string) {
	o.SensorId = v
}

// GetTemperature returns the Temperature field value if set, zero value otherwise.
func (o *SensorReading) GetTemperature() ValueWithUnit {
	if o == nil || IsNil(o.Temperature) {
		var ret ValueWithUnit
		return ret
	}
	return *o.Temperature
}

// GetTemperatureOk returns a tuple with the Temperature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SensorReading) GetTemperatureOk() (*ValueWithUnit, bool) {
	if o == nil || IsNil(o.Temperature) {
		return nil, false
	}
	return o.Temperature, true
}

// HasTemperature returns a boolean if a field has been set.
func (o *SensorReading) HasTemperature() bool {
	if o != nil && !IsNil(o.Temperature) {
		return true
	}

	return false
}

// SetTemperature gets a reference to the given ValueWithUnit and assigns it to the Temperature field.
func (o *SensorReading) SetTemperature(v ValueWithUnit) {
	o.Temperature = &v
}

// GetZoneId returns the ZoneId field value
func (o *SensorReading) GetZoneId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ZoneId
}

// GetZoneIdOk returns a tuple with the ZoneId field value
// and a boolean to check if the value has been set.
func (o *SensorReading) GetZoneIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZoneId, true
}

// SetZoneId sets field value
func (o *SensorReading) SetZoneId(v string) {
	o.ZoneId = v
}

func (o SensorReading) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SensorReading) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Humidity) {
		toSerialize["humidity"] = o.Humidity
	}
	toSerialize["ibx"] = o.Ibx
	toSerialize["sensorId"] = o.SensorId
	if !IsNil(o.Temperature) {
		toSerialize["temperature"] = o.Temperature
	}
	toSerialize["zoneId"] = o.ZoneId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SensorReading) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ibx",
		"sensorId",
		"zoneId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSensorReading := _SensorReading{}

	err = json.Unmarshal(data, &varSensorReading)

	if err != nil {
		return err
	}

	*o = SensorReading(varSensorReading)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "humidity")
		delete(additionalProperties, "ibx")
		delete(additionalProperties, "sensorId")
		delete(additionalProperties, "temperature")
		delete(additionalProperties, "zoneId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSensorReading struct {
	value *SensorReading
	isSet bool
}

func (v NullableSensorReading) Get() *SensorReading {
	return v.value
}

func (v *NullableSensorReading) Set(val *SensorReading) {
	v.value = val
	v.isSet = true
}

func (v NullableSensorReading) IsSet() bool {
	return v.isSet
}

func (v *NullableSensorReading) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSensorReading(val *SensorReading) *NullableSensorReading {
	return &NullableSensorReading{value: val, isSet: true}
}

func (v NullableSensorReading) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSensorReading) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


