/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
)

// checks if the EnvironmentDataResponsePayLoad type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvironmentDataResponsePayLoad{}

// EnvironmentDataResponsePayLoad struct for EnvironmentDataResponsePayLoad
type EnvironmentDataResponsePayLoad struct {
	Data []EnvironmentDataForArray `json:"data,omitempty"`
	// total number of data values
	TotalCount *int32 `json:"totalCount,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EnvironmentDataResponsePayLoad EnvironmentDataResponsePayLoad

// NewEnvironmentDataResponsePayLoad instantiates a new EnvironmentDataResponsePayLoad object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentDataResponsePayLoad() *EnvironmentDataResponsePayLoad {
	this := EnvironmentDataResponsePayLoad{}
	return &this
}

// NewEnvironmentDataResponsePayLoadWithDefaults instantiates a new EnvironmentDataResponsePayLoad object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentDataResponsePayLoadWithDefaults() *EnvironmentDataResponsePayLoad {
	this := EnvironmentDataResponsePayLoad{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *EnvironmentDataResponsePayLoad) GetData() []EnvironmentDataForArray {
	if o == nil || IsNil(o.Data) {
		var ret []EnvironmentDataForArray
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentDataResponsePayLoad) GetDataOk() ([]EnvironmentDataForArray, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *EnvironmentDataResponsePayLoad) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []EnvironmentDataForArray and assigns it to the Data field.
func (o *EnvironmentDataResponsePayLoad) SetData(v []EnvironmentDataForArray) {
	o.Data = v
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise.
func (o *EnvironmentDataResponsePayLoad) GetTotalCount() int32 {
	if o == nil || IsNil(o.TotalCount) {
		var ret int32
		return ret
	}
	return *o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentDataResponsePayLoad) GetTotalCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalCount) {
		return nil, false
	}
	return o.TotalCount, true
}

// HasTotalCount returns a boolean if a field has been set.
func (o *EnvironmentDataResponsePayLoad) HasTotalCount() bool {
	if o != nil && !IsNil(o.TotalCount) {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given int32 and assigns it to the TotalCount field.
func (o *EnvironmentDataResponsePayLoad) SetTotalCount(v int32) {
	o.TotalCount = &v
}

func (o EnvironmentDataResponsePayLoad) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvironmentDataResponsePayLoad) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.TotalCount) {
		toSerialize["totalCount"] = o.TotalCount
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EnvironmentDataResponsePayLoad) UnmarshalJSON(data []byte) (err error) {
	varEnvironmentDataResponsePayLoad := _EnvironmentDataResponsePayLoad{}

	err = json.Unmarshal(data, &varEnvironmentDataResponsePayLoad)

	if err != nil {
		return err
	}

	*o = EnvironmentDataResponsePayLoad(varEnvironmentDataResponsePayLoad)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "data")
		delete(additionalProperties, "totalCount")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEnvironmentDataResponsePayLoad struct {
	value *EnvironmentDataResponsePayLoad
	isSet bool
}

func (v NullableEnvironmentDataResponsePayLoad) Get() *EnvironmentDataResponsePayLoad {
	return v.value
}

func (v *NullableEnvironmentDataResponsePayLoad) Set(val *EnvironmentDataResponsePayLoad) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentDataResponsePayLoad) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentDataResponsePayLoad) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentDataResponsePayLoad(val *EnvironmentDataResponsePayLoad) *NullableEnvironmentDataResponsePayLoad {
	return &NullableEnvironmentDataResponsePayLoad{value: val, isSet: true}
}

func (v NullableEnvironmentDataResponsePayLoad) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentDataResponsePayLoad) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


