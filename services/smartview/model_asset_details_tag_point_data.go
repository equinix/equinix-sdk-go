/*
Smart View Environmental API

Empower yourself with Environmental APIs. The API makes it possible to fetch current environmental data including humidity and temperature for a single sensor (identified by IBX code and sensor ID) or for all the sensors within an IBX (identified by IBX code) in a paginated way. When fetching all sensor readings you can apply additional sort criteria.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
)

// checks if the AssetDetailsTagPointData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssetDetailsTagPointData{}

// AssetDetailsTagPointData struct for AssetDetailsTagPointData
type AssetDetailsTagPointData struct {
	PayLoad []TagPointDataArray `json:"payLoad,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AssetDetailsTagPointData AssetDetailsTagPointData

// NewAssetDetailsTagPointData instantiates a new AssetDetailsTagPointData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssetDetailsTagPointData() *AssetDetailsTagPointData {
	this := AssetDetailsTagPointData{}
	return &this
}

// NewAssetDetailsTagPointDataWithDefaults instantiates a new AssetDetailsTagPointData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssetDetailsTagPointDataWithDefaults() *AssetDetailsTagPointData {
	this := AssetDetailsTagPointData{}
	return &this
}

// GetPayLoad returns the PayLoad field value if set, zero value otherwise.
func (o *AssetDetailsTagPointData) GetPayLoad() []TagPointDataArray {
	if o == nil || IsNil(o.PayLoad) {
		var ret []TagPointDataArray
		return ret
	}
	return o.PayLoad
}

// GetPayLoadOk returns a tuple with the PayLoad field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDetailsTagPointData) GetPayLoadOk() ([]TagPointDataArray, bool) {
	if o == nil || IsNil(o.PayLoad) {
		return nil, false
	}
	return o.PayLoad, true
}

// HasPayLoad returns a boolean if a field has been set.
func (o *AssetDetailsTagPointData) HasPayLoad() bool {
	if o != nil && !IsNil(o.PayLoad) {
		return true
	}

	return false
}

// SetPayLoad gets a reference to the given []TagPointDataArray and assigns it to the PayLoad field.
func (o *AssetDetailsTagPointData) SetPayLoad(v []TagPointDataArray) {
	o.PayLoad = v
}

func (o AssetDetailsTagPointData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssetDetailsTagPointData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PayLoad) {
		toSerialize["payLoad"] = o.PayLoad
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AssetDetailsTagPointData) UnmarshalJSON(data []byte) (err error) {
	varAssetDetailsTagPointData := _AssetDetailsTagPointData{}

	err = json.Unmarshal(data, &varAssetDetailsTagPointData)

	if err != nil {
		return err
	}

	*o = AssetDetailsTagPointData(varAssetDetailsTagPointData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "payLoad")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAssetDetailsTagPointData struct {
	value *AssetDetailsTagPointData
	isSet bool
}

func (v NullableAssetDetailsTagPointData) Get() *AssetDetailsTagPointData {
	return v.value
}

func (v *NullableAssetDetailsTagPointData) Set(val *AssetDetailsTagPointData) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetDetailsTagPointData) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetDetailsTagPointData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetDetailsTagPointData(val *AssetDetailsTagPointData) *NullableAssetDetailsTagPointData {
	return &NullableAssetDetailsTagPointData{value: val, isSet: true}
}

func (v NullableAssetDetailsTagPointData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetDetailsTagPointData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


