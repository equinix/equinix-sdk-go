/*
Smart View Environmental API

Empower yourself with Environmental APIs. The API makes it possible to fetch current environmental data including humidity and temperature for a single sensor (identified by IBX code and sensor ID) or for all the sensors within an IBX (identified by IBX code) in a paginated way. When fetching all sensor readings you can apply additional sort criteria.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
)

// checks if the TagPointData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TagPointData{}

// TagPointData struct for TagPointData
type TagPointData struct {
	PayLoad []TagPointDataArrayCurrent `json:"payLoad,omitempty"`
	Status *TagPointDataStatus `json:"status,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TagPointData TagPointData

// NewTagPointData instantiates a new TagPointData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagPointData() *TagPointData {
	this := TagPointData{}
	return &this
}

// NewTagPointDataWithDefaults instantiates a new TagPointData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagPointDataWithDefaults() *TagPointData {
	this := TagPointData{}
	return &this
}

// GetPayLoad returns the PayLoad field value if set, zero value otherwise.
func (o *TagPointData) GetPayLoad() []TagPointDataArrayCurrent {
	if o == nil || IsNil(o.PayLoad) {
		var ret []TagPointDataArrayCurrent
		return ret
	}
	return o.PayLoad
}

// GetPayLoadOk returns a tuple with the PayLoad field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagPointData) GetPayLoadOk() ([]TagPointDataArrayCurrent, bool) {
	if o == nil || IsNil(o.PayLoad) {
		return nil, false
	}
	return o.PayLoad, true
}

// HasPayLoad returns a boolean if a field has been set.
func (o *TagPointData) HasPayLoad() bool {
	if o != nil && !IsNil(o.PayLoad) {
		return true
	}

	return false
}

// SetPayLoad gets a reference to the given []TagPointDataArrayCurrent and assigns it to the PayLoad field.
func (o *TagPointData) SetPayLoad(v []TagPointDataArrayCurrent) {
	o.PayLoad = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *TagPointData) GetStatus() TagPointDataStatus {
	if o == nil || IsNil(o.Status) {
		var ret TagPointDataStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagPointData) GetStatusOk() (*TagPointDataStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *TagPointData) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given TagPointDataStatus and assigns it to the Status field.
func (o *TagPointData) SetStatus(v TagPointDataStatus) {
	o.Status = &v
}

func (o TagPointData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TagPointData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PayLoad) {
		toSerialize["payLoad"] = o.PayLoad
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TagPointData) UnmarshalJSON(data []byte) (err error) {
	varTagPointData := _TagPointData{}

	err = json.Unmarshal(data, &varTagPointData)

	if err != nil {
		return err
	}

	*o = TagPointData(varTagPointData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "payLoad")
		delete(additionalProperties, "status")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTagPointData struct {
	value *TagPointData
	isSet bool
}

func (v NullableTagPointData) Get() *TagPointData {
	return v.value
}

func (v *NullableTagPointData) Set(val *TagPointData) {
	v.value = val
	v.isSet = true
}

func (v NullableTagPointData) IsSet() bool {
	return v.isSet
}

func (v *NullableTagPointData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagPointData(val *TagPointData) *NullableTagPointData {
	return &NullableTagPointData{value: val, isSet: true}
}

func (v NullableTagPointData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagPointData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


