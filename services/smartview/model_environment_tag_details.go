/*
Smart View Environmental API

Empower yourself with Environmental APIs. The API makes it possible to fetch current environmental data including humidity and temperature for a single sensor (identified by IBX code and sensor ID) or for all the sensors within an IBX (identified by IBX code) in a paginated way. When fetching all sensor readings you can apply additional sort criteria.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
	"fmt"
)

// checks if the EnvironmentTagDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvironmentTagDetails{}

// EnvironmentTagDetails tag details
type EnvironmentTagDetails struct {
	// tag display name
	DisplayName *string `json:"displayName,omitempty"`
	// tag id
	Id string `json:"id"`
	AdditionalProperties map[string]interface{}
}

type _EnvironmentTagDetails EnvironmentTagDetails

// NewEnvironmentTagDetails instantiates a new EnvironmentTagDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentTagDetails(id string) *EnvironmentTagDetails {
	this := EnvironmentTagDetails{}
	this.Id = id
	return &this
}

// NewEnvironmentTagDetailsWithDefaults instantiates a new EnvironmentTagDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentTagDetailsWithDefaults() *EnvironmentTagDetails {
	this := EnvironmentTagDetails{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *EnvironmentTagDetails) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentTagDetails) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *EnvironmentTagDetails) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *EnvironmentTagDetails) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetId returns the Id field value
func (o *EnvironmentTagDetails) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *EnvironmentTagDetails) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *EnvironmentTagDetails) SetId(v string) {
	o.Id = v
}

func (o EnvironmentTagDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvironmentTagDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	toSerialize["id"] = o.Id

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EnvironmentTagDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEnvironmentTagDetails := _EnvironmentTagDetails{}

	err = json.Unmarshal(data, &varEnvironmentTagDetails)

	if err != nil {
		return err
	}

	*o = EnvironmentTagDetails(varEnvironmentTagDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "displayName")
		delete(additionalProperties, "id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEnvironmentTagDetails struct {
	value *EnvironmentTagDetails
	isSet bool
}

func (v NullableEnvironmentTagDetails) Get() *EnvironmentTagDetails {
	return v.value
}

func (v *NullableEnvironmentTagDetails) Set(val *EnvironmentTagDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentTagDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentTagDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentTagDetails(val *EnvironmentTagDetails) *NullableEnvironmentTagDetails {
	return &NullableEnvironmentTagDetails{value: val, isSet: true}
}

func (v NullableEnvironmentTagDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentTagDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


