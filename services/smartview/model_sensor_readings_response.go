/*
Smart View Environmental API

Empower yourself with Environmental APIs. The API makes it possible to fetch current environmental data including humidity and temperature for a single sensor (identified by IBX code and sensor ID) or for all the sensors within an IBX (identified by IBX code) in a paginated way. When fetching all sensor readings you can apply additional sort criteria.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
	"fmt"
)

// checks if the SensorReadingsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SensorReadingsResponse{}

// SensorReadingsResponse struct for SensorReadingsResponse
type SensorReadingsResponse struct {
	// List of data objects
	Data []SensorReading `json:"data"`
	Pagination Pagination `json:"pagination"`
	AdditionalProperties map[string]interface{}
}

type _SensorReadingsResponse SensorReadingsResponse

// NewSensorReadingsResponse instantiates a new SensorReadingsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSensorReadingsResponse(data []SensorReading, pagination Pagination) *SensorReadingsResponse {
	this := SensorReadingsResponse{}
	this.Data = data
	this.Pagination = pagination
	return &this
}

// NewSensorReadingsResponseWithDefaults instantiates a new SensorReadingsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSensorReadingsResponseWithDefaults() *SensorReadingsResponse {
	this := SensorReadingsResponse{}
	return &this
}

// GetData returns the Data field value
func (o *SensorReadingsResponse) GetData() []SensorReading {
	if o == nil {
		var ret []SensorReading
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *SensorReadingsResponse) GetDataOk() ([]SensorReading, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *SensorReadingsResponse) SetData(v []SensorReading) {
	o.Data = v
}

// GetPagination returns the Pagination field value
func (o *SensorReadingsResponse) GetPagination() Pagination {
	if o == nil {
		var ret Pagination
		return ret
	}

	return o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value
// and a boolean to check if the value has been set.
func (o *SensorReadingsResponse) GetPaginationOk() (*Pagination, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pagination, true
}

// SetPagination sets field value
func (o *SensorReadingsResponse) SetPagination(v Pagination) {
	o.Pagination = v
}

func (o SensorReadingsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SensorReadingsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	toSerialize["pagination"] = o.Pagination

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SensorReadingsResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
		"pagination",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSensorReadingsResponse := _SensorReadingsResponse{}

	err = json.Unmarshal(data, &varSensorReadingsResponse)

	if err != nil {
		return err
	}

	*o = SensorReadingsResponse(varSensorReadingsResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "data")
		delete(additionalProperties, "pagination")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSensorReadingsResponse struct {
	value *SensorReadingsResponse
	isSet bool
}

func (v NullableSensorReadingsResponse) Get() *SensorReadingsResponse {
	return v.value
}

func (v *NullableSensorReadingsResponse) Set(val *SensorReadingsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSensorReadingsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSensorReadingsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSensorReadingsResponse(val *SensorReadingsResponse) *NullableSensorReadingsResponse {
	return &NullableSensorReadingsResponse{value: val, isSet: true}
}

func (v NullableSensorReadingsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSensorReadingsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


