/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
	"fmt"
)

// PowerV1CurrentGetLevelTypeParameter the model 'PowerV1CurrentGetLevelTypeParameter'
type PowerV1CurrentGetLevelTypeParameter string

// List of _power_v1_current_get_levelType_parameter
const (
	POWERV1CURRENTGETLEVELTYPEPARAMETER_IBX PowerV1CurrentGetLevelTypeParameter = "ibx"
	POWERV1CURRENTGETLEVELTYPEPARAMETER_CAGE PowerV1CurrentGetLevelTypeParameter = "cage"
	POWERV1CURRENTGETLEVELTYPEPARAMETER_CABINET PowerV1CurrentGetLevelTypeParameter = "cabinet"
	POWERV1CURRENTGETLEVELTYPEPARAMETER_CIRCUIT PowerV1CurrentGetLevelTypeParameter = "circuit"
)

// All allowed values of PowerV1CurrentGetLevelTypeParameter enum
var AllowedPowerV1CurrentGetLevelTypeParameterEnumValues = []PowerV1CurrentGetLevelTypeParameter{
	"ibx",
	"cage",
	"cabinet",
	"circuit",
}

func (v *PowerV1CurrentGetLevelTypeParameter) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PowerV1CurrentGetLevelTypeParameter(value)
	for _, existing := range AllowedPowerV1CurrentGetLevelTypeParameterEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PowerV1CurrentGetLevelTypeParameter", value)
}

// NewPowerV1CurrentGetLevelTypeParameterFromValue returns a pointer to a valid PowerV1CurrentGetLevelTypeParameter
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPowerV1CurrentGetLevelTypeParameterFromValue(v string) (*PowerV1CurrentGetLevelTypeParameter, error) {
	ev := PowerV1CurrentGetLevelTypeParameter(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PowerV1CurrentGetLevelTypeParameter: valid values are %v", v, AllowedPowerV1CurrentGetLevelTypeParameterEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PowerV1CurrentGetLevelTypeParameter) IsValid() bool {
	for _, existing := range AllowedPowerV1CurrentGetLevelTypeParameterEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to _power_v1_current_get_levelType_parameter value
func (v PowerV1CurrentGetLevelTypeParameter) Ptr() *PowerV1CurrentGetLevelTypeParameter {
	return &v
}

type NullablePowerV1CurrentGetLevelTypeParameter struct {
	value *PowerV1CurrentGetLevelTypeParameter
	isSet bool
}

func (v NullablePowerV1CurrentGetLevelTypeParameter) Get() *PowerV1CurrentGetLevelTypeParameter {
	return v.value
}

func (v *NullablePowerV1CurrentGetLevelTypeParameter) Set(val *PowerV1CurrentGetLevelTypeParameter) {
	v.value = val
	v.isSet = true
}

func (v NullablePowerV1CurrentGetLevelTypeParameter) IsSet() bool {
	return v.isSet
}

func (v *NullablePowerV1CurrentGetLevelTypeParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePowerV1CurrentGetLevelTypeParameter(val *PowerV1CurrentGetLevelTypeParameter) *NullablePowerV1CurrentGetLevelTypeParameter {
	return &NullablePowerV1CurrentGetLevelTypeParameter{value: val, isSet: true}
}

func (v NullablePowerV1CurrentGetLevelTypeParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePowerV1CurrentGetLevelTypeParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

