/*
Smart View Environmental API

Empower yourself with Environmental APIs. The API makes it possible to fetch current environmental data including humidity and temperature for a single sensor (identified by IBX code and sensor ID) or for all the sensors within an IBX (identified by IBX code) in a paginated way. When fetching all sensor readings you can apply additional sort criteria.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
	"fmt"
)

// TrendingPowerDataPayLoadLevelType power hierarchy node levelType linked to the power data
type TrendingPowerDataPayLoadLevelType string

// List of TrendingPowerData_payLoad_levelType
const (
	TRENDINGPOWERDATAPAYLOADLEVELTYPE_IBX TrendingPowerDataPayLoadLevelType = "ibx"
	TRENDINGPOWERDATAPAYLOADLEVELTYPE_CAGE TrendingPowerDataPayLoadLevelType = "cage"
	TRENDINGPOWERDATAPAYLOADLEVELTYPE_CABINET TrendingPowerDataPayLoadLevelType = "cabinet"
	TRENDINGPOWERDATAPAYLOADLEVELTYPE_CIRCUIT TrendingPowerDataPayLoadLevelType = "circuit"
)

// All allowed values of TrendingPowerDataPayLoadLevelType enum
var AllowedTrendingPowerDataPayLoadLevelTypeEnumValues = []TrendingPowerDataPayLoadLevelType{
	"ibx",
	"cage",
	"cabinet",
	"circuit",
}

func (v *TrendingPowerDataPayLoadLevelType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TrendingPowerDataPayLoadLevelType(value)
	for _, existing := range AllowedTrendingPowerDataPayLoadLevelTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TrendingPowerDataPayLoadLevelType", value)
}

// NewTrendingPowerDataPayLoadLevelTypeFromValue returns a pointer to a valid TrendingPowerDataPayLoadLevelType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTrendingPowerDataPayLoadLevelTypeFromValue(v string) (*TrendingPowerDataPayLoadLevelType, error) {
	ev := TrendingPowerDataPayLoadLevelType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TrendingPowerDataPayLoadLevelType: valid values are %v", v, AllowedTrendingPowerDataPayLoadLevelTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TrendingPowerDataPayLoadLevelType) IsValid() bool {
	for _, existing := range AllowedTrendingPowerDataPayLoadLevelTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TrendingPowerData_payLoad_levelType value
func (v TrendingPowerDataPayLoadLevelType) Ptr() *TrendingPowerDataPayLoadLevelType {
	return &v
}

type NullableTrendingPowerDataPayLoadLevelType struct {
	value *TrendingPowerDataPayLoadLevelType
	isSet bool
}

func (v NullableTrendingPowerDataPayLoadLevelType) Get() *TrendingPowerDataPayLoadLevelType {
	return v.value
}

func (v *NullableTrendingPowerDataPayLoadLevelType) Set(val *TrendingPowerDataPayLoadLevelType) {
	v.value = val
	v.isSet = true
}

func (v NullableTrendingPowerDataPayLoadLevelType) IsSet() bool {
	return v.isSet
}

func (v *NullableTrendingPowerDataPayLoadLevelType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrendingPowerDataPayLoadLevelType(val *TrendingPowerDataPayLoadLevelType) *NullableTrendingPowerDataPayLoadLevelType {
	return &NullableTrendingPowerDataPayLoadLevelType{value: val, isSet: true}
}

func (v NullableTrendingPowerDataPayLoadLevelType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrendingPowerDataPayLoadLevelType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

