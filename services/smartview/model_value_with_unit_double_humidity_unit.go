/*
Smart View Environmental API

Empower yourself with Environmental APIs. The API makes it possible to fetch current environmental data including humidity and temperature for a single sensor (identified by IBX code and sensor ID) or for all the sensors within an IBX (identified by IBX code) in a paginated way. When fetching all sensor readings you can apply additional sort criteria.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
	"fmt"
)

// checks if the ValueWithUnitDoubleHumidityUnit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValueWithUnitDoubleHumidityUnit{}

// ValueWithUnitDoubleHumidityUnit Single value with related unit (e.g. percentage for humidity or Celsius degree for temperature).
type ValueWithUnitDoubleHumidityUnit struct {
	Unit ValueWithUnitDoubleHumidityUnitUnit `json:"unit"`
	// Specific value, to be read together with unit.
	Value float64 `json:"value"`
	AdditionalProperties map[string]interface{}
}

type _ValueWithUnitDoubleHumidityUnit ValueWithUnitDoubleHumidityUnit

// NewValueWithUnitDoubleHumidityUnit instantiates a new ValueWithUnitDoubleHumidityUnit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValueWithUnitDoubleHumidityUnit(unit ValueWithUnitDoubleHumidityUnitUnit, value float64) *ValueWithUnitDoubleHumidityUnit {
	this := ValueWithUnitDoubleHumidityUnit{}
	this.Unit = unit
	this.Value = value
	return &this
}

// NewValueWithUnitDoubleHumidityUnitWithDefaults instantiates a new ValueWithUnitDoubleHumidityUnit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValueWithUnitDoubleHumidityUnitWithDefaults() *ValueWithUnitDoubleHumidityUnit {
	this := ValueWithUnitDoubleHumidityUnit{}
	return &this
}

// GetUnit returns the Unit field value
func (o *ValueWithUnitDoubleHumidityUnit) GetUnit() ValueWithUnitDoubleHumidityUnitUnit {
	if o == nil {
		var ret ValueWithUnitDoubleHumidityUnitUnit
		return ret
	}

	return o.Unit
}

// GetUnitOk returns a tuple with the Unit field value
// and a boolean to check if the value has been set.
func (o *ValueWithUnitDoubleHumidityUnit) GetUnitOk() (*ValueWithUnitDoubleHumidityUnitUnit, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Unit, true
}

// SetUnit sets field value
func (o *ValueWithUnitDoubleHumidityUnit) SetUnit(v ValueWithUnitDoubleHumidityUnitUnit) {
	o.Unit = v
}

// GetValue returns the Value field value
func (o *ValueWithUnitDoubleHumidityUnit) GetValue() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *ValueWithUnitDoubleHumidityUnit) GetValueOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *ValueWithUnitDoubleHumidityUnit) SetValue(v float64) {
	o.Value = v
}

func (o ValueWithUnitDoubleHumidityUnit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValueWithUnitDoubleHumidityUnit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["unit"] = o.Unit
	toSerialize["value"] = o.Value

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ValueWithUnitDoubleHumidityUnit) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"unit",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varValueWithUnitDoubleHumidityUnit := _ValueWithUnitDoubleHumidityUnit{}

	err = json.Unmarshal(data, &varValueWithUnitDoubleHumidityUnit)

	if err != nil {
		return err
	}

	*o = ValueWithUnitDoubleHumidityUnit(varValueWithUnitDoubleHumidityUnit)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "unit")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableValueWithUnitDoubleHumidityUnit struct {
	value *ValueWithUnitDoubleHumidityUnit
	isSet bool
}

func (v NullableValueWithUnitDoubleHumidityUnit) Get() *ValueWithUnitDoubleHumidityUnit {
	return v.value
}

func (v *NullableValueWithUnitDoubleHumidityUnit) Set(val *ValueWithUnitDoubleHumidityUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableValueWithUnitDoubleHumidityUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableValueWithUnitDoubleHumidityUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValueWithUnitDoubleHumidityUnit(val *ValueWithUnitDoubleHumidityUnit) *NullableValueWithUnitDoubleHumidityUnit {
	return &NullableValueWithUnitDoubleHumidityUnit{value: val, isSet: true}
}

func (v NullableValueWithUnitDoubleHumidityUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValueWithUnitDoubleHumidityUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


