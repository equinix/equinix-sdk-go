/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
)

// checks if the AssetsListPayLoad type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssetsListPayLoad{}

// AssetsListPayLoad struct for AssetsListPayLoad
type AssetsListPayLoad struct {
	Categories []Category `json:"categories,omitempty"`
	// asset classification for the Electrical and Mechanical
	Classification *string `json:"classification,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AssetsListPayLoad AssetsListPayLoad

// NewAssetsListPayLoad instantiates a new AssetsListPayLoad object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssetsListPayLoad() *AssetsListPayLoad {
	this := AssetsListPayLoad{}
	return &this
}

// NewAssetsListPayLoadWithDefaults instantiates a new AssetsListPayLoad object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssetsListPayLoadWithDefaults() *AssetsListPayLoad {
	this := AssetsListPayLoad{}
	return &this
}

// GetCategories returns the Categories field value if set, zero value otherwise.
func (o *AssetsListPayLoad) GetCategories() []Category {
	if o == nil || IsNil(o.Categories) {
		var ret []Category
		return ret
	}
	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetsListPayLoad) GetCategoriesOk() ([]Category, bool) {
	if o == nil || IsNil(o.Categories) {
		return nil, false
	}
	return o.Categories, true
}

// HasCategories returns a boolean if a field has been set.
func (o *AssetsListPayLoad) HasCategories() bool {
	if o != nil && !IsNil(o.Categories) {
		return true
	}

	return false
}

// SetCategories gets a reference to the given []Category and assigns it to the Categories field.
func (o *AssetsListPayLoad) SetCategories(v []Category) {
	o.Categories = v
}

// GetClassification returns the Classification field value if set, zero value otherwise.
func (o *AssetsListPayLoad) GetClassification() string {
	if o == nil || IsNil(o.Classification) {
		var ret string
		return ret
	}
	return *o.Classification
}

// GetClassificationOk returns a tuple with the Classification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetsListPayLoad) GetClassificationOk() (*string, bool) {
	if o == nil || IsNil(o.Classification) {
		return nil, false
	}
	return o.Classification, true
}

// HasClassification returns a boolean if a field has been set.
func (o *AssetsListPayLoad) HasClassification() bool {
	if o != nil && !IsNil(o.Classification) {
		return true
	}

	return false
}

// SetClassification gets a reference to the given string and assigns it to the Classification field.
func (o *AssetsListPayLoad) SetClassification(v string) {
	o.Classification = &v
}

func (o AssetsListPayLoad) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssetsListPayLoad) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Categories) {
		toSerialize["categories"] = o.Categories
	}
	if !IsNil(o.Classification) {
		toSerialize["classification"] = o.Classification
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AssetsListPayLoad) UnmarshalJSON(data []byte) (err error) {
	varAssetsListPayLoad := _AssetsListPayLoad{}

	err = json.Unmarshal(data, &varAssetsListPayLoad)

	if err != nil {
		return err
	}

	*o = AssetsListPayLoad(varAssetsListPayLoad)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "categories")
		delete(additionalProperties, "classification")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAssetsListPayLoad struct {
	value *AssetsListPayLoad
	isSet bool
}

func (v NullableAssetsListPayLoad) Get() *AssetsListPayLoad {
	return v.value
}

func (v *NullableAssetsListPayLoad) Set(val *AssetsListPayLoad) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetsListPayLoad) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetsListPayLoad) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetsListPayLoad(val *AssetsListPayLoad) *NullableAssetsListPayLoad {
	return &NullableAssetsListPayLoad{value: val, isSet: true}
}

func (v NullableAssetsListPayLoad) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetsListPayLoad) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


