/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
)

// checks if the AlarmTagDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlarmTagDetails{}

// AlarmTagDetails tag details
type AlarmTagDetails struct {
	// tag display name
	DisplayName *string `json:"displayName,omitempty"`
	// tag id
	Id *string `json:"id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AlarmTagDetails AlarmTagDetails

// NewAlarmTagDetails instantiates a new AlarmTagDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlarmTagDetails() *AlarmTagDetails {
	this := AlarmTagDetails{}
	return &this
}

// NewAlarmTagDetailsWithDefaults instantiates a new AlarmTagDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlarmTagDetailsWithDefaults() *AlarmTagDetails {
	this := AlarmTagDetails{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *AlarmTagDetails) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlarmTagDetails) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *AlarmTagDetails) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *AlarmTagDetails) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AlarmTagDetails) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlarmTagDetails) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AlarmTagDetails) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AlarmTagDetails) SetId(v string) {
	o.Id = &v
}

func (o AlarmTagDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlarmTagDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AlarmTagDetails) UnmarshalJSON(data []byte) (err error) {
	varAlarmTagDetails := _AlarmTagDetails{}

	err = json.Unmarshal(data, &varAlarmTagDetails)

	if err != nil {
		return err
	}

	*o = AlarmTagDetails(varAlarmTagDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "displayName")
		delete(additionalProperties, "id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAlarmTagDetails struct {
	value *AlarmTagDetails
	isSet bool
}

func (v NullableAlarmTagDetails) Get() *AlarmTagDetails {
	return v.value
}

func (v *NullableAlarmTagDetails) Set(val *AlarmTagDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableAlarmTagDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableAlarmTagDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlarmTagDetails(val *AlarmTagDetails) *NullableAlarmTagDetails {
	return &NullableAlarmTagDetails{value: val, isSet: true}
}

func (v NullableAlarmTagDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlarmTagDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


