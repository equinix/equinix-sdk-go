/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
	"fmt"
)

// Mixin0LevelTypeParameter the model 'Mixin0LevelTypeParameter'
type Mixin0LevelTypeParameter string

// List of Mixin0_levelType_parameter
const (
	MIXIN0LEVELTYPEPARAMETER_IBX Mixin0LevelTypeParameter = "IBX"
	MIXIN0LEVELTYPEPARAMETER_ZONE Mixin0LevelTypeParameter = "ZONE"
	MIXIN0LEVELTYPEPARAMETER_CAGE Mixin0LevelTypeParameter = "CAGE"
	MIXIN0LEVELTYPEPARAMETER_SENSOR Mixin0LevelTypeParameter = "SENSOR"
)

// All allowed values of Mixin0LevelTypeParameter enum
var AllowedMixin0LevelTypeParameterEnumValues = []Mixin0LevelTypeParameter{
	"IBX",
	"ZONE",
	"CAGE",
	"SENSOR",
}

func (v *Mixin0LevelTypeParameter) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Mixin0LevelTypeParameter(value)
	for _, existing := range AllowedMixin0LevelTypeParameterEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Mixin0LevelTypeParameter", value)
}

// NewMixin0LevelTypeParameterFromValue returns a pointer to a valid Mixin0LevelTypeParameter
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMixin0LevelTypeParameterFromValue(v string) (*Mixin0LevelTypeParameter, error) {
	ev := Mixin0LevelTypeParameter(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Mixin0LevelTypeParameter: valid values are %v", v, AllowedMixin0LevelTypeParameterEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Mixin0LevelTypeParameter) IsValid() bool {
	for _, existing := range AllowedMixin0LevelTypeParameterEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Mixin0_levelType_parameter value
func (v Mixin0LevelTypeParameter) Ptr() *Mixin0LevelTypeParameter {
	return &v
}

type NullableMixin0LevelTypeParameter struct {
	value *Mixin0LevelTypeParameter
	isSet bool
}

func (v NullableMixin0LevelTypeParameter) Get() *Mixin0LevelTypeParameter {
	return v.value
}

func (v *NullableMixin0LevelTypeParameter) Set(val *Mixin0LevelTypeParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableMixin0LevelTypeParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableMixin0LevelTypeParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMixin0LevelTypeParameter(val *Mixin0LevelTypeParameter) *NullableMixin0LevelTypeParameter {
	return &NullableMixin0LevelTypeParameter{value: val, isSet: true}
}

func (v NullableMixin0LevelTypeParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMixin0LevelTypeParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

