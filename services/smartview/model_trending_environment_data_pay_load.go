/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
)

// checks if the TrendingEnvironmentDataPayLoad type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrendingEnvironmentDataPayLoad{}

// TrendingEnvironmentDataPayLoad struct for TrendingEnvironmentDataPayLoad
type TrendingEnvironmentDataPayLoad struct {
	// customer account num
	AccountNo *string `json:"accountNo,omitempty"`
	// data point for which the timeseries data is fetched
	Datapoint *string `json:"datapoint,omitempty"`
	// ibx code
	Ibx *string `json:"ibx,omitempty"`
	// interval
	Interval *string `json:"interval,omitempty"`
	// Time series data for the data point
	Series []DataValue `json:"series,omitempty"`
	// unit of measure used for the datapoint
	Uom *string `json:"uom,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TrendingEnvironmentDataPayLoad TrendingEnvironmentDataPayLoad

// NewTrendingEnvironmentDataPayLoad instantiates a new TrendingEnvironmentDataPayLoad object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrendingEnvironmentDataPayLoad() *TrendingEnvironmentDataPayLoad {
	this := TrendingEnvironmentDataPayLoad{}
	return &this
}

// NewTrendingEnvironmentDataPayLoadWithDefaults instantiates a new TrendingEnvironmentDataPayLoad object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrendingEnvironmentDataPayLoadWithDefaults() *TrendingEnvironmentDataPayLoad {
	this := TrendingEnvironmentDataPayLoad{}
	return &this
}

// GetAccountNo returns the AccountNo field value if set, zero value otherwise.
func (o *TrendingEnvironmentDataPayLoad) GetAccountNo() string {
	if o == nil || IsNil(o.AccountNo) {
		var ret string
		return ret
	}
	return *o.AccountNo
}

// GetAccountNoOk returns a tuple with the AccountNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrendingEnvironmentDataPayLoad) GetAccountNoOk() (*string, bool) {
	if o == nil || IsNil(o.AccountNo) {
		return nil, false
	}
	return o.AccountNo, true
}

// HasAccountNo returns a boolean if a field has been set.
func (o *TrendingEnvironmentDataPayLoad) HasAccountNo() bool {
	if o != nil && !IsNil(o.AccountNo) {
		return true
	}

	return false
}

// SetAccountNo gets a reference to the given string and assigns it to the AccountNo field.
func (o *TrendingEnvironmentDataPayLoad) SetAccountNo(v string) {
	o.AccountNo = &v
}

// GetDatapoint returns the Datapoint field value if set, zero value otherwise.
func (o *TrendingEnvironmentDataPayLoad) GetDatapoint() string {
	if o == nil || IsNil(o.Datapoint) {
		var ret string
		return ret
	}
	return *o.Datapoint
}

// GetDatapointOk returns a tuple with the Datapoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrendingEnvironmentDataPayLoad) GetDatapointOk() (*string, bool) {
	if o == nil || IsNil(o.Datapoint) {
		return nil, false
	}
	return o.Datapoint, true
}

// HasDatapoint returns a boolean if a field has been set.
func (o *TrendingEnvironmentDataPayLoad) HasDatapoint() bool {
	if o != nil && !IsNil(o.Datapoint) {
		return true
	}

	return false
}

// SetDatapoint gets a reference to the given string and assigns it to the Datapoint field.
func (o *TrendingEnvironmentDataPayLoad) SetDatapoint(v string) {
	o.Datapoint = &v
}

// GetIbx returns the Ibx field value if set, zero value otherwise.
func (o *TrendingEnvironmentDataPayLoad) GetIbx() string {
	if o == nil || IsNil(o.Ibx) {
		var ret string
		return ret
	}
	return *o.Ibx
}

// GetIbxOk returns a tuple with the Ibx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrendingEnvironmentDataPayLoad) GetIbxOk() (*string, bool) {
	if o == nil || IsNil(o.Ibx) {
		return nil, false
	}
	return o.Ibx, true
}

// HasIbx returns a boolean if a field has been set.
func (o *TrendingEnvironmentDataPayLoad) HasIbx() bool {
	if o != nil && !IsNil(o.Ibx) {
		return true
	}

	return false
}

// SetIbx gets a reference to the given string and assigns it to the Ibx field.
func (o *TrendingEnvironmentDataPayLoad) SetIbx(v string) {
	o.Ibx = &v
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *TrendingEnvironmentDataPayLoad) GetInterval() string {
	if o == nil || IsNil(o.Interval) {
		var ret string
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrendingEnvironmentDataPayLoad) GetIntervalOk() (*string, bool) {
	if o == nil || IsNil(o.Interval) {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *TrendingEnvironmentDataPayLoad) HasInterval() bool {
	if o != nil && !IsNil(o.Interval) {
		return true
	}

	return false
}

// SetInterval gets a reference to the given string and assigns it to the Interval field.
func (o *TrendingEnvironmentDataPayLoad) SetInterval(v string) {
	o.Interval = &v
}

// GetSeries returns the Series field value if set, zero value otherwise.
func (o *TrendingEnvironmentDataPayLoad) GetSeries() []DataValue {
	if o == nil || IsNil(o.Series) {
		var ret []DataValue
		return ret
	}
	return o.Series
}

// GetSeriesOk returns a tuple with the Series field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrendingEnvironmentDataPayLoad) GetSeriesOk() ([]DataValue, bool) {
	if o == nil || IsNil(o.Series) {
		return nil, false
	}
	return o.Series, true
}

// HasSeries returns a boolean if a field has been set.
func (o *TrendingEnvironmentDataPayLoad) HasSeries() bool {
	if o != nil && !IsNil(o.Series) {
		return true
	}

	return false
}

// SetSeries gets a reference to the given []DataValue and assigns it to the Series field.
func (o *TrendingEnvironmentDataPayLoad) SetSeries(v []DataValue) {
	o.Series = v
}

// GetUom returns the Uom field value if set, zero value otherwise.
func (o *TrendingEnvironmentDataPayLoad) GetUom() string {
	if o == nil || IsNil(o.Uom) {
		var ret string
		return ret
	}
	return *o.Uom
}

// GetUomOk returns a tuple with the Uom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrendingEnvironmentDataPayLoad) GetUomOk() (*string, bool) {
	if o == nil || IsNil(o.Uom) {
		return nil, false
	}
	return o.Uom, true
}

// HasUom returns a boolean if a field has been set.
func (o *TrendingEnvironmentDataPayLoad) HasUom() bool {
	if o != nil && !IsNil(o.Uom) {
		return true
	}

	return false
}

// SetUom gets a reference to the given string and assigns it to the Uom field.
func (o *TrendingEnvironmentDataPayLoad) SetUom(v string) {
	o.Uom = &v
}

func (o TrendingEnvironmentDataPayLoad) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrendingEnvironmentDataPayLoad) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountNo) {
		toSerialize["accountNo"] = o.AccountNo
	}
	if !IsNil(o.Datapoint) {
		toSerialize["datapoint"] = o.Datapoint
	}
	if !IsNil(o.Ibx) {
		toSerialize["ibx"] = o.Ibx
	}
	if !IsNil(o.Interval) {
		toSerialize["interval"] = o.Interval
	}
	if !IsNil(o.Series) {
		toSerialize["series"] = o.Series
	}
	if !IsNil(o.Uom) {
		toSerialize["uom"] = o.Uom
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TrendingEnvironmentDataPayLoad) UnmarshalJSON(data []byte) (err error) {
	varTrendingEnvironmentDataPayLoad := _TrendingEnvironmentDataPayLoad{}

	err = json.Unmarshal(data, &varTrendingEnvironmentDataPayLoad)

	if err != nil {
		return err
	}

	*o = TrendingEnvironmentDataPayLoad(varTrendingEnvironmentDataPayLoad)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "accountNo")
		delete(additionalProperties, "datapoint")
		delete(additionalProperties, "ibx")
		delete(additionalProperties, "interval")
		delete(additionalProperties, "series")
		delete(additionalProperties, "uom")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTrendingEnvironmentDataPayLoad struct {
	value *TrendingEnvironmentDataPayLoad
	isSet bool
}

func (v NullableTrendingEnvironmentDataPayLoad) Get() *TrendingEnvironmentDataPayLoad {
	return v.value
}

func (v *NullableTrendingEnvironmentDataPayLoad) Set(val *TrendingEnvironmentDataPayLoad) {
	v.value = val
	v.isSet = true
}

func (v NullableTrendingEnvironmentDataPayLoad) IsSet() bool {
	return v.isSet
}

func (v *NullableTrendingEnvironmentDataPayLoad) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrendingEnvironmentDataPayLoad(val *TrendingEnvironmentDataPayLoad) *NullableTrendingEnvironmentDataPayLoad {
	return &NullableTrendingEnvironmentDataPayLoad{value: val, isSet: true}
}

func (v NullableTrendingEnvironmentDataPayLoad) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrendingEnvironmentDataPayLoad) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


