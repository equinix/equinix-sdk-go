/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
	"fmt"
)

// checks if the PowerMessageData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PowerMessageData{}

// PowerMessageData power message data
type PowerMessageData struct {
	Data Power `json:"data"`
	// message type
	Type string `json:"type"`
	AdditionalProperties map[string]interface{}
}

type _PowerMessageData PowerMessageData

// NewPowerMessageData instantiates a new PowerMessageData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPowerMessageData(data Power, type_ string) *PowerMessageData {
	this := PowerMessageData{}
	this.Data = data
	this.Type = type_
	return &this
}

// NewPowerMessageDataWithDefaults instantiates a new PowerMessageData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPowerMessageDataWithDefaults() *PowerMessageData {
	this := PowerMessageData{}
	var type_ string = "power"
	this.Type = type_
	return &this
}

// GetData returns the Data field value
func (o *PowerMessageData) GetData() Power {
	if o == nil {
		var ret Power
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *PowerMessageData) GetDataOk() (*Power, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *PowerMessageData) SetData(v Power) {
	o.Data = v
}

// GetType returns the Type field value
func (o *PowerMessageData) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PowerMessageData) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PowerMessageData) SetType(v string) {
	o.Type = v
}

func (o PowerMessageData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PowerMessageData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	toSerialize["type"] = o.Type

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PowerMessageData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPowerMessageData := _PowerMessageData{}

	err = json.Unmarshal(data, &varPowerMessageData)

	if err != nil {
		return err
	}

	*o = PowerMessageData(varPowerMessageData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "data")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePowerMessageData struct {
	value *PowerMessageData
	isSet bool
}

func (v NullablePowerMessageData) Get() *PowerMessageData {
	return v.value
}

func (v *NullablePowerMessageData) Set(val *PowerMessageData) {
	v.value = val
	v.isSet = true
}

func (v NullablePowerMessageData) IsSet() bool {
	return v.isSet
}

func (v *NullablePowerMessageData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePowerMessageData(val *PowerMessageData) *NullablePowerMessageData {
	return &NullablePowerMessageData{value: val, isSet: true}
}

func (v NullablePowerMessageData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePowerMessageData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


