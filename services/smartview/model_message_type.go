/*
Smart View Environmental API

Empower yourself with Environmental APIs. The API makes it possible to fetch current environmental data including humidity and temperature for a single sensor (identified by IBX code and sensor ID) or for all the sensors within an IBX (identified by IBX code) in a paginated way. When fetching all sensor readings you can apply additional sort criteria.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
)

// checks if the MessageType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessageType{}

// MessageType Message type for a given subscription
type MessageType struct {
	// List of asset message type to subscribe
	Asset []Asset `json:"asset,omitempty"`
	// List of custom alert message type to subscribe
	CustomAlert []CustomAlert `json:"customAlert,omitempty"`
	// List of environmental message type to subscribe
	Environmental []Environmental `json:"environmental,omitempty"`
	// List of metered power message type to subscribe
	MeteredPower []MeteredPower `json:"meteredPower,omitempty"`
	// List of power message type to subscribe
	Power []PowerMessage `json:"power,omitempty"`
	// List of system alert message type to subscribe
	SystemAlert []SystemAlert `json:"systemAlert,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MessageType MessageType

// NewMessageType instantiates a new MessageType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageType() *MessageType {
	this := MessageType{}
	return &this
}

// NewMessageTypeWithDefaults instantiates a new MessageType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageTypeWithDefaults() *MessageType {
	this := MessageType{}
	return &this
}

// GetAsset returns the Asset field value if set, zero value otherwise.
func (o *MessageType) GetAsset() []Asset {
	if o == nil || IsNil(o.Asset) {
		var ret []Asset
		return ret
	}
	return o.Asset
}

// GetAssetOk returns a tuple with the Asset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageType) GetAssetOk() ([]Asset, bool) {
	if o == nil || IsNil(o.Asset) {
		return nil, false
	}
	return o.Asset, true
}

// HasAsset returns a boolean if a field has been set.
func (o *MessageType) HasAsset() bool {
	if o != nil && !IsNil(o.Asset) {
		return true
	}

	return false
}

// SetAsset gets a reference to the given []Asset and assigns it to the Asset field.
func (o *MessageType) SetAsset(v []Asset) {
	o.Asset = v
}

// GetCustomAlert returns the CustomAlert field value if set, zero value otherwise.
func (o *MessageType) GetCustomAlert() []CustomAlert {
	if o == nil || IsNil(o.CustomAlert) {
		var ret []CustomAlert
		return ret
	}
	return o.CustomAlert
}

// GetCustomAlertOk returns a tuple with the CustomAlert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageType) GetCustomAlertOk() ([]CustomAlert, bool) {
	if o == nil || IsNil(o.CustomAlert) {
		return nil, false
	}
	return o.CustomAlert, true
}

// HasCustomAlert returns a boolean if a field has been set.
func (o *MessageType) HasCustomAlert() bool {
	if o != nil && !IsNil(o.CustomAlert) {
		return true
	}

	return false
}

// SetCustomAlert gets a reference to the given []CustomAlert and assigns it to the CustomAlert field.
func (o *MessageType) SetCustomAlert(v []CustomAlert) {
	o.CustomAlert = v
}

// GetEnvironmental returns the Environmental field value if set, zero value otherwise.
func (o *MessageType) GetEnvironmental() []Environmental {
	if o == nil || IsNil(o.Environmental) {
		var ret []Environmental
		return ret
	}
	return o.Environmental
}

// GetEnvironmentalOk returns a tuple with the Environmental field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageType) GetEnvironmentalOk() ([]Environmental, bool) {
	if o == nil || IsNil(o.Environmental) {
		return nil, false
	}
	return o.Environmental, true
}

// HasEnvironmental returns a boolean if a field has been set.
func (o *MessageType) HasEnvironmental() bool {
	if o != nil && !IsNil(o.Environmental) {
		return true
	}

	return false
}

// SetEnvironmental gets a reference to the given []Environmental and assigns it to the Environmental field.
func (o *MessageType) SetEnvironmental(v []Environmental) {
	o.Environmental = v
}

// GetMeteredPower returns the MeteredPower field value if set, zero value otherwise.
func (o *MessageType) GetMeteredPower() []MeteredPower {
	if o == nil || IsNil(o.MeteredPower) {
		var ret []MeteredPower
		return ret
	}
	return o.MeteredPower
}

// GetMeteredPowerOk returns a tuple with the MeteredPower field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageType) GetMeteredPowerOk() ([]MeteredPower, bool) {
	if o == nil || IsNil(o.MeteredPower) {
		return nil, false
	}
	return o.MeteredPower, true
}

// HasMeteredPower returns a boolean if a field has been set.
func (o *MessageType) HasMeteredPower() bool {
	if o != nil && !IsNil(o.MeteredPower) {
		return true
	}

	return false
}

// SetMeteredPower gets a reference to the given []MeteredPower and assigns it to the MeteredPower field.
func (o *MessageType) SetMeteredPower(v []MeteredPower) {
	o.MeteredPower = v
}

// GetPower returns the Power field value if set, zero value otherwise.
func (o *MessageType) GetPower() []PowerMessage {
	if o == nil || IsNil(o.Power) {
		var ret []PowerMessage
		return ret
	}
	return o.Power
}

// GetPowerOk returns a tuple with the Power field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageType) GetPowerOk() ([]PowerMessage, bool) {
	if o == nil || IsNil(o.Power) {
		return nil, false
	}
	return o.Power, true
}

// HasPower returns a boolean if a field has been set.
func (o *MessageType) HasPower() bool {
	if o != nil && !IsNil(o.Power) {
		return true
	}

	return false
}

// SetPower gets a reference to the given []PowerMessage and assigns it to the Power field.
func (o *MessageType) SetPower(v []PowerMessage) {
	o.Power = v
}

// GetSystemAlert returns the SystemAlert field value if set, zero value otherwise.
func (o *MessageType) GetSystemAlert() []SystemAlert {
	if o == nil || IsNil(o.SystemAlert) {
		var ret []SystemAlert
		return ret
	}
	return o.SystemAlert
}

// GetSystemAlertOk returns a tuple with the SystemAlert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageType) GetSystemAlertOk() ([]SystemAlert, bool) {
	if o == nil || IsNil(o.SystemAlert) {
		return nil, false
	}
	return o.SystemAlert, true
}

// HasSystemAlert returns a boolean if a field has been set.
func (o *MessageType) HasSystemAlert() bool {
	if o != nil && !IsNil(o.SystemAlert) {
		return true
	}

	return false
}

// SetSystemAlert gets a reference to the given []SystemAlert and assigns it to the SystemAlert field.
func (o *MessageType) SetSystemAlert(v []SystemAlert) {
	o.SystemAlert = v
}

func (o MessageType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessageType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Asset) {
		toSerialize["asset"] = o.Asset
	}
	if !IsNil(o.CustomAlert) {
		toSerialize["customAlert"] = o.CustomAlert
	}
	if !IsNil(o.Environmental) {
		toSerialize["environmental"] = o.Environmental
	}
	if !IsNil(o.MeteredPower) {
		toSerialize["meteredPower"] = o.MeteredPower
	}
	if !IsNil(o.Power) {
		toSerialize["power"] = o.Power
	}
	if !IsNil(o.SystemAlert) {
		toSerialize["systemAlert"] = o.SystemAlert
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MessageType) UnmarshalJSON(data []byte) (err error) {
	varMessageType := _MessageType{}

	err = json.Unmarshal(data, &varMessageType)

	if err != nil {
		return err
	}

	*o = MessageType(varMessageType)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "asset")
		delete(additionalProperties, "customAlert")
		delete(additionalProperties, "environmental")
		delete(additionalProperties, "meteredPower")
		delete(additionalProperties, "power")
		delete(additionalProperties, "systemAlert")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMessageType struct {
	value *MessageType
	isSet bool
}

func (v NullableMessageType) Get() *MessageType {
	return v.value
}

func (v *NullableMessageType) Set(val *MessageType) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageType) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageType(val *MessageType) *NullableMessageType {
	return &NullableMessageType{value: val, isSet: true}
}

func (v NullableMessageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


