/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
)

// checks if the PowerDataResponseIBXPayLoad type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PowerDataResponseIBXPayLoad{}

// PowerDataResponseIBXPayLoad struct for PowerDataResponseIBXPayLoad
type PowerDataResponseIBXPayLoad struct {
	Data []PowerDataIBX `json:"data,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PowerDataResponseIBXPayLoad PowerDataResponseIBXPayLoad

// NewPowerDataResponseIBXPayLoad instantiates a new PowerDataResponseIBXPayLoad object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPowerDataResponseIBXPayLoad() *PowerDataResponseIBXPayLoad {
	this := PowerDataResponseIBXPayLoad{}
	return &this
}

// NewPowerDataResponseIBXPayLoadWithDefaults instantiates a new PowerDataResponseIBXPayLoad object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPowerDataResponseIBXPayLoadWithDefaults() *PowerDataResponseIBXPayLoad {
	this := PowerDataResponseIBXPayLoad{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *PowerDataResponseIBXPayLoad) GetData() []PowerDataIBX {
	if o == nil || IsNil(o.Data) {
		var ret []PowerDataIBX
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerDataResponseIBXPayLoad) GetDataOk() ([]PowerDataIBX, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *PowerDataResponseIBXPayLoad) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []PowerDataIBX and assigns it to the Data field.
func (o *PowerDataResponseIBXPayLoad) SetData(v []PowerDataIBX) {
	o.Data = v
}

func (o PowerDataResponseIBXPayLoad) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PowerDataResponseIBXPayLoad) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PowerDataResponseIBXPayLoad) UnmarshalJSON(data []byte) (err error) {
	varPowerDataResponseIBXPayLoad := _PowerDataResponseIBXPayLoad{}

	err = json.Unmarshal(data, &varPowerDataResponseIBXPayLoad)

	if err != nil {
		return err
	}

	*o = PowerDataResponseIBXPayLoad(varPowerDataResponseIBXPayLoad)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "data")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePowerDataResponseIBXPayLoad struct {
	value *PowerDataResponseIBXPayLoad
	isSet bool
}

func (v NullablePowerDataResponseIBXPayLoad) Get() *PowerDataResponseIBXPayLoad {
	return v.value
}

func (v *NullablePowerDataResponseIBXPayLoad) Set(val *PowerDataResponseIBXPayLoad) {
	v.value = val
	v.isSet = true
}

func (v NullablePowerDataResponseIBXPayLoad) IsSet() bool {
	return v.isSet
}

func (v *NullablePowerDataResponseIBXPayLoad) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePowerDataResponseIBXPayLoad(val *PowerDataResponseIBXPayLoad) *NullablePowerDataResponseIBXPayLoad {
	return &NullablePowerDataResponseIBXPayLoad{value: val, isSet: true}
}

func (v NullablePowerDataResponseIBXPayLoad) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePowerDataResponseIBXPayLoad) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


