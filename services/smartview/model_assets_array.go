/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
)

// checks if the AssetsArray type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssetsArray{}

// AssetsArray struct for AssetsArray
type AssetsArray struct {
	// Asset   classification is electrical or mechanical 
	AssetClassification *string `json:"assetClassification,omitempty"`
	// The assetid is the circuit number, sensor id, asset id, asset id  for type circuit, sensor, electrical and mechanical resp. 
	AssetId *string `json:"assetId,omitempty"`
	// Asset Label is the Circuit display label, Sensor ID, and Asset ID for types circuit, sensor, electrical and mechanical resp.  
	AssetLabel *string `json:"assetLabel,omitempty"`
	Type *string `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AssetsArray AssetsArray

// NewAssetsArray instantiates a new AssetsArray object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssetsArray() *AssetsArray {
	this := AssetsArray{}
	return &this
}

// NewAssetsArrayWithDefaults instantiates a new AssetsArray object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssetsArrayWithDefaults() *AssetsArray {
	this := AssetsArray{}
	return &this
}

// GetAssetClassification returns the AssetClassification field value if set, zero value otherwise.
func (o *AssetsArray) GetAssetClassification() string {
	if o == nil || IsNil(o.AssetClassification) {
		var ret string
		return ret
	}
	return *o.AssetClassification
}

// GetAssetClassificationOk returns a tuple with the AssetClassification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetsArray) GetAssetClassificationOk() (*string, bool) {
	if o == nil || IsNil(o.AssetClassification) {
		return nil, false
	}
	return o.AssetClassification, true
}

// HasAssetClassification returns a boolean if a field has been set.
func (o *AssetsArray) HasAssetClassification() bool {
	if o != nil && !IsNil(o.AssetClassification) {
		return true
	}

	return false
}

// SetAssetClassification gets a reference to the given string and assigns it to the AssetClassification field.
func (o *AssetsArray) SetAssetClassification(v string) {
	o.AssetClassification = &v
}

// GetAssetId returns the AssetId field value if set, zero value otherwise.
func (o *AssetsArray) GetAssetId() string {
	if o == nil || IsNil(o.AssetId) {
		var ret string
		return ret
	}
	return *o.AssetId
}

// GetAssetIdOk returns a tuple with the AssetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetsArray) GetAssetIdOk() (*string, bool) {
	if o == nil || IsNil(o.AssetId) {
		return nil, false
	}
	return o.AssetId, true
}

// HasAssetId returns a boolean if a field has been set.
func (o *AssetsArray) HasAssetId() bool {
	if o != nil && !IsNil(o.AssetId) {
		return true
	}

	return false
}

// SetAssetId gets a reference to the given string and assigns it to the AssetId field.
func (o *AssetsArray) SetAssetId(v string) {
	o.AssetId = &v
}

// GetAssetLabel returns the AssetLabel field value if set, zero value otherwise.
func (o *AssetsArray) GetAssetLabel() string {
	if o == nil || IsNil(o.AssetLabel) {
		var ret string
		return ret
	}
	return *o.AssetLabel
}

// GetAssetLabelOk returns a tuple with the AssetLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetsArray) GetAssetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.AssetLabel) {
		return nil, false
	}
	return o.AssetLabel, true
}

// HasAssetLabel returns a boolean if a field has been set.
func (o *AssetsArray) HasAssetLabel() bool {
	if o != nil && !IsNil(o.AssetLabel) {
		return true
	}

	return false
}

// SetAssetLabel gets a reference to the given string and assigns it to the AssetLabel field.
func (o *AssetsArray) SetAssetLabel(v string) {
	o.AssetLabel = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AssetsArray) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetsArray) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AssetsArray) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AssetsArray) SetType(v string) {
	o.Type = &v
}

func (o AssetsArray) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssetsArray) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AssetClassification) {
		toSerialize["assetClassification"] = o.AssetClassification
	}
	if !IsNil(o.AssetId) {
		toSerialize["assetId"] = o.AssetId
	}
	if !IsNil(o.AssetLabel) {
		toSerialize["assetLabel"] = o.AssetLabel
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AssetsArray) UnmarshalJSON(data []byte) (err error) {
	varAssetsArray := _AssetsArray{}

	err = json.Unmarshal(data, &varAssetsArray)

	if err != nil {
		return err
	}

	*o = AssetsArray(varAssetsArray)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "assetClassification")
		delete(additionalProperties, "assetId")
		delete(additionalProperties, "assetLabel")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAssetsArray struct {
	value *AssetsArray
	isSet bool
}

func (v NullableAssetsArray) Get() *AssetsArray {
	return v.value
}

func (v *NullableAssetsArray) Set(val *AssetsArray) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetsArray) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetsArray) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetsArray(val *AssetsArray) *NullableAssetsArray {
	return &NullableAssetsArray{value: val, isSet: true}
}

func (v NullableAssetsArray) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetsArray) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


