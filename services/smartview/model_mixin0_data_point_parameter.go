/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
	"fmt"
)

// Mixin0DataPointParameter the model 'Mixin0DataPointParameter'
type Mixin0DataPointParameter string

// List of Mixin0_dataPoint_parameter
const (
	MIXIN0DATAPOINTPARAMETER_TEMPERATURE Mixin0DataPointParameter = "temperature"
	MIXIN0DATAPOINTPARAMETER_HUMIDITY Mixin0DataPointParameter = "humidity"
)

// All allowed values of Mixin0DataPointParameter enum
var AllowedMixin0DataPointParameterEnumValues = []Mixin0DataPointParameter{
	"temperature",
	"humidity",
}

func (v *Mixin0DataPointParameter) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Mixin0DataPointParameter(value)
	for _, existing := range AllowedMixin0DataPointParameterEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Mixin0DataPointParameter", value)
}

// NewMixin0DataPointParameterFromValue returns a pointer to a valid Mixin0DataPointParameter
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMixin0DataPointParameterFromValue(v string) (*Mixin0DataPointParameter, error) {
	ev := Mixin0DataPointParameter(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Mixin0DataPointParameter: valid values are %v", v, AllowedMixin0DataPointParameterEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Mixin0DataPointParameter) IsValid() bool {
	for _, existing := range AllowedMixin0DataPointParameterEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Mixin0_dataPoint_parameter value
func (v Mixin0DataPointParameter) Ptr() *Mixin0DataPointParameter {
	return &v
}

type NullableMixin0DataPointParameter struct {
	value *Mixin0DataPointParameter
	isSet bool
}

func (v NullableMixin0DataPointParameter) Get() *Mixin0DataPointParameter {
	return v.value
}

func (v *NullableMixin0DataPointParameter) Set(val *Mixin0DataPointParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableMixin0DataPointParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableMixin0DataPointParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMixin0DataPointParameter(val *Mixin0DataPointParameter) *NullableMixin0DataPointParameter {
	return &NullableMixin0DataPointParameter{value: val, isSet: true}
}

func (v NullableMixin0DataPointParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMixin0DataPointParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

