/*
DCIM Power APIs

Empower yourself with DCIM Power APIs. Use them to get current and trending information on power consumption by assets. These APIs return the power consumption info for all level values, given a customer account number, IBX and level type of ibx - cage, cabinet or circuit. Trending power data returns the kVA power draw and max allowed (%) for the given asset. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartview

import (
	"encoding/json"
	"fmt"
)

// Mixin0IntervalParameter the model 'Mixin0IntervalParameter'
type Mixin0IntervalParameter string

// List of Mixin0_interval_parameter
const (
	MIXIN0INTERVALPARAMETER_READING Mixin0IntervalParameter = "reading"
	MIXIN0INTERVALPARAMETER__1H Mixin0IntervalParameter = "1h"
	MIXIN0INTERVALPARAMETER__1D Mixin0IntervalParameter = "1d"
)

// All allowed values of Mixin0IntervalParameter enum
var AllowedMixin0IntervalParameterEnumValues = []Mixin0IntervalParameter{
	"reading",
	"1h",
	"1d",
}

func (v *Mixin0IntervalParameter) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Mixin0IntervalParameter(value)
	for _, existing := range AllowedMixin0IntervalParameterEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Mixin0IntervalParameter", value)
}

// NewMixin0IntervalParameterFromValue returns a pointer to a valid Mixin0IntervalParameter
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMixin0IntervalParameterFromValue(v string) (*Mixin0IntervalParameter, error) {
	ev := Mixin0IntervalParameter(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Mixin0IntervalParameter: valid values are %v", v, AllowedMixin0IntervalParameterEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Mixin0IntervalParameter) IsValid() bool {
	for _, existing := range AllowedMixin0IntervalParameterEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Mixin0_interval_parameter value
func (v Mixin0IntervalParameter) Ptr() *Mixin0IntervalParameter {
	return &v
}

type NullableMixin0IntervalParameter struct {
	value *Mixin0IntervalParameter
	isSet bool
}

func (v NullableMixin0IntervalParameter) Get() *Mixin0IntervalParameter {
	return v.value
}

func (v *NullableMixin0IntervalParameter) Set(val *Mixin0IntervalParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableMixin0IntervalParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableMixin0IntervalParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMixin0IntervalParameter(val *Mixin0IntervalParameter) *NullableMixin0IntervalParameter {
	return &NullableMixin0IntervalParameter{value: val, isSet: true}
}

func (v NullableMixin0IntervalParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMixin0IntervalParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

