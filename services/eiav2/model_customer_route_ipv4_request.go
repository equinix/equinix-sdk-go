/*
Equinix Internet Access API

Equinix Internet Access provides direct access to the Internet with scalable bandwidth options in IBX data centers.

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eiav2

import (
	"encoding/json"
)

// checks if the CustomerRouteIpv4Request type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomerRouteIpv4Request{}

// CustomerRouteIpv4Request struct for CustomerRouteIpv4Request
type CustomerRouteIpv4Request struct {
	IpBlock *IpBlockIpv4Request `json:"ipBlock,omitempty"`
	// Subnet prefix
	Prefix               *string `json:"prefix,omitempty" validate:"regexp=^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(?:\\/[0-2]*\\\\d{1}|\\/3[0-2]){1}$"`
	AdditionalProperties map[string]interface{}
}

type _CustomerRouteIpv4Request CustomerRouteIpv4Request

// NewCustomerRouteIpv4Request instantiates a new CustomerRouteIpv4Request object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomerRouteIpv4Request() *CustomerRouteIpv4Request {
	this := CustomerRouteIpv4Request{}
	return &this
}

// NewCustomerRouteIpv4RequestWithDefaults instantiates a new CustomerRouteIpv4Request object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomerRouteIpv4RequestWithDefaults() *CustomerRouteIpv4Request {
	this := CustomerRouteIpv4Request{}
	return &this
}

// GetIpBlock returns the IpBlock field value if set, zero value otherwise.
func (o *CustomerRouteIpv4Request) GetIpBlock() IpBlockIpv4Request {
	if o == nil || IsNil(o.IpBlock) {
		var ret IpBlockIpv4Request
		return ret
	}
	return *o.IpBlock
}

// GetIpBlockOk returns a tuple with the IpBlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerRouteIpv4Request) GetIpBlockOk() (*IpBlockIpv4Request, bool) {
	if o == nil || IsNil(o.IpBlock) {
		return nil, false
	}
	return o.IpBlock, true
}

// HasIpBlock returns a boolean if a field has been set.
func (o *CustomerRouteIpv4Request) HasIpBlock() bool {
	if o != nil && !IsNil(o.IpBlock) {
		return true
	}

	return false
}

// SetIpBlock gets a reference to the given IpBlockIpv4Request and assigns it to the IpBlock field.
func (o *CustomerRouteIpv4Request) SetIpBlock(v IpBlockIpv4Request) {
	o.IpBlock = &v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *CustomerRouteIpv4Request) GetPrefix() string {
	if o == nil || IsNil(o.Prefix) {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerRouteIpv4Request) GetPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.Prefix) {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *CustomerRouteIpv4Request) HasPrefix() bool {
	if o != nil && !IsNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *CustomerRouteIpv4Request) SetPrefix(v string) {
	o.Prefix = &v
}

func (o CustomerRouteIpv4Request) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomerRouteIpv4Request) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IpBlock) {
		toSerialize["ipBlock"] = o.IpBlock
	}
	if !IsNil(o.Prefix) {
		toSerialize["prefix"] = o.Prefix
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CustomerRouteIpv4Request) UnmarshalJSON(data []byte) (err error) {
	varCustomerRouteIpv4Request := _CustomerRouteIpv4Request{}

	err = json.Unmarshal(data, &varCustomerRouteIpv4Request)

	if err != nil {
		return err
	}

	*o = CustomerRouteIpv4Request(varCustomerRouteIpv4Request)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ipBlock")
		delete(additionalProperties, "prefix")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCustomerRouteIpv4Request struct {
	value *CustomerRouteIpv4Request
	isSet bool
}

func (v NullableCustomerRouteIpv4Request) Get() *CustomerRouteIpv4Request {
	return v.value
}

func (v *NullableCustomerRouteIpv4Request) Set(val *CustomerRouteIpv4Request) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerRouteIpv4Request) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerRouteIpv4Request) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerRouteIpv4Request(val *CustomerRouteIpv4Request) *NullableCustomerRouteIpv4Request {
	return &NullableCustomerRouteIpv4Request{value: val, isSet: true}
}

func (v NullableCustomerRouteIpv4Request) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerRouteIpv4Request) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
