/*
Equinix Internet Access API

Equinix Internet Access provides direct access to the Internet with scalable bandwidth options in IBX data centers.

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eiav2

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ServiceRequestAllOfRoutingProtocol - struct for ServiceRequestAllOfRoutingProtocol
type ServiceRequestAllOfRoutingProtocol struct {
	BgpRoutingProtocolRequest    *BgpRoutingProtocolRequest
	DirectRoutingProtocolRequest *DirectRoutingProtocolRequest
	StaticRoutingProtocolRequest *StaticRoutingProtocolRequest
}

// BgpRoutingProtocolRequestAsServiceRequestAllOfRoutingProtocol is a convenience function that returns BgpRoutingProtocolRequest wrapped in ServiceRequestAllOfRoutingProtocol
func BgpRoutingProtocolRequestAsServiceRequestAllOfRoutingProtocol(v *BgpRoutingProtocolRequest) ServiceRequestAllOfRoutingProtocol {
	return ServiceRequestAllOfRoutingProtocol{
		BgpRoutingProtocolRequest: v,
	}
}

// DirectRoutingProtocolRequestAsServiceRequestAllOfRoutingProtocol is a convenience function that returns DirectRoutingProtocolRequest wrapped in ServiceRequestAllOfRoutingProtocol
func DirectRoutingProtocolRequestAsServiceRequestAllOfRoutingProtocol(v *DirectRoutingProtocolRequest) ServiceRequestAllOfRoutingProtocol {
	return ServiceRequestAllOfRoutingProtocol{
		DirectRoutingProtocolRequest: v,
	}
}

// StaticRoutingProtocolRequestAsServiceRequestAllOfRoutingProtocol is a convenience function that returns StaticRoutingProtocolRequest wrapped in ServiceRequestAllOfRoutingProtocol
func StaticRoutingProtocolRequestAsServiceRequestAllOfRoutingProtocol(v *StaticRoutingProtocolRequest) ServiceRequestAllOfRoutingProtocol {
	return ServiceRequestAllOfRoutingProtocol{
		StaticRoutingProtocolRequest: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ServiceRequestAllOfRoutingProtocol) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// TEMP: hack to avoid unused imports until this PR is merged/released:
	// https://github.com/OpenAPITools/openapi-generator/pull/20497
	if err = validator.Validate(jsonDict); err != nil {
		// Do nothing
	}

	// check if the discriminator value is 'BGP'
	if jsonDict["type"] == "BGP" {
		// try to unmarshal JSON data into BgpRoutingProtocolRequest
		err = json.Unmarshal(data, &dst.BgpRoutingProtocolRequest)
		if err == nil {
			return nil // data stored in dst.BgpRoutingProtocolRequest, return on the first match
		} else {
			dst.BgpRoutingProtocolRequest = nil
			return fmt.Errorf("failed to unmarshal ServiceRequestAllOfRoutingProtocol as BgpRoutingProtocolRequest: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DIRECT'
	if jsonDict["type"] == "DIRECT" {
		// try to unmarshal JSON data into DirectRoutingProtocolRequest
		err = json.Unmarshal(data, &dst.DirectRoutingProtocolRequest)
		if err == nil {
			return nil // data stored in dst.DirectRoutingProtocolRequest, return on the first match
		} else {
			dst.DirectRoutingProtocolRequest = nil
			return fmt.Errorf("failed to unmarshal ServiceRequestAllOfRoutingProtocol as DirectRoutingProtocolRequest: %s", err.Error())
		}
	}

	// check if the discriminator value is 'STATIC'
	if jsonDict["type"] == "STATIC" {
		// try to unmarshal JSON data into StaticRoutingProtocolRequest
		err = json.Unmarshal(data, &dst.StaticRoutingProtocolRequest)
		if err == nil {
			return nil // data stored in dst.StaticRoutingProtocolRequest, return on the first match
		} else {
			dst.StaticRoutingProtocolRequest = nil
			return fmt.Errorf("failed to unmarshal ServiceRequestAllOfRoutingProtocol as StaticRoutingProtocolRequest: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BgpRoutingProtocolRequest'
	if jsonDict["type"] == "BgpRoutingProtocolRequest" {
		// try to unmarshal JSON data into BgpRoutingProtocolRequest
		err = json.Unmarshal(data, &dst.BgpRoutingProtocolRequest)
		if err == nil {
			return nil // data stored in dst.BgpRoutingProtocolRequest, return on the first match
		} else {
			dst.BgpRoutingProtocolRequest = nil
			return fmt.Errorf("failed to unmarshal ServiceRequestAllOfRoutingProtocol as BgpRoutingProtocolRequest: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DirectRoutingProtocolRequest'
	if jsonDict["type"] == "DirectRoutingProtocolRequest" {
		// try to unmarshal JSON data into DirectRoutingProtocolRequest
		err = json.Unmarshal(data, &dst.DirectRoutingProtocolRequest)
		if err == nil {
			return nil // data stored in dst.DirectRoutingProtocolRequest, return on the first match
		} else {
			dst.DirectRoutingProtocolRequest = nil
			return fmt.Errorf("failed to unmarshal ServiceRequestAllOfRoutingProtocol as DirectRoutingProtocolRequest: %s", err.Error())
		}
	}

	// check if the discriminator value is 'StaticRoutingProtocolRequest'
	if jsonDict["type"] == "StaticRoutingProtocolRequest" {
		// try to unmarshal JSON data into StaticRoutingProtocolRequest
		err = json.Unmarshal(data, &dst.StaticRoutingProtocolRequest)
		if err == nil {
			return nil // data stored in dst.StaticRoutingProtocolRequest, return on the first match
		} else {
			dst.StaticRoutingProtocolRequest = nil
			return fmt.Errorf("failed to unmarshal ServiceRequestAllOfRoutingProtocol as StaticRoutingProtocolRequest: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ServiceRequestAllOfRoutingProtocol) MarshalJSON() ([]byte, error) {
	if src.BgpRoutingProtocolRequest != nil {
		return json.Marshal(&src.BgpRoutingProtocolRequest)
	}

	if src.DirectRoutingProtocolRequest != nil {
		return json.Marshal(&src.DirectRoutingProtocolRequest)
	}

	if src.StaticRoutingProtocolRequest != nil {
		return json.Marshal(&src.StaticRoutingProtocolRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ServiceRequestAllOfRoutingProtocol) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.BgpRoutingProtocolRequest != nil {
		return obj.BgpRoutingProtocolRequest
	}

	if obj.DirectRoutingProtocolRequest != nil {
		return obj.DirectRoutingProtocolRequest
	}

	if obj.StaticRoutingProtocolRequest != nil {
		return obj.StaticRoutingProtocolRequest
	}

	// all schemas are nil
	return nil
}

type NullableServiceRequestAllOfRoutingProtocol struct {
	value *ServiceRequestAllOfRoutingProtocol
	isSet bool
}

func (v NullableServiceRequestAllOfRoutingProtocol) Get() *ServiceRequestAllOfRoutingProtocol {
	return v.value
}

func (v *NullableServiceRequestAllOfRoutingProtocol) Set(val *ServiceRequestAllOfRoutingProtocol) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceRequestAllOfRoutingProtocol) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceRequestAllOfRoutingProtocol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceRequestAllOfRoutingProtocol(val *ServiceRequestAllOfRoutingProtocol) *NullableServiceRequestAllOfRoutingProtocol {
	return &NullableServiceRequestAllOfRoutingProtocol{value: val, isSet: true}
}

func (v NullableServiceRequestAllOfRoutingProtocol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceRequestAllOfRoutingProtocol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
