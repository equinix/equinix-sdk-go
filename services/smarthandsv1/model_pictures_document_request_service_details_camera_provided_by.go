/*
Smart Hands

Request cage assistance, custom installation and equipment troubleshooting.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smarthandsv1

import (
	"encoding/json"
	"fmt"
)

// PicturesDocumentRequestServiceDetailsCameraProvidedBy Who is providing the camera? If documentOnly is false, this field is mandatory.
type PicturesDocumentRequestServiceDetailsCameraProvidedBy string

// List of picturesDocumentRequest_serviceDetails_cameraProvidedBy
const (
	PICTURESDOCUMENTREQUESTSERVICEDETAILSCAMERAPROVIDEDBY_EQUINIX  PicturesDocumentRequestServiceDetailsCameraProvidedBy = "Equinix"
	PICTURESDOCUMENTREQUESTSERVICEDETAILSCAMERAPROVIDEDBY_CUSTOMER PicturesDocumentRequestServiceDetailsCameraProvidedBy = "Customer"
)

// All allowed values of PicturesDocumentRequestServiceDetailsCameraProvidedBy enum
var AllowedPicturesDocumentRequestServiceDetailsCameraProvidedByEnumValues = []PicturesDocumentRequestServiceDetailsCameraProvidedBy{
	"Equinix",
	"Customer",
}

func (v *PicturesDocumentRequestServiceDetailsCameraProvidedBy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PicturesDocumentRequestServiceDetailsCameraProvidedBy(value)
	for _, existing := range AllowedPicturesDocumentRequestServiceDetailsCameraProvidedByEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PicturesDocumentRequestServiceDetailsCameraProvidedBy", value)
}

// NewPicturesDocumentRequestServiceDetailsCameraProvidedByFromValue returns a pointer to a valid PicturesDocumentRequestServiceDetailsCameraProvidedBy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPicturesDocumentRequestServiceDetailsCameraProvidedByFromValue(v string) (*PicturesDocumentRequestServiceDetailsCameraProvidedBy, error) {
	ev := PicturesDocumentRequestServiceDetailsCameraProvidedBy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PicturesDocumentRequestServiceDetailsCameraProvidedBy: valid values are %v", v, AllowedPicturesDocumentRequestServiceDetailsCameraProvidedByEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PicturesDocumentRequestServiceDetailsCameraProvidedBy) IsValid() bool {
	for _, existing := range AllowedPicturesDocumentRequestServiceDetailsCameraProvidedByEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to picturesDocumentRequest_serviceDetails_cameraProvidedBy value
func (v PicturesDocumentRequestServiceDetailsCameraProvidedBy) Ptr() *PicturesDocumentRequestServiceDetailsCameraProvidedBy {
	return &v
}

type NullablePicturesDocumentRequestServiceDetailsCameraProvidedBy struct {
	value *PicturesDocumentRequestServiceDetailsCameraProvidedBy
	isSet bool
}

func (v NullablePicturesDocumentRequestServiceDetailsCameraProvidedBy) Get() *PicturesDocumentRequestServiceDetailsCameraProvidedBy {
	return v.value
}

func (v *NullablePicturesDocumentRequestServiceDetailsCameraProvidedBy) Set(val *PicturesDocumentRequestServiceDetailsCameraProvidedBy) {
	v.value = val
	v.isSet = true
}

func (v NullablePicturesDocumentRequestServiceDetailsCameraProvidedBy) IsSet() bool {
	return v.isSet
}

func (v *NullablePicturesDocumentRequestServiceDetailsCameraProvidedBy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePicturesDocumentRequestServiceDetailsCameraProvidedBy(val *PicturesDocumentRequestServiceDetailsCameraProvidedBy) *NullablePicturesDocumentRequestServiceDetailsCameraProvidedBy {
	return &NullablePicturesDocumentRequestServiceDetailsCameraProvidedBy{value: val, isSet: true}
}

func (v NullablePicturesDocumentRequestServiceDetailsCameraProvidedBy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePicturesDocumentRequestServiceDetailsCameraProvidedBy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
