/*
Smart Hands

Request cage assistance, custom installation and equipment troubleshooting.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smarthandsv1

import (
	"encoding/json"
	"fmt"
)

// checks if the Account type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Account{}

// Account struct for Account
type Account struct {
	// Account Number
	Number string `json:"number"`
	// Name of Account
	Name string `json:"name"`
	// Is credit Hold account
	IsCreditHold *bool `json:"isCreditHold,omitempty"`
	// Is PO Bearing account
	IsPOBearing *bool `json:"isPOBearing,omitempty"`
	// List of Cabinets
	Cabinets             []Cabinets `json:"cabinets,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Account Account

// NewAccount instantiates a new Account object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccount(number string, name string) *Account {
	this := Account{}
	this.Number = number
	this.Name = name
	return &this
}

// NewAccountWithDefaults instantiates a new Account object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountWithDefaults() *Account {
	this := Account{}
	return &this
}

// GetNumber returns the Number field value
func (o *Account) GetNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Number
}

// GetNumberOk returns a tuple with the Number field value
// and a boolean to check if the value has been set.
func (o *Account) GetNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Number, true
}

// SetNumber sets field value
func (o *Account) SetNumber(v string) {
	o.Number = v
}

// GetName returns the Name field value
func (o *Account) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Account) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Account) SetName(v string) {
	o.Name = v
}

// GetIsCreditHold returns the IsCreditHold field value if set, zero value otherwise.
func (o *Account) GetIsCreditHold() bool {
	if o == nil || IsNil(o.IsCreditHold) {
		var ret bool
		return ret
	}
	return *o.IsCreditHold
}

// GetIsCreditHoldOk returns a tuple with the IsCreditHold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetIsCreditHoldOk() (*bool, bool) {
	if o == nil || IsNil(o.IsCreditHold) {
		return nil, false
	}
	return o.IsCreditHold, true
}

// HasIsCreditHold returns a boolean if a field has been set.
func (o *Account) HasIsCreditHold() bool {
	if o != nil && !IsNil(o.IsCreditHold) {
		return true
	}

	return false
}

// SetIsCreditHold gets a reference to the given bool and assigns it to the IsCreditHold field.
func (o *Account) SetIsCreditHold(v bool) {
	o.IsCreditHold = &v
}

// GetIsPOBearing returns the IsPOBearing field value if set, zero value otherwise.
func (o *Account) GetIsPOBearing() bool {
	if o == nil || IsNil(o.IsPOBearing) {
		var ret bool
		return ret
	}
	return *o.IsPOBearing
}

// GetIsPOBearingOk returns a tuple with the IsPOBearing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetIsPOBearingOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPOBearing) {
		return nil, false
	}
	return o.IsPOBearing, true
}

// HasIsPOBearing returns a boolean if a field has been set.
func (o *Account) HasIsPOBearing() bool {
	if o != nil && !IsNil(o.IsPOBearing) {
		return true
	}

	return false
}

// SetIsPOBearing gets a reference to the given bool and assigns it to the IsPOBearing field.
func (o *Account) SetIsPOBearing(v bool) {
	o.IsPOBearing = &v
}

// GetCabinets returns the Cabinets field value if set, zero value otherwise.
func (o *Account) GetCabinets() []Cabinets {
	if o == nil || IsNil(o.Cabinets) {
		var ret []Cabinets
		return ret
	}
	return o.Cabinets
}

// GetCabinetsOk returns a tuple with the Cabinets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetCabinetsOk() ([]Cabinets, bool) {
	if o == nil || IsNil(o.Cabinets) {
		return nil, false
	}
	return o.Cabinets, true
}

// HasCabinets returns a boolean if a field has been set.
func (o *Account) HasCabinets() bool {
	if o != nil && !IsNil(o.Cabinets) {
		return true
	}

	return false
}

// SetCabinets gets a reference to the given []Cabinets and assigns it to the Cabinets field.
func (o *Account) SetCabinets(v []Cabinets) {
	o.Cabinets = v
}

func (o Account) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Account) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["number"] = o.Number
	toSerialize["name"] = o.Name
	if !IsNil(o.IsCreditHold) {
		toSerialize["isCreditHold"] = o.IsCreditHold
	}
	if !IsNil(o.IsPOBearing) {
		toSerialize["isPOBearing"] = o.IsPOBearing
	}
	if !IsNil(o.Cabinets) {
		toSerialize["cabinets"] = o.Cabinets
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Account) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"number",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccount := _Account{}

	err = json.Unmarshal(data, &varAccount)

	if err != nil {
		return err
	}

	*o = Account(varAccount)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "number")
		delete(additionalProperties, "name")
		delete(additionalProperties, "isCreditHold")
		delete(additionalProperties, "isPOBearing")
		delete(additionalProperties, "cabinets")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAccount struct {
	value *Account
	isSet bool
}

func (v NullableAccount) Get() *Account {
	return v.value
}

func (v *NullableAccount) Set(val *Account) {
	v.value = val
	v.isSet = true
}

func (v NullableAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccount(val *Account) *NullableAccount {
	return &NullableAccount{value: val, isSet: true}
}

func (v NullableAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
