/*
Smart Hands

Request cage assistance, custom installation and equipment troubleshooting.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smarthandsv1

import (
	"encoding/json"
	"fmt"
)

// SmarthandTypeType Smarthand Type
type SmarthandTypeType string

// List of smarthandType_type
const (
	SMARTHANDTYPETYPE_EQUIPMENT_INSTALL        SmarthandTypeType = "EQUIPMENT_INSTALL"
	SMARTHANDTYPETYPE_CAGE_CLEANUP             SmarthandTypeType = "CAGE_CLEANUP"
	SMARTHANDTYPETYPE_CAGE_ESCORT_OPEN_CABINET SmarthandTypeType = "CAGE_ESCORT_OPEN_CABINET"
	SMARTHANDTYPETYPE_SHIPMENT_UNPACKING       SmarthandTypeType = "SHIPMENT_UNPACKING"
	SMARTHANDTYPETYPE_OTHER                    SmarthandTypeType = "OTHER"
)

// All allowed values of SmarthandTypeType enum
var AllowedSmarthandTypeTypeEnumValues = []SmarthandTypeType{
	"EQUIPMENT_INSTALL",
	"CAGE_CLEANUP",
	"CAGE_ESCORT_OPEN_CABINET",
	"SHIPMENT_UNPACKING",
	"OTHER",
}

func (v *SmarthandTypeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SmarthandTypeType(value)
	for _, existing := range AllowedSmarthandTypeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SmarthandTypeType", value)
}

// NewSmarthandTypeTypeFromValue returns a pointer to a valid SmarthandTypeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSmarthandTypeTypeFromValue(v string) (*SmarthandTypeType, error) {
	ev := SmarthandTypeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SmarthandTypeType: valid values are %v", v, AllowedSmarthandTypeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SmarthandTypeType) IsValid() bool {
	for _, existing := range AllowedSmarthandTypeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to smarthandType_type value
func (v SmarthandTypeType) Ptr() *SmarthandTypeType {
	return &v
}

type NullableSmarthandTypeType struct {
	value *SmarthandTypeType
	isSet bool
}

func (v NullableSmarthandTypeType) Get() *SmarthandTypeType {
	return v.value
}

func (v *NullableSmarthandTypeType) Set(val *SmarthandTypeType) {
	v.value = val
	v.isSet = true
}

func (v NullableSmarthandTypeType) IsSet() bool {
	return v.isSet
}

func (v *NullableSmarthandTypeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmarthandTypeType(val *SmarthandTypeType) *NullableSmarthandTypeType {
	return &NullableSmarthandTypeType{value: val, isSet: true}
}

func (v NullableSmarthandTypeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmarthandTypeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
