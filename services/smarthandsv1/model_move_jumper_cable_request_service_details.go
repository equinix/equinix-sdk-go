/*
Smart Hands

Request cage assistance, custom installation and equipment troubleshooting.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smarthandsv1

import (
	"encoding/json"
	"fmt"
)

// checks if the MoveJumperCableRequestServiceDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MoveJumperCableRequestServiceDetails{}

// MoveJumperCableRequestServiceDetails Move Jumper Cable Service Details Object. Please fill out the Cable ID, Current Device (Name, Slot, Port) and New Device (Name, Slot, Port) details for each jumper cable and attach it to the form or complete scope of work text box when 'Quantity' is greater than 1. You may mix jumper types but if you require more than 12 jumpers ran, the site will contact you for scheduling of your request based on parts and availability. Please select the best option for your scheduling needs. If 'Quantity' is 1, then below 'currentDeviceDetails' and 'newDeviceDetails' objects are mandatory.
type MoveJumperCableRequestServiceDetails struct {
	Quantity MoveJumperCableRequestServiceDetailsQuantity `json:"quantity"`
	// Enter Cable ID or ‘None’ if not applicable. This field is mandatory if 'Quantity' is 1.
	CableId              *string `json:"cableId,omitempty"`
	CurrentDeviceDetails *Device `json:"currentDeviceDetails,omitempty"`
	NewDeviceDetails     *Device `json:"newDeviceDetails,omitempty"`
	// Enter any additional details that will help our technicians execute your request. You may also attach your scope of work as a document if you exceed the character limit in this field.
	ScopeOfWork          string `json:"scopeOfWork"`
	AdditionalProperties map[string]interface{}
}

type _MoveJumperCableRequestServiceDetails MoveJumperCableRequestServiceDetails

// NewMoveJumperCableRequestServiceDetails instantiates a new MoveJumperCableRequestServiceDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMoveJumperCableRequestServiceDetails(quantity MoveJumperCableRequestServiceDetailsQuantity, scopeOfWork string) *MoveJumperCableRequestServiceDetails {
	this := MoveJumperCableRequestServiceDetails{}
	this.Quantity = quantity
	this.ScopeOfWork = scopeOfWork
	return &this
}

// NewMoveJumperCableRequestServiceDetailsWithDefaults instantiates a new MoveJumperCableRequestServiceDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMoveJumperCableRequestServiceDetailsWithDefaults() *MoveJumperCableRequestServiceDetails {
	this := MoveJumperCableRequestServiceDetails{}
	return &this
}

// GetQuantity returns the Quantity field value
func (o *MoveJumperCableRequestServiceDetails) GetQuantity() MoveJumperCableRequestServiceDetailsQuantity {
	if o == nil {
		var ret MoveJumperCableRequestServiceDetailsQuantity
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *MoveJumperCableRequestServiceDetails) GetQuantityOk() (*MoveJumperCableRequestServiceDetailsQuantity, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *MoveJumperCableRequestServiceDetails) SetQuantity(v MoveJumperCableRequestServiceDetailsQuantity) {
	o.Quantity = v
}

// GetCableId returns the CableId field value if set, zero value otherwise.
func (o *MoveJumperCableRequestServiceDetails) GetCableId() string {
	if o == nil || IsNil(o.CableId) {
		var ret string
		return ret
	}
	return *o.CableId
}

// GetCableIdOk returns a tuple with the CableId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoveJumperCableRequestServiceDetails) GetCableIdOk() (*string, bool) {
	if o == nil || IsNil(o.CableId) {
		return nil, false
	}
	return o.CableId, true
}

// HasCableId returns a boolean if a field has been set.
func (o *MoveJumperCableRequestServiceDetails) HasCableId() bool {
	if o != nil && !IsNil(o.CableId) {
		return true
	}

	return false
}

// SetCableId gets a reference to the given string and assigns it to the CableId field.
func (o *MoveJumperCableRequestServiceDetails) SetCableId(v string) {
	o.CableId = &v
}

// GetCurrentDeviceDetails returns the CurrentDeviceDetails field value if set, zero value otherwise.
func (o *MoveJumperCableRequestServiceDetails) GetCurrentDeviceDetails() Device {
	if o == nil || IsNil(o.CurrentDeviceDetails) {
		var ret Device
		return ret
	}
	return *o.CurrentDeviceDetails
}

// GetCurrentDeviceDetailsOk returns a tuple with the CurrentDeviceDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoveJumperCableRequestServiceDetails) GetCurrentDeviceDetailsOk() (*Device, bool) {
	if o == nil || IsNil(o.CurrentDeviceDetails) {
		return nil, false
	}
	return o.CurrentDeviceDetails, true
}

// HasCurrentDeviceDetails returns a boolean if a field has been set.
func (o *MoveJumperCableRequestServiceDetails) HasCurrentDeviceDetails() bool {
	if o != nil && !IsNil(o.CurrentDeviceDetails) {
		return true
	}

	return false
}

// SetCurrentDeviceDetails gets a reference to the given Device and assigns it to the CurrentDeviceDetails field.
func (o *MoveJumperCableRequestServiceDetails) SetCurrentDeviceDetails(v Device) {
	o.CurrentDeviceDetails = &v
}

// GetNewDeviceDetails returns the NewDeviceDetails field value if set, zero value otherwise.
func (o *MoveJumperCableRequestServiceDetails) GetNewDeviceDetails() Device {
	if o == nil || IsNil(o.NewDeviceDetails) {
		var ret Device
		return ret
	}
	return *o.NewDeviceDetails
}

// GetNewDeviceDetailsOk returns a tuple with the NewDeviceDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoveJumperCableRequestServiceDetails) GetNewDeviceDetailsOk() (*Device, bool) {
	if o == nil || IsNil(o.NewDeviceDetails) {
		return nil, false
	}
	return o.NewDeviceDetails, true
}

// HasNewDeviceDetails returns a boolean if a field has been set.
func (o *MoveJumperCableRequestServiceDetails) HasNewDeviceDetails() bool {
	if o != nil && !IsNil(o.NewDeviceDetails) {
		return true
	}

	return false
}

// SetNewDeviceDetails gets a reference to the given Device and assigns it to the NewDeviceDetails field.
func (o *MoveJumperCableRequestServiceDetails) SetNewDeviceDetails(v Device) {
	o.NewDeviceDetails = &v
}

// GetScopeOfWork returns the ScopeOfWork field value
func (o *MoveJumperCableRequestServiceDetails) GetScopeOfWork() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ScopeOfWork
}

// GetScopeOfWorkOk returns a tuple with the ScopeOfWork field value
// and a boolean to check if the value has been set.
func (o *MoveJumperCableRequestServiceDetails) GetScopeOfWorkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScopeOfWork, true
}

// SetScopeOfWork sets field value
func (o *MoveJumperCableRequestServiceDetails) SetScopeOfWork(v string) {
	o.ScopeOfWork = v
}

func (o MoveJumperCableRequestServiceDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MoveJumperCableRequestServiceDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["quantity"] = o.Quantity
	if !IsNil(o.CableId) {
		toSerialize["cableId"] = o.CableId
	}
	if !IsNil(o.CurrentDeviceDetails) {
		toSerialize["currentDeviceDetails"] = o.CurrentDeviceDetails
	}
	if !IsNil(o.NewDeviceDetails) {
		toSerialize["newDeviceDetails"] = o.NewDeviceDetails
	}
	toSerialize["scopeOfWork"] = o.ScopeOfWork

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MoveJumperCableRequestServiceDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"quantity",
		"scopeOfWork",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMoveJumperCableRequestServiceDetails := _MoveJumperCableRequestServiceDetails{}

	err = json.Unmarshal(data, &varMoveJumperCableRequestServiceDetails)

	if err != nil {
		return err
	}

	*o = MoveJumperCableRequestServiceDetails(varMoveJumperCableRequestServiceDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "quantity")
		delete(additionalProperties, "cableId")
		delete(additionalProperties, "currentDeviceDetails")
		delete(additionalProperties, "newDeviceDetails")
		delete(additionalProperties, "scopeOfWork")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMoveJumperCableRequestServiceDetails struct {
	value *MoveJumperCableRequestServiceDetails
	isSet bool
}

func (v NullableMoveJumperCableRequestServiceDetails) Get() *MoveJumperCableRequestServiceDetails {
	return v.value
}

func (v *NullableMoveJumperCableRequestServiceDetails) Set(val *MoveJumperCableRequestServiceDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableMoveJumperCableRequestServiceDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableMoveJumperCableRequestServiceDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMoveJumperCableRequestServiceDetails(val *MoveJumperCableRequestServiceDetails) *NullableMoveJumperCableRequestServiceDetails {
	return &NullableMoveJumperCableRequestServiceDetails{value: val, isSet: true}
}

func (v NullableMoveJumperCableRequestServiceDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMoveJumperCableRequestServiceDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
