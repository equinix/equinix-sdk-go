/*
Smart Hands

Request cage assistance, custom installation and equipment troubleshooting.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smarthandsv1

import (
	"encoding/json"
	"fmt"
)

// checks if the CrossConnectInstall type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CrossConnectInstall{}

// CrossConnectInstall struct for CrossConnectInstall
type CrossConnectInstall struct {
	// Cross Connect serialNumber
	SerialNumber string `json:"serialNumber"`
	// Cross Connect Cabinet
	DeviceCabinet string `json:"deviceCabinet"`
	// Cross Connect Device Connector Type
	DeviceConnectorType string `json:"deviceConnectorType"`
	// Cross Connect Device Details
	DeviceDetails string `json:"deviceDetails"`
	// Cross Connect Device Port
	DevicePort string `json:"devicePort"`
	// Cross Connect Light Link Verification (Optional). Select this option if you would like a light reading provided and tx/rx verification after the cross connect is completed. In order to verify the correct transmit/receive alignment, please ensure your Z-Side Cross Connect Partner has their end fully extended to their equipment and their port is enabled. A separate billable activity will be created.
	LightLinkVerification *bool `json:"lightLinkVerification,omitempty"`
	// Scope of work
	ScopeOfWork          *string `json:"scopeOfWork,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CrossConnectInstall CrossConnectInstall

// NewCrossConnectInstall instantiates a new CrossConnectInstall object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCrossConnectInstall(serialNumber string, deviceCabinet string, deviceConnectorType string, deviceDetails string, devicePort string) *CrossConnectInstall {
	this := CrossConnectInstall{}
	this.SerialNumber = serialNumber
	this.DeviceCabinet = deviceCabinet
	this.DeviceConnectorType = deviceConnectorType
	this.DeviceDetails = deviceDetails
	this.DevicePort = devicePort
	return &this
}

// NewCrossConnectInstallWithDefaults instantiates a new CrossConnectInstall object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCrossConnectInstallWithDefaults() *CrossConnectInstall {
	this := CrossConnectInstall{}
	return &this
}

// GetSerialNumber returns the SerialNumber field value
func (o *CrossConnectInstall) GetSerialNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value
// and a boolean to check if the value has been set.
func (o *CrossConnectInstall) GetSerialNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SerialNumber, true
}

// SetSerialNumber sets field value
func (o *CrossConnectInstall) SetSerialNumber(v string) {
	o.SerialNumber = v
}

// GetDeviceCabinet returns the DeviceCabinet field value
func (o *CrossConnectInstall) GetDeviceCabinet() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeviceCabinet
}

// GetDeviceCabinetOk returns a tuple with the DeviceCabinet field value
// and a boolean to check if the value has been set.
func (o *CrossConnectInstall) GetDeviceCabinetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceCabinet, true
}

// SetDeviceCabinet sets field value
func (o *CrossConnectInstall) SetDeviceCabinet(v string) {
	o.DeviceCabinet = v
}

// GetDeviceConnectorType returns the DeviceConnectorType field value
func (o *CrossConnectInstall) GetDeviceConnectorType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeviceConnectorType
}

// GetDeviceConnectorTypeOk returns a tuple with the DeviceConnectorType field value
// and a boolean to check if the value has been set.
func (o *CrossConnectInstall) GetDeviceConnectorTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceConnectorType, true
}

// SetDeviceConnectorType sets field value
func (o *CrossConnectInstall) SetDeviceConnectorType(v string) {
	o.DeviceConnectorType = v
}

// GetDeviceDetails returns the DeviceDetails field value
func (o *CrossConnectInstall) GetDeviceDetails() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeviceDetails
}

// GetDeviceDetailsOk returns a tuple with the DeviceDetails field value
// and a boolean to check if the value has been set.
func (o *CrossConnectInstall) GetDeviceDetailsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceDetails, true
}

// SetDeviceDetails sets field value
func (o *CrossConnectInstall) SetDeviceDetails(v string) {
	o.DeviceDetails = v
}

// GetDevicePort returns the DevicePort field value
func (o *CrossConnectInstall) GetDevicePort() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DevicePort
}

// GetDevicePortOk returns a tuple with the DevicePort field value
// and a boolean to check if the value has been set.
func (o *CrossConnectInstall) GetDevicePortOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DevicePort, true
}

// SetDevicePort sets field value
func (o *CrossConnectInstall) SetDevicePort(v string) {
	o.DevicePort = v
}

// GetLightLinkVerification returns the LightLinkVerification field value if set, zero value otherwise.
func (o *CrossConnectInstall) GetLightLinkVerification() bool {
	if o == nil || IsNil(o.LightLinkVerification) {
		var ret bool
		return ret
	}
	return *o.LightLinkVerification
}

// GetLightLinkVerificationOk returns a tuple with the LightLinkVerification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CrossConnectInstall) GetLightLinkVerificationOk() (*bool, bool) {
	if o == nil || IsNil(o.LightLinkVerification) {
		return nil, false
	}
	return o.LightLinkVerification, true
}

// HasLightLinkVerification returns a boolean if a field has been set.
func (o *CrossConnectInstall) HasLightLinkVerification() bool {
	if o != nil && !IsNil(o.LightLinkVerification) {
		return true
	}

	return false
}

// SetLightLinkVerification gets a reference to the given bool and assigns it to the LightLinkVerification field.
func (o *CrossConnectInstall) SetLightLinkVerification(v bool) {
	o.LightLinkVerification = &v
}

// GetScopeOfWork returns the ScopeOfWork field value if set, zero value otherwise.
func (o *CrossConnectInstall) GetScopeOfWork() string {
	if o == nil || IsNil(o.ScopeOfWork) {
		var ret string
		return ret
	}
	return *o.ScopeOfWork
}

// GetScopeOfWorkOk returns a tuple with the ScopeOfWork field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CrossConnectInstall) GetScopeOfWorkOk() (*string, bool) {
	if o == nil || IsNil(o.ScopeOfWork) {
		return nil, false
	}
	return o.ScopeOfWork, true
}

// HasScopeOfWork returns a boolean if a field has been set.
func (o *CrossConnectInstall) HasScopeOfWork() bool {
	if o != nil && !IsNil(o.ScopeOfWork) {
		return true
	}

	return false
}

// SetScopeOfWork gets a reference to the given string and assigns it to the ScopeOfWork field.
func (o *CrossConnectInstall) SetScopeOfWork(v string) {
	o.ScopeOfWork = &v
}

func (o CrossConnectInstall) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CrossConnectInstall) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["serialNumber"] = o.SerialNumber
	toSerialize["deviceCabinet"] = o.DeviceCabinet
	toSerialize["deviceConnectorType"] = o.DeviceConnectorType
	toSerialize["deviceDetails"] = o.DeviceDetails
	toSerialize["devicePort"] = o.DevicePort
	if !IsNil(o.LightLinkVerification) {
		toSerialize["lightLinkVerification"] = o.LightLinkVerification
	}
	if !IsNil(o.ScopeOfWork) {
		toSerialize["scopeOfWork"] = o.ScopeOfWork
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CrossConnectInstall) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"serialNumber",
		"deviceCabinet",
		"deviceConnectorType",
		"deviceDetails",
		"devicePort",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCrossConnectInstall := _CrossConnectInstall{}

	err = json.Unmarshal(data, &varCrossConnectInstall)

	if err != nil {
		return err
	}

	*o = CrossConnectInstall(varCrossConnectInstall)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "serialNumber")
		delete(additionalProperties, "deviceCabinet")
		delete(additionalProperties, "deviceConnectorType")
		delete(additionalProperties, "deviceDetails")
		delete(additionalProperties, "devicePort")
		delete(additionalProperties, "lightLinkVerification")
		delete(additionalProperties, "scopeOfWork")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCrossConnectInstall struct {
	value *CrossConnectInstall
	isSet bool
}

func (v NullableCrossConnectInstall) Get() *CrossConnectInstall {
	return v.value
}

func (v *NullableCrossConnectInstall) Set(val *CrossConnectInstall) {
	v.value = val
	v.isSet = true
}

func (v NullableCrossConnectInstall) IsSet() bool {
	return v.isSet
}

func (v *NullableCrossConnectInstall) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCrossConnectInstall(val *CrossConnectInstall) *NullableCrossConnectInstall {
	return &NullableCrossConnectInstall{value: val, isSet: true}
}

func (v NullableCrossConnectInstall) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCrossConnectInstall) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
