/*
Smart Hands

Request cage assistance, custom installation and equipment troubleshooting.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smarthandsv1

import (
	"encoding/json"
	"fmt"
)

// checks if the OtherRequestServiceDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OtherRequestServiceDetails{}

// OtherRequestServiceDetails Other
type OtherRequestServiceDetails struct {
	// Enter any additional details that will help our technicians execute your request. You may also attach your scope of work as a document if you exceed the character limit in this field.
	ScopeOfWork          string `json:"scopeOfWork"`
	AdditionalProperties map[string]interface{}
}

type _OtherRequestServiceDetails OtherRequestServiceDetails

// NewOtherRequestServiceDetails instantiates a new OtherRequestServiceDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOtherRequestServiceDetails(scopeOfWork string) *OtherRequestServiceDetails {
	this := OtherRequestServiceDetails{}
	this.ScopeOfWork = scopeOfWork
	return &this
}

// NewOtherRequestServiceDetailsWithDefaults instantiates a new OtherRequestServiceDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOtherRequestServiceDetailsWithDefaults() *OtherRequestServiceDetails {
	this := OtherRequestServiceDetails{}
	return &this
}

// GetScopeOfWork returns the ScopeOfWork field value
func (o *OtherRequestServiceDetails) GetScopeOfWork() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ScopeOfWork
}

// GetScopeOfWorkOk returns a tuple with the ScopeOfWork field value
// and a boolean to check if the value has been set.
func (o *OtherRequestServiceDetails) GetScopeOfWorkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScopeOfWork, true
}

// SetScopeOfWork sets field value
func (o *OtherRequestServiceDetails) SetScopeOfWork(v string) {
	o.ScopeOfWork = v
}

func (o OtherRequestServiceDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OtherRequestServiceDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["scopeOfWork"] = o.ScopeOfWork

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OtherRequestServiceDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"scopeOfWork",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOtherRequestServiceDetails := _OtherRequestServiceDetails{}

	err = json.Unmarshal(data, &varOtherRequestServiceDetails)

	if err != nil {
		return err
	}

	*o = OtherRequestServiceDetails(varOtherRequestServiceDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "scopeOfWork")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOtherRequestServiceDetails struct {
	value *OtherRequestServiceDetails
	isSet bool
}

func (v NullableOtherRequestServiceDetails) Get() *OtherRequestServiceDetails {
	return v.value
}

func (v *NullableOtherRequestServiceDetails) Set(val *OtherRequestServiceDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableOtherRequestServiceDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableOtherRequestServiceDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOtherRequestServiceDetails(val *OtherRequestServiceDetails) *NullableOtherRequestServiceDetails {
	return &NullableOtherRequestServiceDetails{value: val, isSet: true}
}

func (v NullableOtherRequestServiceDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOtherRequestServiceDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
