/*
Smart Hands

Request cage assistance, custom installation and equipment troubleshooting.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smarthandsv1

import (
	"encoding/json"
	"fmt"
)

// CableRequestRequestServiceDetailsMediaType Media Type.
type CableRequestRequestServiceDetailsMediaType string

// List of cableRequestRequest_serviceDetails_mediaType
const (
	CABLEREQUESTREQUESTSERVICEDETAILSMEDIATYPE_MULTI_MODE_62_5MIC CableRequestRequestServiceDetailsMediaType = "Multi-mode 62.5mic"
	CABLEREQUESTREQUESTSERVICEDETAILSMEDIATYPE_MULTI_MODE_50MIC   CableRequestRequestServiceDetailsMediaType = "Multi-mode 50mic"
	CABLEREQUESTREQUESTSERVICEDETAILSMEDIATYPE_SINGLE_MODE        CableRequestRequestServiceDetailsMediaType = "Single-mode"
	CABLEREQUESTREQUESTSERVICEDETAILSMEDIATYPE_CAT_5              CableRequestRequestServiceDetailsMediaType = "Cat-5"
	CABLEREQUESTREQUESTSERVICEDETAILSMEDIATYPE_CAT_6              CableRequestRequestServiceDetailsMediaType = "Cat-6"
	CABLEREQUESTREQUESTSERVICEDETAILSMEDIATYPE_COAX               CableRequestRequestServiceDetailsMediaType = "Coax"
	CABLEREQUESTREQUESTSERVICEDETAILSMEDIATYPE_POTS               CableRequestRequestServiceDetailsMediaType = "POTS"
	CABLEREQUESTREQUESTSERVICEDETAILSMEDIATYPE_T1                 CableRequestRequestServiceDetailsMediaType = "T1"
	CABLEREQUESTREQUESTSERVICEDETAILSMEDIATYPE_E1                 CableRequestRequestServiceDetailsMediaType = "E1"
)

// All allowed values of CableRequestRequestServiceDetailsMediaType enum
var AllowedCableRequestRequestServiceDetailsMediaTypeEnumValues = []CableRequestRequestServiceDetailsMediaType{
	"Multi-mode 62.5mic",
	"Multi-mode 50mic",
	"Single-mode",
	"Cat-5",
	"Cat-6",
	"Coax",
	"POTS",
	"T1",
	"E1",
}

func (v *CableRequestRequestServiceDetailsMediaType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CableRequestRequestServiceDetailsMediaType(value)
	for _, existing := range AllowedCableRequestRequestServiceDetailsMediaTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CableRequestRequestServiceDetailsMediaType", value)
}

// NewCableRequestRequestServiceDetailsMediaTypeFromValue returns a pointer to a valid CableRequestRequestServiceDetailsMediaType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCableRequestRequestServiceDetailsMediaTypeFromValue(v string) (*CableRequestRequestServiceDetailsMediaType, error) {
	ev := CableRequestRequestServiceDetailsMediaType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CableRequestRequestServiceDetailsMediaType: valid values are %v", v, AllowedCableRequestRequestServiceDetailsMediaTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CableRequestRequestServiceDetailsMediaType) IsValid() bool {
	for _, existing := range AllowedCableRequestRequestServiceDetailsMediaTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to cableRequestRequest_serviceDetails_mediaType value
func (v CableRequestRequestServiceDetailsMediaType) Ptr() *CableRequestRequestServiceDetailsMediaType {
	return &v
}

type NullableCableRequestRequestServiceDetailsMediaType struct {
	value *CableRequestRequestServiceDetailsMediaType
	isSet bool
}

func (v NullableCableRequestRequestServiceDetailsMediaType) Get() *CableRequestRequestServiceDetailsMediaType {
	return v.value
}

func (v *NullableCableRequestRequestServiceDetailsMediaType) Set(val *CableRequestRequestServiceDetailsMediaType) {
	v.value = val
	v.isSet = true
}

func (v NullableCableRequestRequestServiceDetailsMediaType) IsSet() bool {
	return v.isSet
}

func (v *NullableCableRequestRequestServiceDetailsMediaType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCableRequestRequestServiceDetailsMediaType(val *CableRequestRequestServiceDetailsMediaType) *NullableCableRequestRequestServiceDetailsMediaType {
	return &NullableCableRequestRequestServiceDetailsMediaType{value: val, isSet: true}
}

func (v NullableCableRequestRequestServiceDetailsMediaType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCableRequestRequestServiceDetailsMediaType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
