/*
Smart Hands

Request cage assistance, custom installation and equipment troubleshooting.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smarthandsv1

import (
	"encoding/json"
	"fmt"
)

// RunJumperCableRequestServiceDetailsJumperType Jumper Type
type RunJumperCableRequestServiceDetailsJumperType string

// List of runJumperCableRequest_serviceDetails_jumperType
const (
	RUNJUMPERCABLEREQUESTSERVICEDETAILSJUMPERTYPE_JUMPER      RunJumperCableRequestServiceDetailsJumperType = "Jumper"
	RUNJUMPERCABLEREQUESTSERVICEDETAILSJUMPERTYPE_PRE_WIRING  RunJumperCableRequestServiceDetailsJumperType = "Pre-Wiring"
	RUNJUMPERCABLEREQUESTSERVICEDETAILSJUMPERTYPE_PATCH_CABLE RunJumperCableRequestServiceDetailsJumperType = "Patch Cable"
	RUNJUMPERCABLEREQUESTSERVICEDETAILSJUMPERTYPE_OTHER       RunJumperCableRequestServiceDetailsJumperType = "Other"
)

// All allowed values of RunJumperCableRequestServiceDetailsJumperType enum
var AllowedRunJumperCableRequestServiceDetailsJumperTypeEnumValues = []RunJumperCableRequestServiceDetailsJumperType{
	"Jumper",
	"Pre-Wiring",
	"Patch Cable",
	"Other",
}

func (v *RunJumperCableRequestServiceDetailsJumperType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RunJumperCableRequestServiceDetailsJumperType(value)
	for _, existing := range AllowedRunJumperCableRequestServiceDetailsJumperTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RunJumperCableRequestServiceDetailsJumperType", value)
}

// NewRunJumperCableRequestServiceDetailsJumperTypeFromValue returns a pointer to a valid RunJumperCableRequestServiceDetailsJumperType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRunJumperCableRequestServiceDetailsJumperTypeFromValue(v string) (*RunJumperCableRequestServiceDetailsJumperType, error) {
	ev := RunJumperCableRequestServiceDetailsJumperType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RunJumperCableRequestServiceDetailsJumperType: valid values are %v", v, AllowedRunJumperCableRequestServiceDetailsJumperTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RunJumperCableRequestServiceDetailsJumperType) IsValid() bool {
	for _, existing := range AllowedRunJumperCableRequestServiceDetailsJumperTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to runJumperCableRequest_serviceDetails_jumperType value
func (v RunJumperCableRequestServiceDetailsJumperType) Ptr() *RunJumperCableRequestServiceDetailsJumperType {
	return &v
}

type NullableRunJumperCableRequestServiceDetailsJumperType struct {
	value *RunJumperCableRequestServiceDetailsJumperType
	isSet bool
}

func (v NullableRunJumperCableRequestServiceDetailsJumperType) Get() *RunJumperCableRequestServiceDetailsJumperType {
	return v.value
}

func (v *NullableRunJumperCableRequestServiceDetailsJumperType) Set(val *RunJumperCableRequestServiceDetailsJumperType) {
	v.value = val
	v.isSet = true
}

func (v NullableRunJumperCableRequestServiceDetailsJumperType) IsSet() bool {
	return v.isSet
}

func (v *NullableRunJumperCableRequestServiceDetailsJumperType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunJumperCableRequestServiceDetailsJumperType(val *RunJumperCableRequestServiceDetailsJumperType) *NullableRunJumperCableRequestServiceDetailsJumperType {
	return &NullableRunJumperCableRequestServiceDetailsJumperType{value: val, isSet: true}
}

func (v NullableRunJumperCableRequestServiceDetailsJumperType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunJumperCableRequestServiceDetailsJumperType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
