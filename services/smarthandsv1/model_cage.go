/*
Smart Hands

Request cage assistance, custom installation and equipment troubleshooting.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smarthandsv1

import (
	"encoding/json"
	"fmt"
)

// checks if the Cage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Cage{}

// Cage struct for Cage
type Cage struct {
	// Cage or Suite
	Cage string `json:"cage"`
	// Cage Types
	CageTypes []string `json:"cageTypes,omitempty"`
	// List of Accounts
	Accounts             []Account `json:"accounts,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Cage Cage

// NewCage instantiates a new Cage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCage(cage string) *Cage {
	this := Cage{}
	this.Cage = cage
	return &this
}

// NewCageWithDefaults instantiates a new Cage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCageWithDefaults() *Cage {
	this := Cage{}
	return &this
}

// GetCage returns the Cage field value
func (o *Cage) GetCage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cage
}

// GetCageOk returns a tuple with the Cage field value
// and a boolean to check if the value has been set.
func (o *Cage) GetCageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cage, true
}

// SetCage sets field value
func (o *Cage) SetCage(v string) {
	o.Cage = v
}

// GetCageTypes returns the CageTypes field value if set, zero value otherwise.
func (o *Cage) GetCageTypes() []string {
	if o == nil || IsNil(o.CageTypes) {
		var ret []string
		return ret
	}
	return o.CageTypes
}

// GetCageTypesOk returns a tuple with the CageTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cage) GetCageTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.CageTypes) {
		return nil, false
	}
	return o.CageTypes, true
}

// HasCageTypes returns a boolean if a field has been set.
func (o *Cage) HasCageTypes() bool {
	if o != nil && !IsNil(o.CageTypes) {
		return true
	}

	return false
}

// SetCageTypes gets a reference to the given []string and assigns it to the CageTypes field.
func (o *Cage) SetCageTypes(v []string) {
	o.CageTypes = v
}

// GetAccounts returns the Accounts field value if set, zero value otherwise.
func (o *Cage) GetAccounts() []Account {
	if o == nil || IsNil(o.Accounts) {
		var ret []Account
		return ret
	}
	return o.Accounts
}

// GetAccountsOk returns a tuple with the Accounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cage) GetAccountsOk() ([]Account, bool) {
	if o == nil || IsNil(o.Accounts) {
		return nil, false
	}
	return o.Accounts, true
}

// HasAccounts returns a boolean if a field has been set.
func (o *Cage) HasAccounts() bool {
	if o != nil && !IsNil(o.Accounts) {
		return true
	}

	return false
}

// SetAccounts gets a reference to the given []Account and assigns it to the Accounts field.
func (o *Cage) SetAccounts(v []Account) {
	o.Accounts = v
}

func (o Cage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Cage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cage"] = o.Cage
	if !IsNil(o.CageTypes) {
		toSerialize["cageTypes"] = o.CageTypes
	}
	if !IsNil(o.Accounts) {
		toSerialize["accounts"] = o.Accounts
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Cage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cage",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCage := _Cage{}

	err = json.Unmarshal(data, &varCage)

	if err != nil {
		return err
	}

	*o = Cage(varCage)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cage")
		delete(additionalProperties, "cageTypes")
		delete(additionalProperties, "accounts")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCage struct {
	value *Cage
	isSet bool
}

func (v NullableCage) Get() *Cage {
	return v.value
}

func (v *NullableCage) Set(val *Cage) {
	v.value = val
	v.isSet = true
}

func (v NullableCage) IsSet() bool {
	return v.isSet
}

func (v *NullableCage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCage(val *Cage) *NullableCage {
	return &NullableCage{value: val, isSet: true}
}

func (v NullableCage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
