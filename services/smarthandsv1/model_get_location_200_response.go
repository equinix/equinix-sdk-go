/*
Smart Hands

Request cage assistance, custom installation and equipment troubleshooting.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smarthandsv1

import (
	"encoding/json"
)

// checks if the GetLocation200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetLocation200Response{}

// GetLocation200Response struct for GetLocation200Response
type GetLocation200Response struct {
	Locations            []Location `json:"locations,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GetLocation200Response GetLocation200Response

// NewGetLocation200Response instantiates a new GetLocation200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetLocation200Response() *GetLocation200Response {
	this := GetLocation200Response{}
	return &this
}

// NewGetLocation200ResponseWithDefaults instantiates a new GetLocation200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetLocation200ResponseWithDefaults() *GetLocation200Response {
	this := GetLocation200Response{}
	return &this
}

// GetLocations returns the Locations field value if set, zero value otherwise.
func (o *GetLocation200Response) GetLocations() []Location {
	if o == nil || IsNil(o.Locations) {
		var ret []Location
		return ret
	}
	return o.Locations
}

// GetLocationsOk returns a tuple with the Locations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLocation200Response) GetLocationsOk() ([]Location, bool) {
	if o == nil || IsNil(o.Locations) {
		return nil, false
	}
	return o.Locations, true
}

// HasLocations returns a boolean if a field has been set.
func (o *GetLocation200Response) HasLocations() bool {
	if o != nil && !IsNil(o.Locations) {
		return true
	}

	return false
}

// SetLocations gets a reference to the given []Location and assigns it to the Locations field.
func (o *GetLocation200Response) SetLocations(v []Location) {
	o.Locations = v
}

func (o GetLocation200Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetLocation200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Locations) {
		toSerialize["locations"] = o.Locations
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GetLocation200Response) UnmarshalJSON(data []byte) (err error) {
	varGetLocation200Response := _GetLocation200Response{}

	err = json.Unmarshal(data, &varGetLocation200Response)

	if err != nil {
		return err
	}

	*o = GetLocation200Response(varGetLocation200Response)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "locations")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetLocation200Response struct {
	value *GetLocation200Response
	isSet bool
}

func (v NullableGetLocation200Response) Get() *GetLocation200Response {
	return v.value
}

func (v *NullableGetLocation200Response) Set(val *GetLocation200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetLocation200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetLocation200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetLocation200Response(val *GetLocation200Response) *NullableGetLocation200Response {
	return &NullableGetLocation200Response{value: val, isSet: true}
}

func (v NullableGetLocation200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetLocation200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
