/*
Smart Hands

Request cage assistance, custom installation and equipment troubleshooting.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smarthandsv1

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the ScheduleInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScheduleInfo{}

// ScheduleInfo Use this model to pass the scheduling option that best meets your needs. Please remember that additional approvals or fees may be required for expedited requests.
type ScheduleInfo struct {
	ScheduleType ScheduleInfoScheduleType `json:"scheduleType"`
	// Requested Start Date Time (ISO Date)<br> Cannot Past Date.
	RequestedStartDate *time.Time `json:"requestedStartDate,omitempty"`
	// Requested Completion Date Time (ISO Date)<br>Cannot Past Date.
	RequestedCompletionDate *time.Time `json:"requestedCompletionDate,omitempty"`
	AdditionalProperties    map[string]interface{}
}

type _ScheduleInfo ScheduleInfo

// NewScheduleInfo instantiates a new ScheduleInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScheduleInfo(scheduleType ScheduleInfoScheduleType) *ScheduleInfo {
	this := ScheduleInfo{}
	this.ScheduleType = scheduleType
	return &this
}

// NewScheduleInfoWithDefaults instantiates a new ScheduleInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScheduleInfoWithDefaults() *ScheduleInfo {
	this := ScheduleInfo{}
	return &this
}

// GetScheduleType returns the ScheduleType field value
func (o *ScheduleInfo) GetScheduleType() ScheduleInfoScheduleType {
	if o == nil {
		var ret ScheduleInfoScheduleType
		return ret
	}

	return o.ScheduleType
}

// GetScheduleTypeOk returns a tuple with the ScheduleType field value
// and a boolean to check if the value has been set.
func (o *ScheduleInfo) GetScheduleTypeOk() (*ScheduleInfoScheduleType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScheduleType, true
}

// SetScheduleType sets field value
func (o *ScheduleInfo) SetScheduleType(v ScheduleInfoScheduleType) {
	o.ScheduleType = v
}

// GetRequestedStartDate returns the RequestedStartDate field value if set, zero value otherwise.
func (o *ScheduleInfo) GetRequestedStartDate() time.Time {
	if o == nil || IsNil(o.RequestedStartDate) {
		var ret time.Time
		return ret
	}
	return *o.RequestedStartDate
}

// GetRequestedStartDateOk returns a tuple with the RequestedStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleInfo) GetRequestedStartDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RequestedStartDate) {
		return nil, false
	}
	return o.RequestedStartDate, true
}

// HasRequestedStartDate returns a boolean if a field has been set.
func (o *ScheduleInfo) HasRequestedStartDate() bool {
	if o != nil && !IsNil(o.RequestedStartDate) {
		return true
	}

	return false
}

// SetRequestedStartDate gets a reference to the given time.Time and assigns it to the RequestedStartDate field.
func (o *ScheduleInfo) SetRequestedStartDate(v time.Time) {
	o.RequestedStartDate = &v
}

// GetRequestedCompletionDate returns the RequestedCompletionDate field value if set, zero value otherwise.
func (o *ScheduleInfo) GetRequestedCompletionDate() time.Time {
	if o == nil || IsNil(o.RequestedCompletionDate) {
		var ret time.Time
		return ret
	}
	return *o.RequestedCompletionDate
}

// GetRequestedCompletionDateOk returns a tuple with the RequestedCompletionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleInfo) GetRequestedCompletionDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RequestedCompletionDate) {
		return nil, false
	}
	return o.RequestedCompletionDate, true
}

// HasRequestedCompletionDate returns a boolean if a field has been set.
func (o *ScheduleInfo) HasRequestedCompletionDate() bool {
	if o != nil && !IsNil(o.RequestedCompletionDate) {
		return true
	}

	return false
}

// SetRequestedCompletionDate gets a reference to the given time.Time and assigns it to the RequestedCompletionDate field.
func (o *ScheduleInfo) SetRequestedCompletionDate(v time.Time) {
	o.RequestedCompletionDate = &v
}

func (o ScheduleInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScheduleInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["scheduleType"] = o.ScheduleType
	if !IsNil(o.RequestedStartDate) {
		toSerialize["requestedStartDate"] = o.RequestedStartDate
	}
	if !IsNil(o.RequestedCompletionDate) {
		toSerialize["requestedCompletionDate"] = o.RequestedCompletionDate
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ScheduleInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"scheduleType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varScheduleInfo := _ScheduleInfo{}

	err = json.Unmarshal(data, &varScheduleInfo)

	if err != nil {
		return err
	}

	*o = ScheduleInfo(varScheduleInfo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "scheduleType")
		delete(additionalProperties, "requestedStartDate")
		delete(additionalProperties, "requestedCompletionDate")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableScheduleInfo struct {
	value *ScheduleInfo
	isSet bool
}

func (v NullableScheduleInfo) Get() *ScheduleInfo {
	return v.value
}

func (v *NullableScheduleInfo) Set(val *ScheduleInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduleInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduleInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduleInfo(val *ScheduleInfo) *NullableScheduleInfo {
	return &NullableScheduleInfo{value: val, isSet: true}
}

func (v NullableScheduleInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduleInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
