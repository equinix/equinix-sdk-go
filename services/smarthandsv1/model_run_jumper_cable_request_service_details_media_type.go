/*
Smart Hands

Request cage assistance, custom installation and equipment troubleshooting.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smarthandsv1

import (
	"encoding/json"
	"fmt"
)

// RunJumperCableRequestServiceDetailsMediaType Media Type
type RunJumperCableRequestServiceDetailsMediaType string

// List of runJumperCableRequest_serviceDetails_mediaType
const (
	RUNJUMPERCABLEREQUESTSERVICEDETAILSMEDIATYPE_MULTI_MODE_62_5MIC RunJumperCableRequestServiceDetailsMediaType = "Multi-mode 62.5mic"
	RUNJUMPERCABLEREQUESTSERVICEDETAILSMEDIATYPE_MULTI_MODE_50MIC   RunJumperCableRequestServiceDetailsMediaType = "Multi-mode 50mic"
	RUNJUMPERCABLEREQUESTSERVICEDETAILSMEDIATYPE_SINGLE_MODE        RunJumperCableRequestServiceDetailsMediaType = "Single-mode"
	RUNJUMPERCABLEREQUESTSERVICEDETAILSMEDIATYPE_CAT_5              RunJumperCableRequestServiceDetailsMediaType = "Cat-5"
	RUNJUMPERCABLEREQUESTSERVICEDETAILSMEDIATYPE_CAT_6              RunJumperCableRequestServiceDetailsMediaType = "Cat-6"
	RUNJUMPERCABLEREQUESTSERVICEDETAILSMEDIATYPE_COAX               RunJumperCableRequestServiceDetailsMediaType = "Coax"
	RUNJUMPERCABLEREQUESTSERVICEDETAILSMEDIATYPE_POTS               RunJumperCableRequestServiceDetailsMediaType = "POTS"
	RUNJUMPERCABLEREQUESTSERVICEDETAILSMEDIATYPE_T1                 RunJumperCableRequestServiceDetailsMediaType = "T1"
	RUNJUMPERCABLEREQUESTSERVICEDETAILSMEDIATYPE_E1                 RunJumperCableRequestServiceDetailsMediaType = "E1"
)

// All allowed values of RunJumperCableRequestServiceDetailsMediaType enum
var AllowedRunJumperCableRequestServiceDetailsMediaTypeEnumValues = []RunJumperCableRequestServiceDetailsMediaType{
	"Multi-mode 62.5mic",
	"Multi-mode 50mic",
	"Single-mode",
	"Cat-5",
	"Cat-6",
	"Coax",
	"POTS",
	"T1",
	"E1",
}

func (v *RunJumperCableRequestServiceDetailsMediaType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RunJumperCableRequestServiceDetailsMediaType(value)
	for _, existing := range AllowedRunJumperCableRequestServiceDetailsMediaTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RunJumperCableRequestServiceDetailsMediaType", value)
}

// NewRunJumperCableRequestServiceDetailsMediaTypeFromValue returns a pointer to a valid RunJumperCableRequestServiceDetailsMediaType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRunJumperCableRequestServiceDetailsMediaTypeFromValue(v string) (*RunJumperCableRequestServiceDetailsMediaType, error) {
	ev := RunJumperCableRequestServiceDetailsMediaType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RunJumperCableRequestServiceDetailsMediaType: valid values are %v", v, AllowedRunJumperCableRequestServiceDetailsMediaTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RunJumperCableRequestServiceDetailsMediaType) IsValid() bool {
	for _, existing := range AllowedRunJumperCableRequestServiceDetailsMediaTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to runJumperCableRequest_serviceDetails_mediaType value
func (v RunJumperCableRequestServiceDetailsMediaType) Ptr() *RunJumperCableRequestServiceDetailsMediaType {
	return &v
}

type NullableRunJumperCableRequestServiceDetailsMediaType struct {
	value *RunJumperCableRequestServiceDetailsMediaType
	isSet bool
}

func (v NullableRunJumperCableRequestServiceDetailsMediaType) Get() *RunJumperCableRequestServiceDetailsMediaType {
	return v.value
}

func (v *NullableRunJumperCableRequestServiceDetailsMediaType) Set(val *RunJumperCableRequestServiceDetailsMediaType) {
	v.value = val
	v.isSet = true
}

func (v NullableRunJumperCableRequestServiceDetailsMediaType) IsSet() bool {
	return v.isSet
}

func (v *NullableRunJumperCableRequestServiceDetailsMediaType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunJumperCableRequestServiceDetailsMediaType(val *RunJumperCableRequestServiceDetailsMediaType) *NullableRunJumperCableRequestServiceDetailsMediaType {
	return &NullableRunJumperCableRequestServiceDetailsMediaType{value: val, isSet: true}
}

func (v NullableRunJumperCableRequestServiceDetailsMediaType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunJumperCableRequestServiceDetailsMediaType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
