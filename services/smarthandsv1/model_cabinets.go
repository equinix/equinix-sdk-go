/*
Smart Hands

Request cage assistance, custom installation and equipment troubleshooting.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smarthandsv1

import (
	"encoding/json"
)

// checks if the Cabinets type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Cabinets{}

// Cabinets struct for Cabinets
type Cabinets struct {
	// Cabinet Number
	Cabinet *string `json:"cabinet,omitempty"`
	// Cabinet Type, Eg. Regular, Demarc
	CabinetType          *string `json:"cabinetType,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Cabinets Cabinets

// NewCabinets instantiates a new Cabinets object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCabinets() *Cabinets {
	this := Cabinets{}
	return &this
}

// NewCabinetsWithDefaults instantiates a new Cabinets object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCabinetsWithDefaults() *Cabinets {
	this := Cabinets{}
	return &this
}

// GetCabinet returns the Cabinet field value if set, zero value otherwise.
func (o *Cabinets) GetCabinet() string {
	if o == nil || IsNil(o.Cabinet) {
		var ret string
		return ret
	}
	return *o.Cabinet
}

// GetCabinetOk returns a tuple with the Cabinet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cabinets) GetCabinetOk() (*string, bool) {
	if o == nil || IsNil(o.Cabinet) {
		return nil, false
	}
	return o.Cabinet, true
}

// HasCabinet returns a boolean if a field has been set.
func (o *Cabinets) HasCabinet() bool {
	if o != nil && !IsNil(o.Cabinet) {
		return true
	}

	return false
}

// SetCabinet gets a reference to the given string and assigns it to the Cabinet field.
func (o *Cabinets) SetCabinet(v string) {
	o.Cabinet = &v
}

// GetCabinetType returns the CabinetType field value if set, zero value otherwise.
func (o *Cabinets) GetCabinetType() string {
	if o == nil || IsNil(o.CabinetType) {
		var ret string
		return ret
	}
	return *o.CabinetType
}

// GetCabinetTypeOk returns a tuple with the CabinetType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cabinets) GetCabinetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CabinetType) {
		return nil, false
	}
	return o.CabinetType, true
}

// HasCabinetType returns a boolean if a field has been set.
func (o *Cabinets) HasCabinetType() bool {
	if o != nil && !IsNil(o.CabinetType) {
		return true
	}

	return false
}

// SetCabinetType gets a reference to the given string and assigns it to the CabinetType field.
func (o *Cabinets) SetCabinetType(v string) {
	o.CabinetType = &v
}

func (o Cabinets) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Cabinets) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cabinet) {
		toSerialize["cabinet"] = o.Cabinet
	}
	if !IsNil(o.CabinetType) {
		toSerialize["cabinetType"] = o.CabinetType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Cabinets) UnmarshalJSON(data []byte) (err error) {
	varCabinets := _Cabinets{}

	err = json.Unmarshal(data, &varCabinets)

	if err != nil {
		return err
	}

	*o = Cabinets(varCabinets)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cabinet")
		delete(additionalProperties, "cabinetType")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCabinets struct {
	value *Cabinets
	isSet bool
}

func (v NullableCabinets) Get() *Cabinets {
	return v.value
}

func (v *NullableCabinets) Set(val *Cabinets) {
	v.value = val
	v.isSet = true
}

func (v NullableCabinets) IsSet() bool {
	return v.isSet
}

func (v *NullableCabinets) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCabinets(val *Cabinets) *NullableCabinets {
	return &NullableCabinets{value: val, isSet: true}
}

func (v NullableCabinets) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCabinets) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
