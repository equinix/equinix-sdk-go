/*
Smart Hands

Request cage assistance, custom installation and equipment troubleshooting.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smarthandsv1

import (
	"encoding/json"
	"fmt"
)

// checks if the PurchaseOrder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PurchaseOrder{}

// PurchaseOrder Use this model to pass purchase order reference information. When purchase order selection type is EXEMTED, number is not required
type PurchaseOrder struct {
	// Purchase Order Number
	Number               *string                        `json:"number,omitempty"`
	PurchaseOrderType    PurchaseOrderPurchaseOrderType `json:"purchaseOrderType"`
	AdditionalProperties map[string]interface{}
}

type _PurchaseOrder PurchaseOrder

// NewPurchaseOrder instantiates a new PurchaseOrder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPurchaseOrder(purchaseOrderType PurchaseOrderPurchaseOrderType) *PurchaseOrder {
	this := PurchaseOrder{}
	this.PurchaseOrderType = purchaseOrderType
	return &this
}

// NewPurchaseOrderWithDefaults instantiates a new PurchaseOrder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPurchaseOrderWithDefaults() *PurchaseOrder {
	this := PurchaseOrder{}
	return &this
}

// GetNumber returns the Number field value if set, zero value otherwise.
func (o *PurchaseOrder) GetNumber() string {
	if o == nil || IsNil(o.Number) {
		var ret string
		return ret
	}
	return *o.Number
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetNumberOk() (*string, bool) {
	if o == nil || IsNil(o.Number) {
		return nil, false
	}
	return o.Number, true
}

// HasNumber returns a boolean if a field has been set.
func (o *PurchaseOrder) HasNumber() bool {
	if o != nil && !IsNil(o.Number) {
		return true
	}

	return false
}

// SetNumber gets a reference to the given string and assigns it to the Number field.
func (o *PurchaseOrder) SetNumber(v string) {
	o.Number = &v
}

// GetPurchaseOrderType returns the PurchaseOrderType field value
func (o *PurchaseOrder) GetPurchaseOrderType() PurchaseOrderPurchaseOrderType {
	if o == nil {
		var ret PurchaseOrderPurchaseOrderType
		return ret
	}

	return o.PurchaseOrderType
}

// GetPurchaseOrderTypeOk returns a tuple with the PurchaseOrderType field value
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetPurchaseOrderTypeOk() (*PurchaseOrderPurchaseOrderType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PurchaseOrderType, true
}

// SetPurchaseOrderType sets field value
func (o *PurchaseOrder) SetPurchaseOrderType(v PurchaseOrderPurchaseOrderType) {
	o.PurchaseOrderType = v
}

func (o PurchaseOrder) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PurchaseOrder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Number) {
		toSerialize["number"] = o.Number
	}
	toSerialize["purchaseOrderType"] = o.PurchaseOrderType

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PurchaseOrder) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"purchaseOrderType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPurchaseOrder := _PurchaseOrder{}

	err = json.Unmarshal(data, &varPurchaseOrder)

	if err != nil {
		return err
	}

	*o = PurchaseOrder(varPurchaseOrder)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "number")
		delete(additionalProperties, "purchaseOrderType")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePurchaseOrder struct {
	value *PurchaseOrder
	isSet bool
}

func (v NullablePurchaseOrder) Get() *PurchaseOrder {
	return v.value
}

func (v *NullablePurchaseOrder) Set(val *PurchaseOrder) {
	v.value = val
	v.isSet = true
}

func (v NullablePurchaseOrder) IsSet() bool {
	return v.isSet
}

func (v *NullablePurchaseOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePurchaseOrder(val *PurchaseOrder) *NullablePurchaseOrder {
	return &NullablePurchaseOrder{value: val, isSet: true}
}

func (v NullablePurchaseOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePurchaseOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
