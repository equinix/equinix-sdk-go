/*
Smart Hands

Request cage assistance, custom installation and equipment troubleshooting.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smarthandsv1

import (
	"encoding/json"
	"fmt"
)

// checks if the ContactInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContactInfo{}

// ContactInfo Use this model to build contact object. Ordering and notification contacts are are always equinix registered contacts and we only expect username and rest of the details will be looked up. It is important to know that when username is provided all other attributes apart from contactType will be ignored
type ContactInfo struct {
	ContactType ContactInfoContactType `json:"contactType"`
	// User Name
	UserName *string `json:"userName,omitempty"`
	// Full Name of the Contact, Eg. 'First_Name' + 'Last_Name'
	Name *string `json:"name,omitempty" validate:"regexp=^[\\\\s.]*([^\\\\s.][\\\\s.]*){0,100}$"`
	// Valid email address of the contact
	Email *string `json:"email,omitempty" validate:"regexp=^(([^<>()\\\\[\\\\]\\\\.,;:\\\\s@\\"]+(\\\\.[^<>()\\\\[\\\\]\\\\.,;:\\\\s@\\"]+)*)|(\\".+\\"))@((\\\\[[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}])|(([a-zA-Z\\\\-0-9]+\\\\.)+[a-zA-Z]{2,}))$"`
	// Country Code of Primary Phone of the contact
	WorkPhoneCountryCode *string `json:"workPhoneCountryCode,omitempty" validate:"regexp=^\\\\+[0-9]{1,6}$"`
	// Primary Phone of the contact
	WorkPhone           *string                         `json:"workPhone,omitempty" validate:"regexp=^[0-9\\\\.\\\\-() ]{2,40}(?:(x|ext)[0-9\\\\.\\\\-() ]{1,10})?$"`
	WorkPhonePrefToCall *ContactInfoWorkPhonePrefToCall `json:"workPhonePrefToCall,omitempty"`
	// Country Code of Mobile Phone of the contact
	MobilePhoneCountryCode *string `json:"mobilePhoneCountryCode,omitempty" validate:"regexp=^\\\\+[0-9]{1,6}$"`
	// Mobile Phone of the contact
	MobilePhone           *string                         `json:"mobilePhone,omitempty" validate:"regexp=^[0-9\\\\.\\\\-() ]{2,40}(?:(x|ext)[0-9\\\\.\\\\-() ]{1,10})?$"`
	MobilePhonePrefToCall *ContactInfoWorkPhonePrefToCall `json:"mobilePhonePrefToCall,omitempty"`
	// Work Phone TimeZone
	WorkPhoneTimeZone *string `json:"workPhoneTimeZone,omitempty"`
	// Mobile Phone TimeZone
	MobilePhoneTimeZone  *string `json:"mobilePhoneTimeZone,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ContactInfo ContactInfo

// NewContactInfo instantiates a new ContactInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContactInfo(contactType ContactInfoContactType) *ContactInfo {
	this := ContactInfo{}
	this.ContactType = contactType
	return &this
}

// NewContactInfoWithDefaults instantiates a new ContactInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContactInfoWithDefaults() *ContactInfo {
	this := ContactInfo{}
	return &this
}

// GetContactType returns the ContactType field value
func (o *ContactInfo) GetContactType() ContactInfoContactType {
	if o == nil {
		var ret ContactInfoContactType
		return ret
	}

	return o.ContactType
}

// GetContactTypeOk returns a tuple with the ContactType field value
// and a boolean to check if the value has been set.
func (o *ContactInfo) GetContactTypeOk() (*ContactInfoContactType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContactType, true
}

// SetContactType sets field value
func (o *ContactInfo) SetContactType(v ContactInfoContactType) {
	o.ContactType = v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *ContactInfo) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactInfo) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *ContactInfo) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *ContactInfo) SetUserName(v string) {
	o.UserName = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ContactInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ContactInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ContactInfo) SetName(v string) {
	o.Name = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *ContactInfo) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactInfo) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *ContactInfo) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *ContactInfo) SetEmail(v string) {
	o.Email = &v
}

// GetWorkPhoneCountryCode returns the WorkPhoneCountryCode field value if set, zero value otherwise.
func (o *ContactInfo) GetWorkPhoneCountryCode() string {
	if o == nil || IsNil(o.WorkPhoneCountryCode) {
		var ret string
		return ret
	}
	return *o.WorkPhoneCountryCode
}

// GetWorkPhoneCountryCodeOk returns a tuple with the WorkPhoneCountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactInfo) GetWorkPhoneCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.WorkPhoneCountryCode) {
		return nil, false
	}
	return o.WorkPhoneCountryCode, true
}

// HasWorkPhoneCountryCode returns a boolean if a field has been set.
func (o *ContactInfo) HasWorkPhoneCountryCode() bool {
	if o != nil && !IsNil(o.WorkPhoneCountryCode) {
		return true
	}

	return false
}

// SetWorkPhoneCountryCode gets a reference to the given string and assigns it to the WorkPhoneCountryCode field.
func (o *ContactInfo) SetWorkPhoneCountryCode(v string) {
	o.WorkPhoneCountryCode = &v
}

// GetWorkPhone returns the WorkPhone field value if set, zero value otherwise.
func (o *ContactInfo) GetWorkPhone() string {
	if o == nil || IsNil(o.WorkPhone) {
		var ret string
		return ret
	}
	return *o.WorkPhone
}

// GetWorkPhoneOk returns a tuple with the WorkPhone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactInfo) GetWorkPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.WorkPhone) {
		return nil, false
	}
	return o.WorkPhone, true
}

// HasWorkPhone returns a boolean if a field has been set.
func (o *ContactInfo) HasWorkPhone() bool {
	if o != nil && !IsNil(o.WorkPhone) {
		return true
	}

	return false
}

// SetWorkPhone gets a reference to the given string and assigns it to the WorkPhone field.
func (o *ContactInfo) SetWorkPhone(v string) {
	o.WorkPhone = &v
}

// GetWorkPhonePrefToCall returns the WorkPhonePrefToCall field value if set, zero value otherwise.
func (o *ContactInfo) GetWorkPhonePrefToCall() ContactInfoWorkPhonePrefToCall {
	if o == nil || IsNil(o.WorkPhonePrefToCall) {
		var ret ContactInfoWorkPhonePrefToCall
		return ret
	}
	return *o.WorkPhonePrefToCall
}

// GetWorkPhonePrefToCallOk returns a tuple with the WorkPhonePrefToCall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactInfo) GetWorkPhonePrefToCallOk() (*ContactInfoWorkPhonePrefToCall, bool) {
	if o == nil || IsNil(o.WorkPhonePrefToCall) {
		return nil, false
	}
	return o.WorkPhonePrefToCall, true
}

// HasWorkPhonePrefToCall returns a boolean if a field has been set.
func (o *ContactInfo) HasWorkPhonePrefToCall() bool {
	if o != nil && !IsNil(o.WorkPhonePrefToCall) {
		return true
	}

	return false
}

// SetWorkPhonePrefToCall gets a reference to the given ContactInfoWorkPhonePrefToCall and assigns it to the WorkPhonePrefToCall field.
func (o *ContactInfo) SetWorkPhonePrefToCall(v ContactInfoWorkPhonePrefToCall) {
	o.WorkPhonePrefToCall = &v
}

// GetMobilePhoneCountryCode returns the MobilePhoneCountryCode field value if set, zero value otherwise.
func (o *ContactInfo) GetMobilePhoneCountryCode() string {
	if o == nil || IsNil(o.MobilePhoneCountryCode) {
		var ret string
		return ret
	}
	return *o.MobilePhoneCountryCode
}

// GetMobilePhoneCountryCodeOk returns a tuple with the MobilePhoneCountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactInfo) GetMobilePhoneCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.MobilePhoneCountryCode) {
		return nil, false
	}
	return o.MobilePhoneCountryCode, true
}

// HasMobilePhoneCountryCode returns a boolean if a field has been set.
func (o *ContactInfo) HasMobilePhoneCountryCode() bool {
	if o != nil && !IsNil(o.MobilePhoneCountryCode) {
		return true
	}

	return false
}

// SetMobilePhoneCountryCode gets a reference to the given string and assigns it to the MobilePhoneCountryCode field.
func (o *ContactInfo) SetMobilePhoneCountryCode(v string) {
	o.MobilePhoneCountryCode = &v
}

// GetMobilePhone returns the MobilePhone field value if set, zero value otherwise.
func (o *ContactInfo) GetMobilePhone() string {
	if o == nil || IsNil(o.MobilePhone) {
		var ret string
		return ret
	}
	return *o.MobilePhone
}

// GetMobilePhoneOk returns a tuple with the MobilePhone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactInfo) GetMobilePhoneOk() (*string, bool) {
	if o == nil || IsNil(o.MobilePhone) {
		return nil, false
	}
	return o.MobilePhone, true
}

// HasMobilePhone returns a boolean if a field has been set.
func (o *ContactInfo) HasMobilePhone() bool {
	if o != nil && !IsNil(o.MobilePhone) {
		return true
	}

	return false
}

// SetMobilePhone gets a reference to the given string and assigns it to the MobilePhone field.
func (o *ContactInfo) SetMobilePhone(v string) {
	o.MobilePhone = &v
}

// GetMobilePhonePrefToCall returns the MobilePhonePrefToCall field value if set, zero value otherwise.
func (o *ContactInfo) GetMobilePhonePrefToCall() ContactInfoWorkPhonePrefToCall {
	if o == nil || IsNil(o.MobilePhonePrefToCall) {
		var ret ContactInfoWorkPhonePrefToCall
		return ret
	}
	return *o.MobilePhonePrefToCall
}

// GetMobilePhonePrefToCallOk returns a tuple with the MobilePhonePrefToCall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactInfo) GetMobilePhonePrefToCallOk() (*ContactInfoWorkPhonePrefToCall, bool) {
	if o == nil || IsNil(o.MobilePhonePrefToCall) {
		return nil, false
	}
	return o.MobilePhonePrefToCall, true
}

// HasMobilePhonePrefToCall returns a boolean if a field has been set.
func (o *ContactInfo) HasMobilePhonePrefToCall() bool {
	if o != nil && !IsNil(o.MobilePhonePrefToCall) {
		return true
	}

	return false
}

// SetMobilePhonePrefToCall gets a reference to the given ContactInfoWorkPhonePrefToCall and assigns it to the MobilePhonePrefToCall field.
func (o *ContactInfo) SetMobilePhonePrefToCall(v ContactInfoWorkPhonePrefToCall) {
	o.MobilePhonePrefToCall = &v
}

// GetWorkPhoneTimeZone returns the WorkPhoneTimeZone field value if set, zero value otherwise.
func (o *ContactInfo) GetWorkPhoneTimeZone() string {
	if o == nil || IsNil(o.WorkPhoneTimeZone) {
		var ret string
		return ret
	}
	return *o.WorkPhoneTimeZone
}

// GetWorkPhoneTimeZoneOk returns a tuple with the WorkPhoneTimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactInfo) GetWorkPhoneTimeZoneOk() (*string, bool) {
	if o == nil || IsNil(o.WorkPhoneTimeZone) {
		return nil, false
	}
	return o.WorkPhoneTimeZone, true
}

// HasWorkPhoneTimeZone returns a boolean if a field has been set.
func (o *ContactInfo) HasWorkPhoneTimeZone() bool {
	if o != nil && !IsNil(o.WorkPhoneTimeZone) {
		return true
	}

	return false
}

// SetWorkPhoneTimeZone gets a reference to the given string and assigns it to the WorkPhoneTimeZone field.
func (o *ContactInfo) SetWorkPhoneTimeZone(v string) {
	o.WorkPhoneTimeZone = &v
}

// GetMobilePhoneTimeZone returns the MobilePhoneTimeZone field value if set, zero value otherwise.
func (o *ContactInfo) GetMobilePhoneTimeZone() string {
	if o == nil || IsNil(o.MobilePhoneTimeZone) {
		var ret string
		return ret
	}
	return *o.MobilePhoneTimeZone
}

// GetMobilePhoneTimeZoneOk returns a tuple with the MobilePhoneTimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactInfo) GetMobilePhoneTimeZoneOk() (*string, bool) {
	if o == nil || IsNil(o.MobilePhoneTimeZone) {
		return nil, false
	}
	return o.MobilePhoneTimeZone, true
}

// HasMobilePhoneTimeZone returns a boolean if a field has been set.
func (o *ContactInfo) HasMobilePhoneTimeZone() bool {
	if o != nil && !IsNil(o.MobilePhoneTimeZone) {
		return true
	}

	return false
}

// SetMobilePhoneTimeZone gets a reference to the given string and assigns it to the MobilePhoneTimeZone field.
func (o *ContactInfo) SetMobilePhoneTimeZone(v string) {
	o.MobilePhoneTimeZone = &v
}

func (o ContactInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContactInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["contactType"] = o.ContactType
	if !IsNil(o.UserName) {
		toSerialize["userName"] = o.UserName
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.WorkPhoneCountryCode) {
		toSerialize["workPhoneCountryCode"] = o.WorkPhoneCountryCode
	}
	if !IsNil(o.WorkPhone) {
		toSerialize["workPhone"] = o.WorkPhone
	}
	if !IsNil(o.WorkPhonePrefToCall) {
		toSerialize["workPhonePrefToCall"] = o.WorkPhonePrefToCall
	}
	if !IsNil(o.MobilePhoneCountryCode) {
		toSerialize["mobilePhoneCountryCode"] = o.MobilePhoneCountryCode
	}
	if !IsNil(o.MobilePhone) {
		toSerialize["mobilePhone"] = o.MobilePhone
	}
	if !IsNil(o.MobilePhonePrefToCall) {
		toSerialize["mobilePhonePrefToCall"] = o.MobilePhonePrefToCall
	}
	if !IsNil(o.WorkPhoneTimeZone) {
		toSerialize["workPhoneTimeZone"] = o.WorkPhoneTimeZone
	}
	if !IsNil(o.MobilePhoneTimeZone) {
		toSerialize["mobilePhoneTimeZone"] = o.MobilePhoneTimeZone
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ContactInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"contactType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContactInfo := _ContactInfo{}

	err = json.Unmarshal(data, &varContactInfo)

	if err != nil {
		return err
	}

	*o = ContactInfo(varContactInfo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "contactType")
		delete(additionalProperties, "userName")
		delete(additionalProperties, "name")
		delete(additionalProperties, "email")
		delete(additionalProperties, "workPhoneCountryCode")
		delete(additionalProperties, "workPhone")
		delete(additionalProperties, "workPhonePrefToCall")
		delete(additionalProperties, "mobilePhoneCountryCode")
		delete(additionalProperties, "mobilePhone")
		delete(additionalProperties, "mobilePhonePrefToCall")
		delete(additionalProperties, "workPhoneTimeZone")
		delete(additionalProperties, "mobilePhoneTimeZone")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableContactInfo struct {
	value *ContactInfo
	isSet bool
}

func (v NullableContactInfo) Get() *ContactInfo {
	return v.value
}

func (v *NullableContactInfo) Set(val *ContactInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableContactInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableContactInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactInfo(val *ContactInfo) *NullableContactInfo {
	return &NullableContactInfo{value: val, isSet: true}
}

func (v NullableContactInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
