/*
Smart Hands

Request cage assistance, custom installation and equipment troubleshooting.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smarthandsv1

import (
	"encoding/json"
)

// checks if the SmartHandTypes200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmartHandTypes200Response{}

// SmartHandTypes200Response struct for SmartHandTypes200Response
type SmartHandTypes200Response struct {
	Smarthands           []SmarthandType `json:"smarthands,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SmartHandTypes200Response SmartHandTypes200Response

// NewSmartHandTypes200Response instantiates a new SmartHandTypes200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmartHandTypes200Response() *SmartHandTypes200Response {
	this := SmartHandTypes200Response{}
	return &this
}

// NewSmartHandTypes200ResponseWithDefaults instantiates a new SmartHandTypes200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmartHandTypes200ResponseWithDefaults() *SmartHandTypes200Response {
	this := SmartHandTypes200Response{}
	return &this
}

// GetSmarthands returns the Smarthands field value if set, zero value otherwise.
func (o *SmartHandTypes200Response) GetSmarthands() []SmarthandType {
	if o == nil || IsNil(o.Smarthands) {
		var ret []SmarthandType
		return ret
	}
	return o.Smarthands
}

// GetSmarthandsOk returns a tuple with the Smarthands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartHandTypes200Response) GetSmarthandsOk() ([]SmarthandType, bool) {
	if o == nil || IsNil(o.Smarthands) {
		return nil, false
	}
	return o.Smarthands, true
}

// HasSmarthands returns a boolean if a field has been set.
func (o *SmartHandTypes200Response) HasSmarthands() bool {
	if o != nil && !IsNil(o.Smarthands) {
		return true
	}

	return false
}

// SetSmarthands gets a reference to the given []SmarthandType and assigns it to the Smarthands field.
func (o *SmartHandTypes200Response) SetSmarthands(v []SmarthandType) {
	o.Smarthands = v
}

func (o SmartHandTypes200Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmartHandTypes200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Smarthands) {
		toSerialize["smarthands"] = o.Smarthands
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SmartHandTypes200Response) UnmarshalJSON(data []byte) (err error) {
	varSmartHandTypes200Response := _SmartHandTypes200Response{}

	err = json.Unmarshal(data, &varSmartHandTypes200Response)

	if err != nil {
		return err
	}

	*o = SmartHandTypes200Response(varSmartHandTypes200Response)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "smarthands")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSmartHandTypes200Response struct {
	value *SmartHandTypes200Response
	isSet bool
}

func (v NullableSmartHandTypes200Response) Get() *SmartHandTypes200Response {
	return v.value
}

func (v *NullableSmartHandTypes200Response) Set(val *SmartHandTypes200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableSmartHandTypes200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableSmartHandTypes200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmartHandTypes200Response(val *SmartHandTypes200Response) *NullableSmartHandTypes200Response {
	return &NullableSmartHandTypes200Response{value: val, isSet: true}
}

func (v NullableSmartHandTypes200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmartHandTypes200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
