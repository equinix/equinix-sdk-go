/*
Smart Hands

Request cage assistance, custom installation and equipment troubleshooting.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smarthandsv1

import (
	"encoding/json"
	"fmt"
)

// checks if the IbxLocationCagesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IbxLocationCagesInner{}

// IbxLocationCagesInner struct for IbxLocationCagesInner
type IbxLocationCagesInner struct {
	Cage                 string   `json:"cage"`
	AccountNumber        string   `json:"accountNumber"`
	Cabinets             []string `json:"cabinets,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IbxLocationCagesInner IbxLocationCagesInner

// NewIbxLocationCagesInner instantiates a new IbxLocationCagesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIbxLocationCagesInner(cage string, accountNumber string) *IbxLocationCagesInner {
	this := IbxLocationCagesInner{}
	this.Cage = cage
	this.AccountNumber = accountNumber
	return &this
}

// NewIbxLocationCagesInnerWithDefaults instantiates a new IbxLocationCagesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIbxLocationCagesInnerWithDefaults() *IbxLocationCagesInner {
	this := IbxLocationCagesInner{}
	return &this
}

// GetCage returns the Cage field value
func (o *IbxLocationCagesInner) GetCage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cage
}

// GetCageOk returns a tuple with the Cage field value
// and a boolean to check if the value has been set.
func (o *IbxLocationCagesInner) GetCageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cage, true
}

// SetCage sets field value
func (o *IbxLocationCagesInner) SetCage(v string) {
	o.Cage = v
}

// GetAccountNumber returns the AccountNumber field value
func (o *IbxLocationCagesInner) GetAccountNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountNumber
}

// GetAccountNumberOk returns a tuple with the AccountNumber field value
// and a boolean to check if the value has been set.
func (o *IbxLocationCagesInner) GetAccountNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountNumber, true
}

// SetAccountNumber sets field value
func (o *IbxLocationCagesInner) SetAccountNumber(v string) {
	o.AccountNumber = v
}

// GetCabinets returns the Cabinets field value if set, zero value otherwise.
func (o *IbxLocationCagesInner) GetCabinets() []string {
	if o == nil || IsNil(o.Cabinets) {
		var ret []string
		return ret
	}
	return o.Cabinets
}

// GetCabinetsOk returns a tuple with the Cabinets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IbxLocationCagesInner) GetCabinetsOk() ([]string, bool) {
	if o == nil || IsNil(o.Cabinets) {
		return nil, false
	}
	return o.Cabinets, true
}

// HasCabinets returns a boolean if a field has been set.
func (o *IbxLocationCagesInner) HasCabinets() bool {
	if o != nil && !IsNil(o.Cabinets) {
		return true
	}

	return false
}

// SetCabinets gets a reference to the given []string and assigns it to the Cabinets field.
func (o *IbxLocationCagesInner) SetCabinets(v []string) {
	o.Cabinets = v
}

func (o IbxLocationCagesInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IbxLocationCagesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cage"] = o.Cage
	toSerialize["accountNumber"] = o.AccountNumber
	if !IsNil(o.Cabinets) {
		toSerialize["cabinets"] = o.Cabinets
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IbxLocationCagesInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cage",
		"accountNumber",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIbxLocationCagesInner := _IbxLocationCagesInner{}

	err = json.Unmarshal(data, &varIbxLocationCagesInner)

	if err != nil {
		return err
	}

	*o = IbxLocationCagesInner(varIbxLocationCagesInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cage")
		delete(additionalProperties, "accountNumber")
		delete(additionalProperties, "cabinets")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIbxLocationCagesInner struct {
	value *IbxLocationCagesInner
	isSet bool
}

func (v NullableIbxLocationCagesInner) Get() *IbxLocationCagesInner {
	return v.value
}

func (v *NullableIbxLocationCagesInner) Set(val *IbxLocationCagesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableIbxLocationCagesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableIbxLocationCagesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIbxLocationCagesInner(val *IbxLocationCagesInner) *NullableIbxLocationCagesInner {
	return &NullableIbxLocationCagesInner{value: val, isSet: true}
}

func (v NullableIbxLocationCagesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIbxLocationCagesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
