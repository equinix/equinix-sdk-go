/*
Smart Hands

Request cage assistance, custom installation and equipment troubleshooting.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smarthandsv1

import (
	"encoding/json"
	"fmt"
)

// CableRequestRequestServiceDetailsConnectorType Connector Type.
type CableRequestRequestServiceDetailsConnectorType string

// List of cableRequestRequest_serviceDetails_connectorType
const (
	CABLEREQUESTREQUESTSERVICEDETAILSCONNECTORTYPE_RJ45  CableRequestRequestServiceDetailsConnectorType = "RJ45"
	CABLEREQUESTREQUESTSERVICEDETAILSCONNECTORTYPE_SC    CableRequestRequestServiceDetailsConnectorType = "SC"
	CABLEREQUESTREQUESTSERVICEDETAILSCONNECTORTYPE_LC    CableRequestRequestServiceDetailsConnectorType = "LC"
	CABLEREQUESTREQUESTSERVICEDETAILSCONNECTORTYPE_BNC   CableRequestRequestServiceDetailsConnectorType = "BNC"
	CABLEREQUESTREQUESTSERVICEDETAILSCONNECTORTYPE_OTHER CableRequestRequestServiceDetailsConnectorType = "Other"
)

// All allowed values of CableRequestRequestServiceDetailsConnectorType enum
var AllowedCableRequestRequestServiceDetailsConnectorTypeEnumValues = []CableRequestRequestServiceDetailsConnectorType{
	"RJ45",
	"SC",
	"LC",
	"BNC",
	"Other",
}

func (v *CableRequestRequestServiceDetailsConnectorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CableRequestRequestServiceDetailsConnectorType(value)
	for _, existing := range AllowedCableRequestRequestServiceDetailsConnectorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CableRequestRequestServiceDetailsConnectorType", value)
}

// NewCableRequestRequestServiceDetailsConnectorTypeFromValue returns a pointer to a valid CableRequestRequestServiceDetailsConnectorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCableRequestRequestServiceDetailsConnectorTypeFromValue(v string) (*CableRequestRequestServiceDetailsConnectorType, error) {
	ev := CableRequestRequestServiceDetailsConnectorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CableRequestRequestServiceDetailsConnectorType: valid values are %v", v, AllowedCableRequestRequestServiceDetailsConnectorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CableRequestRequestServiceDetailsConnectorType) IsValid() bool {
	for _, existing := range AllowedCableRequestRequestServiceDetailsConnectorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to cableRequestRequest_serviceDetails_connectorType value
func (v CableRequestRequestServiceDetailsConnectorType) Ptr() *CableRequestRequestServiceDetailsConnectorType {
	return &v
}

type NullableCableRequestRequestServiceDetailsConnectorType struct {
	value *CableRequestRequestServiceDetailsConnectorType
	isSet bool
}

func (v NullableCableRequestRequestServiceDetailsConnectorType) Get() *CableRequestRequestServiceDetailsConnectorType {
	return v.value
}

func (v *NullableCableRequestRequestServiceDetailsConnectorType) Set(val *CableRequestRequestServiceDetailsConnectorType) {
	v.value = val
	v.isSet = true
}

func (v NullableCableRequestRequestServiceDetailsConnectorType) IsSet() bool {
	return v.isSet
}

func (v *NullableCableRequestRequestServiceDetailsConnectorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCableRequestRequestServiceDetailsConnectorType(val *CableRequestRequestServiceDetailsConnectorType) *NullableCableRequestRequestServiceDetailsConnectorType {
	return &NullableCableRequestRequestServiceDetailsConnectorType{value: val, isSet: true}
}

func (v NullableCableRequestRequestServiceDetailsConnectorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCableRequestRequestServiceDetailsConnectorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
