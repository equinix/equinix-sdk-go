/*
Smart Hands

Request cage assistance, custom installation and equipment troubleshooting.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smarthandsv1

import (
	"encoding/json"
	"fmt"
)

// checks if the CageCleanupRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CageCleanupRequest{}

// CageCleanupRequest struct for CageCleanupRequest
type CageCleanupRequest struct {
	// You may use numbers and text in this field to enter reference information for your records. This will also appear in your reports and details. You may use this information to search for this content on the submitted requests page.
	CustomerReferenceNumber *string        `json:"customerReferenceNumber,omitempty"`
	PurchaseOrder           *PurchaseOrder `json:"purchaseOrder,omitempty"`
	IbxLocation             IbxLocation    `json:"ibxLocation"`
	// Use this array to pass ordering contact, notification contacts and technical contact. Only one ordering contact, technical contact is allowed. One or more notification contacts are allowed. Ordering and notification contacts are always registered customers with the customer portal.
	Contacts []ContactInfo `json:"contacts"`
	Schedule *ScheduleInfo `json:"schedule,omitempty"`
	// Use this to pass uploaded attachments. Attachments need to be uploaded using the attachments API. Maximum size of an attachment is 2MB with the following formats - bmp, jpg, jpeg, gif, png, tif, tiff, txt, doc, docx, xls, xlsx, ppt, pps, ppsx, pdf, and vsd.
	Attachments          []Attachment                     `json:"attachments,omitempty"`
	ServiceDetails       CageCleanupRequestServiceDetails `json:"serviceDetails"`
	AdditionalProperties map[string]interface{}
}

type _CageCleanupRequest CageCleanupRequest

// NewCageCleanupRequest instantiates a new CageCleanupRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCageCleanupRequest(ibxLocation IbxLocation, contacts []ContactInfo, serviceDetails CageCleanupRequestServiceDetails) *CageCleanupRequest {
	this := CageCleanupRequest{}
	this.IbxLocation = ibxLocation
	this.Contacts = contacts
	this.ServiceDetails = serviceDetails
	return &this
}

// NewCageCleanupRequestWithDefaults instantiates a new CageCleanupRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCageCleanupRequestWithDefaults() *CageCleanupRequest {
	this := CageCleanupRequest{}
	return &this
}

// GetCustomerReferenceNumber returns the CustomerReferenceNumber field value if set, zero value otherwise.
func (o *CageCleanupRequest) GetCustomerReferenceNumber() string {
	if o == nil || IsNil(o.CustomerReferenceNumber) {
		var ret string
		return ret
	}
	return *o.CustomerReferenceNumber
}

// GetCustomerReferenceNumberOk returns a tuple with the CustomerReferenceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CageCleanupRequest) GetCustomerReferenceNumberOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerReferenceNumber) {
		return nil, false
	}
	return o.CustomerReferenceNumber, true
}

// HasCustomerReferenceNumber returns a boolean if a field has been set.
func (o *CageCleanupRequest) HasCustomerReferenceNumber() bool {
	if o != nil && !IsNil(o.CustomerReferenceNumber) {
		return true
	}

	return false
}

// SetCustomerReferenceNumber gets a reference to the given string and assigns it to the CustomerReferenceNumber field.
func (o *CageCleanupRequest) SetCustomerReferenceNumber(v string) {
	o.CustomerReferenceNumber = &v
}

// GetPurchaseOrder returns the PurchaseOrder field value if set, zero value otherwise.
func (o *CageCleanupRequest) GetPurchaseOrder() PurchaseOrder {
	if o == nil || IsNil(o.PurchaseOrder) {
		var ret PurchaseOrder
		return ret
	}
	return *o.PurchaseOrder
}

// GetPurchaseOrderOk returns a tuple with the PurchaseOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CageCleanupRequest) GetPurchaseOrderOk() (*PurchaseOrder, bool) {
	if o == nil || IsNil(o.PurchaseOrder) {
		return nil, false
	}
	return o.PurchaseOrder, true
}

// HasPurchaseOrder returns a boolean if a field has been set.
func (o *CageCleanupRequest) HasPurchaseOrder() bool {
	if o != nil && !IsNil(o.PurchaseOrder) {
		return true
	}

	return false
}

// SetPurchaseOrder gets a reference to the given PurchaseOrder and assigns it to the PurchaseOrder field.
func (o *CageCleanupRequest) SetPurchaseOrder(v PurchaseOrder) {
	o.PurchaseOrder = &v
}

// GetIbxLocation returns the IbxLocation field value
func (o *CageCleanupRequest) GetIbxLocation() IbxLocation {
	if o == nil {
		var ret IbxLocation
		return ret
	}

	return o.IbxLocation
}

// GetIbxLocationOk returns a tuple with the IbxLocation field value
// and a boolean to check if the value has been set.
func (o *CageCleanupRequest) GetIbxLocationOk() (*IbxLocation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IbxLocation, true
}

// SetIbxLocation sets field value
func (o *CageCleanupRequest) SetIbxLocation(v IbxLocation) {
	o.IbxLocation = v
}

// GetContacts returns the Contacts field value
func (o *CageCleanupRequest) GetContacts() []ContactInfo {
	if o == nil {
		var ret []ContactInfo
		return ret
	}

	return o.Contacts
}

// GetContactsOk returns a tuple with the Contacts field value
// and a boolean to check if the value has been set.
func (o *CageCleanupRequest) GetContactsOk() ([]ContactInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.Contacts, true
}

// SetContacts sets field value
func (o *CageCleanupRequest) SetContacts(v []ContactInfo) {
	o.Contacts = v
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *CageCleanupRequest) GetSchedule() ScheduleInfo {
	if o == nil || IsNil(o.Schedule) {
		var ret ScheduleInfo
		return ret
	}
	return *o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CageCleanupRequest) GetScheduleOk() (*ScheduleInfo, bool) {
	if o == nil || IsNil(o.Schedule) {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *CageCleanupRequest) HasSchedule() bool {
	if o != nil && !IsNil(o.Schedule) {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given ScheduleInfo and assigns it to the Schedule field.
func (o *CageCleanupRequest) SetSchedule(v ScheduleInfo) {
	o.Schedule = &v
}

// GetAttachments returns the Attachments field value if set, zero value otherwise.
func (o *CageCleanupRequest) GetAttachments() []Attachment {
	if o == nil || IsNil(o.Attachments) {
		var ret []Attachment
		return ret
	}
	return o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CageCleanupRequest) GetAttachmentsOk() ([]Attachment, bool) {
	if o == nil || IsNil(o.Attachments) {
		return nil, false
	}
	return o.Attachments, true
}

// HasAttachments returns a boolean if a field has been set.
func (o *CageCleanupRequest) HasAttachments() bool {
	if o != nil && !IsNil(o.Attachments) {
		return true
	}

	return false
}

// SetAttachments gets a reference to the given []Attachment and assigns it to the Attachments field.
func (o *CageCleanupRequest) SetAttachments(v []Attachment) {
	o.Attachments = v
}

// GetServiceDetails returns the ServiceDetails field value
func (o *CageCleanupRequest) GetServiceDetails() CageCleanupRequestServiceDetails {
	if o == nil {
		var ret CageCleanupRequestServiceDetails
		return ret
	}

	return o.ServiceDetails
}

// GetServiceDetailsOk returns a tuple with the ServiceDetails field value
// and a boolean to check if the value has been set.
func (o *CageCleanupRequest) GetServiceDetailsOk() (*CageCleanupRequestServiceDetails, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceDetails, true
}

// SetServiceDetails sets field value
func (o *CageCleanupRequest) SetServiceDetails(v CageCleanupRequestServiceDetails) {
	o.ServiceDetails = v
}

func (o CageCleanupRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CageCleanupRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CustomerReferenceNumber) {
		toSerialize["customerReferenceNumber"] = o.CustomerReferenceNumber
	}
	if !IsNil(o.PurchaseOrder) {
		toSerialize["purchaseOrder"] = o.PurchaseOrder
	}
	toSerialize["ibxLocation"] = o.IbxLocation
	toSerialize["contacts"] = o.Contacts
	if !IsNil(o.Schedule) {
		toSerialize["schedule"] = o.Schedule
	}
	if !IsNil(o.Attachments) {
		toSerialize["attachments"] = o.Attachments
	}
	toSerialize["serviceDetails"] = o.ServiceDetails

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CageCleanupRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ibxLocation",
		"contacts",
		"serviceDetails",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCageCleanupRequest := _CageCleanupRequest{}

	err = json.Unmarshal(data, &varCageCleanupRequest)

	if err != nil {
		return err
	}

	*o = CageCleanupRequest(varCageCleanupRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "customerReferenceNumber")
		delete(additionalProperties, "purchaseOrder")
		delete(additionalProperties, "ibxLocation")
		delete(additionalProperties, "contacts")
		delete(additionalProperties, "schedule")
		delete(additionalProperties, "attachments")
		delete(additionalProperties, "serviceDetails")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCageCleanupRequest struct {
	value *CageCleanupRequest
	isSet bool
}

func (v NullableCageCleanupRequest) Get() *CageCleanupRequest {
	return v.value
}

func (v *NullableCageCleanupRequest) Set(val *CageCleanupRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCageCleanupRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCageCleanupRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCageCleanupRequest(val *CageCleanupRequest) *NullableCageCleanupRequest {
	return &NullableCageCleanupRequest{value: val, isSet: true}
}

func (v NullableCageCleanupRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCageCleanupRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
