/*
Smart Hands

Request cage assistance, custom installation and equipment troubleshooting.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smarthandsv1

import (
	"encoding/json"
	"fmt"
)

// ContactInfoWorkPhonePrefToCall Possible values are NEVER, ANYTIME, BUSINESS_HOURS, MY_BUSINESS_HOURS,IBX_BUSINESS_HOURS. But BUSINESS_HOURS is deprecated and will be removed in future release
type ContactInfoWorkPhonePrefToCall string

// List of contactInfo_workPhonePrefToCall
const (
	CONTACTINFOWORKPHONEPREFTOCALL_NEVER              ContactInfoWorkPhonePrefToCall = "NEVER"
	CONTACTINFOWORKPHONEPREFTOCALL_ANYTIME            ContactInfoWorkPhonePrefToCall = "ANYTIME"
	CONTACTINFOWORKPHONEPREFTOCALL_MY_BUSINESS_HOURS  ContactInfoWorkPhonePrefToCall = "MY_BUSINESS_HOURS"
	CONTACTINFOWORKPHONEPREFTOCALL_IBX_BUSINESS_HOURS ContactInfoWorkPhonePrefToCall = "IBX_BUSINESS_HOURS"
	CONTACTINFOWORKPHONEPREFTOCALL_BUSINESS_HOURS     ContactInfoWorkPhonePrefToCall = "BUSINESS_HOURS"
)

// All allowed values of ContactInfoWorkPhonePrefToCall enum
var AllowedContactInfoWorkPhonePrefToCallEnumValues = []ContactInfoWorkPhonePrefToCall{
	"NEVER",
	"ANYTIME",
	"MY_BUSINESS_HOURS",
	"IBX_BUSINESS_HOURS",
	"BUSINESS_HOURS",
}

func (v *ContactInfoWorkPhonePrefToCall) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ContactInfoWorkPhonePrefToCall(value)
	for _, existing := range AllowedContactInfoWorkPhonePrefToCallEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ContactInfoWorkPhonePrefToCall", value)
}

// NewContactInfoWorkPhonePrefToCallFromValue returns a pointer to a valid ContactInfoWorkPhonePrefToCall
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewContactInfoWorkPhonePrefToCallFromValue(v string) (*ContactInfoWorkPhonePrefToCall, error) {
	ev := ContactInfoWorkPhonePrefToCall(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ContactInfoWorkPhonePrefToCall: valid values are %v", v, AllowedContactInfoWorkPhonePrefToCallEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ContactInfoWorkPhonePrefToCall) IsValid() bool {
	for _, existing := range AllowedContactInfoWorkPhonePrefToCallEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to contactInfo_workPhonePrefToCall value
func (v ContactInfoWorkPhonePrefToCall) Ptr() *ContactInfoWorkPhonePrefToCall {
	return &v
}

type NullableContactInfoWorkPhonePrefToCall struct {
	value *ContactInfoWorkPhonePrefToCall
	isSet bool
}

func (v NullableContactInfoWorkPhonePrefToCall) Get() *ContactInfoWorkPhonePrefToCall {
	return v.value
}

func (v *NullableContactInfoWorkPhonePrefToCall) Set(val *ContactInfoWorkPhonePrefToCall) {
	v.value = val
	v.isSet = true
}

func (v NullableContactInfoWorkPhonePrefToCall) IsSet() bool {
	return v.isSet
}

func (v *NullableContactInfoWorkPhonePrefToCall) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactInfoWorkPhonePrefToCall(val *ContactInfoWorkPhonePrefToCall) *NullableContactInfoWorkPhonePrefToCall {
	return &NullableContactInfoWorkPhonePrefToCall{value: val, isSet: true}
}

func (v NullableContactInfoWorkPhonePrefToCall) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactInfoWorkPhonePrefToCall) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
