/*
Smart Hands

Request cage assistance, custom installation and equipment troubleshooting.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smarthandsv1

import (
	"encoding/json"
	"fmt"
)

// checks if the RunJumperCableRequestServiceDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunJumperCableRequestServiceDetails{}

// RunJumperCableRequestServiceDetails Move Jumper Cable Service Details Object. Please fill out the Media Type, Connector Type, Cable ID(optional), 'Should Equinix provide you Tx/Rx light levels, Yes Or No?', Devices to Connect details for Device#1 (Name/Panel, Device Slot, Device Ports) and Device#2(Optional) (Name/Panel, Device Slot, Device Ports) details for each jumper cable and attach it to the form or complete scope of work text box when 'Quantity' is greater than 1. If any device is being shipped to Equinix, please include the shipment number. You may mix jumper types but if you require more than 12 jumpers ran, the site will contact you for scheduling of your request based on parts and availability. Please select the best option for your scheduling needs. If ‘Quantity’ is 1, then ‘Jumper Type’, Media Type, Connector Type, 'Should Equinix provide you Tx/Rx light levels?' and Device details are mandatory.
type RunJumperCableRequestServiceDetails struct {
	Quantity   MoveJumperCableRequestServiceDetailsQuantity   `json:"quantity"`
	JumperType *RunJumperCableRequestServiceDetailsJumperType `json:"jumperType,omitempty"`
	MediaType  *RunJumperCableRequestServiceDetailsMediaType  `json:"mediaType,omitempty"`
	Connector  *RunJumperCableRequestServiceDetailsConnector  `json:"connector,omitempty"`
	// Cable ID
	CableId *string `json:"cableId,omitempty"`
	// Provide Tx/Rx Light Levels
	ProvideTxRxLightLevels *bool    `json:"provideTxRxLightLevels,omitempty"`
	DeviceDetails          []Device `json:"deviceDetails,omitempty"`
	// Enter any additional details that will help our technicians execute your request. You may also attach your scope of work as a document if you exceed the character limit in this field.
	ScopeOfWork          string `json:"scopeOfWork"`
	AdditionalProperties map[string]interface{}
}

type _RunJumperCableRequestServiceDetails RunJumperCableRequestServiceDetails

// NewRunJumperCableRequestServiceDetails instantiates a new RunJumperCableRequestServiceDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunJumperCableRequestServiceDetails(quantity MoveJumperCableRequestServiceDetailsQuantity, scopeOfWork string) *RunJumperCableRequestServiceDetails {
	this := RunJumperCableRequestServiceDetails{}
	this.Quantity = quantity
	this.ScopeOfWork = scopeOfWork
	return &this
}

// NewRunJumperCableRequestServiceDetailsWithDefaults instantiates a new RunJumperCableRequestServiceDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunJumperCableRequestServiceDetailsWithDefaults() *RunJumperCableRequestServiceDetails {
	this := RunJumperCableRequestServiceDetails{}
	return &this
}

// GetQuantity returns the Quantity field value
func (o *RunJumperCableRequestServiceDetails) GetQuantity() MoveJumperCableRequestServiceDetailsQuantity {
	if o == nil {
		var ret MoveJumperCableRequestServiceDetailsQuantity
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *RunJumperCableRequestServiceDetails) GetQuantityOk() (*MoveJumperCableRequestServiceDetailsQuantity, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *RunJumperCableRequestServiceDetails) SetQuantity(v MoveJumperCableRequestServiceDetailsQuantity) {
	o.Quantity = v
}

// GetJumperType returns the JumperType field value if set, zero value otherwise.
func (o *RunJumperCableRequestServiceDetails) GetJumperType() RunJumperCableRequestServiceDetailsJumperType {
	if o == nil || IsNil(o.JumperType) {
		var ret RunJumperCableRequestServiceDetailsJumperType
		return ret
	}
	return *o.JumperType
}

// GetJumperTypeOk returns a tuple with the JumperType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunJumperCableRequestServiceDetails) GetJumperTypeOk() (*RunJumperCableRequestServiceDetailsJumperType, bool) {
	if o == nil || IsNil(o.JumperType) {
		return nil, false
	}
	return o.JumperType, true
}

// HasJumperType returns a boolean if a field has been set.
func (o *RunJumperCableRequestServiceDetails) HasJumperType() bool {
	if o != nil && !IsNil(o.JumperType) {
		return true
	}

	return false
}

// SetJumperType gets a reference to the given RunJumperCableRequestServiceDetailsJumperType and assigns it to the JumperType field.
func (o *RunJumperCableRequestServiceDetails) SetJumperType(v RunJumperCableRequestServiceDetailsJumperType) {
	o.JumperType = &v
}

// GetMediaType returns the MediaType field value if set, zero value otherwise.
func (o *RunJumperCableRequestServiceDetails) GetMediaType() RunJumperCableRequestServiceDetailsMediaType {
	if o == nil || IsNil(o.MediaType) {
		var ret RunJumperCableRequestServiceDetailsMediaType
		return ret
	}
	return *o.MediaType
}

// GetMediaTypeOk returns a tuple with the MediaType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunJumperCableRequestServiceDetails) GetMediaTypeOk() (*RunJumperCableRequestServiceDetailsMediaType, bool) {
	if o == nil || IsNil(o.MediaType) {
		return nil, false
	}
	return o.MediaType, true
}

// HasMediaType returns a boolean if a field has been set.
func (o *RunJumperCableRequestServiceDetails) HasMediaType() bool {
	if o != nil && !IsNil(o.MediaType) {
		return true
	}

	return false
}

// SetMediaType gets a reference to the given RunJumperCableRequestServiceDetailsMediaType and assigns it to the MediaType field.
func (o *RunJumperCableRequestServiceDetails) SetMediaType(v RunJumperCableRequestServiceDetailsMediaType) {
	o.MediaType = &v
}

// GetConnector returns the Connector field value if set, zero value otherwise.
func (o *RunJumperCableRequestServiceDetails) GetConnector() RunJumperCableRequestServiceDetailsConnector {
	if o == nil || IsNil(o.Connector) {
		var ret RunJumperCableRequestServiceDetailsConnector
		return ret
	}
	return *o.Connector
}

// GetConnectorOk returns a tuple with the Connector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunJumperCableRequestServiceDetails) GetConnectorOk() (*RunJumperCableRequestServiceDetailsConnector, bool) {
	if o == nil || IsNil(o.Connector) {
		return nil, false
	}
	return o.Connector, true
}

// HasConnector returns a boolean if a field has been set.
func (o *RunJumperCableRequestServiceDetails) HasConnector() bool {
	if o != nil && !IsNil(o.Connector) {
		return true
	}

	return false
}

// SetConnector gets a reference to the given RunJumperCableRequestServiceDetailsConnector and assigns it to the Connector field.
func (o *RunJumperCableRequestServiceDetails) SetConnector(v RunJumperCableRequestServiceDetailsConnector) {
	o.Connector = &v
}

// GetCableId returns the CableId field value if set, zero value otherwise.
func (o *RunJumperCableRequestServiceDetails) GetCableId() string {
	if o == nil || IsNil(o.CableId) {
		var ret string
		return ret
	}
	return *o.CableId
}

// GetCableIdOk returns a tuple with the CableId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunJumperCableRequestServiceDetails) GetCableIdOk() (*string, bool) {
	if o == nil || IsNil(o.CableId) {
		return nil, false
	}
	return o.CableId, true
}

// HasCableId returns a boolean if a field has been set.
func (o *RunJumperCableRequestServiceDetails) HasCableId() bool {
	if o != nil && !IsNil(o.CableId) {
		return true
	}

	return false
}

// SetCableId gets a reference to the given string and assigns it to the CableId field.
func (o *RunJumperCableRequestServiceDetails) SetCableId(v string) {
	o.CableId = &v
}

// GetProvideTxRxLightLevels returns the ProvideTxRxLightLevels field value if set, zero value otherwise.
func (o *RunJumperCableRequestServiceDetails) GetProvideTxRxLightLevels() bool {
	if o == nil || IsNil(o.ProvideTxRxLightLevels) {
		var ret bool
		return ret
	}
	return *o.ProvideTxRxLightLevels
}

// GetProvideTxRxLightLevelsOk returns a tuple with the ProvideTxRxLightLevels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunJumperCableRequestServiceDetails) GetProvideTxRxLightLevelsOk() (*bool, bool) {
	if o == nil || IsNil(o.ProvideTxRxLightLevels) {
		return nil, false
	}
	return o.ProvideTxRxLightLevels, true
}

// HasProvideTxRxLightLevels returns a boolean if a field has been set.
func (o *RunJumperCableRequestServiceDetails) HasProvideTxRxLightLevels() bool {
	if o != nil && !IsNil(o.ProvideTxRxLightLevels) {
		return true
	}

	return false
}

// SetProvideTxRxLightLevels gets a reference to the given bool and assigns it to the ProvideTxRxLightLevels field.
func (o *RunJumperCableRequestServiceDetails) SetProvideTxRxLightLevels(v bool) {
	o.ProvideTxRxLightLevels = &v
}

// GetDeviceDetails returns the DeviceDetails field value if set, zero value otherwise.
func (o *RunJumperCableRequestServiceDetails) GetDeviceDetails() []Device {
	if o == nil || IsNil(o.DeviceDetails) {
		var ret []Device
		return ret
	}
	return o.DeviceDetails
}

// GetDeviceDetailsOk returns a tuple with the DeviceDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunJumperCableRequestServiceDetails) GetDeviceDetailsOk() ([]Device, bool) {
	if o == nil || IsNil(o.DeviceDetails) {
		return nil, false
	}
	return o.DeviceDetails, true
}

// HasDeviceDetails returns a boolean if a field has been set.
func (o *RunJumperCableRequestServiceDetails) HasDeviceDetails() bool {
	if o != nil && !IsNil(o.DeviceDetails) {
		return true
	}

	return false
}

// SetDeviceDetails gets a reference to the given []Device and assigns it to the DeviceDetails field.
func (o *RunJumperCableRequestServiceDetails) SetDeviceDetails(v []Device) {
	o.DeviceDetails = v
}

// GetScopeOfWork returns the ScopeOfWork field value
func (o *RunJumperCableRequestServiceDetails) GetScopeOfWork() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ScopeOfWork
}

// GetScopeOfWorkOk returns a tuple with the ScopeOfWork field value
// and a boolean to check if the value has been set.
func (o *RunJumperCableRequestServiceDetails) GetScopeOfWorkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScopeOfWork, true
}

// SetScopeOfWork sets field value
func (o *RunJumperCableRequestServiceDetails) SetScopeOfWork(v string) {
	o.ScopeOfWork = v
}

func (o RunJumperCableRequestServiceDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunJumperCableRequestServiceDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["quantity"] = o.Quantity
	if !IsNil(o.JumperType) {
		toSerialize["jumperType"] = o.JumperType
	}
	if !IsNil(o.MediaType) {
		toSerialize["mediaType"] = o.MediaType
	}
	if !IsNil(o.Connector) {
		toSerialize["connector"] = o.Connector
	}
	if !IsNil(o.CableId) {
		toSerialize["cableId"] = o.CableId
	}
	if !IsNil(o.ProvideTxRxLightLevels) {
		toSerialize["provideTxRxLightLevels"] = o.ProvideTxRxLightLevels
	}
	if !IsNil(o.DeviceDetails) {
		toSerialize["deviceDetails"] = o.DeviceDetails
	}
	toSerialize["scopeOfWork"] = o.ScopeOfWork

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RunJumperCableRequestServiceDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"quantity",
		"scopeOfWork",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRunJumperCableRequestServiceDetails := _RunJumperCableRequestServiceDetails{}

	err = json.Unmarshal(data, &varRunJumperCableRequestServiceDetails)

	if err != nil {
		return err
	}

	*o = RunJumperCableRequestServiceDetails(varRunJumperCableRequestServiceDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "quantity")
		delete(additionalProperties, "jumperType")
		delete(additionalProperties, "mediaType")
		delete(additionalProperties, "connector")
		delete(additionalProperties, "cableId")
		delete(additionalProperties, "provideTxRxLightLevels")
		delete(additionalProperties, "deviceDetails")
		delete(additionalProperties, "scopeOfWork")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRunJumperCableRequestServiceDetails struct {
	value *RunJumperCableRequestServiceDetails
	isSet bool
}

func (v NullableRunJumperCableRequestServiceDetails) Get() *RunJumperCableRequestServiceDetails {
	return v.value
}

func (v *NullableRunJumperCableRequestServiceDetails) Set(val *RunJumperCableRequestServiceDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableRunJumperCableRequestServiceDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableRunJumperCableRequestServiceDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunJumperCableRequestServiceDetails(val *RunJumperCableRequestServiceDetails) *NullableRunJumperCableRequestServiceDetails {
	return &NullableRunJumperCableRequestServiceDetails{value: val, isSet: true}
}

func (v NullableRunJumperCableRequestServiceDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunJumperCableRequestServiceDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
