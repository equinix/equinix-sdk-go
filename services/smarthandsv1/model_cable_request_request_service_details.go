/*
Smart Hands

Request cage assistance, custom installation and equipment troubleshooting.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smarthandsv1

import (
	"encoding/json"
	"fmt"
)

// checks if the CableRequestRequestServiceDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CableRequestRequestServiceDetails{}

// CableRequestRequestServiceDetails Please fill out the Media Type, Connector Type and Length (Specify in cm or ft) for each jumper cable and attach it to the form or complete scope of work text box when 'Quantity' is greater than 1. You may mix jumper types but if you require more than 10 cables, the site will contact you for scheduling of your request based on parts and availability. Please select the best option for your scheduling needs. If 'Quantity' is 1, then below 'Media Type', 'Connector Type' and 'Length (feet/cm)' objects are mandatory.
type CableRequestRequestServiceDetails struct {
	MediaType     *CableRequestRequestServiceDetailsMediaType     `json:"mediaType,omitempty"`
	ConnectorType *CableRequestRequestServiceDetailsConnectorType `json:"connectorType,omitempty"`
	// Length (feet/cm).
	Length   *string                                   `json:"length,omitempty"`
	Quantity CableRequestRequestServiceDetailsQuantity `json:"quantity"`
	// Enter any additional details that will help our technicians execute your request. You may also attach your scope of work as a document if you exceed the character limit in this field.
	ScopeOfWork          string `json:"scopeOfWork"`
	AdditionalProperties map[string]interface{}
}

type _CableRequestRequestServiceDetails CableRequestRequestServiceDetails

// NewCableRequestRequestServiceDetails instantiates a new CableRequestRequestServiceDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCableRequestRequestServiceDetails(quantity CableRequestRequestServiceDetailsQuantity, scopeOfWork string) *CableRequestRequestServiceDetails {
	this := CableRequestRequestServiceDetails{}
	this.Quantity = quantity
	this.ScopeOfWork = scopeOfWork
	return &this
}

// NewCableRequestRequestServiceDetailsWithDefaults instantiates a new CableRequestRequestServiceDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCableRequestRequestServiceDetailsWithDefaults() *CableRequestRequestServiceDetails {
	this := CableRequestRequestServiceDetails{}
	return &this
}

// GetMediaType returns the MediaType field value if set, zero value otherwise.
func (o *CableRequestRequestServiceDetails) GetMediaType() CableRequestRequestServiceDetailsMediaType {
	if o == nil || IsNil(o.MediaType) {
		var ret CableRequestRequestServiceDetailsMediaType
		return ret
	}
	return *o.MediaType
}

// GetMediaTypeOk returns a tuple with the MediaType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CableRequestRequestServiceDetails) GetMediaTypeOk() (*CableRequestRequestServiceDetailsMediaType, bool) {
	if o == nil || IsNil(o.MediaType) {
		return nil, false
	}
	return o.MediaType, true
}

// HasMediaType returns a boolean if a field has been set.
func (o *CableRequestRequestServiceDetails) HasMediaType() bool {
	if o != nil && !IsNil(o.MediaType) {
		return true
	}

	return false
}

// SetMediaType gets a reference to the given CableRequestRequestServiceDetailsMediaType and assigns it to the MediaType field.
func (o *CableRequestRequestServiceDetails) SetMediaType(v CableRequestRequestServiceDetailsMediaType) {
	o.MediaType = &v
}

// GetConnectorType returns the ConnectorType field value if set, zero value otherwise.
func (o *CableRequestRequestServiceDetails) GetConnectorType() CableRequestRequestServiceDetailsConnectorType {
	if o == nil || IsNil(o.ConnectorType) {
		var ret CableRequestRequestServiceDetailsConnectorType
		return ret
	}
	return *o.ConnectorType
}

// GetConnectorTypeOk returns a tuple with the ConnectorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CableRequestRequestServiceDetails) GetConnectorTypeOk() (*CableRequestRequestServiceDetailsConnectorType, bool) {
	if o == nil || IsNil(o.ConnectorType) {
		return nil, false
	}
	return o.ConnectorType, true
}

// HasConnectorType returns a boolean if a field has been set.
func (o *CableRequestRequestServiceDetails) HasConnectorType() bool {
	if o != nil && !IsNil(o.ConnectorType) {
		return true
	}

	return false
}

// SetConnectorType gets a reference to the given CableRequestRequestServiceDetailsConnectorType and assigns it to the ConnectorType field.
func (o *CableRequestRequestServiceDetails) SetConnectorType(v CableRequestRequestServiceDetailsConnectorType) {
	o.ConnectorType = &v
}

// GetLength returns the Length field value if set, zero value otherwise.
func (o *CableRequestRequestServiceDetails) GetLength() string {
	if o == nil || IsNil(o.Length) {
		var ret string
		return ret
	}
	return *o.Length
}

// GetLengthOk returns a tuple with the Length field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CableRequestRequestServiceDetails) GetLengthOk() (*string, bool) {
	if o == nil || IsNil(o.Length) {
		return nil, false
	}
	return o.Length, true
}

// HasLength returns a boolean if a field has been set.
func (o *CableRequestRequestServiceDetails) HasLength() bool {
	if o != nil && !IsNil(o.Length) {
		return true
	}

	return false
}

// SetLength gets a reference to the given string and assigns it to the Length field.
func (o *CableRequestRequestServiceDetails) SetLength(v string) {
	o.Length = &v
}

// GetQuantity returns the Quantity field value
func (o *CableRequestRequestServiceDetails) GetQuantity() CableRequestRequestServiceDetailsQuantity {
	if o == nil {
		var ret CableRequestRequestServiceDetailsQuantity
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *CableRequestRequestServiceDetails) GetQuantityOk() (*CableRequestRequestServiceDetailsQuantity, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *CableRequestRequestServiceDetails) SetQuantity(v CableRequestRequestServiceDetailsQuantity) {
	o.Quantity = v
}

// GetScopeOfWork returns the ScopeOfWork field value
func (o *CableRequestRequestServiceDetails) GetScopeOfWork() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ScopeOfWork
}

// GetScopeOfWorkOk returns a tuple with the ScopeOfWork field value
// and a boolean to check if the value has been set.
func (o *CableRequestRequestServiceDetails) GetScopeOfWorkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScopeOfWork, true
}

// SetScopeOfWork sets field value
func (o *CableRequestRequestServiceDetails) SetScopeOfWork(v string) {
	o.ScopeOfWork = v
}

func (o CableRequestRequestServiceDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CableRequestRequestServiceDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MediaType) {
		toSerialize["mediaType"] = o.MediaType
	}
	if !IsNil(o.ConnectorType) {
		toSerialize["connectorType"] = o.ConnectorType
	}
	if !IsNil(o.Length) {
		toSerialize["length"] = o.Length
	}
	toSerialize["quantity"] = o.Quantity
	toSerialize["scopeOfWork"] = o.ScopeOfWork

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CableRequestRequestServiceDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"quantity",
		"scopeOfWork",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCableRequestRequestServiceDetails := _CableRequestRequestServiceDetails{}

	err = json.Unmarshal(data, &varCableRequestRequestServiceDetails)

	if err != nil {
		return err
	}

	*o = CableRequestRequestServiceDetails(varCableRequestRequestServiceDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "mediaType")
		delete(additionalProperties, "connectorType")
		delete(additionalProperties, "length")
		delete(additionalProperties, "quantity")
		delete(additionalProperties, "scopeOfWork")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCableRequestRequestServiceDetails struct {
	value *CableRequestRequestServiceDetails
	isSet bool
}

func (v NullableCableRequestRequestServiceDetails) Get() *CableRequestRequestServiceDetails {
	return v.value
}

func (v *NullableCableRequestRequestServiceDetails) Set(val *CableRequestRequestServiceDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableCableRequestRequestServiceDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableCableRequestRequestServiceDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCableRequestRequestServiceDetails(val *CableRequestRequestServiceDetails) *NullableCableRequestRequestServiceDetails {
	return &NullableCableRequestRequestServiceDetails{value: val, isSet: true}
}

func (v NullableCableRequestRequestServiceDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCableRequestRequestServiceDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
