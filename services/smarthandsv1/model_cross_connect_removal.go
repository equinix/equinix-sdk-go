/*
Smart Hands

Request cage assistance, custom installation and equipment troubleshooting.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smarthandsv1

import (
	"encoding/json"
	"fmt"
)

// checks if the CrossConnectRemoval type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CrossConnectRemoval{}

// CrossConnectRemoval struct for CrossConnectRemoval
type CrossConnectRemoval struct {
	// Cross Connect serialNumber
	SerialNumber string `json:"serialNumber"`
	// Cross Connect Cabinet
	DeviceCabinet string `json:"deviceCabinet"`
	// Cross Connect Device Connector Type
	DeviceConnectorType string `json:"deviceConnectorType"`
	// Cross Connect Device Details
	DeviceDetails string `json:"deviceDetails"`
	// Cross Connect Device Port
	DevicePort string `json:"devicePort"`
	// Proceed with the de-install if live traffic is detected (Optional). By selecting this option, I agree to the terms of removal with live traffic. Please be advised that Equinix will complete the requested removal based on your instruction and will not be responsible for any service outages resulting from this removal.
	RemovePatchCableWithLiveTraffic *bool `json:"removePatchCableWithLiveTraffic,omitempty"`
	// Scope of work
	ScopeOfWork          *string `json:"scopeOfWork,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CrossConnectRemoval CrossConnectRemoval

// NewCrossConnectRemoval instantiates a new CrossConnectRemoval object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCrossConnectRemoval(serialNumber string, deviceCabinet string, deviceConnectorType string, deviceDetails string, devicePort string) *CrossConnectRemoval {
	this := CrossConnectRemoval{}
	this.SerialNumber = serialNumber
	this.DeviceCabinet = deviceCabinet
	this.DeviceConnectorType = deviceConnectorType
	this.DeviceDetails = deviceDetails
	this.DevicePort = devicePort
	return &this
}

// NewCrossConnectRemovalWithDefaults instantiates a new CrossConnectRemoval object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCrossConnectRemovalWithDefaults() *CrossConnectRemoval {
	this := CrossConnectRemoval{}
	return &this
}

// GetSerialNumber returns the SerialNumber field value
func (o *CrossConnectRemoval) GetSerialNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value
// and a boolean to check if the value has been set.
func (o *CrossConnectRemoval) GetSerialNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SerialNumber, true
}

// SetSerialNumber sets field value
func (o *CrossConnectRemoval) SetSerialNumber(v string) {
	o.SerialNumber = v
}

// GetDeviceCabinet returns the DeviceCabinet field value
func (o *CrossConnectRemoval) GetDeviceCabinet() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeviceCabinet
}

// GetDeviceCabinetOk returns a tuple with the DeviceCabinet field value
// and a boolean to check if the value has been set.
func (o *CrossConnectRemoval) GetDeviceCabinetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceCabinet, true
}

// SetDeviceCabinet sets field value
func (o *CrossConnectRemoval) SetDeviceCabinet(v string) {
	o.DeviceCabinet = v
}

// GetDeviceConnectorType returns the DeviceConnectorType field value
func (o *CrossConnectRemoval) GetDeviceConnectorType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeviceConnectorType
}

// GetDeviceConnectorTypeOk returns a tuple with the DeviceConnectorType field value
// and a boolean to check if the value has been set.
func (o *CrossConnectRemoval) GetDeviceConnectorTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceConnectorType, true
}

// SetDeviceConnectorType sets field value
func (o *CrossConnectRemoval) SetDeviceConnectorType(v string) {
	o.DeviceConnectorType = v
}

// GetDeviceDetails returns the DeviceDetails field value
func (o *CrossConnectRemoval) GetDeviceDetails() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeviceDetails
}

// GetDeviceDetailsOk returns a tuple with the DeviceDetails field value
// and a boolean to check if the value has been set.
func (o *CrossConnectRemoval) GetDeviceDetailsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceDetails, true
}

// SetDeviceDetails sets field value
func (o *CrossConnectRemoval) SetDeviceDetails(v string) {
	o.DeviceDetails = v
}

// GetDevicePort returns the DevicePort field value
func (o *CrossConnectRemoval) GetDevicePort() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DevicePort
}

// GetDevicePortOk returns a tuple with the DevicePort field value
// and a boolean to check if the value has been set.
func (o *CrossConnectRemoval) GetDevicePortOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DevicePort, true
}

// SetDevicePort sets field value
func (o *CrossConnectRemoval) SetDevicePort(v string) {
	o.DevicePort = v
}

// GetRemovePatchCableWithLiveTraffic returns the RemovePatchCableWithLiveTraffic field value if set, zero value otherwise.
func (o *CrossConnectRemoval) GetRemovePatchCableWithLiveTraffic() bool {
	if o == nil || IsNil(o.RemovePatchCableWithLiveTraffic) {
		var ret bool
		return ret
	}
	return *o.RemovePatchCableWithLiveTraffic
}

// GetRemovePatchCableWithLiveTrafficOk returns a tuple with the RemovePatchCableWithLiveTraffic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CrossConnectRemoval) GetRemovePatchCableWithLiveTrafficOk() (*bool, bool) {
	if o == nil || IsNil(o.RemovePatchCableWithLiveTraffic) {
		return nil, false
	}
	return o.RemovePatchCableWithLiveTraffic, true
}

// HasRemovePatchCableWithLiveTraffic returns a boolean if a field has been set.
func (o *CrossConnectRemoval) HasRemovePatchCableWithLiveTraffic() bool {
	if o != nil && !IsNil(o.RemovePatchCableWithLiveTraffic) {
		return true
	}

	return false
}

// SetRemovePatchCableWithLiveTraffic gets a reference to the given bool and assigns it to the RemovePatchCableWithLiveTraffic field.
func (o *CrossConnectRemoval) SetRemovePatchCableWithLiveTraffic(v bool) {
	o.RemovePatchCableWithLiveTraffic = &v
}

// GetScopeOfWork returns the ScopeOfWork field value if set, zero value otherwise.
func (o *CrossConnectRemoval) GetScopeOfWork() string {
	if o == nil || IsNil(o.ScopeOfWork) {
		var ret string
		return ret
	}
	return *o.ScopeOfWork
}

// GetScopeOfWorkOk returns a tuple with the ScopeOfWork field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CrossConnectRemoval) GetScopeOfWorkOk() (*string, bool) {
	if o == nil || IsNil(o.ScopeOfWork) {
		return nil, false
	}
	return o.ScopeOfWork, true
}

// HasScopeOfWork returns a boolean if a field has been set.
func (o *CrossConnectRemoval) HasScopeOfWork() bool {
	if o != nil && !IsNil(o.ScopeOfWork) {
		return true
	}

	return false
}

// SetScopeOfWork gets a reference to the given string and assigns it to the ScopeOfWork field.
func (o *CrossConnectRemoval) SetScopeOfWork(v string) {
	o.ScopeOfWork = &v
}

func (o CrossConnectRemoval) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CrossConnectRemoval) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["serialNumber"] = o.SerialNumber
	toSerialize["deviceCabinet"] = o.DeviceCabinet
	toSerialize["deviceConnectorType"] = o.DeviceConnectorType
	toSerialize["deviceDetails"] = o.DeviceDetails
	toSerialize["devicePort"] = o.DevicePort
	if !IsNil(o.RemovePatchCableWithLiveTraffic) {
		toSerialize["removePatchCableWithLiveTraffic"] = o.RemovePatchCableWithLiveTraffic
	}
	if !IsNil(o.ScopeOfWork) {
		toSerialize["scopeOfWork"] = o.ScopeOfWork
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CrossConnectRemoval) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"serialNumber",
		"deviceCabinet",
		"deviceConnectorType",
		"deviceDetails",
		"devicePort",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCrossConnectRemoval := _CrossConnectRemoval{}

	err = json.Unmarshal(data, &varCrossConnectRemoval)

	if err != nil {
		return err
	}

	*o = CrossConnectRemoval(varCrossConnectRemoval)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "serialNumber")
		delete(additionalProperties, "deviceCabinet")
		delete(additionalProperties, "deviceConnectorType")
		delete(additionalProperties, "deviceDetails")
		delete(additionalProperties, "devicePort")
		delete(additionalProperties, "removePatchCableWithLiveTraffic")
		delete(additionalProperties, "scopeOfWork")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCrossConnectRemoval struct {
	value *CrossConnectRemoval
	isSet bool
}

func (v NullableCrossConnectRemoval) Get() *CrossConnectRemoval {
	return v.value
}

func (v *NullableCrossConnectRemoval) Set(val *CrossConnectRemoval) {
	v.value = val
	v.isSet = true
}

func (v NullableCrossConnectRemoval) IsSet() bool {
	return v.isSet
}

func (v *NullableCrossConnectRemoval) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCrossConnectRemoval(val *CrossConnectRemoval) *NullableCrossConnectRemoval {
	return &NullableCrossConnectRemoval{value: val, isSet: true}
}

func (v NullableCrossConnectRemoval) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCrossConnectRemoval) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
