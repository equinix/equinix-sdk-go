/*
Smart Hands

Request cage assistance, custom installation and equipment troubleshooting.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smarthandsv1

import (
	"encoding/json"
	"fmt"
)

// ContactInfoContactType Contact Type, possible values are ORDERING, NOTIFICATION, TECHNICAL
type ContactInfoContactType string

// List of contactInfo_contactType
const (
	CONTACTINFOCONTACTTYPE_TECHNICAL    ContactInfoContactType = "TECHNICAL"
	CONTACTINFOCONTACTTYPE_ORDERING     ContactInfoContactType = "ORDERING"
	CONTACTINFOCONTACTTYPE_NOTIFICATION ContactInfoContactType = "NOTIFICATION"
)

// All allowed values of ContactInfoContactType enum
var AllowedContactInfoContactTypeEnumValues = []ContactInfoContactType{
	"TECHNICAL",
	"ORDERING",
	"NOTIFICATION",
}

func (v *ContactInfoContactType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ContactInfoContactType(value)
	for _, existing := range AllowedContactInfoContactTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ContactInfoContactType", value)
}

// NewContactInfoContactTypeFromValue returns a pointer to a valid ContactInfoContactType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewContactInfoContactTypeFromValue(v string) (*ContactInfoContactType, error) {
	ev := ContactInfoContactType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ContactInfoContactType: valid values are %v", v, AllowedContactInfoContactTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ContactInfoContactType) IsValid() bool {
	for _, existing := range AllowedContactInfoContactTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to contactInfo_contactType value
func (v ContactInfoContactType) Ptr() *ContactInfoContactType {
	return &v
}

type NullableContactInfoContactType struct {
	value *ContactInfoContactType
	isSet bool
}

func (v NullableContactInfoContactType) Get() *ContactInfoContactType {
	return v.value
}

func (v *NullableContactInfoContactType) Set(val *ContactInfoContactType) {
	v.value = val
	v.isSet = true
}

func (v NullableContactInfoContactType) IsSet() bool {
	return v.isSet
}

func (v *NullableContactInfoContactType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactInfoContactType(val *ContactInfoContactType) *NullableContactInfoContactType {
	return &NullableContactInfoContactType{value: val, isSet: true}
}

func (v NullableContactInfoContactType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactInfoContactType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
