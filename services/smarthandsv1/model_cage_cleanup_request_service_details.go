/*
Smart Hands

Request cage assistance, custom installation and equipment troubleshooting.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smarthandsv1

import (
	"encoding/json"
	"fmt"
)

// checks if the CageCleanupRequestServiceDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CageCleanupRequestServiceDetails{}

// CageCleanupRequestServiceDetails Cage Cleanup
type CageCleanupRequestServiceDetails struct {
	// Permission To Discard Boxes?
	PermissionToDiscardBoxes bool `json:"permissionToDiscardBoxes"`
	// Is Damp Moist Mop Requested?
	DampMoistMopRequired bool `json:"dampMoistMopRequired"`
	// Enter any additional details that will help our technicians execute your request. You may also attach your scope of work as a document if you exceed the character limit in this field.
	ScopeOfWork          string `json:"scopeOfWork"`
	AdditionalProperties map[string]interface{}
}

type _CageCleanupRequestServiceDetails CageCleanupRequestServiceDetails

// NewCageCleanupRequestServiceDetails instantiates a new CageCleanupRequestServiceDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCageCleanupRequestServiceDetails(permissionToDiscardBoxes bool, dampMoistMopRequired bool, scopeOfWork string) *CageCleanupRequestServiceDetails {
	this := CageCleanupRequestServiceDetails{}
	this.PermissionToDiscardBoxes = permissionToDiscardBoxes
	this.DampMoistMopRequired = dampMoistMopRequired
	this.ScopeOfWork = scopeOfWork
	return &this
}

// NewCageCleanupRequestServiceDetailsWithDefaults instantiates a new CageCleanupRequestServiceDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCageCleanupRequestServiceDetailsWithDefaults() *CageCleanupRequestServiceDetails {
	this := CageCleanupRequestServiceDetails{}
	return &this
}

// GetPermissionToDiscardBoxes returns the PermissionToDiscardBoxes field value
func (o *CageCleanupRequestServiceDetails) GetPermissionToDiscardBoxes() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.PermissionToDiscardBoxes
}

// GetPermissionToDiscardBoxesOk returns a tuple with the PermissionToDiscardBoxes field value
// and a boolean to check if the value has been set.
func (o *CageCleanupRequestServiceDetails) GetPermissionToDiscardBoxesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PermissionToDiscardBoxes, true
}

// SetPermissionToDiscardBoxes sets field value
func (o *CageCleanupRequestServiceDetails) SetPermissionToDiscardBoxes(v bool) {
	o.PermissionToDiscardBoxes = v
}

// GetDampMoistMopRequired returns the DampMoistMopRequired field value
func (o *CageCleanupRequestServiceDetails) GetDampMoistMopRequired() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DampMoistMopRequired
}

// GetDampMoistMopRequiredOk returns a tuple with the DampMoistMopRequired field value
// and a boolean to check if the value has been set.
func (o *CageCleanupRequestServiceDetails) GetDampMoistMopRequiredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DampMoistMopRequired, true
}

// SetDampMoistMopRequired sets field value
func (o *CageCleanupRequestServiceDetails) SetDampMoistMopRequired(v bool) {
	o.DampMoistMopRequired = v
}

// GetScopeOfWork returns the ScopeOfWork field value
func (o *CageCleanupRequestServiceDetails) GetScopeOfWork() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ScopeOfWork
}

// GetScopeOfWorkOk returns a tuple with the ScopeOfWork field value
// and a boolean to check if the value has been set.
func (o *CageCleanupRequestServiceDetails) GetScopeOfWorkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScopeOfWork, true
}

// SetScopeOfWork sets field value
func (o *CageCleanupRequestServiceDetails) SetScopeOfWork(v string) {
	o.ScopeOfWork = v
}

func (o CageCleanupRequestServiceDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CageCleanupRequestServiceDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["permissionToDiscardBoxes"] = o.PermissionToDiscardBoxes
	toSerialize["dampMoistMopRequired"] = o.DampMoistMopRequired
	toSerialize["scopeOfWork"] = o.ScopeOfWork

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CageCleanupRequestServiceDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"permissionToDiscardBoxes",
		"dampMoistMopRequired",
		"scopeOfWork",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCageCleanupRequestServiceDetails := _CageCleanupRequestServiceDetails{}

	err = json.Unmarshal(data, &varCageCleanupRequestServiceDetails)

	if err != nil {
		return err
	}

	*o = CageCleanupRequestServiceDetails(varCageCleanupRequestServiceDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "permissionToDiscardBoxes")
		delete(additionalProperties, "dampMoistMopRequired")
		delete(additionalProperties, "scopeOfWork")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCageCleanupRequestServiceDetails struct {
	value *CageCleanupRequestServiceDetails
	isSet bool
}

func (v NullableCageCleanupRequestServiceDetails) Get() *CageCleanupRequestServiceDetails {
	return v.value
}

func (v *NullableCageCleanupRequestServiceDetails) Set(val *CageCleanupRequestServiceDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableCageCleanupRequestServiceDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableCageCleanupRequestServiceDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCageCleanupRequestServiceDetails(val *CageCleanupRequestServiceDetails) *NullableCageCleanupRequestServiceDetails {
	return &NullableCageCleanupRequestServiceDetails{value: val, isSet: true}
}

func (v NullableCageCleanupRequestServiceDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCageCleanupRequestServiceDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
