/*
Smart Hands

Request cage assistance, custom installation and equipment troubleshooting.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smarthandsv1

import (
	"encoding/json"
	"fmt"
)

// checks if the PicturesDocumentRequestServiceDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PicturesDocumentRequestServiceDetails{}

// PicturesDocumentRequestServiceDetails struct for PicturesDocumentRequestServiceDetails
type PicturesDocumentRequestServiceDetails struct {
	CameraProvidedBy *PicturesDocumentRequestServiceDetailsCameraProvidedBy `json:"cameraProvidedBy,omitempty"`
	// Would you like to request a specific date and time? If true, Scheduling should not be STANDARD. If documentOnly is false, this field is mandatory.
	SpecificDateAndTime *bool `json:"specificDateAndTime,omitempty"`
	// Do you need documents or pictures? Set true if you need documents.
	DocumentOnly bool `json:"documentOnly"`
	// Descrption of the Photo/Document. If documentOnly is false, this field is mandatory.
	Description *string `json:"description,omitempty"`
	// Enter any additional details that will help our technicians execute your request. You may also attach your scope of work as a document if you exceed the character limit in this field.
	ScopeOfWork          string `json:"scopeOfWork"`
	AdditionalProperties map[string]interface{}
}

type _PicturesDocumentRequestServiceDetails PicturesDocumentRequestServiceDetails

// NewPicturesDocumentRequestServiceDetails instantiates a new PicturesDocumentRequestServiceDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPicturesDocumentRequestServiceDetails(documentOnly bool, scopeOfWork string) *PicturesDocumentRequestServiceDetails {
	this := PicturesDocumentRequestServiceDetails{}
	this.DocumentOnly = documentOnly
	this.ScopeOfWork = scopeOfWork
	return &this
}

// NewPicturesDocumentRequestServiceDetailsWithDefaults instantiates a new PicturesDocumentRequestServiceDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPicturesDocumentRequestServiceDetailsWithDefaults() *PicturesDocumentRequestServiceDetails {
	this := PicturesDocumentRequestServiceDetails{}
	return &this
}

// GetCameraProvidedBy returns the CameraProvidedBy field value if set, zero value otherwise.
func (o *PicturesDocumentRequestServiceDetails) GetCameraProvidedBy() PicturesDocumentRequestServiceDetailsCameraProvidedBy {
	if o == nil || IsNil(o.CameraProvidedBy) {
		var ret PicturesDocumentRequestServiceDetailsCameraProvidedBy
		return ret
	}
	return *o.CameraProvidedBy
}

// GetCameraProvidedByOk returns a tuple with the CameraProvidedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PicturesDocumentRequestServiceDetails) GetCameraProvidedByOk() (*PicturesDocumentRequestServiceDetailsCameraProvidedBy, bool) {
	if o == nil || IsNil(o.CameraProvidedBy) {
		return nil, false
	}
	return o.CameraProvidedBy, true
}

// HasCameraProvidedBy returns a boolean if a field has been set.
func (o *PicturesDocumentRequestServiceDetails) HasCameraProvidedBy() bool {
	if o != nil && !IsNil(o.CameraProvidedBy) {
		return true
	}

	return false
}

// SetCameraProvidedBy gets a reference to the given PicturesDocumentRequestServiceDetailsCameraProvidedBy and assigns it to the CameraProvidedBy field.
func (o *PicturesDocumentRequestServiceDetails) SetCameraProvidedBy(v PicturesDocumentRequestServiceDetailsCameraProvidedBy) {
	o.CameraProvidedBy = &v
}

// GetSpecificDateAndTime returns the SpecificDateAndTime field value if set, zero value otherwise.
func (o *PicturesDocumentRequestServiceDetails) GetSpecificDateAndTime() bool {
	if o == nil || IsNil(o.SpecificDateAndTime) {
		var ret bool
		return ret
	}
	return *o.SpecificDateAndTime
}

// GetSpecificDateAndTimeOk returns a tuple with the SpecificDateAndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PicturesDocumentRequestServiceDetails) GetSpecificDateAndTimeOk() (*bool, bool) {
	if o == nil || IsNil(o.SpecificDateAndTime) {
		return nil, false
	}
	return o.SpecificDateAndTime, true
}

// HasSpecificDateAndTime returns a boolean if a field has been set.
func (o *PicturesDocumentRequestServiceDetails) HasSpecificDateAndTime() bool {
	if o != nil && !IsNil(o.SpecificDateAndTime) {
		return true
	}

	return false
}

// SetSpecificDateAndTime gets a reference to the given bool and assigns it to the SpecificDateAndTime field.
func (o *PicturesDocumentRequestServiceDetails) SetSpecificDateAndTime(v bool) {
	o.SpecificDateAndTime = &v
}

// GetDocumentOnly returns the DocumentOnly field value
func (o *PicturesDocumentRequestServiceDetails) GetDocumentOnly() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DocumentOnly
}

// GetDocumentOnlyOk returns a tuple with the DocumentOnly field value
// and a boolean to check if the value has been set.
func (o *PicturesDocumentRequestServiceDetails) GetDocumentOnlyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DocumentOnly, true
}

// SetDocumentOnly sets field value
func (o *PicturesDocumentRequestServiceDetails) SetDocumentOnly(v bool) {
	o.DocumentOnly = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PicturesDocumentRequestServiceDetails) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PicturesDocumentRequestServiceDetails) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PicturesDocumentRequestServiceDetails) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PicturesDocumentRequestServiceDetails) SetDescription(v string) {
	o.Description = &v
}

// GetScopeOfWork returns the ScopeOfWork field value
func (o *PicturesDocumentRequestServiceDetails) GetScopeOfWork() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ScopeOfWork
}

// GetScopeOfWorkOk returns a tuple with the ScopeOfWork field value
// and a boolean to check if the value has been set.
func (o *PicturesDocumentRequestServiceDetails) GetScopeOfWorkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScopeOfWork, true
}

// SetScopeOfWork sets field value
func (o *PicturesDocumentRequestServiceDetails) SetScopeOfWork(v string) {
	o.ScopeOfWork = v
}

func (o PicturesDocumentRequestServiceDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PicturesDocumentRequestServiceDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CameraProvidedBy) {
		toSerialize["cameraProvidedBy"] = o.CameraProvidedBy
	}
	if !IsNil(o.SpecificDateAndTime) {
		toSerialize["specificDateAndTime"] = o.SpecificDateAndTime
	}
	toSerialize["documentOnly"] = o.DocumentOnly
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["scopeOfWork"] = o.ScopeOfWork

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PicturesDocumentRequestServiceDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"documentOnly",
		"scopeOfWork",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPicturesDocumentRequestServiceDetails := _PicturesDocumentRequestServiceDetails{}

	err = json.Unmarshal(data, &varPicturesDocumentRequestServiceDetails)

	if err != nil {
		return err
	}

	*o = PicturesDocumentRequestServiceDetails(varPicturesDocumentRequestServiceDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cameraProvidedBy")
		delete(additionalProperties, "specificDateAndTime")
		delete(additionalProperties, "documentOnly")
		delete(additionalProperties, "description")
		delete(additionalProperties, "scopeOfWork")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePicturesDocumentRequestServiceDetails struct {
	value *PicturesDocumentRequestServiceDetails
	isSet bool
}

func (v NullablePicturesDocumentRequestServiceDetails) Get() *PicturesDocumentRequestServiceDetails {
	return v.value
}

func (v *NullablePicturesDocumentRequestServiceDetails) Set(val *PicturesDocumentRequestServiceDetails) {
	v.value = val
	v.isSet = true
}

func (v NullablePicturesDocumentRequestServiceDetails) IsSet() bool {
	return v.isSet
}

func (v *NullablePicturesDocumentRequestServiceDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePicturesDocumentRequestServiceDetails(val *PicturesDocumentRequestServiceDetails) *NullablePicturesDocumentRequestServiceDetails {
	return &NullablePicturesDocumentRequestServiceDetails{value: val, isSet: true}
}

func (v NullablePicturesDocumentRequestServiceDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePicturesDocumentRequestServiceDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
