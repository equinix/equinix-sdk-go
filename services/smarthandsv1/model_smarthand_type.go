/*
Smart Hands

Request cage assistance, custom installation and equipment troubleshooting.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smarthandsv1

import (
	"encoding/json"
	"fmt"
)

// checks if the SmarthandType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmarthandType{}

// SmarthandType struct for SmarthandType
type SmarthandType struct {
	Type SmarthandTypeType `json:"type"`
	// Description of Smarthand Type
	TypeDescription      string `json:"typeDescription"`
	AdditionalProperties map[string]interface{}
}

type _SmarthandType SmarthandType

// NewSmarthandType instantiates a new SmarthandType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmarthandType(type_ SmarthandTypeType, typeDescription string) *SmarthandType {
	this := SmarthandType{}
	this.Type = type_
	this.TypeDescription = typeDescription
	return &this
}

// NewSmarthandTypeWithDefaults instantiates a new SmarthandType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmarthandTypeWithDefaults() *SmarthandType {
	this := SmarthandType{}
	return &this
}

// GetType returns the Type field value
func (o *SmarthandType) GetType() SmarthandTypeType {
	if o == nil {
		var ret SmarthandTypeType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SmarthandType) GetTypeOk() (*SmarthandTypeType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SmarthandType) SetType(v SmarthandTypeType) {
	o.Type = v
}

// GetTypeDescription returns the TypeDescription field value
func (o *SmarthandType) GetTypeDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TypeDescription
}

// GetTypeDescriptionOk returns a tuple with the TypeDescription field value
// and a boolean to check if the value has been set.
func (o *SmarthandType) GetTypeDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TypeDescription, true
}

// SetTypeDescription sets field value
func (o *SmarthandType) SetTypeDescription(v string) {
	o.TypeDescription = v
}

func (o SmarthandType) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmarthandType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["typeDescription"] = o.TypeDescription

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SmarthandType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"typeDescription",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSmarthandType := _SmarthandType{}

	err = json.Unmarshal(data, &varSmarthandType)

	if err != nil {
		return err
	}

	*o = SmarthandType(varSmarthandType)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "typeDescription")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSmarthandType struct {
	value *SmarthandType
	isSet bool
}

func (v NullableSmarthandType) Get() *SmarthandType {
	return v.value
}

func (v *NullableSmarthandType) Set(val *SmarthandType) {
	v.value = val
	v.isSet = true
}

func (v NullableSmarthandType) IsSet() bool {
	return v.isSet
}

func (v *NullableSmarthandType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmarthandType(val *SmarthandType) *NullableSmarthandType {
	return &NullableSmarthandType{value: val, isSet: true}
}

func (v NullableSmarthandType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmarthandType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
