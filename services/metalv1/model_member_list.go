/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the MemberList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MemberList{}

// MemberList struct for MemberList
type MemberList struct {
	Members              []Member `json:"members,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MemberList MemberList

// NewMemberList instantiates a new MemberList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemberList() *MemberList {
	this := MemberList{}
	return &this
}

// NewMemberListWithDefaults instantiates a new MemberList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberListWithDefaults() *MemberList {
	this := MemberList{}
	return &this
}

// GetMembers returns the Members field value if set, zero value otherwise.
func (o *MemberList) GetMembers() []Member {
	if o == nil || IsNil(o.Members) {
		var ret []Member
		return ret
	}
	return o.Members
}

// GetMembersOk returns a tuple with the Members field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberList) GetMembersOk() ([]Member, bool) {
	if o == nil || IsNil(o.Members) {
		return nil, false
	}
	return o.Members, true
}

// HasMembers returns a boolean if a field has been set.
func (o *MemberList) HasMembers() bool {
	if o != nil && !IsNil(o.Members) {
		return true
	}

	return false
}

// SetMembers gets a reference to the given []Member and assigns it to the Members field.
func (o *MemberList) SetMembers(v []Member) {
	o.Members = v
}

func (o MemberList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MemberList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Members) {
		toSerialize["members"] = o.Members
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MemberList) UnmarshalJSON(data []byte) (err error) {
	varMemberList := _MemberList{}

	err = json.Unmarshal(data, &varMemberList)

	if err != nil {
		return err
	}

	*o = MemberList(varMemberList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "members")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMemberList struct {
	value *MemberList
	isSet bool
}

func (v NullableMemberList) Get() *MemberList {
	return v.value
}

func (v *NullableMemberList) Set(val *MemberList) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberList) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberList(val *MemberList) *NullableMemberList {
	return &NullableMemberList{value: val, isSet: true}
}

func (v NullableMemberList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
