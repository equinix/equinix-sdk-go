/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the Member type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Member{}

// Member struct for Member
type Member struct {
	Id                   *string                `json:"id,omitempty"`
	Roles                []InvitationRolesInner `json:"roles,omitempty"`
	ProjectsCount        *int32                 `json:"projects_count,omitempty"`
	BoundRoles           []string               `json:"bound_roles,omitempty"`
	User                 *Href                  `json:"user,omitempty"`
	Organization         *Href                  `json:"organization,omitempty"`
	Projects             []Href                 `json:"projects,omitempty"`
	Href                 *string                `json:"href,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Member Member

// NewMember instantiates a new Member object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMember() *Member {
	this := Member{}
	return &this
}

// NewMemberWithDefaults instantiates a new Member object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberWithDefaults() *Member {
	this := Member{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Member) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Member) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Member) SetId(v string) {
	o.Id = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *Member) GetRoles() []InvitationRolesInner {
	if o == nil || IsNil(o.Roles) {
		var ret []InvitationRolesInner
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetRolesOk() ([]InvitationRolesInner, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *Member) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []InvitationRolesInner and assigns it to the Roles field.
func (o *Member) SetRoles(v []InvitationRolesInner) {
	o.Roles = v
}

// GetProjectsCount returns the ProjectsCount field value if set, zero value otherwise.
func (o *Member) GetProjectsCount() int32 {
	if o == nil || IsNil(o.ProjectsCount) {
		var ret int32
		return ret
	}
	return *o.ProjectsCount
}

// GetProjectsCountOk returns a tuple with the ProjectsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetProjectsCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ProjectsCount) {
		return nil, false
	}
	return o.ProjectsCount, true
}

// HasProjectsCount returns a boolean if a field has been set.
func (o *Member) HasProjectsCount() bool {
	if o != nil && !IsNil(o.ProjectsCount) {
		return true
	}

	return false
}

// SetProjectsCount gets a reference to the given int32 and assigns it to the ProjectsCount field.
func (o *Member) SetProjectsCount(v int32) {
	o.ProjectsCount = &v
}

// GetBoundRoles returns the BoundRoles field value if set, zero value otherwise.
func (o *Member) GetBoundRoles() []string {
	if o == nil || IsNil(o.BoundRoles) {
		var ret []string
		return ret
	}
	return o.BoundRoles
}

// GetBoundRolesOk returns a tuple with the BoundRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetBoundRolesOk() ([]string, bool) {
	if o == nil || IsNil(o.BoundRoles) {
		return nil, false
	}
	return o.BoundRoles, true
}

// HasBoundRoles returns a boolean if a field has been set.
func (o *Member) HasBoundRoles() bool {
	if o != nil && !IsNil(o.BoundRoles) {
		return true
	}

	return false
}

// SetBoundRoles gets a reference to the given []string and assigns it to the BoundRoles field.
func (o *Member) SetBoundRoles(v []string) {
	o.BoundRoles = v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *Member) GetUser() Href {
	if o == nil || IsNil(o.User) {
		var ret Href
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetUserOk() (*Href, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *Member) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given Href and assigns it to the User field.
func (o *Member) SetUser(v Href) {
	o.User = &v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *Member) GetOrganization() Href {
	if o == nil || IsNil(o.Organization) {
		var ret Href
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetOrganizationOk() (*Href, bool) {
	if o == nil || IsNil(o.Organization) {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *Member) HasOrganization() bool {
	if o != nil && !IsNil(o.Organization) {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given Href and assigns it to the Organization field.
func (o *Member) SetOrganization(v Href) {
	o.Organization = &v
}

// GetProjects returns the Projects field value if set, zero value otherwise.
func (o *Member) GetProjects() []Href {
	if o == nil || IsNil(o.Projects) {
		var ret []Href
		return ret
	}
	return o.Projects
}

// GetProjectsOk returns a tuple with the Projects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetProjectsOk() ([]Href, bool) {
	if o == nil || IsNil(o.Projects) {
		return nil, false
	}
	return o.Projects, true
}

// HasProjects returns a boolean if a field has been set.
func (o *Member) HasProjects() bool {
	if o != nil && !IsNil(o.Projects) {
		return true
	}

	return false
}

// SetProjects gets a reference to the given []Href and assigns it to the Projects field.
func (o *Member) SetProjects(v []Href) {
	o.Projects = v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *Member) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *Member) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *Member) SetHref(v string) {
	o.Href = &v
}

func (o Member) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Member) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	if !IsNil(o.ProjectsCount) {
		toSerialize["projects_count"] = o.ProjectsCount
	}
	if !IsNil(o.BoundRoles) {
		toSerialize["bound_roles"] = o.BoundRoles
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.Organization) {
		toSerialize["organization"] = o.Organization
	}
	if !IsNil(o.Projects) {
		toSerialize["projects"] = o.Projects
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Member) UnmarshalJSON(data []byte) (err error) {
	varMember := _Member{}

	err = json.Unmarshal(data, &varMember)

	if err != nil {
		return err
	}

	*o = Member(varMember)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "roles")
		delete(additionalProperties, "projects_count")
		delete(additionalProperties, "bound_roles")
		delete(additionalProperties, "user")
		delete(additionalProperties, "organization")
		delete(additionalProperties, "projects")
		delete(additionalProperties, "href")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMember struct {
	value *Member
	isSet bool
}

func (v NullableMember) Get() *Member {
	return v.value
}

func (v *NullableMember) Set(val *Member) {
	v.value = val
	v.isSet = true
}

func (v NullableMember) IsSet() bool {
	return v.isSet
}

func (v *NullableMember) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMember(val *Member) *NullableMember {
	return &NullableMember{value: val, isSet: true}
}

func (v NullableMember) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMember) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
