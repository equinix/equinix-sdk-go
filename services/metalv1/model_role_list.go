/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the RoleList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoleList{}

// RoleList struct for RoleList
type RoleList struct {
	Roles                map[string]interface{} `json:"roles,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RoleList RoleList

// NewRoleList instantiates a new RoleList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleList() *RoleList {
	this := RoleList{}
	return &this
}

// NewRoleListWithDefaults instantiates a new RoleList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleListWithDefaults() *RoleList {
	this := RoleList{}
	return &this
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *RoleList) GetRoles() map[string]interface{} {
	if o == nil || IsNil(o.Roles) {
		var ret map[string]interface{}
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleList) GetRolesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Roles) {
		return map[string]interface{}{}, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *RoleList) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given map[string]interface{} and assigns it to the Roles field.
func (o *RoleList) SetRoles(v map[string]interface{}) {
	o.Roles = v
}

func (o RoleList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoleList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RoleList) UnmarshalJSON(data []byte) (err error) {
	varRoleList := _RoleList{}

	err = json.Unmarshal(data, &varRoleList)

	if err != nil {
		return err
	}

	*o = RoleList(varRoleList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "roles")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRoleList struct {
	value *RoleList
	isSet bool
}

func (v NullableRoleList) Get() *RoleList {
	return v.value
}

func (v *NullableRoleList) Set(val *RoleList) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleList) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleList(val *RoleList) *NullableRoleList {
	return &NullableRoleList{value: val, isSet: true}
}

func (v NullableRoleList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
