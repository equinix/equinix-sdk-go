/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the MemberUpdateInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MemberUpdateInput{}

// MemberUpdateInput struct for MemberUpdateInput
type MemberUpdateInput struct {
	// Primary role for the user within the organization
	Role []InvitationRolesInner `json:"role,omitempty"`
	// Additional roles that can be bound to the user to grant extra permissions.
	BoundRoles []string `json:"bound_roles,omitempty"`
	// Project IDs the user should be able to access. This field is only required when role is set to `collaborator` or `limited_collaborator`.
	ProjectIds           []string `json:"project_ids,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MemberUpdateInput MemberUpdateInput

// NewMemberUpdateInput instantiates a new MemberUpdateInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemberUpdateInput() *MemberUpdateInput {
	this := MemberUpdateInput{}
	return &this
}

// NewMemberUpdateInputWithDefaults instantiates a new MemberUpdateInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberUpdateInputWithDefaults() *MemberUpdateInput {
	this := MemberUpdateInput{}
	return &this
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *MemberUpdateInput) GetRole() []InvitationRolesInner {
	if o == nil || IsNil(o.Role) {
		var ret []InvitationRolesInner
		return ret
	}
	return o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberUpdateInput) GetRoleOk() ([]InvitationRolesInner, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *MemberUpdateInput) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given []InvitationRolesInner and assigns it to the Role field.
func (o *MemberUpdateInput) SetRole(v []InvitationRolesInner) {
	o.Role = v
}

// GetBoundRoles returns the BoundRoles field value if set, zero value otherwise.
func (o *MemberUpdateInput) GetBoundRoles() []string {
	if o == nil || IsNil(o.BoundRoles) {
		var ret []string
		return ret
	}
	return o.BoundRoles
}

// GetBoundRolesOk returns a tuple with the BoundRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberUpdateInput) GetBoundRolesOk() ([]string, bool) {
	if o == nil || IsNil(o.BoundRoles) {
		return nil, false
	}
	return o.BoundRoles, true
}

// HasBoundRoles returns a boolean if a field has been set.
func (o *MemberUpdateInput) HasBoundRoles() bool {
	if o != nil && !IsNil(o.BoundRoles) {
		return true
	}

	return false
}

// SetBoundRoles gets a reference to the given []string and assigns it to the BoundRoles field.
func (o *MemberUpdateInput) SetBoundRoles(v []string) {
	o.BoundRoles = v
}

// GetProjectIds returns the ProjectIds field value if set, zero value otherwise.
func (o *MemberUpdateInput) GetProjectIds() []string {
	if o == nil || IsNil(o.ProjectIds) {
		var ret []string
		return ret
	}
	return o.ProjectIds
}

// GetProjectIdsOk returns a tuple with the ProjectIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberUpdateInput) GetProjectIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ProjectIds) {
		return nil, false
	}
	return o.ProjectIds, true
}

// HasProjectIds returns a boolean if a field has been set.
func (o *MemberUpdateInput) HasProjectIds() bool {
	if o != nil && !IsNil(o.ProjectIds) {
		return true
	}

	return false
}

// SetProjectIds gets a reference to the given []string and assigns it to the ProjectIds field.
func (o *MemberUpdateInput) SetProjectIds(v []string) {
	o.ProjectIds = v
}

func (o MemberUpdateInput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MemberUpdateInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.BoundRoles) {
		toSerialize["bound_roles"] = o.BoundRoles
	}
	if !IsNil(o.ProjectIds) {
		toSerialize["project_ids"] = o.ProjectIds
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MemberUpdateInput) UnmarshalJSON(data []byte) (err error) {
	varMemberUpdateInput := _MemberUpdateInput{}

	err = json.Unmarshal(data, &varMemberUpdateInput)

	if err != nil {
		return err
	}

	*o = MemberUpdateInput(varMemberUpdateInput)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "role")
		delete(additionalProperties, "bound_roles")
		delete(additionalProperties, "project_ids")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMemberUpdateInput struct {
	value *MemberUpdateInput
	isSet bool
}

func (v NullableMemberUpdateInput) Get() *MemberUpdateInput {
	return v.value
}

func (v *NullableMemberUpdateInput) Set(val *MemberUpdateInput) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberUpdateInput) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberUpdateInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberUpdateInput(val *MemberUpdateInput) *NullableMemberUpdateInput {
	return &NullableMemberUpdateInput{value: val, isSet: true}
}

func (v NullableMemberUpdateInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberUpdateInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
