/*
Secure Cabinet API

Secure Cabinet API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package securecabinetv1

import (
	"encoding/json"
	"fmt"
)

// checks if the OrderItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderItem{}

// OrderItem Order details.
type OrderItem struct {
	// Maximum, combined power draw of all cabinets in your order, measured in kVA. Applicable values, in 0.5 increments, depend on the IBX data center.
	DrawCapacity float64 `json:"drawCapacity"`
	// Indicates if a single, primary Fabric port should be included and delivered to one of the ordered cabinets.
	FabricPort bool `json:"fabricPort"`
	// The number of ordered cabinets.
	NumberOfCabinets  int32      `json:"numberOfCabinets"`
	CabinetDimensions Dimensions `json:"cabinetDimensions"`
	// Indicates if an Equinix-recommended set of two PDUs, for single-phase circuit, per cabinet should be installed.
	Pdus                 bool `json:"pdus"`
	AdditionalProperties map[string]interface{}
}

type _OrderItem OrderItem

// NewOrderItem instantiates a new OrderItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderItem(drawCapacity float64, fabricPort bool, numberOfCabinets int32, cabinetDimensions Dimensions, pdus bool) *OrderItem {
	this := OrderItem{}
	this.DrawCapacity = drawCapacity
	this.FabricPort = fabricPort
	this.NumberOfCabinets = numberOfCabinets
	this.CabinetDimensions = cabinetDimensions
	this.Pdus = pdus
	return &this
}

// NewOrderItemWithDefaults instantiates a new OrderItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderItemWithDefaults() *OrderItem {
	this := OrderItem{}
	return &this
}

// GetDrawCapacity returns the DrawCapacity field value
func (o *OrderItem) GetDrawCapacity() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.DrawCapacity
}

// GetDrawCapacityOk returns a tuple with the DrawCapacity field value
// and a boolean to check if the value has been set.
func (o *OrderItem) GetDrawCapacityOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DrawCapacity, true
}

// SetDrawCapacity sets field value
func (o *OrderItem) SetDrawCapacity(v float64) {
	o.DrawCapacity = v
}

// GetFabricPort returns the FabricPort field value
func (o *OrderItem) GetFabricPort() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.FabricPort
}

// GetFabricPortOk returns a tuple with the FabricPort field value
// and a boolean to check if the value has been set.
func (o *OrderItem) GetFabricPortOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FabricPort, true
}

// SetFabricPort sets field value
func (o *OrderItem) SetFabricPort(v bool) {
	o.FabricPort = v
}

// GetNumberOfCabinets returns the NumberOfCabinets field value
func (o *OrderItem) GetNumberOfCabinets() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumberOfCabinets
}

// GetNumberOfCabinetsOk returns a tuple with the NumberOfCabinets field value
// and a boolean to check if the value has been set.
func (o *OrderItem) GetNumberOfCabinetsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumberOfCabinets, true
}

// SetNumberOfCabinets sets field value
func (o *OrderItem) SetNumberOfCabinets(v int32) {
	o.NumberOfCabinets = v
}

// GetCabinetDimensions returns the CabinetDimensions field value
func (o *OrderItem) GetCabinetDimensions() Dimensions {
	if o == nil {
		var ret Dimensions
		return ret
	}

	return o.CabinetDimensions
}

// GetCabinetDimensionsOk returns a tuple with the CabinetDimensions field value
// and a boolean to check if the value has been set.
func (o *OrderItem) GetCabinetDimensionsOk() (*Dimensions, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CabinetDimensions, true
}

// SetCabinetDimensions sets field value
func (o *OrderItem) SetCabinetDimensions(v Dimensions) {
	o.CabinetDimensions = v
}

// GetPdus returns the Pdus field value
func (o *OrderItem) GetPdus() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Pdus
}

// GetPdusOk returns a tuple with the Pdus field value
// and a boolean to check if the value has been set.
func (o *OrderItem) GetPdusOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pdus, true
}

// SetPdus sets field value
func (o *OrderItem) SetPdus(v bool) {
	o.Pdus = v
}

func (o OrderItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["drawCapacity"] = o.DrawCapacity
	toSerialize["fabricPort"] = o.FabricPort
	toSerialize["numberOfCabinets"] = o.NumberOfCabinets
	toSerialize["cabinetDimensions"] = o.CabinetDimensions
	toSerialize["pdus"] = o.Pdus

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OrderItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"drawCapacity",
		"fabricPort",
		"numberOfCabinets",
		"cabinetDimensions",
		"pdus",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrderItem := _OrderItem{}

	err = json.Unmarshal(data, &varOrderItem)

	if err != nil {
		return err
	}

	*o = OrderItem(varOrderItem)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "drawCapacity")
		delete(additionalProperties, "fabricPort")
		delete(additionalProperties, "numberOfCabinets")
		delete(additionalProperties, "cabinetDimensions")
		delete(additionalProperties, "pdus")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOrderItem struct {
	value *OrderItem
	isSet bool
}

func (v NullableOrderItem) Get() *OrderItem {
	return v.value
}

func (v *NullableOrderItem) Set(val *OrderItem) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderItem) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderItem(val *OrderItem) *NullableOrderItem {
	return &NullableOrderItem{value: val, isSet: true}
}

func (v NullableOrderItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
