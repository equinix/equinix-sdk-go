/*
Secure Cabinet API

Secure Cabinet API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package securecabinetv1

import (
	"encoding/json"
	"fmt"
)

// checks if the ProductsAvailability type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductsAvailability{}

// ProductsAvailability Information about availability of products in one ibx. Missing pdu configuration means that we don't offer pdu there. Missing fabric port speed means that fabric port is not available there.
type ProductsAvailability struct {
	// IBX data center identifier.
	Ibx string `json:"ibx" validate:"regexp=^[A-Z]{2}[0-9]+x?$"`
	// Maximum number of cabinets that can be ordered in one order in this ibx.
	MaximumNumberOfCabinetsToOrder int32 `json:"maximumNumberOfCabinetsToOrder"`
	// The minimum power draw capacity per ordered cabinet.
	MinimumDrawCapacityPerCabinet float64 `json:"minimumDrawCapacityPerCabinet"`
	// The maximum power draw capacity per ordered cabinet.
	MaximumDrawCapacityPerCabinet float64          `json:"maximumDrawCapacityPerCabinet"`
	CabinetDimensions             Dimensions       `json:"cabinetDimensions"`
	AcCircuitConfiguration        AcCircuitConfig  `json:"acCircuitConfiguration"`
	PduConfiguration              *PduConfig       `json:"pduConfiguration,omitempty"`
	FabricPortSpeed               *FabricPortSpeed `json:"fabricPortSpeed,omitempty"`
	AdditionalProperties          map[string]interface{}
}

type _ProductsAvailability ProductsAvailability

// NewProductsAvailability instantiates a new ProductsAvailability object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductsAvailability(ibx string, maximumNumberOfCabinetsToOrder int32, minimumDrawCapacityPerCabinet float64, maximumDrawCapacityPerCabinet float64, cabinetDimensions Dimensions, acCircuitConfiguration AcCircuitConfig) *ProductsAvailability {
	this := ProductsAvailability{}
	this.Ibx = ibx
	this.MaximumNumberOfCabinetsToOrder = maximumNumberOfCabinetsToOrder
	this.MinimumDrawCapacityPerCabinet = minimumDrawCapacityPerCabinet
	this.MaximumDrawCapacityPerCabinet = maximumDrawCapacityPerCabinet
	this.CabinetDimensions = cabinetDimensions
	this.AcCircuitConfiguration = acCircuitConfiguration
	return &this
}

// NewProductsAvailabilityWithDefaults instantiates a new ProductsAvailability object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductsAvailabilityWithDefaults() *ProductsAvailability {
	this := ProductsAvailability{}
	return &this
}

// GetIbx returns the Ibx field value
func (o *ProductsAvailability) GetIbx() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ibx
}

// GetIbxOk returns a tuple with the Ibx field value
// and a boolean to check if the value has been set.
func (o *ProductsAvailability) GetIbxOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ibx, true
}

// SetIbx sets field value
func (o *ProductsAvailability) SetIbx(v string) {
	o.Ibx = v
}

// GetMaximumNumberOfCabinetsToOrder returns the MaximumNumberOfCabinetsToOrder field value
func (o *ProductsAvailability) GetMaximumNumberOfCabinetsToOrder() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaximumNumberOfCabinetsToOrder
}

// GetMaximumNumberOfCabinetsToOrderOk returns a tuple with the MaximumNumberOfCabinetsToOrder field value
// and a boolean to check if the value has been set.
func (o *ProductsAvailability) GetMaximumNumberOfCabinetsToOrderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaximumNumberOfCabinetsToOrder, true
}

// SetMaximumNumberOfCabinetsToOrder sets field value
func (o *ProductsAvailability) SetMaximumNumberOfCabinetsToOrder(v int32) {
	o.MaximumNumberOfCabinetsToOrder = v
}

// GetMinimumDrawCapacityPerCabinet returns the MinimumDrawCapacityPerCabinet field value
func (o *ProductsAvailability) GetMinimumDrawCapacityPerCabinet() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.MinimumDrawCapacityPerCabinet
}

// GetMinimumDrawCapacityPerCabinetOk returns a tuple with the MinimumDrawCapacityPerCabinet field value
// and a boolean to check if the value has been set.
func (o *ProductsAvailability) GetMinimumDrawCapacityPerCabinetOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinimumDrawCapacityPerCabinet, true
}

// SetMinimumDrawCapacityPerCabinet sets field value
func (o *ProductsAvailability) SetMinimumDrawCapacityPerCabinet(v float64) {
	o.MinimumDrawCapacityPerCabinet = v
}

// GetMaximumDrawCapacityPerCabinet returns the MaximumDrawCapacityPerCabinet field value
func (o *ProductsAvailability) GetMaximumDrawCapacityPerCabinet() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.MaximumDrawCapacityPerCabinet
}

// GetMaximumDrawCapacityPerCabinetOk returns a tuple with the MaximumDrawCapacityPerCabinet field value
// and a boolean to check if the value has been set.
func (o *ProductsAvailability) GetMaximumDrawCapacityPerCabinetOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaximumDrawCapacityPerCabinet, true
}

// SetMaximumDrawCapacityPerCabinet sets field value
func (o *ProductsAvailability) SetMaximumDrawCapacityPerCabinet(v float64) {
	o.MaximumDrawCapacityPerCabinet = v
}

// GetCabinetDimensions returns the CabinetDimensions field value
func (o *ProductsAvailability) GetCabinetDimensions() Dimensions {
	if o == nil {
		var ret Dimensions
		return ret
	}

	return o.CabinetDimensions
}

// GetCabinetDimensionsOk returns a tuple with the CabinetDimensions field value
// and a boolean to check if the value has been set.
func (o *ProductsAvailability) GetCabinetDimensionsOk() (*Dimensions, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CabinetDimensions, true
}

// SetCabinetDimensions sets field value
func (o *ProductsAvailability) SetCabinetDimensions(v Dimensions) {
	o.CabinetDimensions = v
}

// GetAcCircuitConfiguration returns the AcCircuitConfiguration field value
func (o *ProductsAvailability) GetAcCircuitConfiguration() AcCircuitConfig {
	if o == nil {
		var ret AcCircuitConfig
		return ret
	}

	return o.AcCircuitConfiguration
}

// GetAcCircuitConfigurationOk returns a tuple with the AcCircuitConfiguration field value
// and a boolean to check if the value has been set.
func (o *ProductsAvailability) GetAcCircuitConfigurationOk() (*AcCircuitConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AcCircuitConfiguration, true
}

// SetAcCircuitConfiguration sets field value
func (o *ProductsAvailability) SetAcCircuitConfiguration(v AcCircuitConfig) {
	o.AcCircuitConfiguration = v
}

// GetPduConfiguration returns the PduConfiguration field value if set, zero value otherwise.
func (o *ProductsAvailability) GetPduConfiguration() PduConfig {
	if o == nil || IsNil(o.PduConfiguration) {
		var ret PduConfig
		return ret
	}
	return *o.PduConfiguration
}

// GetPduConfigurationOk returns a tuple with the PduConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductsAvailability) GetPduConfigurationOk() (*PduConfig, bool) {
	if o == nil || IsNil(o.PduConfiguration) {
		return nil, false
	}
	return o.PduConfiguration, true
}

// HasPduConfiguration returns a boolean if a field has been set.
func (o *ProductsAvailability) HasPduConfiguration() bool {
	if o != nil && !IsNil(o.PduConfiguration) {
		return true
	}

	return false
}

// SetPduConfiguration gets a reference to the given PduConfig and assigns it to the PduConfiguration field.
func (o *ProductsAvailability) SetPduConfiguration(v PduConfig) {
	o.PduConfiguration = &v
}

// GetFabricPortSpeed returns the FabricPortSpeed field value if set, zero value otherwise.
func (o *ProductsAvailability) GetFabricPortSpeed() FabricPortSpeed {
	if o == nil || IsNil(o.FabricPortSpeed) {
		var ret FabricPortSpeed
		return ret
	}
	return *o.FabricPortSpeed
}

// GetFabricPortSpeedOk returns a tuple with the FabricPortSpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductsAvailability) GetFabricPortSpeedOk() (*FabricPortSpeed, bool) {
	if o == nil || IsNil(o.FabricPortSpeed) {
		return nil, false
	}
	return o.FabricPortSpeed, true
}

// HasFabricPortSpeed returns a boolean if a field has been set.
func (o *ProductsAvailability) HasFabricPortSpeed() bool {
	if o != nil && !IsNil(o.FabricPortSpeed) {
		return true
	}

	return false
}

// SetFabricPortSpeed gets a reference to the given FabricPortSpeed and assigns it to the FabricPortSpeed field.
func (o *ProductsAvailability) SetFabricPortSpeed(v FabricPortSpeed) {
	o.FabricPortSpeed = &v
}

func (o ProductsAvailability) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductsAvailability) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ibx"] = o.Ibx
	toSerialize["maximumNumberOfCabinetsToOrder"] = o.MaximumNumberOfCabinetsToOrder
	toSerialize["minimumDrawCapacityPerCabinet"] = o.MinimumDrawCapacityPerCabinet
	toSerialize["maximumDrawCapacityPerCabinet"] = o.MaximumDrawCapacityPerCabinet
	toSerialize["cabinetDimensions"] = o.CabinetDimensions
	toSerialize["acCircuitConfiguration"] = o.AcCircuitConfiguration
	if !IsNil(o.PduConfiguration) {
		toSerialize["pduConfiguration"] = o.PduConfiguration
	}
	if !IsNil(o.FabricPortSpeed) {
		toSerialize["fabricPortSpeed"] = o.FabricPortSpeed
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProductsAvailability) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ibx",
		"maximumNumberOfCabinetsToOrder",
		"minimumDrawCapacityPerCabinet",
		"maximumDrawCapacityPerCabinet",
		"cabinetDimensions",
		"acCircuitConfiguration",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProductsAvailability := _ProductsAvailability{}

	err = json.Unmarshal(data, &varProductsAvailability)

	if err != nil {
		return err
	}

	*o = ProductsAvailability(varProductsAvailability)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ibx")
		delete(additionalProperties, "maximumNumberOfCabinetsToOrder")
		delete(additionalProperties, "minimumDrawCapacityPerCabinet")
		delete(additionalProperties, "maximumDrawCapacityPerCabinet")
		delete(additionalProperties, "cabinetDimensions")
		delete(additionalProperties, "acCircuitConfiguration")
		delete(additionalProperties, "pduConfiguration")
		delete(additionalProperties, "fabricPortSpeed")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProductsAvailability struct {
	value *ProductsAvailability
	isSet bool
}

func (v NullableProductsAvailability) Get() *ProductsAvailability {
	return v.value
}

func (v *NullableProductsAvailability) Set(val *ProductsAvailability) {
	v.value = val
	v.isSet = true
}

func (v NullableProductsAvailability) IsSet() bool {
	return v.isSet
}

func (v *NullableProductsAvailability) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductsAvailability(val *ProductsAvailability) *NullableProductsAvailability {
	return &NullableProductsAvailability{value: val, isSet: true}
}

func (v NullableProductsAvailability) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductsAvailability) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
