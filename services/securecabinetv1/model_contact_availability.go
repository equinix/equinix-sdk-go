/*
Secure Cabinet API

Secure Cabinet API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package securecabinetv1

import (
	"encoding/json"
	"fmt"
)

// ContactAvailability When is the best time to call.
type ContactAvailability string

// List of ContactAvailability
const (
	CONTACTAVAILABILITY_WORK_HOURS              ContactAvailability = "WORK_HOURS"
	CONTACTAVAILABILITY_ANYTIME                 ContactAvailability = "ANYTIME"
	CONTACTAVAILABILITY_CUSTOMER_BUSINESS_HOURS ContactAvailability = "CUSTOMER_BUSINESS_HOURS"
	CONTACTAVAILABILITY_NOT_AVAILABLE           ContactAvailability = "NOT_AVAILABLE"
)

// All allowed values of ContactAvailability enum
var AllowedContactAvailabilityEnumValues = []ContactAvailability{
	"WORK_HOURS",
	"ANYTIME",
	"CUSTOMER_BUSINESS_HOURS",
	"NOT_AVAILABLE",
}

func (v *ContactAvailability) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ContactAvailability(value)
	for _, existing := range AllowedContactAvailabilityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ContactAvailability", value)
}

// NewContactAvailabilityFromValue returns a pointer to a valid ContactAvailability
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewContactAvailabilityFromValue(v string) (*ContactAvailability, error) {
	ev := ContactAvailability(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ContactAvailability: valid values are %v", v, AllowedContactAvailabilityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ContactAvailability) IsValid() bool {
	for _, existing := range AllowedContactAvailabilityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ContactAvailability value
func (v ContactAvailability) Ptr() *ContactAvailability {
	return &v
}

type NullableContactAvailability struct {
	value *ContactAvailability
	isSet bool
}

func (v NullableContactAvailability) Get() *ContactAvailability {
	return v.value
}

func (v *NullableContactAvailability) Set(val *ContactAvailability) {
	v.value = val
	v.isSet = true
}

func (v NullableContactAvailability) IsSet() bool {
	return v.isSet
}

func (v *NullableContactAvailability) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactAvailability(val *ContactAvailability) *NullableContactAvailability {
	return &NullableContactAvailability{value: val, isSet: true}
}

func (v NullableContactAvailability) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactAvailability) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
