/*
Secure Cabinet API

Secure Cabinet API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package securecabinetv1

import (
	"encoding/json"
	"fmt"
)

// checks if the Dimensions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Dimensions{}

// Dimensions struct for Dimensions
type Dimensions struct {
	Width                Dimension `json:"width"`
	Depth                Dimension `json:"depth"`
	Height               Dimension `json:"height"`
	AdditionalProperties map[string]interface{}
}

type _Dimensions Dimensions

// NewDimensions instantiates a new Dimensions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDimensions(width Dimension, depth Dimension, height Dimension) *Dimensions {
	this := Dimensions{}
	this.Width = width
	this.Depth = depth
	this.Height = height
	return &this
}

// NewDimensionsWithDefaults instantiates a new Dimensions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDimensionsWithDefaults() *Dimensions {
	this := Dimensions{}
	return &this
}

// GetWidth returns the Width field value
func (o *Dimensions) GetWidth() Dimension {
	if o == nil {
		var ret Dimension
		return ret
	}

	return o.Width
}

// GetWidthOk returns a tuple with the Width field value
// and a boolean to check if the value has been set.
func (o *Dimensions) GetWidthOk() (*Dimension, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Width, true
}

// SetWidth sets field value
func (o *Dimensions) SetWidth(v Dimension) {
	o.Width = v
}

// GetDepth returns the Depth field value
func (o *Dimensions) GetDepth() Dimension {
	if o == nil {
		var ret Dimension
		return ret
	}

	return o.Depth
}

// GetDepthOk returns a tuple with the Depth field value
// and a boolean to check if the value has been set.
func (o *Dimensions) GetDepthOk() (*Dimension, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Depth, true
}

// SetDepth sets field value
func (o *Dimensions) SetDepth(v Dimension) {
	o.Depth = v
}

// GetHeight returns the Height field value
func (o *Dimensions) GetHeight() Dimension {
	if o == nil {
		var ret Dimension
		return ret
	}

	return o.Height
}

// GetHeightOk returns a tuple with the Height field value
// and a boolean to check if the value has been set.
func (o *Dimensions) GetHeightOk() (*Dimension, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Height, true
}

// SetHeight sets field value
func (o *Dimensions) SetHeight(v Dimension) {
	o.Height = v
}

func (o Dimensions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Dimensions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["width"] = o.Width
	toSerialize["depth"] = o.Depth
	toSerialize["height"] = o.Height

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Dimensions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"width",
		"depth",
		"height",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDimensions := _Dimensions{}

	err = json.Unmarshal(data, &varDimensions)

	if err != nil {
		return err
	}

	*o = Dimensions(varDimensions)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "width")
		delete(additionalProperties, "depth")
		delete(additionalProperties, "height")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDimensions struct {
	value *Dimensions
	isSet bool
}

func (v NullableDimensions) Get() *Dimensions {
	return v.value
}

func (v *NullableDimensions) Set(val *Dimensions) {
	v.value = val
	v.isSet = true
}

func (v NullableDimensions) IsSet() bool {
	return v.isSet
}

func (v *NullableDimensions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDimensions(val *Dimensions) *NullableDimensions {
	return &NullableDimensions{value: val, isSet: true}
}

func (v NullableDimensions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDimensions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
