/*
Secure Cabinet API

Secure Cabinet API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package securecabinetv1

import (
	"encoding/json"
	"fmt"
)

// DimensionUnit Unit of measure of the product
type DimensionUnit string

// List of Dimension_unit
const (
	DIMENSIONUNIT_MILLIMETER DimensionUnit = "MILLIMETER"
	DIMENSIONUNIT_CENTIMETER DimensionUnit = "CENTIMETER"
	DIMENSIONUNIT_METER      DimensionUnit = "METER"
)

// All allowed values of DimensionUnit enum
var AllowedDimensionUnitEnumValues = []DimensionUnit{
	"MILLIMETER",
	"CENTIMETER",
	"METER",
}

func (v *DimensionUnit) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DimensionUnit(value)
	for _, existing := range AllowedDimensionUnitEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DimensionUnit", value)
}

// NewDimensionUnitFromValue returns a pointer to a valid DimensionUnit
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDimensionUnitFromValue(v string) (*DimensionUnit, error) {
	ev := DimensionUnit(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DimensionUnit: valid values are %v", v, AllowedDimensionUnitEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DimensionUnit) IsValid() bool {
	for _, existing := range AllowedDimensionUnitEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Dimension_unit value
func (v DimensionUnit) Ptr() *DimensionUnit {
	return &v
}

type NullableDimensionUnit struct {
	value *DimensionUnit
	isSet bool
}

func (v NullableDimensionUnit) Get() *DimensionUnit {
	return v.value
}

func (v *NullableDimensionUnit) Set(val *DimensionUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableDimensionUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableDimensionUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDimensionUnit(val *DimensionUnit) *NullableDimensionUnit {
	return &NullableDimensionUnit{value: val, isSet: true}
}

func (v NullableDimensionUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDimensionUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
