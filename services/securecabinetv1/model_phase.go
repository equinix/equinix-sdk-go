/*
Secure Cabinet API

Secure Cabinet API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package securecabinetv1

import (
	"encoding/json"
	"fmt"
)

// Phase Circuit phase
type Phase string

// List of Phase
const (
	PHASE_SINGLE Phase = "SINGLE"
)

// All allowed values of Phase enum
var AllowedPhaseEnumValues = []Phase{
	"SINGLE",
}

func (v *Phase) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Phase(value)
	for _, existing := range AllowedPhaseEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Phase", value)
}

// NewPhaseFromValue returns a pointer to a valid Phase
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPhaseFromValue(v string) (*Phase, error) {
	ev := Phase(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Phase: valid values are %v", v, AllowedPhaseEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Phase) IsValid() bool {
	for _, existing := range AllowedPhaseEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Phase value
func (v Phase) Ptr() *Phase {
	return &v
}

type NullablePhase struct {
	value *Phase
	isSet bool
}

func (v NullablePhase) Get() *Phase {
	return v.value
}

func (v *NullablePhase) Set(val *Phase) {
	v.value = val
	v.isSet = true
}

func (v NullablePhase) IsSet() bool {
	return v.isSet
}

func (v *NullablePhase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePhase(val *Phase) *NullablePhase {
	return &NullablePhase{value: val, isSet: true}
}

func (v NullablePhase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePhase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
