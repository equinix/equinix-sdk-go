/*
Secure Cabinet API

Secure Cabinet API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package securecabinetv1

import (
	"encoding/json"
	"fmt"
)

// checks if the ValidationErrorAdditionalInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValidationErrorAdditionalInfo{}

// ValidationErrorAdditionalInfo struct for ValidationErrorAdditionalInfo
type ValidationErrorAdditionalInfo struct {
	// Property at which the validation violation occurs. Can be empty when validation happens at the object top level.
	Property *string `json:"property,omitempty"`
	// Fallback error message in plain English.
	Reason string `json:"reason"`
	// Violated validation rule tag.
	ValidationRuleTag string `json:"validationRuleTag"`
	// Name of the object at which the validation violation occurs. Can be empty when validation happens inline at the request params.
	ValidationRoot *string `json:"validationRoot,omitempty"`
	// A map containing additional violation parameters, these can be used to render localized error messages. The list of available parameters is different for each validationRuleTag.
	ValidationParameters *map[string]string `json:"validationParameters,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ValidationErrorAdditionalInfo ValidationErrorAdditionalInfo

// NewValidationErrorAdditionalInfo instantiates a new ValidationErrorAdditionalInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidationErrorAdditionalInfo(reason string, validationRuleTag string) *ValidationErrorAdditionalInfo {
	this := ValidationErrorAdditionalInfo{}
	this.Reason = reason
	this.ValidationRuleTag = validationRuleTag
	return &this
}

// NewValidationErrorAdditionalInfoWithDefaults instantiates a new ValidationErrorAdditionalInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidationErrorAdditionalInfoWithDefaults() *ValidationErrorAdditionalInfo {
	this := ValidationErrorAdditionalInfo{}
	return &this
}

// GetProperty returns the Property field value if set, zero value otherwise.
func (o *ValidationErrorAdditionalInfo) GetProperty() string {
	if o == nil || IsNil(o.Property) {
		var ret string
		return ret
	}
	return *o.Property
}

// GetPropertyOk returns a tuple with the Property field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationErrorAdditionalInfo) GetPropertyOk() (*string, bool) {
	if o == nil || IsNil(o.Property) {
		return nil, false
	}
	return o.Property, true
}

// HasProperty returns a boolean if a field has been set.
func (o *ValidationErrorAdditionalInfo) HasProperty() bool {
	if o != nil && !IsNil(o.Property) {
		return true
	}

	return false
}

// SetProperty gets a reference to the given string and assigns it to the Property field.
func (o *ValidationErrorAdditionalInfo) SetProperty(v string) {
	o.Property = &v
}

// GetReason returns the Reason field value
func (o *ValidationErrorAdditionalInfo) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *ValidationErrorAdditionalInfo) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *ValidationErrorAdditionalInfo) SetReason(v string) {
	o.Reason = v
}

// GetValidationRuleTag returns the ValidationRuleTag field value
func (o *ValidationErrorAdditionalInfo) GetValidationRuleTag() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ValidationRuleTag
}

// GetValidationRuleTagOk returns a tuple with the ValidationRuleTag field value
// and a boolean to check if the value has been set.
func (o *ValidationErrorAdditionalInfo) GetValidationRuleTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValidationRuleTag, true
}

// SetValidationRuleTag sets field value
func (o *ValidationErrorAdditionalInfo) SetValidationRuleTag(v string) {
	o.ValidationRuleTag = v
}

// GetValidationRoot returns the ValidationRoot field value if set, zero value otherwise.
func (o *ValidationErrorAdditionalInfo) GetValidationRoot() string {
	if o == nil || IsNil(o.ValidationRoot) {
		var ret string
		return ret
	}
	return *o.ValidationRoot
}

// GetValidationRootOk returns a tuple with the ValidationRoot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationErrorAdditionalInfo) GetValidationRootOk() (*string, bool) {
	if o == nil || IsNil(o.ValidationRoot) {
		return nil, false
	}
	return o.ValidationRoot, true
}

// HasValidationRoot returns a boolean if a field has been set.
func (o *ValidationErrorAdditionalInfo) HasValidationRoot() bool {
	if o != nil && !IsNil(o.ValidationRoot) {
		return true
	}

	return false
}

// SetValidationRoot gets a reference to the given string and assigns it to the ValidationRoot field.
func (o *ValidationErrorAdditionalInfo) SetValidationRoot(v string) {
	o.ValidationRoot = &v
}

// GetValidationParameters returns the ValidationParameters field value if set, zero value otherwise.
func (o *ValidationErrorAdditionalInfo) GetValidationParameters() map[string]string {
	if o == nil || IsNil(o.ValidationParameters) {
		var ret map[string]string
		return ret
	}
	return *o.ValidationParameters
}

// GetValidationParametersOk returns a tuple with the ValidationParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationErrorAdditionalInfo) GetValidationParametersOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.ValidationParameters) {
		return nil, false
	}
	return o.ValidationParameters, true
}

// HasValidationParameters returns a boolean if a field has been set.
func (o *ValidationErrorAdditionalInfo) HasValidationParameters() bool {
	if o != nil && !IsNil(o.ValidationParameters) {
		return true
	}

	return false
}

// SetValidationParameters gets a reference to the given map[string]string and assigns it to the ValidationParameters field.
func (o *ValidationErrorAdditionalInfo) SetValidationParameters(v map[string]string) {
	o.ValidationParameters = &v
}

func (o ValidationErrorAdditionalInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValidationErrorAdditionalInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Property) {
		toSerialize["property"] = o.Property
	}
	toSerialize["reason"] = o.Reason
	toSerialize["validationRuleTag"] = o.ValidationRuleTag
	if !IsNil(o.ValidationRoot) {
		toSerialize["validationRoot"] = o.ValidationRoot
	}
	if !IsNil(o.ValidationParameters) {
		toSerialize["validationParameters"] = o.ValidationParameters
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ValidationErrorAdditionalInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"reason",
		"validationRuleTag",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varValidationErrorAdditionalInfo := _ValidationErrorAdditionalInfo{}

	err = json.Unmarshal(data, &varValidationErrorAdditionalInfo)

	if err != nil {
		return err
	}

	*o = ValidationErrorAdditionalInfo(varValidationErrorAdditionalInfo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "property")
		delete(additionalProperties, "reason")
		delete(additionalProperties, "validationRuleTag")
		delete(additionalProperties, "validationRoot")
		delete(additionalProperties, "validationParameters")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableValidationErrorAdditionalInfo struct {
	value *ValidationErrorAdditionalInfo
	isSet bool
}

func (v NullableValidationErrorAdditionalInfo) Get() *ValidationErrorAdditionalInfo {
	return v.value
}

func (v *NullableValidationErrorAdditionalInfo) Set(val *ValidationErrorAdditionalInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableValidationErrorAdditionalInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableValidationErrorAdditionalInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidationErrorAdditionalInfo(val *ValidationErrorAdditionalInfo) *NullableValidationErrorAdditionalInfo {
	return &NullableValidationErrorAdditionalInfo{value: val, isSet: true}
}

func (v NullableValidationErrorAdditionalInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidationErrorAdditionalInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
