/*
Secure Cabinet API

Secure Cabinet API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package securecabinetv1

import (
	"encoding/json"
	"fmt"
)

// checks if the ContactDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContactDetails{}

// ContactDetails Contact person details for technical inquiries.
type ContactDetails struct {
	// First name.
	FirstName string `json:"firstName"`
	// Last name.
	LastName string `json:"lastName"`
	// Email address.
	Email                string `json:"email"`
	Phone                *Phone `json:"phone,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ContactDetails ContactDetails

// NewContactDetails instantiates a new ContactDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContactDetails(firstName string, lastName string, email string) *ContactDetails {
	this := ContactDetails{}
	this.FirstName = firstName
	this.LastName = lastName
	this.Email = email
	return &this
}

// NewContactDetailsWithDefaults instantiates a new ContactDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContactDetailsWithDefaults() *ContactDetails {
	this := ContactDetails{}
	return &this
}

// GetFirstName returns the FirstName field value
func (o *ContactDetails) GetFirstName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value
// and a boolean to check if the value has been set.
func (o *ContactDetails) GetFirstNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstName, true
}

// SetFirstName sets field value
func (o *ContactDetails) SetFirstName(v string) {
	o.FirstName = v
}

// GetLastName returns the LastName field value
func (o *ContactDetails) GetLastName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value
// and a boolean to check if the value has been set.
func (o *ContactDetails) GetLastNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastName, true
}

// SetLastName sets field value
func (o *ContactDetails) SetLastName(v string) {
	o.LastName = v
}

// GetEmail returns the Email field value
func (o *ContactDetails) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *ContactDetails) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *ContactDetails) SetEmail(v string) {
	o.Email = v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *ContactDetails) GetPhone() Phone {
	if o == nil || IsNil(o.Phone) {
		var ret Phone
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactDetails) GetPhoneOk() (*Phone, bool) {
	if o == nil || IsNil(o.Phone) {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *ContactDetails) HasPhone() bool {
	if o != nil && !IsNil(o.Phone) {
		return true
	}

	return false
}

// SetPhone gets a reference to the given Phone and assigns it to the Phone field.
func (o *ContactDetails) SetPhone(v Phone) {
	o.Phone = &v
}

func (o ContactDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContactDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["firstName"] = o.FirstName
	toSerialize["lastName"] = o.LastName
	toSerialize["email"] = o.Email
	if !IsNil(o.Phone) {
		toSerialize["phone"] = o.Phone
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ContactDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"firstName",
		"lastName",
		"email",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContactDetails := _ContactDetails{}

	err = json.Unmarshal(data, &varContactDetails)

	if err != nil {
		return err
	}

	*o = ContactDetails(varContactDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "firstName")
		delete(additionalProperties, "lastName")
		delete(additionalProperties, "email")
		delete(additionalProperties, "phone")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableContactDetails struct {
	value *ContactDetails
	isSet bool
}

func (v NullableContactDetails) Get() *ContactDetails {
	return v.value
}

func (v *NullableContactDetails) Set(val *ContactDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableContactDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableContactDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactDetails(val *ContactDetails) *NullableContactDetails {
	return &NullableContactDetails{value: val, isSet: true}
}

func (v NullableContactDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
