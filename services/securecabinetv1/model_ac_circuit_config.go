/*
Secure Cabinet API

Secure Cabinet API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package securecabinetv1

import (
	"encoding/json"
	"fmt"
)

// checks if the AcCircuitConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AcCircuitConfig{}

// AcCircuitConfig struct for AcCircuitConfig
type AcCircuitConfig struct {
	// Voltage numerical value
	Voltage int32 `json:"voltage"`
	// Amperage Numerical Value
	SoldAmperage float64 `json:"soldAmperage"`
	Phase        Phase   `json:"phase"`
	// Receptacle type
	Receptacle           string `json:"receptacle"`
	AdditionalProperties map[string]interface{}
}

type _AcCircuitConfig AcCircuitConfig

// NewAcCircuitConfig instantiates a new AcCircuitConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAcCircuitConfig(voltage int32, soldAmperage float64, phase Phase, receptacle string) *AcCircuitConfig {
	this := AcCircuitConfig{}
	this.Voltage = voltage
	this.SoldAmperage = soldAmperage
	this.Phase = phase
	this.Receptacle = receptacle
	return &this
}

// NewAcCircuitConfigWithDefaults instantiates a new AcCircuitConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAcCircuitConfigWithDefaults() *AcCircuitConfig {
	this := AcCircuitConfig{}
	return &this
}

// GetVoltage returns the Voltage field value
func (o *AcCircuitConfig) GetVoltage() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Voltage
}

// GetVoltageOk returns a tuple with the Voltage field value
// and a boolean to check if the value has been set.
func (o *AcCircuitConfig) GetVoltageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Voltage, true
}

// SetVoltage sets field value
func (o *AcCircuitConfig) SetVoltage(v int32) {
	o.Voltage = v
}

// GetSoldAmperage returns the SoldAmperage field value
func (o *AcCircuitConfig) GetSoldAmperage() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.SoldAmperage
}

// GetSoldAmperageOk returns a tuple with the SoldAmperage field value
// and a boolean to check if the value has been set.
func (o *AcCircuitConfig) GetSoldAmperageOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SoldAmperage, true
}

// SetSoldAmperage sets field value
func (o *AcCircuitConfig) SetSoldAmperage(v float64) {
	o.SoldAmperage = v
}

// GetPhase returns the Phase field value
func (o *AcCircuitConfig) GetPhase() Phase {
	if o == nil {
		var ret Phase
		return ret
	}

	return o.Phase
}

// GetPhaseOk returns a tuple with the Phase field value
// and a boolean to check if the value has been set.
func (o *AcCircuitConfig) GetPhaseOk() (*Phase, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Phase, true
}

// SetPhase sets field value
func (o *AcCircuitConfig) SetPhase(v Phase) {
	o.Phase = v
}

// GetReceptacle returns the Receptacle field value
func (o *AcCircuitConfig) GetReceptacle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Receptacle
}

// GetReceptacleOk returns a tuple with the Receptacle field value
// and a boolean to check if the value has been set.
func (o *AcCircuitConfig) GetReceptacleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Receptacle, true
}

// SetReceptacle sets field value
func (o *AcCircuitConfig) SetReceptacle(v string) {
	o.Receptacle = v
}

func (o AcCircuitConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AcCircuitConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["voltage"] = o.Voltage
	toSerialize["soldAmperage"] = o.SoldAmperage
	toSerialize["phase"] = o.Phase
	toSerialize["receptacle"] = o.Receptacle

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AcCircuitConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"voltage",
		"soldAmperage",
		"phase",
		"receptacle",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAcCircuitConfig := _AcCircuitConfig{}

	err = json.Unmarshal(data, &varAcCircuitConfig)

	if err != nil {
		return err
	}

	*o = AcCircuitConfig(varAcCircuitConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "voltage")
		delete(additionalProperties, "soldAmperage")
		delete(additionalProperties, "phase")
		delete(additionalProperties, "receptacle")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAcCircuitConfig struct {
	value *AcCircuitConfig
	isSet bool
}

func (v NullableAcCircuitConfig) Get() *AcCircuitConfig {
	return v.value
}

func (v *NullableAcCircuitConfig) Set(val *AcCircuitConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableAcCircuitConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableAcCircuitConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAcCircuitConfig(val *AcCircuitConfig) *NullableAcCircuitConfig {
	return &NullableAcCircuitConfig{value: val, isSet: true}
}

func (v NullableAcCircuitConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAcCircuitConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
