/*
Secure Cabinet API

Secure Cabinet API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package securecabinetv1

import (
	"encoding/json"
	"fmt"
)

// ContractTerm Contract term length.
type ContractTerm string

// List of ContractTerm
const (
	CONTRACTTERM__24_MONTHS ContractTerm = "TERM_24_MONTHS"
	CONTRACTTERM__36_MONTHS ContractTerm = "TERM_36_MONTHS"
	CONTRACTTERM__48_MONTHS ContractTerm = "TERM_48_MONTHS"
	CONTRACTTERM__60_MONTHS ContractTerm = "TERM_60_MONTHS"
)

// All allowed values of ContractTerm enum
var AllowedContractTermEnumValues = []ContractTerm{
	"TERM_24_MONTHS",
	"TERM_36_MONTHS",
	"TERM_48_MONTHS",
	"TERM_60_MONTHS",
}

func (v *ContractTerm) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ContractTerm(value)
	for _, existing := range AllowedContractTermEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ContractTerm", value)
}

// NewContractTermFromValue returns a pointer to a valid ContractTerm
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewContractTermFromValue(v string) (*ContractTerm, error) {
	ev := ContractTerm(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ContractTerm: valid values are %v", v, AllowedContractTermEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ContractTerm) IsValid() bool {
	for _, existing := range AllowedContractTermEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ContractTerm value
func (v ContractTerm) Ptr() *ContractTerm {
	return &v
}

type NullableContractTerm struct {
	value *ContractTerm
	isSet bool
}

func (v NullableContractTerm) Get() *ContractTerm {
	return v.value
}

func (v *NullableContractTerm) Set(val *ContractTerm) {
	v.value = val
	v.isSet = true
}

func (v NullableContractTerm) IsSet() bool {
	return v.isSet
}

func (v *NullableContractTerm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContractTerm(val *ContractTerm) *NullableContractTerm {
	return &NullableContractTerm{value: val, isSet: true}
}

func (v NullableContractTerm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContractTerm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
