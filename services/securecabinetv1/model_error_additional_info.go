/*
Secure Cabinet API

Secure Cabinet API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package securecabinetv1

import (
	"encoding/json"
)

// checks if the ErrorAdditionalInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorAdditionalInfo{}

// ErrorAdditionalInfo struct for ErrorAdditionalInfo
type ErrorAdditionalInfo struct {
	// Property at which the error occurs. Can be empty.
	Property *string `json:"property,omitempty"`
	// Fallback error message in plain English.
	Reason               *string `json:"reason,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ErrorAdditionalInfo ErrorAdditionalInfo

// NewErrorAdditionalInfo instantiates a new ErrorAdditionalInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorAdditionalInfo() *ErrorAdditionalInfo {
	this := ErrorAdditionalInfo{}
	return &this
}

// NewErrorAdditionalInfoWithDefaults instantiates a new ErrorAdditionalInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorAdditionalInfoWithDefaults() *ErrorAdditionalInfo {
	this := ErrorAdditionalInfo{}
	return &this
}

// GetProperty returns the Property field value if set, zero value otherwise.
func (o *ErrorAdditionalInfo) GetProperty() string {
	if o == nil || IsNil(o.Property) {
		var ret string
		return ret
	}
	return *o.Property
}

// GetPropertyOk returns a tuple with the Property field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorAdditionalInfo) GetPropertyOk() (*string, bool) {
	if o == nil || IsNil(o.Property) {
		return nil, false
	}
	return o.Property, true
}

// HasProperty returns a boolean if a field has been set.
func (o *ErrorAdditionalInfo) HasProperty() bool {
	if o != nil && !IsNil(o.Property) {
		return true
	}

	return false
}

// SetProperty gets a reference to the given string and assigns it to the Property field.
func (o *ErrorAdditionalInfo) SetProperty(v string) {
	o.Property = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *ErrorAdditionalInfo) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorAdditionalInfo) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *ErrorAdditionalInfo) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *ErrorAdditionalInfo) SetReason(v string) {
	o.Reason = &v
}

func (o ErrorAdditionalInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorAdditionalInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Property) {
		toSerialize["property"] = o.Property
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ErrorAdditionalInfo) UnmarshalJSON(data []byte) (err error) {
	varErrorAdditionalInfo := _ErrorAdditionalInfo{}

	err = json.Unmarshal(data, &varErrorAdditionalInfo)

	if err != nil {
		return err
	}

	*o = ErrorAdditionalInfo(varErrorAdditionalInfo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "property")
		delete(additionalProperties, "reason")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableErrorAdditionalInfo struct {
	value *ErrorAdditionalInfo
	isSet bool
}

func (v NullableErrorAdditionalInfo) Get() *ErrorAdditionalInfo {
	return v.value
}

func (v *NullableErrorAdditionalInfo) Set(val *ErrorAdditionalInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorAdditionalInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorAdditionalInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorAdditionalInfo(val *ErrorAdditionalInfo) *NullableErrorAdditionalInfo {
	return &NullableErrorAdditionalInfo{value: val, isSet: true}
}

func (v NullableErrorAdditionalInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorAdditionalInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
