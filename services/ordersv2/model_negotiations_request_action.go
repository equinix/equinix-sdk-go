/*
Orders

Based on a user's permission, a user may be able to view their own orders or also the orders from all of the users in their organization. These orders can be filtered by product type, order status, location, or date range. Only orders from the past 12 months will be returned.

API version: 2.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ordersv2

import (
	"encoding/json"
	"fmt"
)

// NegotiationsRequestAction Type of actions to be carried out with negotiation. Use `APPROVE` to accept order with new proposed date, `APPROVE_NON_EXPEDITE` to accept order without expedite and `CANCEL` to cancel order
type NegotiationsRequestAction string

// List of Negotiations_request_action
const (
	NEGOTIATIONSREQUESTACTION_APPROVE              NegotiationsRequestAction = "APPROVE"
	NEGOTIATIONSREQUESTACTION_APPROVE_NON_EXPEDITE NegotiationsRequestAction = "APPROVE_NON_EXPEDITE"
	NEGOTIATIONSREQUESTACTION_CANCEL               NegotiationsRequestAction = "CANCEL"
)

// All allowed values of NegotiationsRequestAction enum
var AllowedNegotiationsRequestActionEnumValues = []NegotiationsRequestAction{
	"APPROVE",
	"APPROVE_NON_EXPEDITE",
	"CANCEL",
}

func (v *NegotiationsRequestAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NegotiationsRequestAction(value)
	for _, existing := range AllowedNegotiationsRequestActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NegotiationsRequestAction", value)
}

// NewNegotiationsRequestActionFromValue returns a pointer to a valid NegotiationsRequestAction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNegotiationsRequestActionFromValue(v string) (*NegotiationsRequestAction, error) {
	ev := NegotiationsRequestAction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NegotiationsRequestAction: valid values are %v", v, AllowedNegotiationsRequestActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NegotiationsRequestAction) IsValid() bool {
	for _, existing := range AllowedNegotiationsRequestActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Negotiations_request_action value
func (v NegotiationsRequestAction) Ptr() *NegotiationsRequestAction {
	return &v
}

type NullableNegotiationsRequestAction struct {
	value *NegotiationsRequestAction
	isSet bool
}

func (v NullableNegotiationsRequestAction) Get() *NegotiationsRequestAction {
	return v.value
}

func (v *NullableNegotiationsRequestAction) Set(val *NegotiationsRequestAction) {
	v.value = val
	v.isSet = true
}

func (v NullableNegotiationsRequestAction) IsSet() bool {
	return v.isSet
}

func (v *NullableNegotiationsRequestAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNegotiationsRequestAction(val *NegotiationsRequestAction) *NullableNegotiationsRequestAction {
	return &NullableNegotiationsRequestAction{value: val, isSet: true}
}

func (v NullableNegotiationsRequestAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNegotiationsRequestAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
