/*
Orders

Based on a user's permission, a user may be able to view their own orders or also the orders from all of the users in their organization. These orders can be filtered by product type, order status, location, or date range. Only orders from the past 12 months will be returned.

API version: 2.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ordersv2

import (
	"encoding/json"
	"fmt"
)

// checks if the CancelRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CancelRequest{}

// CancelRequest Cancelling the Order
type CancelRequest struct {
	// Reason for cancellation
	Reason string `json:"reason"`
	// File(s) attached
	Attachments []Attachment `json:"attachments,omitempty"`
	// Refers to the `lineId` of product/service.
	LineIds              []string `json:"lineIds,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CancelRequest CancelRequest

// NewCancelRequest instantiates a new CancelRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCancelRequest(reason string) *CancelRequest {
	this := CancelRequest{}
	this.Reason = reason
	return &this
}

// NewCancelRequestWithDefaults instantiates a new CancelRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCancelRequestWithDefaults() *CancelRequest {
	this := CancelRequest{}
	return &this
}

// GetReason returns the Reason field value
func (o *CancelRequest) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *CancelRequest) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *CancelRequest) SetReason(v string) {
	o.Reason = v
}

// GetAttachments returns the Attachments field value if set, zero value otherwise.
func (o *CancelRequest) GetAttachments() []Attachment {
	if o == nil || IsNil(o.Attachments) {
		var ret []Attachment
		return ret
	}
	return o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancelRequest) GetAttachmentsOk() ([]Attachment, bool) {
	if o == nil || IsNil(o.Attachments) {
		return nil, false
	}
	return o.Attachments, true
}

// HasAttachments returns a boolean if a field has been set.
func (o *CancelRequest) HasAttachments() bool {
	if o != nil && !IsNil(o.Attachments) {
		return true
	}

	return false
}

// SetAttachments gets a reference to the given []Attachment and assigns it to the Attachments field.
func (o *CancelRequest) SetAttachments(v []Attachment) {
	o.Attachments = v
}

// GetLineIds returns the LineIds field value if set, zero value otherwise.
func (o *CancelRequest) GetLineIds() []string {
	if o == nil || IsNil(o.LineIds) {
		var ret []string
		return ret
	}
	return o.LineIds
}

// GetLineIdsOk returns a tuple with the LineIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancelRequest) GetLineIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.LineIds) {
		return nil, false
	}
	return o.LineIds, true
}

// HasLineIds returns a boolean if a field has been set.
func (o *CancelRequest) HasLineIds() bool {
	if o != nil && !IsNil(o.LineIds) {
		return true
	}

	return false
}

// SetLineIds gets a reference to the given []string and assigns it to the LineIds field.
func (o *CancelRequest) SetLineIds(v []string) {
	o.LineIds = v
}

func (o CancelRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CancelRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["reason"] = o.Reason
	if !IsNil(o.Attachments) {
		toSerialize["attachments"] = o.Attachments
	}
	if !IsNil(o.LineIds) {
		toSerialize["lineIds"] = o.LineIds
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CancelRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"reason",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCancelRequest := _CancelRequest{}

	err = json.Unmarshal(data, &varCancelRequest)

	if err != nil {
		return err
	}

	*o = CancelRequest(varCancelRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "reason")
		delete(additionalProperties, "attachments")
		delete(additionalProperties, "lineIds")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCancelRequest struct {
	value *CancelRequest
	isSet bool
}

func (v NullableCancelRequest) Get() *CancelRequest {
	return v.value
}

func (v *NullableCancelRequest) Set(val *CancelRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCancelRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCancelRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCancelRequest(val *CancelRequest) *NullableCancelRequest {
	return &NullableCancelRequest{value: val, isSet: true}
}

func (v NullableCancelRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCancelRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
