/*
Orders

Based on a user's permission, a user may be able to view their own orders or also the orders from all of the users in their organization. These orders can be filtered by product type, order status, location, or date range. Only orders from the past 12 months will be returned.

API version: 2.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ordersv2

import (
	"encoding/json"
	"fmt"
)

// checks if the NoteRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NoteRequest{}

// NoteRequest Extra notes about a given entity
type NoteRequest struct {
	// Unique reference ID associated with notes.
	ReferenceId *string `json:"referenceId,omitempty"`
	// The text of the note
	Text string `json:"text"`
	// File(s) attached to the Orders. To learn about including attachments in your request, see POST Attachments API.
	Attachments          []Attachment `json:"attachments,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NoteRequest NoteRequest

// NewNoteRequest instantiates a new NoteRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNoteRequest(text string) *NoteRequest {
	this := NoteRequest{}
	this.Text = text
	return &this
}

// NewNoteRequestWithDefaults instantiates a new NoteRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNoteRequestWithDefaults() *NoteRequest {
	this := NoteRequest{}
	return &this
}

// GetReferenceId returns the ReferenceId field value if set, zero value otherwise.
func (o *NoteRequest) GetReferenceId() string {
	if o == nil || IsNil(o.ReferenceId) {
		var ret string
		return ret
	}
	return *o.ReferenceId
}

// GetReferenceIdOk returns a tuple with the ReferenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteRequest) GetReferenceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ReferenceId) {
		return nil, false
	}
	return o.ReferenceId, true
}

// HasReferenceId returns a boolean if a field has been set.
func (o *NoteRequest) HasReferenceId() bool {
	if o != nil && !IsNil(o.ReferenceId) {
		return true
	}

	return false
}

// SetReferenceId gets a reference to the given string and assigns it to the ReferenceId field.
func (o *NoteRequest) SetReferenceId(v string) {
	o.ReferenceId = &v
}

// GetText returns the Text field value
func (o *NoteRequest) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *NoteRequest) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *NoteRequest) SetText(v string) {
	o.Text = v
}

// GetAttachments returns the Attachments field value if set, zero value otherwise.
func (o *NoteRequest) GetAttachments() []Attachment {
	if o == nil || IsNil(o.Attachments) {
		var ret []Attachment
		return ret
	}
	return o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteRequest) GetAttachmentsOk() ([]Attachment, bool) {
	if o == nil || IsNil(o.Attachments) {
		return nil, false
	}
	return o.Attachments, true
}

// HasAttachments returns a boolean if a field has been set.
func (o *NoteRequest) HasAttachments() bool {
	if o != nil && !IsNil(o.Attachments) {
		return true
	}

	return false
}

// SetAttachments gets a reference to the given []Attachment and assigns it to the Attachments field.
func (o *NoteRequest) SetAttachments(v []Attachment) {
	o.Attachments = v
}

func (o NoteRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NoteRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ReferenceId) {
		toSerialize["referenceId"] = o.ReferenceId
	}
	toSerialize["text"] = o.Text
	if !IsNil(o.Attachments) {
		toSerialize["attachments"] = o.Attachments
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NoteRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"text",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNoteRequest := _NoteRequest{}

	err = json.Unmarshal(data, &varNoteRequest)

	if err != nil {
		return err
	}

	*o = NoteRequest(varNoteRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "referenceId")
		delete(additionalProperties, "text")
		delete(additionalProperties, "attachments")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNoteRequest struct {
	value *NoteRequest
	isSet bool
}

func (v NullableNoteRequest) Get() *NoteRequest {
	return v.value
}

func (v *NullableNoteRequest) Set(val *NoteRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableNoteRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableNoteRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNoteRequest(val *NoteRequest) *NullableNoteRequest {
	return &NullableNoteRequest{value: val, isSet: true}
}

func (v NullableNoteRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNoteRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
