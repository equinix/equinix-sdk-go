/*
Orders

Based on a user's permission, a user may be able to view their own orders or also the orders from all of the users in their organization. These orders can be filtered by product type, order status, location, or date range. Only orders from the past 12 months will be returned.

API version: 2.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ordersv2

import (
	"encoding/json"
	"time"
)

// checks if the Negotiations type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Negotiations{}

// Negotiations Negotiations message with alternative date and time
type Negotiations struct {
	// Reference id / internal id for customer to identify the actionable order line
	ReferenceId *string `json:"referenceId,omitempty"`
	// Customer requested order date and time at point of order.
	OrderRequestedDateTime *time.Time `json:"orderRequestedDateTime,omitempty"`
	// Alternative / revised date and time proposed by Equinix for fulfilling the order request.
	ProposedDateTime *time.Time `json:"proposedDateTime,omitempty"`
	// Validity date and time of the negotiation. Negotiations request after this date will no longer be valid.
	ExpirationDateTime *time.Time `json:"expirationDateTime,omitempty"`
	// Negotiations message created date and time by operations team
	CreatedDateTime *time.Time `json:"createdDateTime,omitempty"`
	// When `true,` requested order is an expedite order
	Expedited *bool `json:"expedited,omitempty"`
	// Negotiations message
	Message              *string `json:"message,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Negotiations Negotiations

// NewNegotiations instantiates a new Negotiations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNegotiations() *Negotiations {
	this := Negotiations{}
	return &this
}

// NewNegotiationsWithDefaults instantiates a new Negotiations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNegotiationsWithDefaults() *Negotiations {
	this := Negotiations{}
	return &this
}

// GetReferenceId returns the ReferenceId field value if set, zero value otherwise.
func (o *Negotiations) GetReferenceId() string {
	if o == nil || IsNil(o.ReferenceId) {
		var ret string
		return ret
	}
	return *o.ReferenceId
}

// GetReferenceIdOk returns a tuple with the ReferenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Negotiations) GetReferenceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ReferenceId) {
		return nil, false
	}
	return o.ReferenceId, true
}

// HasReferenceId returns a boolean if a field has been set.
func (o *Negotiations) HasReferenceId() bool {
	if o != nil && !IsNil(o.ReferenceId) {
		return true
	}

	return false
}

// SetReferenceId gets a reference to the given string and assigns it to the ReferenceId field.
func (o *Negotiations) SetReferenceId(v string) {
	o.ReferenceId = &v
}

// GetOrderRequestedDateTime returns the OrderRequestedDateTime field value if set, zero value otherwise.
func (o *Negotiations) GetOrderRequestedDateTime() time.Time {
	if o == nil || IsNil(o.OrderRequestedDateTime) {
		var ret time.Time
		return ret
	}
	return *o.OrderRequestedDateTime
}

// GetOrderRequestedDateTimeOk returns a tuple with the OrderRequestedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Negotiations) GetOrderRequestedDateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.OrderRequestedDateTime) {
		return nil, false
	}
	return o.OrderRequestedDateTime, true
}

// HasOrderRequestedDateTime returns a boolean if a field has been set.
func (o *Negotiations) HasOrderRequestedDateTime() bool {
	if o != nil && !IsNil(o.OrderRequestedDateTime) {
		return true
	}

	return false
}

// SetOrderRequestedDateTime gets a reference to the given time.Time and assigns it to the OrderRequestedDateTime field.
func (o *Negotiations) SetOrderRequestedDateTime(v time.Time) {
	o.OrderRequestedDateTime = &v
}

// GetProposedDateTime returns the ProposedDateTime field value if set, zero value otherwise.
func (o *Negotiations) GetProposedDateTime() time.Time {
	if o == nil || IsNil(o.ProposedDateTime) {
		var ret time.Time
		return ret
	}
	return *o.ProposedDateTime
}

// GetProposedDateTimeOk returns a tuple with the ProposedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Negotiations) GetProposedDateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ProposedDateTime) {
		return nil, false
	}
	return o.ProposedDateTime, true
}

// HasProposedDateTime returns a boolean if a field has been set.
func (o *Negotiations) HasProposedDateTime() bool {
	if o != nil && !IsNil(o.ProposedDateTime) {
		return true
	}

	return false
}

// SetProposedDateTime gets a reference to the given time.Time and assigns it to the ProposedDateTime field.
func (o *Negotiations) SetProposedDateTime(v time.Time) {
	o.ProposedDateTime = &v
}

// GetExpirationDateTime returns the ExpirationDateTime field value if set, zero value otherwise.
func (o *Negotiations) GetExpirationDateTime() time.Time {
	if o == nil || IsNil(o.ExpirationDateTime) {
		var ret time.Time
		return ret
	}
	return *o.ExpirationDateTime
}

// GetExpirationDateTimeOk returns a tuple with the ExpirationDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Negotiations) GetExpirationDateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpirationDateTime) {
		return nil, false
	}
	return o.ExpirationDateTime, true
}

// HasExpirationDateTime returns a boolean if a field has been set.
func (o *Negotiations) HasExpirationDateTime() bool {
	if o != nil && !IsNil(o.ExpirationDateTime) {
		return true
	}

	return false
}

// SetExpirationDateTime gets a reference to the given time.Time and assigns it to the ExpirationDateTime field.
func (o *Negotiations) SetExpirationDateTime(v time.Time) {
	o.ExpirationDateTime = &v
}

// GetCreatedDateTime returns the CreatedDateTime field value if set, zero value otherwise.
func (o *Negotiations) GetCreatedDateTime() time.Time {
	if o == nil || IsNil(o.CreatedDateTime) {
		var ret time.Time
		return ret
	}
	return *o.CreatedDateTime
}

// GetCreatedDateTimeOk returns a tuple with the CreatedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Negotiations) GetCreatedDateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedDateTime) {
		return nil, false
	}
	return o.CreatedDateTime, true
}

// HasCreatedDateTime returns a boolean if a field has been set.
func (o *Negotiations) HasCreatedDateTime() bool {
	if o != nil && !IsNil(o.CreatedDateTime) {
		return true
	}

	return false
}

// SetCreatedDateTime gets a reference to the given time.Time and assigns it to the CreatedDateTime field.
func (o *Negotiations) SetCreatedDateTime(v time.Time) {
	o.CreatedDateTime = &v
}

// GetExpedited returns the Expedited field value if set, zero value otherwise.
func (o *Negotiations) GetExpedited() bool {
	if o == nil || IsNil(o.Expedited) {
		var ret bool
		return ret
	}
	return *o.Expedited
}

// GetExpeditedOk returns a tuple with the Expedited field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Negotiations) GetExpeditedOk() (*bool, bool) {
	if o == nil || IsNil(o.Expedited) {
		return nil, false
	}
	return o.Expedited, true
}

// HasExpedited returns a boolean if a field has been set.
func (o *Negotiations) HasExpedited() bool {
	if o != nil && !IsNil(o.Expedited) {
		return true
	}

	return false
}

// SetExpedited gets a reference to the given bool and assigns it to the Expedited field.
func (o *Negotiations) SetExpedited(v bool) {
	o.Expedited = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *Negotiations) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Negotiations) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *Negotiations) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *Negotiations) SetMessage(v string) {
	o.Message = &v
}

func (o Negotiations) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Negotiations) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ReferenceId) {
		toSerialize["referenceId"] = o.ReferenceId
	}
	if !IsNil(o.OrderRequestedDateTime) {
		toSerialize["orderRequestedDateTime"] = o.OrderRequestedDateTime
	}
	if !IsNil(o.ProposedDateTime) {
		toSerialize["proposedDateTime"] = o.ProposedDateTime
	}
	if !IsNil(o.ExpirationDateTime) {
		toSerialize["expirationDateTime"] = o.ExpirationDateTime
	}
	if !IsNil(o.CreatedDateTime) {
		toSerialize["createdDateTime"] = o.CreatedDateTime
	}
	if !IsNil(o.Expedited) {
		toSerialize["expedited"] = o.Expedited
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Negotiations) UnmarshalJSON(data []byte) (err error) {
	varNegotiations := _Negotiations{}

	err = json.Unmarshal(data, &varNegotiations)

	if err != nil {
		return err
	}

	*o = Negotiations(varNegotiations)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "referenceId")
		delete(additionalProperties, "orderRequestedDateTime")
		delete(additionalProperties, "proposedDateTime")
		delete(additionalProperties, "expirationDateTime")
		delete(additionalProperties, "createdDateTime")
		delete(additionalProperties, "expedited")
		delete(additionalProperties, "message")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNegotiations struct {
	value *Negotiations
	isSet bool
}

func (v NullableNegotiations) Get() *Negotiations {
	return v.value
}

func (v *NullableNegotiations) Set(val *Negotiations) {
	v.value = val
	v.isSet = true
}

func (v NullableNegotiations) IsSet() bool {
	return v.isSet
}

func (v *NullableNegotiations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNegotiations(val *Negotiations) *NullableNegotiations {
	return &NullableNegotiations{value: val, isSet: true}
}

func (v NullableNegotiations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNegotiations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
