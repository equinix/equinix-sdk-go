/*
Orders

Based on a user's permission, a user may be able to view their own orders or also the orders from all of the users in their organization. These orders can be filtered by product type, order status, location, or date range. Only orders from the past 12 months will be returned.

API version: 2.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ordersv2

import (
	"encoding/json"
	"fmt"
)

// ContactsAvailability Contact's availability to receive calls.
type ContactsAvailability string

// List of Contacts_availability
const (
	CONTACTSAVAILABILITY_WORK_HOURS ContactsAvailability = "WORK_HOURS"
	CONTACTSAVAILABILITY_ANYTIME    ContactsAvailability = "ANYTIME"
)

// All allowed values of ContactsAvailability enum
var AllowedContactsAvailabilityEnumValues = []ContactsAvailability{
	"WORK_HOURS",
	"ANYTIME",
}

func (v *ContactsAvailability) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ContactsAvailability(value)
	for _, existing := range AllowedContactsAvailabilityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ContactsAvailability", value)
}

// NewContactsAvailabilityFromValue returns a pointer to a valid ContactsAvailability
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewContactsAvailabilityFromValue(v string) (*ContactsAvailability, error) {
	ev := ContactsAvailability(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ContactsAvailability: valid values are %v", v, AllowedContactsAvailabilityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ContactsAvailability) IsValid() bool {
	for _, existing := range AllowedContactsAvailabilityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Contacts_availability value
func (v ContactsAvailability) Ptr() *ContactsAvailability {
	return &v
}

type NullableContactsAvailability struct {
	value *ContactsAvailability
	isSet bool
}

func (v NullableContactsAvailability) Get() *ContactsAvailability {
	return v.value
}

func (v *NullableContactsAvailability) Set(val *ContactsAvailability) {
	v.value = val
	v.isSet = true
}

func (v NullableContactsAvailability) IsSet() bool {
	return v.isSet
}

func (v *NullableContactsAvailability) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactsAvailability(val *ContactsAvailability) *NullableContactsAvailability {
	return &NullableContactsAvailability{value: val, isSet: true}
}

func (v NullableContactsAvailability) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactsAvailability) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
