/*
Orders

Based on a user's permission, a user may be able to view their own orders or also the orders from all of the users in their organization. These orders can be filtered by product type, order status, location, or date range. Only orders from the past 12 months will be returned.

API version: 2.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ordersv2

import (
	"encoding/json"
	"time"
)

// checks if the OrdersBase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrdersBase{}

// OrdersBase Orders Base is the properties or attributes which common for every order details
type OrdersBase struct {
	// Unique identifier of the order.
	OrderId *string `json:"orderId,omitempty"`
	// Customer account name
	AccountName *string `json:"accountName,omitempty"`
	// Customer account number
	AccountNumber    *string                     `json:"accountNumber,omitempty"`
	QuoteRequestType *OrdersBaseQuoteRequestType `json:"quoteRequestType,omitempty"`
	// The related party associated with the ticket.
	Contacts []Contacts        `json:"contacts,omitempty"`
	Status   *OrdersBaseStatus `json:"status,omitempty"`
	// The order created date and time in UTC timezone.
	CreatedDateTime *time.Time `json:"createdDateTime,omitempty"`
	// The order updated date and time in UTC timezone.
	UpdatedDateTime *time.Time `json:"updatedDateTime,omitempty"`
	// The order closed date and time in UTC timezone.
	ClosedDateTime *time.Time `json:"closedDateTime,omitempty"`
	// The estimated completion date and time in UTC timezone
	EstimatedCompletionDateTime *time.Time            `json:"estimatedCompletionDateTime,omitempty"`
	CurrencyCode                *CurrencyCode         `json:"currencyCode,omitempty"`
	Channel                     *OrdersBaseChannel    `json:"channel,omitempty"`
	SubChannel                  *OrdersBaseSubChannel `json:"subChannel,omitempty"`
	// The notes that are associated to the orders.
	Notes []Note `json:"notes,omitempty"`
	// This section is reserved to display product specific information
	AdditionalInfo []ProductAdditionalInfoInner `json:"additionalInfo,omitempty"`
	// Customer Reference Number / External Reference Number
	CustomerReferenceId *string `json:"customerReferenceId,omitempty"`
	// When `true`, order can be cancelled.
	Cancellable *bool `json:"cancellable,omitempty"`
	// When `true`, order can be modified.
	Modifiable           *bool `json:"modifiable,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OrdersBase OrdersBase

// NewOrdersBase instantiates a new OrdersBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrdersBase() *OrdersBase {
	this := OrdersBase{}
	var cancellable bool = false
	this.Cancellable = &cancellable
	var modifiable bool = false
	this.Modifiable = &modifiable
	return &this
}

// NewOrdersBaseWithDefaults instantiates a new OrdersBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrdersBaseWithDefaults() *OrdersBase {
	this := OrdersBase{}
	var cancellable bool = false
	this.Cancellable = &cancellable
	var modifiable bool = false
	this.Modifiable = &modifiable
	return &this
}

// GetOrderId returns the OrderId field value if set, zero value otherwise.
func (o *OrdersBase) GetOrderId() string {
	if o == nil || IsNil(o.OrderId) {
		var ret string
		return ret
	}
	return *o.OrderId
}

// GetOrderIdOk returns a tuple with the OrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrdersBase) GetOrderIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrderId) {
		return nil, false
	}
	return o.OrderId, true
}

// HasOrderId returns a boolean if a field has been set.
func (o *OrdersBase) HasOrderId() bool {
	if o != nil && !IsNil(o.OrderId) {
		return true
	}

	return false
}

// SetOrderId gets a reference to the given string and assigns it to the OrderId field.
func (o *OrdersBase) SetOrderId(v string) {
	o.OrderId = &v
}

// GetAccountName returns the AccountName field value if set, zero value otherwise.
func (o *OrdersBase) GetAccountName() string {
	if o == nil || IsNil(o.AccountName) {
		var ret string
		return ret
	}
	return *o.AccountName
}

// GetAccountNameOk returns a tuple with the AccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrdersBase) GetAccountNameOk() (*string, bool) {
	if o == nil || IsNil(o.AccountName) {
		return nil, false
	}
	return o.AccountName, true
}

// HasAccountName returns a boolean if a field has been set.
func (o *OrdersBase) HasAccountName() bool {
	if o != nil && !IsNil(o.AccountName) {
		return true
	}

	return false
}

// SetAccountName gets a reference to the given string and assigns it to the AccountName field.
func (o *OrdersBase) SetAccountName(v string) {
	o.AccountName = &v
}

// GetAccountNumber returns the AccountNumber field value if set, zero value otherwise.
func (o *OrdersBase) GetAccountNumber() string {
	if o == nil || IsNil(o.AccountNumber) {
		var ret string
		return ret
	}
	return *o.AccountNumber
}

// GetAccountNumberOk returns a tuple with the AccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrdersBase) GetAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.AccountNumber) {
		return nil, false
	}
	return o.AccountNumber, true
}

// HasAccountNumber returns a boolean if a field has been set.
func (o *OrdersBase) HasAccountNumber() bool {
	if o != nil && !IsNil(o.AccountNumber) {
		return true
	}

	return false
}

// SetAccountNumber gets a reference to the given string and assigns it to the AccountNumber field.
func (o *OrdersBase) SetAccountNumber(v string) {
	o.AccountNumber = &v
}

// GetQuoteRequestType returns the QuoteRequestType field value if set, zero value otherwise.
func (o *OrdersBase) GetQuoteRequestType() OrdersBaseQuoteRequestType {
	if o == nil || IsNil(o.QuoteRequestType) {
		var ret OrdersBaseQuoteRequestType
		return ret
	}
	return *o.QuoteRequestType
}

// GetQuoteRequestTypeOk returns a tuple with the QuoteRequestType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrdersBase) GetQuoteRequestTypeOk() (*OrdersBaseQuoteRequestType, bool) {
	if o == nil || IsNil(o.QuoteRequestType) {
		return nil, false
	}
	return o.QuoteRequestType, true
}

// HasQuoteRequestType returns a boolean if a field has been set.
func (o *OrdersBase) HasQuoteRequestType() bool {
	if o != nil && !IsNil(o.QuoteRequestType) {
		return true
	}

	return false
}

// SetQuoteRequestType gets a reference to the given OrdersBaseQuoteRequestType and assigns it to the QuoteRequestType field.
func (o *OrdersBase) SetQuoteRequestType(v OrdersBaseQuoteRequestType) {
	o.QuoteRequestType = &v
}

// GetContacts returns the Contacts field value if set, zero value otherwise.
func (o *OrdersBase) GetContacts() []Contacts {
	if o == nil || IsNil(o.Contacts) {
		var ret []Contacts
		return ret
	}
	return o.Contacts
}

// GetContactsOk returns a tuple with the Contacts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrdersBase) GetContactsOk() ([]Contacts, bool) {
	if o == nil || IsNil(o.Contacts) {
		return nil, false
	}
	return o.Contacts, true
}

// HasContacts returns a boolean if a field has been set.
func (o *OrdersBase) HasContacts() bool {
	if o != nil && !IsNil(o.Contacts) {
		return true
	}

	return false
}

// SetContacts gets a reference to the given []Contacts and assigns it to the Contacts field.
func (o *OrdersBase) SetContacts(v []Contacts) {
	o.Contacts = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *OrdersBase) GetStatus() OrdersBaseStatus {
	if o == nil || IsNil(o.Status) {
		var ret OrdersBaseStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrdersBase) GetStatusOk() (*OrdersBaseStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *OrdersBase) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given OrdersBaseStatus and assigns it to the Status field.
func (o *OrdersBase) SetStatus(v OrdersBaseStatus) {
	o.Status = &v
}

// GetCreatedDateTime returns the CreatedDateTime field value if set, zero value otherwise.
func (o *OrdersBase) GetCreatedDateTime() time.Time {
	if o == nil || IsNil(o.CreatedDateTime) {
		var ret time.Time
		return ret
	}
	return *o.CreatedDateTime
}

// GetCreatedDateTimeOk returns a tuple with the CreatedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrdersBase) GetCreatedDateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedDateTime) {
		return nil, false
	}
	return o.CreatedDateTime, true
}

// HasCreatedDateTime returns a boolean if a field has been set.
func (o *OrdersBase) HasCreatedDateTime() bool {
	if o != nil && !IsNil(o.CreatedDateTime) {
		return true
	}

	return false
}

// SetCreatedDateTime gets a reference to the given time.Time and assigns it to the CreatedDateTime field.
func (o *OrdersBase) SetCreatedDateTime(v time.Time) {
	o.CreatedDateTime = &v
}

// GetUpdatedDateTime returns the UpdatedDateTime field value if set, zero value otherwise.
func (o *OrdersBase) GetUpdatedDateTime() time.Time {
	if o == nil || IsNil(o.UpdatedDateTime) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedDateTime
}

// GetUpdatedDateTimeOk returns a tuple with the UpdatedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrdersBase) GetUpdatedDateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedDateTime) {
		return nil, false
	}
	return o.UpdatedDateTime, true
}

// HasUpdatedDateTime returns a boolean if a field has been set.
func (o *OrdersBase) HasUpdatedDateTime() bool {
	if o != nil && !IsNil(o.UpdatedDateTime) {
		return true
	}

	return false
}

// SetUpdatedDateTime gets a reference to the given time.Time and assigns it to the UpdatedDateTime field.
func (o *OrdersBase) SetUpdatedDateTime(v time.Time) {
	o.UpdatedDateTime = &v
}

// GetClosedDateTime returns the ClosedDateTime field value if set, zero value otherwise.
func (o *OrdersBase) GetClosedDateTime() time.Time {
	if o == nil || IsNil(o.ClosedDateTime) {
		var ret time.Time
		return ret
	}
	return *o.ClosedDateTime
}

// GetClosedDateTimeOk returns a tuple with the ClosedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrdersBase) GetClosedDateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ClosedDateTime) {
		return nil, false
	}
	return o.ClosedDateTime, true
}

// HasClosedDateTime returns a boolean if a field has been set.
func (o *OrdersBase) HasClosedDateTime() bool {
	if o != nil && !IsNil(o.ClosedDateTime) {
		return true
	}

	return false
}

// SetClosedDateTime gets a reference to the given time.Time and assigns it to the ClosedDateTime field.
func (o *OrdersBase) SetClosedDateTime(v time.Time) {
	o.ClosedDateTime = &v
}

// GetEstimatedCompletionDateTime returns the EstimatedCompletionDateTime field value if set, zero value otherwise.
func (o *OrdersBase) GetEstimatedCompletionDateTime() time.Time {
	if o == nil || IsNil(o.EstimatedCompletionDateTime) {
		var ret time.Time
		return ret
	}
	return *o.EstimatedCompletionDateTime
}

// GetEstimatedCompletionDateTimeOk returns a tuple with the EstimatedCompletionDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrdersBase) GetEstimatedCompletionDateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EstimatedCompletionDateTime) {
		return nil, false
	}
	return o.EstimatedCompletionDateTime, true
}

// HasEstimatedCompletionDateTime returns a boolean if a field has been set.
func (o *OrdersBase) HasEstimatedCompletionDateTime() bool {
	if o != nil && !IsNil(o.EstimatedCompletionDateTime) {
		return true
	}

	return false
}

// SetEstimatedCompletionDateTime gets a reference to the given time.Time and assigns it to the EstimatedCompletionDateTime field.
func (o *OrdersBase) SetEstimatedCompletionDateTime(v time.Time) {
	o.EstimatedCompletionDateTime = &v
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *OrdersBase) GetCurrencyCode() CurrencyCode {
	if o == nil || IsNil(o.CurrencyCode) {
		var ret CurrencyCode
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrdersBase) GetCurrencyCodeOk() (*CurrencyCode, bool) {
	if o == nil || IsNil(o.CurrencyCode) {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *OrdersBase) HasCurrencyCode() bool {
	if o != nil && !IsNil(o.CurrencyCode) {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given CurrencyCode and assigns it to the CurrencyCode field.
func (o *OrdersBase) SetCurrencyCode(v CurrencyCode) {
	o.CurrencyCode = &v
}

// GetChannel returns the Channel field value if set, zero value otherwise.
func (o *OrdersBase) GetChannel() OrdersBaseChannel {
	if o == nil || IsNil(o.Channel) {
		var ret OrdersBaseChannel
		return ret
	}
	return *o.Channel
}

// GetChannelOk returns a tuple with the Channel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrdersBase) GetChannelOk() (*OrdersBaseChannel, bool) {
	if o == nil || IsNil(o.Channel) {
		return nil, false
	}
	return o.Channel, true
}

// HasChannel returns a boolean if a field has been set.
func (o *OrdersBase) HasChannel() bool {
	if o != nil && !IsNil(o.Channel) {
		return true
	}

	return false
}

// SetChannel gets a reference to the given OrdersBaseChannel and assigns it to the Channel field.
func (o *OrdersBase) SetChannel(v OrdersBaseChannel) {
	o.Channel = &v
}

// GetSubChannel returns the SubChannel field value if set, zero value otherwise.
func (o *OrdersBase) GetSubChannel() OrdersBaseSubChannel {
	if o == nil || IsNil(o.SubChannel) {
		var ret OrdersBaseSubChannel
		return ret
	}
	return *o.SubChannel
}

// GetSubChannelOk returns a tuple with the SubChannel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrdersBase) GetSubChannelOk() (*OrdersBaseSubChannel, bool) {
	if o == nil || IsNil(o.SubChannel) {
		return nil, false
	}
	return o.SubChannel, true
}

// HasSubChannel returns a boolean if a field has been set.
func (o *OrdersBase) HasSubChannel() bool {
	if o != nil && !IsNil(o.SubChannel) {
		return true
	}

	return false
}

// SetSubChannel gets a reference to the given OrdersBaseSubChannel and assigns it to the SubChannel field.
func (o *OrdersBase) SetSubChannel(v OrdersBaseSubChannel) {
	o.SubChannel = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *OrdersBase) GetNotes() []Note {
	if o == nil || IsNil(o.Notes) {
		var ret []Note
		return ret
	}
	return o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrdersBase) GetNotesOk() ([]Note, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *OrdersBase) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given []Note and assigns it to the Notes field.
func (o *OrdersBase) SetNotes(v []Note) {
	o.Notes = v
}

// GetAdditionalInfo returns the AdditionalInfo field value if set, zero value otherwise.
func (o *OrdersBase) GetAdditionalInfo() []ProductAdditionalInfoInner {
	if o == nil || IsNil(o.AdditionalInfo) {
		var ret []ProductAdditionalInfoInner
		return ret
	}
	return o.AdditionalInfo
}

// GetAdditionalInfoOk returns a tuple with the AdditionalInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrdersBase) GetAdditionalInfoOk() ([]ProductAdditionalInfoInner, bool) {
	if o == nil || IsNil(o.AdditionalInfo) {
		return nil, false
	}
	return o.AdditionalInfo, true
}

// HasAdditionalInfo returns a boolean if a field has been set.
func (o *OrdersBase) HasAdditionalInfo() bool {
	if o != nil && !IsNil(o.AdditionalInfo) {
		return true
	}

	return false
}

// SetAdditionalInfo gets a reference to the given []ProductAdditionalInfoInner and assigns it to the AdditionalInfo field.
func (o *OrdersBase) SetAdditionalInfo(v []ProductAdditionalInfoInner) {
	o.AdditionalInfo = v
}

// GetCustomerReferenceId returns the CustomerReferenceId field value if set, zero value otherwise.
func (o *OrdersBase) GetCustomerReferenceId() string {
	if o == nil || IsNil(o.CustomerReferenceId) {
		var ret string
		return ret
	}
	return *o.CustomerReferenceId
}

// GetCustomerReferenceIdOk returns a tuple with the CustomerReferenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrdersBase) GetCustomerReferenceIdOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerReferenceId) {
		return nil, false
	}
	return o.CustomerReferenceId, true
}

// HasCustomerReferenceId returns a boolean if a field has been set.
func (o *OrdersBase) HasCustomerReferenceId() bool {
	if o != nil && !IsNil(o.CustomerReferenceId) {
		return true
	}

	return false
}

// SetCustomerReferenceId gets a reference to the given string and assigns it to the CustomerReferenceId field.
func (o *OrdersBase) SetCustomerReferenceId(v string) {
	o.CustomerReferenceId = &v
}

// GetCancellable returns the Cancellable field value if set, zero value otherwise.
func (o *OrdersBase) GetCancellable() bool {
	if o == nil || IsNil(o.Cancellable) {
		var ret bool
		return ret
	}
	return *o.Cancellable
}

// GetCancellableOk returns a tuple with the Cancellable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrdersBase) GetCancellableOk() (*bool, bool) {
	if o == nil || IsNil(o.Cancellable) {
		return nil, false
	}
	return o.Cancellable, true
}

// HasCancellable returns a boolean if a field has been set.
func (o *OrdersBase) HasCancellable() bool {
	if o != nil && !IsNil(o.Cancellable) {
		return true
	}

	return false
}

// SetCancellable gets a reference to the given bool and assigns it to the Cancellable field.
func (o *OrdersBase) SetCancellable(v bool) {
	o.Cancellable = &v
}

// GetModifiable returns the Modifiable field value if set, zero value otherwise.
func (o *OrdersBase) GetModifiable() bool {
	if o == nil || IsNil(o.Modifiable) {
		var ret bool
		return ret
	}
	return *o.Modifiable
}

// GetModifiableOk returns a tuple with the Modifiable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrdersBase) GetModifiableOk() (*bool, bool) {
	if o == nil || IsNil(o.Modifiable) {
		return nil, false
	}
	return o.Modifiable, true
}

// HasModifiable returns a boolean if a field has been set.
func (o *OrdersBase) HasModifiable() bool {
	if o != nil && !IsNil(o.Modifiable) {
		return true
	}

	return false
}

// SetModifiable gets a reference to the given bool and assigns it to the Modifiable field.
func (o *OrdersBase) SetModifiable(v bool) {
	o.Modifiable = &v
}

func (o OrdersBase) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrdersBase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OrderId) {
		toSerialize["orderId"] = o.OrderId
	}
	if !IsNil(o.AccountName) {
		toSerialize["accountName"] = o.AccountName
	}
	if !IsNil(o.AccountNumber) {
		toSerialize["accountNumber"] = o.AccountNumber
	}
	if !IsNil(o.QuoteRequestType) {
		toSerialize["quoteRequestType"] = o.QuoteRequestType
	}
	if !IsNil(o.Contacts) {
		toSerialize["contacts"] = o.Contacts
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.CreatedDateTime) {
		toSerialize["createdDateTime"] = o.CreatedDateTime
	}
	if !IsNil(o.UpdatedDateTime) {
		toSerialize["updatedDateTime"] = o.UpdatedDateTime
	}
	if !IsNil(o.ClosedDateTime) {
		toSerialize["closedDateTime"] = o.ClosedDateTime
	}
	if !IsNil(o.EstimatedCompletionDateTime) {
		toSerialize["estimatedCompletionDateTime"] = o.EstimatedCompletionDateTime
	}
	if !IsNil(o.CurrencyCode) {
		toSerialize["currencyCode"] = o.CurrencyCode
	}
	if !IsNil(o.Channel) {
		toSerialize["channel"] = o.Channel
	}
	if !IsNil(o.SubChannel) {
		toSerialize["subChannel"] = o.SubChannel
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.AdditionalInfo) {
		toSerialize["additionalInfo"] = o.AdditionalInfo
	}
	if !IsNil(o.CustomerReferenceId) {
		toSerialize["customerReferenceId"] = o.CustomerReferenceId
	}
	if !IsNil(o.Cancellable) {
		toSerialize["cancellable"] = o.Cancellable
	}
	if !IsNil(o.Modifiable) {
		toSerialize["modifiable"] = o.Modifiable
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OrdersBase) UnmarshalJSON(data []byte) (err error) {
	varOrdersBase := _OrdersBase{}

	err = json.Unmarshal(data, &varOrdersBase)

	if err != nil {
		return err
	}

	*o = OrdersBase(varOrdersBase)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "orderId")
		delete(additionalProperties, "accountName")
		delete(additionalProperties, "accountNumber")
		delete(additionalProperties, "quoteRequestType")
		delete(additionalProperties, "contacts")
		delete(additionalProperties, "status")
		delete(additionalProperties, "createdDateTime")
		delete(additionalProperties, "updatedDateTime")
		delete(additionalProperties, "closedDateTime")
		delete(additionalProperties, "estimatedCompletionDateTime")
		delete(additionalProperties, "currencyCode")
		delete(additionalProperties, "channel")
		delete(additionalProperties, "subChannel")
		delete(additionalProperties, "notes")
		delete(additionalProperties, "additionalInfo")
		delete(additionalProperties, "customerReferenceId")
		delete(additionalProperties, "cancellable")
		delete(additionalProperties, "modifiable")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOrdersBase struct {
	value *OrdersBase
	isSet bool
}

func (v NullableOrdersBase) Get() *OrdersBase {
	return v.value
}

func (v *NullableOrdersBase) Set(val *OrdersBase) {
	v.value = val
	v.isSet = true
}

func (v NullableOrdersBase) IsSet() bool {
	return v.isSet
}

func (v *NullableOrdersBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrdersBase(val *OrdersBase) *NullableOrdersBase {
	return &NullableOrdersBase{value: val, isSet: true}
}

func (v NullableOrdersBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrdersBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
