/*
Orders

Based on a user's permission, a user may be able to view their own orders or also the orders from all of the users in their organization. These orders can be filtered by product type, order status, location, or date range. Only orders from the past 12 months will be returned.

API version: 2.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ordersv2

import (
	"encoding/json"
	"fmt"
)

// OrdersBaseStatus The current status of the order or service
type OrdersBaseStatus string

// List of ordersBase_status
const (
	ORDERSBASESTATUS_RECEIVED    OrdersBaseStatus = "RECEIVED"
	ORDERSBASESTATUS_IN_PROGRESS OrdersBaseStatus = "IN_PROGRESS"
	ORDERSBASESTATUS_ON_HOLD     OrdersBaseStatus = "ON_HOLD"
	ORDERSBASESTATUS_CLOSED      OrdersBaseStatus = "CLOSED"
	ORDERSBASESTATUS_CANCELLED   OrdersBaseStatus = "CANCELLED"
)

// All allowed values of OrdersBaseStatus enum
var AllowedOrdersBaseStatusEnumValues = []OrdersBaseStatus{
	"RECEIVED",
	"IN_PROGRESS",
	"ON_HOLD",
	"CLOSED",
	"CANCELLED",
}

func (v *OrdersBaseStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrdersBaseStatus(value)
	for _, existing := range AllowedOrdersBaseStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrdersBaseStatus", value)
}

// NewOrdersBaseStatusFromValue returns a pointer to a valid OrdersBaseStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrdersBaseStatusFromValue(v string) (*OrdersBaseStatus, error) {
	ev := OrdersBaseStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrdersBaseStatus: valid values are %v", v, AllowedOrdersBaseStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrdersBaseStatus) IsValid() bool {
	for _, existing := range AllowedOrdersBaseStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ordersBase_status value
func (v OrdersBaseStatus) Ptr() *OrdersBaseStatus {
	return &v
}

type NullableOrdersBaseStatus struct {
	value *OrdersBaseStatus
	isSet bool
}

func (v NullableOrdersBaseStatus) Get() *OrdersBaseStatus {
	return v.value
}

func (v *NullableOrdersBaseStatus) Set(val *OrdersBaseStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableOrdersBaseStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableOrdersBaseStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrdersBaseStatus(val *OrdersBaseStatus) *NullableOrdersBaseStatus {
	return &NullableOrdersBaseStatus{value: val, isSet: true}
}

func (v NullableOrdersBaseStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrdersBaseStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
