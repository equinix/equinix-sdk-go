/*
Orders

Based on a user's permission, a user may be able to view their own orders or also the orders from all of the users in their organization. These orders can be filtered by product type, order status, location, or date range. Only orders from the past 12 months will be returned.

API version: 2.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ordersv2

import (
	"encoding/json"
	"fmt"
)

// OrdersLineRequestType Type of order request. ie `requestType` can be of `ADD` if you are adding new services/product.
type OrdersLineRequestType string

// List of ordersLine_requestType
const (
	ORDERSLINEREQUESTTYPE_ADD       OrdersLineRequestType = "ADD"
	ORDERSLINEREQUESTTYPE_DELETE    OrdersLineRequestType = "DELETE"
	ORDERSLINEREQUESTTYPE_NO_CHANGE OrdersLineRequestType = "NO_CHANGE"
	ORDERSLINEREQUESTTYPE_UPDATE    OrdersLineRequestType = "UPDATE"
)

// All allowed values of OrdersLineRequestType enum
var AllowedOrdersLineRequestTypeEnumValues = []OrdersLineRequestType{
	"ADD",
	"DELETE",
	"NO_CHANGE",
	"UPDATE",
}

func (v *OrdersLineRequestType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrdersLineRequestType(value)
	for _, existing := range AllowedOrdersLineRequestTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrdersLineRequestType", value)
}

// NewOrdersLineRequestTypeFromValue returns a pointer to a valid OrdersLineRequestType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrdersLineRequestTypeFromValue(v string) (*OrdersLineRequestType, error) {
	ev := OrdersLineRequestType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrdersLineRequestType: valid values are %v", v, AllowedOrdersLineRequestTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrdersLineRequestType) IsValid() bool {
	for _, existing := range AllowedOrdersLineRequestTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ordersLine_requestType value
func (v OrdersLineRequestType) Ptr() *OrdersLineRequestType {
	return &v
}

type NullableOrdersLineRequestType struct {
	value *OrdersLineRequestType
	isSet bool
}

func (v NullableOrdersLineRequestType) Get() *OrdersLineRequestType {
	return v.value
}

func (v *NullableOrdersLineRequestType) Set(val *OrdersLineRequestType) {
	v.value = val
	v.isSet = true
}

func (v NullableOrdersLineRequestType) IsSet() bool {
	return v.isSet
}

func (v *NullableOrdersLineRequestType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrdersLineRequestType(val *OrdersLineRequestType) *NullableOrdersLineRequestType {
	return &NullableOrdersLineRequestType{value: val, isSet: true}
}

func (v NullableOrdersLineRequestType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrdersLineRequestType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
