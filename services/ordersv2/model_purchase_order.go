/*
Orders

Based on a user's permission, a user may be able to view their own orders or also the orders from all of the users in their organization. These orders can be filtered by product type, order status, location, or date range. Only orders from the past 12 months will be returned.

API version: 2.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ordersv2

import (
	"encoding/json"
)

// checks if the PurchaseOrder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PurchaseOrder{}

// PurchaseOrder Purchase Order
type PurchaseOrder struct {
	Type *PurchaseOrderType `json:"type,omitempty"`
	// Purchase order number
	Number *string `json:"number,omitempty"`
	// Closing date of purchase order.
	ClosingDate          *string `json:"closingDate,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PurchaseOrder PurchaseOrder

// NewPurchaseOrder instantiates a new PurchaseOrder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPurchaseOrder() *PurchaseOrder {
	this := PurchaseOrder{}
	return &this
}

// NewPurchaseOrderWithDefaults instantiates a new PurchaseOrder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPurchaseOrderWithDefaults() *PurchaseOrder {
	this := PurchaseOrder{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PurchaseOrder) GetType() PurchaseOrderType {
	if o == nil || IsNil(o.Type) {
		var ret PurchaseOrderType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetTypeOk() (*PurchaseOrderType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PurchaseOrder) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given PurchaseOrderType and assigns it to the Type field.
func (o *PurchaseOrder) SetType(v PurchaseOrderType) {
	o.Type = &v
}

// GetNumber returns the Number field value if set, zero value otherwise.
func (o *PurchaseOrder) GetNumber() string {
	if o == nil || IsNil(o.Number) {
		var ret string
		return ret
	}
	return *o.Number
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetNumberOk() (*string, bool) {
	if o == nil || IsNil(o.Number) {
		return nil, false
	}
	return o.Number, true
}

// HasNumber returns a boolean if a field has been set.
func (o *PurchaseOrder) HasNumber() bool {
	if o != nil && !IsNil(o.Number) {
		return true
	}

	return false
}

// SetNumber gets a reference to the given string and assigns it to the Number field.
func (o *PurchaseOrder) SetNumber(v string) {
	o.Number = &v
}

// GetClosingDate returns the ClosingDate field value if set, zero value otherwise.
func (o *PurchaseOrder) GetClosingDate() string {
	if o == nil || IsNil(o.ClosingDate) {
		var ret string
		return ret
	}
	return *o.ClosingDate
}

// GetClosingDateOk returns a tuple with the ClosingDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetClosingDateOk() (*string, bool) {
	if o == nil || IsNil(o.ClosingDate) {
		return nil, false
	}
	return o.ClosingDate, true
}

// HasClosingDate returns a boolean if a field has been set.
func (o *PurchaseOrder) HasClosingDate() bool {
	if o != nil && !IsNil(o.ClosingDate) {
		return true
	}

	return false
}

// SetClosingDate gets a reference to the given string and assigns it to the ClosingDate field.
func (o *PurchaseOrder) SetClosingDate(v string) {
	o.ClosingDate = &v
}

func (o PurchaseOrder) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PurchaseOrder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Number) {
		toSerialize["number"] = o.Number
	}
	if !IsNil(o.ClosingDate) {
		toSerialize["closingDate"] = o.ClosingDate
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PurchaseOrder) UnmarshalJSON(data []byte) (err error) {
	varPurchaseOrder := _PurchaseOrder{}

	err = json.Unmarshal(data, &varPurchaseOrder)

	if err != nil {
		return err
	}

	*o = PurchaseOrder(varPurchaseOrder)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "number")
		delete(additionalProperties, "closingDate")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePurchaseOrder struct {
	value *PurchaseOrder
	isSet bool
}

func (v NullablePurchaseOrder) Get() *PurchaseOrder {
	return v.value
}

func (v *NullablePurchaseOrder) Set(val *PurchaseOrder) {
	v.value = val
	v.isSet = true
}

func (v NullablePurchaseOrder) IsSet() bool {
	return v.isSet
}

func (v *NullablePurchaseOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePurchaseOrder(val *PurchaseOrder) *NullablePurchaseOrder {
	return &NullablePurchaseOrder{value: val, isSet: true}
}

func (v NullablePurchaseOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePurchaseOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
