/*
Orders

Based on a user's permission, a user may be able to view their own orders or also the orders from all of the users in their organization. These orders can be filtered by product type, order status, location, or date range. Only orders from the past 12 months will be returned.

API version: 2.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ordersv2

import (
	"encoding/json"
	"fmt"
)

// checks if the NegotiationsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NegotiationsRequest{}

// NegotiationsRequest struct for NegotiationsRequest
type NegotiationsRequest struct {
	// Unique identifier to reference specific activity or order line id.
	ReferenceId string                    `json:"referenceId"`
	Action      NegotiationsRequestAction `json:"action"`
	// Reason for cancelling the negotiation
	Reason               *string `json:"reason,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NegotiationsRequest NegotiationsRequest

// NewNegotiationsRequest instantiates a new NegotiationsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNegotiationsRequest(referenceId string, action NegotiationsRequestAction) *NegotiationsRequest {
	this := NegotiationsRequest{}
	this.ReferenceId = referenceId
	this.Action = action
	return &this
}

// NewNegotiationsRequestWithDefaults instantiates a new NegotiationsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNegotiationsRequestWithDefaults() *NegotiationsRequest {
	this := NegotiationsRequest{}
	return &this
}

// GetReferenceId returns the ReferenceId field value
func (o *NegotiationsRequest) GetReferenceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReferenceId
}

// GetReferenceIdOk returns a tuple with the ReferenceId field value
// and a boolean to check if the value has been set.
func (o *NegotiationsRequest) GetReferenceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReferenceId, true
}

// SetReferenceId sets field value
func (o *NegotiationsRequest) SetReferenceId(v string) {
	o.ReferenceId = v
}

// GetAction returns the Action field value
func (o *NegotiationsRequest) GetAction() NegotiationsRequestAction {
	if o == nil {
		var ret NegotiationsRequestAction
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *NegotiationsRequest) GetActionOk() (*NegotiationsRequestAction, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *NegotiationsRequest) SetAction(v NegotiationsRequestAction) {
	o.Action = v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *NegotiationsRequest) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NegotiationsRequest) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *NegotiationsRequest) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *NegotiationsRequest) SetReason(v string) {
	o.Reason = &v
}

func (o NegotiationsRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NegotiationsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["referenceId"] = o.ReferenceId
	toSerialize["action"] = o.Action
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NegotiationsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"referenceId",
		"action",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNegotiationsRequest := _NegotiationsRequest{}

	err = json.Unmarshal(data, &varNegotiationsRequest)

	if err != nil {
		return err
	}

	*o = NegotiationsRequest(varNegotiationsRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "referenceId")
		delete(additionalProperties, "action")
		delete(additionalProperties, "reason")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNegotiationsRequest struct {
	value *NegotiationsRequest
	isSet bool
}

func (v NullableNegotiationsRequest) Get() *NegotiationsRequest {
	return v.value
}

func (v *NullableNegotiationsRequest) Set(val *NegotiationsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableNegotiationsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableNegotiationsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNegotiationsRequest(val *NegotiationsRequest) *NullableNegotiationsRequest {
	return &NullableNegotiationsRequest{value: val, isSet: true}
}

func (v NullableNegotiationsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNegotiationsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
