/*
Orders

Based on a user's permission, a user may be able to view their own orders or also the orders from all of the users in their organization. These orders can be filtered by product type, order status, location, or date range. Only orders from the past 12 months will be returned.

API version: 2.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ordersv2

import (
	"encoding/json"
	"fmt"
)

// OrdersBaseChannel Type of channel used to place the order
type OrdersBaseChannel string

// List of ordersBase_channel
const (
	ORDERSBASECHANNEL_API     OrdersBaseChannel = "API"
	ORDERSBASECHANNEL_PORTAL  OrdersBaseChannel = "PORTAL"
	ORDERSBASECHANNEL_MOBILE  OrdersBaseChannel = "MOBILE"
	ORDERSBASECHANNEL_OFFLINE OrdersBaseChannel = "OFFLINE"
)

// All allowed values of OrdersBaseChannel enum
var AllowedOrdersBaseChannelEnumValues = []OrdersBaseChannel{
	"API",
	"PORTAL",
	"MOBILE",
	"OFFLINE",
}

func (v *OrdersBaseChannel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrdersBaseChannel(value)
	for _, existing := range AllowedOrdersBaseChannelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrdersBaseChannel", value)
}

// NewOrdersBaseChannelFromValue returns a pointer to a valid OrdersBaseChannel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrdersBaseChannelFromValue(v string) (*OrdersBaseChannel, error) {
	ev := OrdersBaseChannel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrdersBaseChannel: valid values are %v", v, AllowedOrdersBaseChannelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrdersBaseChannel) IsValid() bool {
	for _, existing := range AllowedOrdersBaseChannelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ordersBase_channel value
func (v OrdersBaseChannel) Ptr() *OrdersBaseChannel {
	return &v
}

type NullableOrdersBaseChannel struct {
	value *OrdersBaseChannel
	isSet bool
}

func (v NullableOrdersBaseChannel) Get() *OrdersBaseChannel {
	return v.value
}

func (v *NullableOrdersBaseChannel) Set(val *OrdersBaseChannel) {
	v.value = val
	v.isSet = true
}

func (v NullableOrdersBaseChannel) IsSet() bool {
	return v.isSet
}

func (v *NullableOrdersBaseChannel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrdersBaseChannel(val *OrdersBaseChannel) *NullableOrdersBaseChannel {
	return &NullableOrdersBaseChannel{value: val, isSet: true}
}

func (v NullableOrdersBaseChannel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrdersBaseChannel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
