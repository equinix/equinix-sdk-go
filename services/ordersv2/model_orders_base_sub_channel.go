/*
Orders

Based on a user's permission, a user may be able to view their own orders or also the orders from all of the users in their organization. These orders can be filtered by product type, order status, location, or date range. Only orders from the past 12 months will be returned.

API version: 2.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ordersv2

import (
	"encoding/json"
	"fmt"
)

// OrdersBaseSubChannel Type of sub-channel used to place the order
type OrdersBaseSubChannel string

// List of ordersBase_subChannel
const (
	ORDERSBASESUBCHANNEL_ECP   OrdersBaseSubChannel = "ECP"
	ORDERSBASESUBCHANNEL_ECX   OrdersBaseSubChannel = "ECX"
	ORDERSBASESUBCHANNEL_IX    OrdersBaseSubChannel = "IX"
	ORDERSBASESUBCHANNEL_NE    OrdersBaseSubChannel = "NE"
	ORDERSBASESUBCHANNEL_EMG   OrdersBaseSubChannel = "EMG"
	ORDERSBASESUBCHANNEL_QUOTE OrdersBaseSubChannel = "QUOTE"
)

// All allowed values of OrdersBaseSubChannel enum
var AllowedOrdersBaseSubChannelEnumValues = []OrdersBaseSubChannel{
	"ECP",
	"ECX",
	"IX",
	"NE",
	"EMG",
	"QUOTE",
}

func (v *OrdersBaseSubChannel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrdersBaseSubChannel(value)
	for _, existing := range AllowedOrdersBaseSubChannelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrdersBaseSubChannel", value)
}

// NewOrdersBaseSubChannelFromValue returns a pointer to a valid OrdersBaseSubChannel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrdersBaseSubChannelFromValue(v string) (*OrdersBaseSubChannel, error) {
	ev := OrdersBaseSubChannel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrdersBaseSubChannel: valid values are %v", v, AllowedOrdersBaseSubChannelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrdersBaseSubChannel) IsValid() bool {
	for _, existing := range AllowedOrdersBaseSubChannelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ordersBase_subChannel value
func (v OrdersBaseSubChannel) Ptr() *OrdersBaseSubChannel {
	return &v
}

type NullableOrdersBaseSubChannel struct {
	value *OrdersBaseSubChannel
	isSet bool
}

func (v NullableOrdersBaseSubChannel) Get() *OrdersBaseSubChannel {
	return v.value
}

func (v *NullableOrdersBaseSubChannel) Set(val *OrdersBaseSubChannel) {
	v.value = val
	v.isSet = true
}

func (v NullableOrdersBaseSubChannel) IsSet() bool {
	return v.isSet
}

func (v *NullableOrdersBaseSubChannel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrdersBaseSubChannel(val *OrdersBaseSubChannel) *NullableOrdersBaseSubChannel {
	return &NullableOrdersBaseSubChannel{value: val, isSet: true}
}

func (v NullableOrdersBaseSubChannel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrdersBaseSubChannel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
