/*
Orders

Based on a user's permission, a user may be able to view their own orders or also the orders from all of the users in their organization. These orders can be filtered by product type, order status, location, or date range. Only orders from the past 12 months will be returned.

API version: 2.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ordersv2

import (
	"encoding/json"
	"fmt"
)

// PurchaseOrderType Type of the purchase order
type PurchaseOrderType string

// List of purchaseOrder_type
const (
	PURCHASEORDERTYPE_EXEMPTED PurchaseOrderType = "EXEMPTED"
	PURCHASEORDERTYPE_NEW      PurchaseOrderType = "NEW"
	PURCHASEORDERTYPE_EXISTING PurchaseOrderType = "EXISTING"
)

// All allowed values of PurchaseOrderType enum
var AllowedPurchaseOrderTypeEnumValues = []PurchaseOrderType{
	"EXEMPTED",
	"NEW",
	"EXISTING",
}

func (v *PurchaseOrderType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PurchaseOrderType(value)
	for _, existing := range AllowedPurchaseOrderTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PurchaseOrderType", value)
}

// NewPurchaseOrderTypeFromValue returns a pointer to a valid PurchaseOrderType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPurchaseOrderTypeFromValue(v string) (*PurchaseOrderType, error) {
	ev := PurchaseOrderType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PurchaseOrderType: valid values are %v", v, AllowedPurchaseOrderTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PurchaseOrderType) IsValid() bool {
	for _, existing := range AllowedPurchaseOrderTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to purchaseOrder_type value
func (v PurchaseOrderType) Ptr() *PurchaseOrderType {
	return &v
}

type NullablePurchaseOrderType struct {
	value *PurchaseOrderType
	isSet bool
}

func (v NullablePurchaseOrderType) Get() *PurchaseOrderType {
	return v.value
}

func (v *NullablePurchaseOrderType) Set(val *PurchaseOrderType) {
	v.value = val
	v.isSet = true
}

func (v NullablePurchaseOrderType) IsSet() bool {
	return v.isSet
}

func (v *NullablePurchaseOrderType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePurchaseOrderType(val *PurchaseOrderType) *NullablePurchaseOrderType {
	return &NullablePurchaseOrderType{value: val, isSet: true}
}

func (v NullablePurchaseOrderType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePurchaseOrderType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
