/*
Orders

Based on a user's permission, a user may be able to view their own orders or also the orders from all of the users in their organization. These orders can be filtered by product type, order status, location, or date range. Only orders from the past 12 months will be returned.

API version: 2.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ordersv2

import (
	"encoding/json"
	"fmt"
)

// OrdersBaseQuoteRequestType The request type of the quote
type OrdersBaseQuoteRequestType string

// List of ordersBase_quoteRequestType
const (
	ORDERSBASEQUOTEREQUESTTYPE_NEW                 OrdersBaseQuoteRequestType = "NEW"
	ORDERSBASEQUOTEREQUESTTYPE_AMENDMENT           OrdersBaseQuoteRequestType = "AMENDMENT"
	ORDERSBASEQUOTEREQUESTTYPE_PAPERWORK           OrdersBaseQuoteRequestType = "PAPERWORK"
	ORDERSBASEQUOTEREQUESTTYPE_REPLACEMENT_RENEWAL OrdersBaseQuoteRequestType = "REPLACEMENT_RENEWAL"
	ORDERSBASEQUOTEREQUESTTYPE_TERMINATION         OrdersBaseQuoteRequestType = "TERMINATION"
	ORDERSBASEQUOTEREQUESTTYPE_MIGRATION           OrdersBaseQuoteRequestType = "MIGRATION"
)

// All allowed values of OrdersBaseQuoteRequestType enum
var AllowedOrdersBaseQuoteRequestTypeEnumValues = []OrdersBaseQuoteRequestType{
	"NEW",
	"AMENDMENT",
	"PAPERWORK",
	"REPLACEMENT_RENEWAL",
	"TERMINATION",
	"MIGRATION",
}

func (v *OrdersBaseQuoteRequestType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrdersBaseQuoteRequestType(value)
	for _, existing := range AllowedOrdersBaseQuoteRequestTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrdersBaseQuoteRequestType", value)
}

// NewOrdersBaseQuoteRequestTypeFromValue returns a pointer to a valid OrdersBaseQuoteRequestType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrdersBaseQuoteRequestTypeFromValue(v string) (*OrdersBaseQuoteRequestType, error) {
	ev := OrdersBaseQuoteRequestType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrdersBaseQuoteRequestType: valid values are %v", v, AllowedOrdersBaseQuoteRequestTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrdersBaseQuoteRequestType) IsValid() bool {
	for _, existing := range AllowedOrdersBaseQuoteRequestTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ordersBase_quoteRequestType value
func (v OrdersBaseQuoteRequestType) Ptr() *OrdersBaseQuoteRequestType {
	return &v
}

type NullableOrdersBaseQuoteRequestType struct {
	value *OrdersBaseQuoteRequestType
	isSet bool
}

func (v NullableOrdersBaseQuoteRequestType) Get() *OrdersBaseQuoteRequestType {
	return v.value
}

func (v *NullableOrdersBaseQuoteRequestType) Set(val *OrdersBaseQuoteRequestType) {
	v.value = val
	v.isSet = true
}

func (v NullableOrdersBaseQuoteRequestType) IsSet() bool {
	return v.isSet
}

func (v *NullableOrdersBaseQuoteRequestType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrdersBaseQuoteRequestType(val *OrdersBaseQuoteRequestType) *NullableOrdersBaseQuoteRequestType {
	return &NullableOrdersBaseQuoteRequestType{value: val, isSet: true}
}

func (v NullableOrdersBaseQuoteRequestType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrdersBaseQuoteRequestType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
