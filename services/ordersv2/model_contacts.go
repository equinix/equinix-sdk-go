/*
Orders

Based on a user's permission, a user may be able to view their own orders or also the orders from all of the users in their organization. These orders can be filtered by product type, order status, location, or date range. Only orders from the past 12 months will be returned.

API version: 2.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ordersv2

import (
	"encoding/json"
)

// checks if the Contacts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Contacts{}

// Contacts Contact information.
type Contacts struct {
	// Username of a registered user.
	RegisteredUser *string `json:"registeredUser,omitempty"`
	// First name of the contact.
	FirstName *string `json:"firstName,omitempty"`
	// Last name of the contact.
	LastName     *string               `json:"lastName,omitempty"`
	Type         *ContactsType         `json:"type,omitempty"`
	Availability *ContactsAvailability `json:"availability,omitempty"`
	Timezone     *TIMEZONELIST         `json:"timezone,omitempty"`
	// Reference of the related party, could be a party reference or a party role reference
	Details              []ContactsDetails `json:"details,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Contacts Contacts

// NewContacts instantiates a new Contacts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContacts() *Contacts {
	this := Contacts{}
	var availability ContactsAvailability = CONTACTSAVAILABILITY_ANYTIME
	this.Availability = &availability
	return &this
}

// NewContactsWithDefaults instantiates a new Contacts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContactsWithDefaults() *Contacts {
	this := Contacts{}
	var availability ContactsAvailability = CONTACTSAVAILABILITY_ANYTIME
	this.Availability = &availability
	return &this
}

// GetRegisteredUser returns the RegisteredUser field value if set, zero value otherwise.
func (o *Contacts) GetRegisteredUser() string {
	if o == nil || IsNil(o.RegisteredUser) {
		var ret string
		return ret
	}
	return *o.RegisteredUser
}

// GetRegisteredUserOk returns a tuple with the RegisteredUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contacts) GetRegisteredUserOk() (*string, bool) {
	if o == nil || IsNil(o.RegisteredUser) {
		return nil, false
	}
	return o.RegisteredUser, true
}

// HasRegisteredUser returns a boolean if a field has been set.
func (o *Contacts) HasRegisteredUser() bool {
	if o != nil && !IsNil(o.RegisteredUser) {
		return true
	}

	return false
}

// SetRegisteredUser gets a reference to the given string and assigns it to the RegisteredUser field.
func (o *Contacts) SetRegisteredUser(v string) {
	o.RegisteredUser = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *Contacts) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contacts) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *Contacts) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *Contacts) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *Contacts) GetLastName() string {
	if o == nil || IsNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contacts) GetLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *Contacts) HasLastName() bool {
	if o != nil && !IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *Contacts) SetLastName(v string) {
	o.LastName = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Contacts) GetType() ContactsType {
	if o == nil || IsNil(o.Type) {
		var ret ContactsType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contacts) GetTypeOk() (*ContactsType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Contacts) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ContactsType and assigns it to the Type field.
func (o *Contacts) SetType(v ContactsType) {
	o.Type = &v
}

// GetAvailability returns the Availability field value if set, zero value otherwise.
func (o *Contacts) GetAvailability() ContactsAvailability {
	if o == nil || IsNil(o.Availability) {
		var ret ContactsAvailability
		return ret
	}
	return *o.Availability
}

// GetAvailabilityOk returns a tuple with the Availability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contacts) GetAvailabilityOk() (*ContactsAvailability, bool) {
	if o == nil || IsNil(o.Availability) {
		return nil, false
	}
	return o.Availability, true
}

// HasAvailability returns a boolean if a field has been set.
func (o *Contacts) HasAvailability() bool {
	if o != nil && !IsNil(o.Availability) {
		return true
	}

	return false
}

// SetAvailability gets a reference to the given ContactsAvailability and assigns it to the Availability field.
func (o *Contacts) SetAvailability(v ContactsAvailability) {
	o.Availability = &v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *Contacts) GetTimezone() TIMEZONELIST {
	if o == nil || IsNil(o.Timezone) {
		var ret TIMEZONELIST
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contacts) GetTimezoneOk() (*TIMEZONELIST, bool) {
	if o == nil || IsNil(o.Timezone) {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *Contacts) HasTimezone() bool {
	if o != nil && !IsNil(o.Timezone) {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given TIMEZONELIST and assigns it to the Timezone field.
func (o *Contacts) SetTimezone(v TIMEZONELIST) {
	o.Timezone = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *Contacts) GetDetails() []ContactsDetails {
	if o == nil || IsNil(o.Details) {
		var ret []ContactsDetails
		return ret
	}
	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contacts) GetDetailsOk() ([]ContactsDetails, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *Contacts) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given []ContactsDetails and assigns it to the Details field.
func (o *Contacts) SetDetails(v []ContactsDetails) {
	o.Details = v
}

func (o Contacts) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Contacts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RegisteredUser) {
		toSerialize["registeredUser"] = o.RegisteredUser
	}
	if !IsNil(o.FirstName) {
		toSerialize["firstName"] = o.FirstName
	}
	if !IsNil(o.LastName) {
		toSerialize["lastName"] = o.LastName
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Availability) {
		toSerialize["availability"] = o.Availability
	}
	if !IsNil(o.Timezone) {
		toSerialize["timezone"] = o.Timezone
	}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Contacts) UnmarshalJSON(data []byte) (err error) {
	varContacts := _Contacts{}

	err = json.Unmarshal(data, &varContacts)

	if err != nil {
		return err
	}

	*o = Contacts(varContacts)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "registeredUser")
		delete(additionalProperties, "firstName")
		delete(additionalProperties, "lastName")
		delete(additionalProperties, "type")
		delete(additionalProperties, "availability")
		delete(additionalProperties, "timezone")
		delete(additionalProperties, "details")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableContacts struct {
	value *Contacts
	isSet bool
}

func (v NullableContacts) Get() *Contacts {
	return v.value
}

func (v *NullableContacts) Set(val *Contacts) {
	v.value = val
	v.isSet = true
}

func (v NullableContacts) IsSet() bool {
	return v.isSet
}

func (v *NullableContacts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContacts(val *Contacts) *NullableContacts {
	return &NullableContacts{value: val, isSet: true}
}

func (v NullableContacts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContacts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
