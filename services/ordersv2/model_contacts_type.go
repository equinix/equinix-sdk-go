/*
Orders

Based on a user's permission, a user may be able to view their own orders or also the orders from all of the users in their organization. These orders can be filtered by product type, order status, location, or date range. Only orders from the past 12 months will be returned.

API version: 2.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ordersv2

import (
	"encoding/json"
	"fmt"
)

// ContactsType Communications type
type ContactsType string

// List of Contacts_type
const (
	CONTACTSTYPE_ORDERING     ContactsType = "ORDERING"
	CONTACTSTYPE_NOTIFICATION ContactsType = "NOTIFICATION"
	CONTACTSTYPE_TECHNICAL    ContactsType = "TECHNICAL"
	CONTACTSTYPE_RESELLER     ContactsType = "RESELLER"
)

// All allowed values of ContactsType enum
var AllowedContactsTypeEnumValues = []ContactsType{
	"ORDERING",
	"NOTIFICATION",
	"TECHNICAL",
	"RESELLER",
}

func (v *ContactsType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ContactsType(value)
	for _, existing := range AllowedContactsTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ContactsType", value)
}

// NewContactsTypeFromValue returns a pointer to a valid ContactsType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewContactsTypeFromValue(v string) (*ContactsType, error) {
	ev := ContactsType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ContactsType: valid values are %v", v, AllowedContactsTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ContactsType) IsValid() bool {
	for _, existing := range AllowedContactsTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Contacts_type value
func (v ContactsType) Ptr() *ContactsType {
	return &v
}

type NullableContactsType struct {
	value *ContactsType
	isSet bool
}

func (v NullableContactsType) Get() *ContactsType {
	return v.value
}

func (v *NullableContactsType) Set(val *ContactsType) {
	v.value = val
	v.isSet = true
}

func (v NullableContactsType) IsSet() bool {
	return v.isSet
}

func (v *NullableContactsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactsType(val *ContactsType) *NullableContactsType {
	return &NullableContactsType{value: val, isSet: true}
}

func (v NullableContactsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
