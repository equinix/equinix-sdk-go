/*
Orders

Based on a user's permission, a user may be able to view their own orders or also the orders from all of the users in their organization. These orders can be filtered by product type, order status, location, or date range. Only orders from the past 12 months will be returned.

API version: 2.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ordersv2

import (
	"encoding/json"
	"fmt"
)

// NoteType Type of notes
type NoteType string

// List of Note_type
const (
	NOTETYPE_CUSTOMER_QUERY   NoteType = "CUSTOMER_QUERY"
	NOTETYPE_CUSTOMER_NOTES   NoteType = "CUSTOMER_NOTES"
	NOTETYPE_TECHNICIAN_QUERY NoteType = "TECHNICIAN_QUERY"
	NOTETYPE_TECHNICIAN_NOTES NoteType = "TECHNICIAN_NOTES"
)

// All allowed values of NoteType enum
var AllowedNoteTypeEnumValues = []NoteType{
	"CUSTOMER_QUERY",
	"CUSTOMER_NOTES",
	"TECHNICIAN_QUERY",
	"TECHNICIAN_NOTES",
}

func (v *NoteType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NoteType(value)
	for _, existing := range AllowedNoteTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NoteType", value)
}

// NewNoteTypeFromValue returns a pointer to a valid NoteType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNoteTypeFromValue(v string) (*NoteType, error) {
	ev := NoteType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NoteType: valid values are %v", v, AllowedNoteTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NoteType) IsValid() bool {
	for _, existing := range AllowedNoteTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Note_type value
func (v NoteType) Ptr() *NoteType {
	return &v
}

type NullableNoteType struct {
	value *NoteType
	isSet bool
}

func (v NullableNoteType) Get() *NoteType {
	return v.value
}

func (v *NullableNoteType) Set(val *NoteType) {
	v.value = val
	v.isSet = true
}

func (v NullableNoteType) IsSet() bool {
	return v.isSet
}

func (v *NullableNoteType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNoteType(val *NoteType) *NullableNoteType {
	return &NullableNoteType{value: val, isSet: true}
}

func (v NullableNoteType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNoteType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
