/*
Orders

Based on a user's permission, a user may be able to view their own orders or also the orders from all of the users in their organization. These orders can be filtered by product type, order status, location, or date range. Only orders from the past 12 months will be returned.

API version: 2.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ordersv2

import (
	"encoding/json"
	"fmt"
)

// ContactsDetailsType Communications Type
type ContactsDetailsType string

// List of ContactsDetails_type
const (
	CONTACTSDETAILSTYPE_PHONE  ContactsDetailsType = "PHONE"
	CONTACTSDETAILSTYPE_EMAIL  ContactsDetailsType = "EMAIL"
	CONTACTSDETAILSTYPE_MOBILE ContactsDetailsType = "MOBILE"
)

// All allowed values of ContactsDetailsType enum
var AllowedContactsDetailsTypeEnumValues = []ContactsDetailsType{
	"PHONE",
	"EMAIL",
	"MOBILE",
}

func (v *ContactsDetailsType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ContactsDetailsType(value)
	for _, existing := range AllowedContactsDetailsTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ContactsDetailsType", value)
}

// NewContactsDetailsTypeFromValue returns a pointer to a valid ContactsDetailsType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewContactsDetailsTypeFromValue(v string) (*ContactsDetailsType, error) {
	ev := ContactsDetailsType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ContactsDetailsType: valid values are %v", v, AllowedContactsDetailsTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ContactsDetailsType) IsValid() bool {
	for _, existing := range AllowedContactsDetailsTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ContactsDetails_type value
func (v ContactsDetailsType) Ptr() *ContactsDetailsType {
	return &v
}

type NullableContactsDetailsType struct {
	value *ContactsDetailsType
	isSet bool
}

func (v NullableContactsDetailsType) Get() *ContactsDetailsType {
	return v.value
}

func (v *NullableContactsDetailsType) Set(val *ContactsDetailsType) {
	v.value = val
	v.isSet = true
}

func (v NullableContactsDetailsType) IsSet() bool {
	return v.isSet
}

func (v *NullableContactsDetailsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactsDetailsType(val *ContactsDetailsType) *NullableContactsDetailsType {
	return &NullableContactsDetailsType{value: val, isSet: true}
}

func (v NullableContactsDetailsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactsDetailsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
