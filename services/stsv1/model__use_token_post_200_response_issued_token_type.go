/*
Equinix Security Token Service

Exchange ID tokens for Equinix access tokens according to managed trust relationships.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stsv1

import (
	"encoding/json"
	"fmt"
)

// UseTokenPost200ResponseIssuedTokenType the model 'UseTokenPost200ResponseIssuedTokenType'
type UseTokenPost200ResponseIssuedTokenType string

// List of _use_token_post_200_response_issued_token_type
const (
	USETOKENPOST200RESPONSEISSUEDTOKENTYPE_URN_IETF_PARAMS_OAUTH_TOKEN_TYPE_ACCESS_TOKEN UseTokenPost200ResponseIssuedTokenType = "urn:ietf:params:oauth:token-type:access_token"
)

// All allowed values of UseTokenPost200ResponseIssuedTokenType enum
var AllowedUseTokenPost200ResponseIssuedTokenTypeEnumValues = []UseTokenPost200ResponseIssuedTokenType{
	"urn:ietf:params:oauth:token-type:access_token",
}

func (v *UseTokenPost200ResponseIssuedTokenType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UseTokenPost200ResponseIssuedTokenType(value)
	for _, existing := range AllowedUseTokenPost200ResponseIssuedTokenTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UseTokenPost200ResponseIssuedTokenType", value)
}

// NewUseTokenPost200ResponseIssuedTokenTypeFromValue returns a pointer to a valid UseTokenPost200ResponseIssuedTokenType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUseTokenPost200ResponseIssuedTokenTypeFromValue(v string) (*UseTokenPost200ResponseIssuedTokenType, error) {
	ev := UseTokenPost200ResponseIssuedTokenType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UseTokenPost200ResponseIssuedTokenType: valid values are %v", v, AllowedUseTokenPost200ResponseIssuedTokenTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UseTokenPost200ResponseIssuedTokenType) IsValid() bool {
	for _, existing := range AllowedUseTokenPost200ResponseIssuedTokenTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to _use_token_post_200_response_issued_token_type value
func (v UseTokenPost200ResponseIssuedTokenType) Ptr() *UseTokenPost200ResponseIssuedTokenType {
	return &v
}

type NullableUseTokenPost200ResponseIssuedTokenType struct {
	value *UseTokenPost200ResponseIssuedTokenType
	isSet bool
}

func (v NullableUseTokenPost200ResponseIssuedTokenType) Get() *UseTokenPost200ResponseIssuedTokenType {
	return v.value
}

func (v *NullableUseTokenPost200ResponseIssuedTokenType) Set(val *UseTokenPost200ResponseIssuedTokenType) {
	v.value = val
	v.isSet = true
}

func (v NullableUseTokenPost200ResponseIssuedTokenType) IsSet() bool {
	return v.isSet
}

func (v *NullableUseTokenPost200ResponseIssuedTokenType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUseTokenPost200ResponseIssuedTokenType(val *UseTokenPost200ResponseIssuedTokenType) *NullableUseTokenPost200ResponseIssuedTokenType {
	return &NullableUseTokenPost200ResponseIssuedTokenType{value: val, isSet: true}
}

func (v NullableUseTokenPost200ResponseIssuedTokenType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUseTokenPost200ResponseIssuedTokenType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

