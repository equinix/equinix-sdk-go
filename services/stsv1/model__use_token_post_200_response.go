/*
Equinix Security Token Service

Exchange ID tokens for Equinix access tokens according to managed trust relationships.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stsv1

import (
	"encoding/json"
	"fmt"
)

// checks if the UseTokenPost200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UseTokenPost200Response{}

// UseTokenPost200Response struct for UseTokenPost200Response
type UseTokenPost200Response struct {
	AccessToken string `json:"access_token"`
	IssuedTokenType UseTokenPost200ResponseIssuedTokenType `json:"issued_token_type"`
	TokenType UseTokenPost200ResponseTokenType `json:"token_type"`
	ExpiresIn float32 `json:"expires_in"`
	AdditionalProperties map[string]interface{}
}

type _UseTokenPost200Response UseTokenPost200Response

// NewUseTokenPost200Response instantiates a new UseTokenPost200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUseTokenPost200Response(accessToken string, issuedTokenType UseTokenPost200ResponseIssuedTokenType, tokenType UseTokenPost200ResponseTokenType, expiresIn float32) *UseTokenPost200Response {
	this := UseTokenPost200Response{}
	this.AccessToken = accessToken
	this.IssuedTokenType = issuedTokenType
	this.TokenType = tokenType
	this.ExpiresIn = expiresIn
	return &this
}

// NewUseTokenPost200ResponseWithDefaults instantiates a new UseTokenPost200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUseTokenPost200ResponseWithDefaults() *UseTokenPost200Response {
	this := UseTokenPost200Response{}
	return &this
}

// GetAccessToken returns the AccessToken field value
func (o *UseTokenPost200Response) GetAccessToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessToken
}

// GetAccessTokenOk returns a tuple with the AccessToken field value
// and a boolean to check if the value has been set.
func (o *UseTokenPost200Response) GetAccessTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessToken, true
}

// SetAccessToken sets field value
func (o *UseTokenPost200Response) SetAccessToken(v string) {
	o.AccessToken = v
}

// GetIssuedTokenType returns the IssuedTokenType field value
func (o *UseTokenPost200Response) GetIssuedTokenType() UseTokenPost200ResponseIssuedTokenType {
	if o == nil {
		var ret UseTokenPost200ResponseIssuedTokenType
		return ret
	}

	return o.IssuedTokenType
}

// GetIssuedTokenTypeOk returns a tuple with the IssuedTokenType field value
// and a boolean to check if the value has been set.
func (o *UseTokenPost200Response) GetIssuedTokenTypeOk() (*UseTokenPost200ResponseIssuedTokenType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssuedTokenType, true
}

// SetIssuedTokenType sets field value
func (o *UseTokenPost200Response) SetIssuedTokenType(v UseTokenPost200ResponseIssuedTokenType) {
	o.IssuedTokenType = v
}

// GetTokenType returns the TokenType field value
func (o *UseTokenPost200Response) GetTokenType() UseTokenPost200ResponseTokenType {
	if o == nil {
		var ret UseTokenPost200ResponseTokenType
		return ret
	}

	return o.TokenType
}

// GetTokenTypeOk returns a tuple with the TokenType field value
// and a boolean to check if the value has been set.
func (o *UseTokenPost200Response) GetTokenTypeOk() (*UseTokenPost200ResponseTokenType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenType, true
}

// SetTokenType sets field value
func (o *UseTokenPost200Response) SetTokenType(v UseTokenPost200ResponseTokenType) {
	o.TokenType = v
}

// GetExpiresIn returns the ExpiresIn field value
func (o *UseTokenPost200Response) GetExpiresIn() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ExpiresIn
}

// GetExpiresInOk returns a tuple with the ExpiresIn field value
// and a boolean to check if the value has been set.
func (o *UseTokenPost200Response) GetExpiresInOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpiresIn, true
}

// SetExpiresIn sets field value
func (o *UseTokenPost200Response) SetExpiresIn(v float32) {
	o.ExpiresIn = v
}

func (o UseTokenPost200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UseTokenPost200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["access_token"] = o.AccessToken
	toSerialize["issued_token_type"] = o.IssuedTokenType
	toSerialize["token_type"] = o.TokenType
	toSerialize["expires_in"] = o.ExpiresIn

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UseTokenPost200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"access_token",
		"issued_token_type",
		"token_type",
		"expires_in",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUseTokenPost200Response := _UseTokenPost200Response{}

	err = json.Unmarshal(data, &varUseTokenPost200Response)

	if err != nil {
		return err
	}

	*o = UseTokenPost200Response(varUseTokenPost200Response)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "access_token")
		delete(additionalProperties, "issued_token_type")
		delete(additionalProperties, "token_type")
		delete(additionalProperties, "expires_in")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUseTokenPost200Response struct {
	value *UseTokenPost200Response
	isSet bool
}

func (v NullableUseTokenPost200Response) Get() *UseTokenPost200Response {
	return v.value
}

func (v *NullableUseTokenPost200Response) Set(val *UseTokenPost200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableUseTokenPost200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableUseTokenPost200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUseTokenPost200Response(val *UseTokenPost200Response) *NullableUseTokenPost200Response {
	return &NullableUseTokenPost200Response{value: val, isSet: true}
}

func (v NullableUseTokenPost200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUseTokenPost200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


