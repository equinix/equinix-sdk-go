/*
Equinix Security Token Service

Exchange ID tokens for Equinix access tokens according to managed trust relationships.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stsv1

import (
	"encoding/json"
	"fmt"
)

// checks if the UseTokenPost400Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UseTokenPost400Response{}

// UseTokenPost400Response struct for UseTokenPost400Response
type UseTokenPost400Response struct {
	Error string `json:"error"`
	ErrorDescription *string `json:"error_description,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UseTokenPost400Response UseTokenPost400Response

// NewUseTokenPost400Response instantiates a new UseTokenPost400Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUseTokenPost400Response(error_ string) *UseTokenPost400Response {
	this := UseTokenPost400Response{}
	this.Error = error_
	return &this
}

// NewUseTokenPost400ResponseWithDefaults instantiates a new UseTokenPost400Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUseTokenPost400ResponseWithDefaults() *UseTokenPost400Response {
	this := UseTokenPost400Response{}
	return &this
}

// GetError returns the Error field value
func (o *UseTokenPost400Response) GetError() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Error
}

// GetErrorOk returns a tuple with the Error field value
// and a boolean to check if the value has been set.
func (o *UseTokenPost400Response) GetErrorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Error, true
}

// SetError sets field value
func (o *UseTokenPost400Response) SetError(v string) {
	o.Error = v
}

// GetErrorDescription returns the ErrorDescription field value if set, zero value otherwise.
func (o *UseTokenPost400Response) GetErrorDescription() string {
	if o == nil || IsNil(o.ErrorDescription) {
		var ret string
		return ret
	}
	return *o.ErrorDescription
}

// GetErrorDescriptionOk returns a tuple with the ErrorDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UseTokenPost400Response) GetErrorDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorDescription) {
		return nil, false
	}
	return o.ErrorDescription, true
}

// HasErrorDescription returns a boolean if a field has been set.
func (o *UseTokenPost400Response) HasErrorDescription() bool {
	if o != nil && !IsNil(o.ErrorDescription) {
		return true
	}

	return false
}

// SetErrorDescription gets a reference to the given string and assigns it to the ErrorDescription field.
func (o *UseTokenPost400Response) SetErrorDescription(v string) {
	o.ErrorDescription = &v
}

func (o UseTokenPost400Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UseTokenPost400Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["error"] = o.Error
	if !IsNil(o.ErrorDescription) {
		toSerialize["error_description"] = o.ErrorDescription
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UseTokenPost400Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"error",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUseTokenPost400Response := _UseTokenPost400Response{}

	err = json.Unmarshal(data, &varUseTokenPost400Response)

	if err != nil {
		return err
	}

	*o = UseTokenPost400Response(varUseTokenPost400Response)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "error")
		delete(additionalProperties, "error_description")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUseTokenPost400Response struct {
	value *UseTokenPost400Response
	isSet bool
}

func (v NullableUseTokenPost400Response) Get() *UseTokenPost400Response {
	return v.value
}

func (v *NullableUseTokenPost400Response) Set(val *UseTokenPost400Response) {
	v.value = val
	v.isSet = true
}

func (v NullableUseTokenPost400Response) IsSet() bool {
	return v.isSet
}

func (v *NullableUseTokenPost400Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUseTokenPost400Response(val *UseTokenPost400Response) *NullableUseTokenPost400Response {
	return &NullableUseTokenPost400Response{value: val, isSet: true}
}

func (v NullableUseTokenPost400Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUseTokenPost400Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


