/*
Equinix Security Token Service

Exchange ID tokens for Equinix access tokens according to managed trust relationships.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stsv1

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// UseApiService UseApi service
type UseApiService service

type ApiUseCreateOidcProviderPostRequest struct {
	ctx context.Context
	ApiService *UseApiService
	useCreateOidcProviderPostRequest *UseCreateOidcProviderPostRequest
}

func (r ApiUseCreateOidcProviderPostRequest) UseCreateOidcProviderPostRequest(useCreateOidcProviderPostRequest UseCreateOidcProviderPostRequest) ApiUseCreateOidcProviderPostRequest {
	r.useCreateOidcProviderPostRequest = &useCreateOidcProviderPostRequest
	return r
}

func (r ApiUseCreateOidcProviderPostRequest) Execute() (*OpsCreateOidcProviderPost200Response, *http.Response, error) {
	return r.ApiService.UseCreateOidcProviderPostExecute(r)
}

/*
UseCreateOidcProviderPost /use/createOidcProvider

Allows a user to register a new OIDC provider for a root project. The OIDC provider is registered in the project
  which owns the access policy being used. The `idpPrefix` is used to create a unique `idpId` for this usage of the OIDC
  provider within the root project. The `idpPrefix` cannot be the same as any existing, suspended or non-suspended, OIDC
  provider records for this root project. This operation creates a trust relationship between the root project and the
  OIDC provider such that identity tokens from the OIDC provider will be accessed for token exchange. Access control is
  coarse-grained.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUseCreateOidcProviderPostRequest
*/
func (a *UseApiService) UseCreateOidcProviderPost(ctx context.Context) ApiUseCreateOidcProviderPostRequest {
	return ApiUseCreateOidcProviderPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OpsCreateOidcProviderPost200Response
func (a *UseApiService) UseCreateOidcProviderPostExecute(r ApiUseCreateOidcProviderPostRequest) (*OpsCreateOidcProviderPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpsCreateOidcProviderPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UseApiService.UseCreateOidcProviderPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/use/createOidcProvider"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.useCreateOidcProviderPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUseDeleteOidcProviderPostRequest struct {
	ctx context.Context
	ApiService *UseApiService
	useDeleteOidcProviderPostRequest *UseDeleteOidcProviderPostRequest
}

func (r ApiUseDeleteOidcProviderPostRequest) UseDeleteOidcProviderPostRequest(useDeleteOidcProviderPostRequest UseDeleteOidcProviderPostRequest) ApiUseDeleteOidcProviderPostRequest {
	r.useDeleteOidcProviderPostRequest = &useDeleteOidcProviderPostRequest
	return r
}

func (r ApiUseDeleteOidcProviderPostRequest) Execute() (*UseDeleteOidcProviderPost200Response, *http.Response, error) {
	return r.ApiService.UseDeleteOidcProviderPostExecute(r)
}

/*
UseDeleteOidcProviderPost /use/deleteOidcProvider

Allows a user to permanently remove the trust relationship for an OIDC provider in a root project. This operation
  cannot be reversed. This operation causes the `idpId` of the OIDC provider to be permanently disabled for this root
  project. Even if `createOidcProvider` is used to register the same OIDC provider again it will be assigned a unique
  `idpId` within the root project. This operation applies for the project which owns the access policy being
  used. Access control is coarse-grained.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUseDeleteOidcProviderPostRequest
*/
func (a *UseApiService) UseDeleteOidcProviderPost(ctx context.Context) ApiUseDeleteOidcProviderPostRequest {
	return ApiUseDeleteOidcProviderPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UseDeleteOidcProviderPost200Response
func (a *UseApiService) UseDeleteOidcProviderPostExecute(r ApiUseDeleteOidcProviderPostRequest) (*UseDeleteOidcProviderPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UseDeleteOidcProviderPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UseApiService.UseDeleteOidcProviderPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/use/deleteOidcProvider"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.useDeleteOidcProviderPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUseListOidcProvidersPostRequest struct {
	ctx context.Context
	ApiService *UseApiService
	requestBody *map[string]interface{}
}

func (r ApiUseListOidcProvidersPostRequest) RequestBody(requestBody map[string]interface{}) ApiUseListOidcProvidersPostRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiUseListOidcProvidersPostRequest) Execute() (*OpsListOidcProvidersPost200Response, *http.Response, error) {
	return r.ApiService.UseListOidcProvidersPostExecute(r)
}

/*
UseListOidcProvidersPost /use/listOidcProviders

Allows a user to list all of the OIDC providers which are defined for a root project and which are not
  suspended. This operation applies for the project which owns the access policy being used. Access control is
  coarse-grained.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUseListOidcProvidersPostRequest
*/
func (a *UseApiService) UseListOidcProvidersPost(ctx context.Context) ApiUseListOidcProvidersPostRequest {
	return ApiUseListOidcProvidersPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OpsListOidcProvidersPost200Response
func (a *UseApiService) UseListOidcProvidersPostExecute(r ApiUseListOidcProvidersPostRequest) (*OpsListOidcProvidersPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpsListOidcProvidersPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UseApiService.UseListOidcProvidersPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/use/listOidcProviders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUseListSuspendedOidcProvidersPostRequest struct {
	ctx context.Context
	ApiService *UseApiService
	requestBody *map[string]interface{}
}

func (r ApiUseListSuspendedOidcProvidersPostRequest) RequestBody(requestBody map[string]interface{}) ApiUseListSuspendedOidcProvidersPostRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiUseListSuspendedOidcProvidersPostRequest) Execute() (*OpsListOidcProvidersPost200Response, *http.Response, error) {
	return r.ApiService.UseListSuspendedOidcProvidersPostExecute(r)
}

/*
UseListSuspendedOidcProvidersPost /use/listSuspendedOidcProviders

Allows a user to list all of the suspended OIDC providers which are defined for a root project. This operation
  applies for the project which owns the access policy being used. Access control is coarse-grained.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUseListSuspendedOidcProvidersPostRequest
*/
func (a *UseApiService) UseListSuspendedOidcProvidersPost(ctx context.Context) ApiUseListSuspendedOidcProvidersPostRequest {
	return ApiUseListSuspendedOidcProvidersPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OpsListOidcProvidersPost200Response
func (a *UseApiService) UseListSuspendedOidcProvidersPostExecute(r ApiUseListSuspendedOidcProvidersPostRequest) (*OpsListOidcProvidersPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpsListOidcProvidersPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UseApiService.UseListSuspendedOidcProvidersPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/use/listSuspendedOidcProviders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsePatchOidcProviderPostRequest struct {
	ctx context.Context
	ApiService *UseApiService
	usePatchOidcProviderPostRequest *UsePatchOidcProviderPostRequest
}

func (r ApiUsePatchOidcProviderPostRequest) UsePatchOidcProviderPostRequest(usePatchOidcProviderPostRequest UsePatchOidcProviderPostRequest) ApiUsePatchOidcProviderPostRequest {
	r.usePatchOidcProviderPostRequest = &usePatchOidcProviderPostRequest
	return r
}

func (r ApiUsePatchOidcProviderPostRequest) Execute() (*OpsCreateOidcProviderPost200Response, *http.Response, error) {
	return r.ApiService.UsePatchOidcProviderPostExecute(r)
}

/*
UsePatchOidcProviderPost /use/patchOidcProvider

Modify specific property values of an OIDCProvider, leaving the rest with their current values.
  Optional properties (e.g. groupMembershipClaims) may be unset by assigning them the value
  `{"$unset": true}`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUsePatchOidcProviderPostRequest
*/
func (a *UseApiService) UsePatchOidcProviderPost(ctx context.Context) ApiUsePatchOidcProviderPostRequest {
	return ApiUsePatchOidcProviderPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OpsCreateOidcProviderPost200Response
func (a *UseApiService) UsePatchOidcProviderPostExecute(r ApiUsePatchOidcProviderPostRequest) (*OpsCreateOidcProviderPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpsCreateOidcProviderPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UseApiService.UsePatchOidcProviderPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/use/patchOidcProvider"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.usePatchOidcProviderPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUseResumeOidcProviderPostRequest struct {
	ctx context.Context
	ApiService *UseApiService
	useDeleteOidcProviderPostRequest *UseDeleteOidcProviderPostRequest
}

func (r ApiUseResumeOidcProviderPostRequest) UseDeleteOidcProviderPostRequest(useDeleteOidcProviderPostRequest UseDeleteOidcProviderPostRequest) ApiUseResumeOidcProviderPostRequest {
	r.useDeleteOidcProviderPostRequest = &useDeleteOidcProviderPostRequest
	return r
}

func (r ApiUseResumeOidcProviderPostRequest) Execute() (*UseDeleteOidcProviderPost200Response, *http.Response, error) {
	return r.ApiService.UseResumeOidcProviderPostExecute(r)
}

/*
UseResumeOidcProviderPost /use/resumeOidcProvider

Allows a user to restore the trust relationship for an OIDC provider in a root project. This operation applies for
  the project which owns the access policy being used. Access control is coarse-grained.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUseResumeOidcProviderPostRequest
*/
func (a *UseApiService) UseResumeOidcProviderPost(ctx context.Context) ApiUseResumeOidcProviderPostRequest {
	return ApiUseResumeOidcProviderPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UseDeleteOidcProviderPost200Response
func (a *UseApiService) UseResumeOidcProviderPostExecute(r ApiUseResumeOidcProviderPostRequest) (*UseDeleteOidcProviderPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UseDeleteOidcProviderPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UseApiService.UseResumeOidcProviderPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/use/resumeOidcProvider"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.useDeleteOidcProviderPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUseSuspendOidcProviderPostRequest struct {
	ctx context.Context
	ApiService *UseApiService
	useDeleteOidcProviderPostRequest *UseDeleteOidcProviderPostRequest
}

func (r ApiUseSuspendOidcProviderPostRequest) UseDeleteOidcProviderPostRequest(useDeleteOidcProviderPostRequest UseDeleteOidcProviderPostRequest) ApiUseSuspendOidcProviderPostRequest {
	r.useDeleteOidcProviderPostRequest = &useDeleteOidcProviderPostRequest
	return r
}

func (r ApiUseSuspendOidcProviderPostRequest) Execute() (*UseDeleteOidcProviderPost200Response, *http.Response, error) {
	return r.ApiService.UseSuspendOidcProviderPostExecute(r)
}

/*
UseSuspendOidcProviderPost /use/suspendOidcProvider

Allows a user to indicate that an OIDC provider is no longer trusted in a root project. This operation applies for
  the project which owns the access policy being used. This operation can be reversed via `resumeOidcProvider`. This
  operation provides a reversible way to turn off token exchange for identity tokens from an OIDC provider. Access
  control is coarse-grained.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUseSuspendOidcProviderPostRequest
*/
func (a *UseApiService) UseSuspendOidcProviderPost(ctx context.Context) ApiUseSuspendOidcProviderPostRequest {
	return ApiUseSuspendOidcProviderPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UseDeleteOidcProviderPost200Response
func (a *UseApiService) UseSuspendOidcProviderPostExecute(r ApiUseSuspendOidcProviderPostRequest) (*UseDeleteOidcProviderPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UseDeleteOidcProviderPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UseApiService.UseSuspendOidcProviderPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/use/suspendOidcProvider"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.useDeleteOidcProviderPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
