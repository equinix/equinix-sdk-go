/*
Equinix Security Token Service

Exchange ID tokens for Equinix access tokens according to managed trust relationships.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stsv1

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// UsePatchOidcProviderPostRequestGroupMembershipClaim - Name of the claim in the ID tokens provided by this OIDC issuer whose value the STS should interpret as containing a user's group memberships, for authorization purposes. The value of the group membership claim in an ID token must be an array of strings, where each string is a unique, non-reassignable identifier for a group. When this property is not set, the STS does not interpret any claim from this provider as a group membership claim.
type UsePatchOidcProviderPostRequestGroupMembershipClaim struct {
	UsePatchOidcProviderPostRequestGroupMembershipClaimOneOf *UsePatchOidcProviderPostRequestGroupMembershipClaimOneOf
	String *string
}

// UsePatchOidcProviderPostRequestGroupMembershipClaimOneOfAsUsePatchOidcProviderPostRequestGroupMembershipClaim is a convenience function that returns UsePatchOidcProviderPostRequestGroupMembershipClaimOneOf wrapped in UsePatchOidcProviderPostRequestGroupMembershipClaim
func UsePatchOidcProviderPostRequestGroupMembershipClaimOneOfAsUsePatchOidcProviderPostRequestGroupMembershipClaim(v *UsePatchOidcProviderPostRequestGroupMembershipClaimOneOf) UsePatchOidcProviderPostRequestGroupMembershipClaim {
	return UsePatchOidcProviderPostRequestGroupMembershipClaim{
		UsePatchOidcProviderPostRequestGroupMembershipClaimOneOf: v,
	}
}

// stringAsUsePatchOidcProviderPostRequestGroupMembershipClaim is a convenience function that returns string wrapped in UsePatchOidcProviderPostRequestGroupMembershipClaim
func StringAsUsePatchOidcProviderPostRequestGroupMembershipClaim(v *string) UsePatchOidcProviderPostRequestGroupMembershipClaim {
	return UsePatchOidcProviderPostRequestGroupMembershipClaim{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *UsePatchOidcProviderPostRequestGroupMembershipClaim) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UsePatchOidcProviderPostRequestGroupMembershipClaimOneOf
	err = newStrictDecoder(data).Decode(&dst.UsePatchOidcProviderPostRequestGroupMembershipClaimOneOf)
	if err == nil {
		jsonUsePatchOidcProviderPostRequestGroupMembershipClaimOneOf, _ := json.Marshal(dst.UsePatchOidcProviderPostRequestGroupMembershipClaimOneOf)
		if string(jsonUsePatchOidcProviderPostRequestGroupMembershipClaimOneOf) == "{}" { // empty struct
			dst.UsePatchOidcProviderPostRequestGroupMembershipClaimOneOf = nil
		} else {
			if err = validator.Validate(dst.UsePatchOidcProviderPostRequestGroupMembershipClaimOneOf); err != nil {
				dst.UsePatchOidcProviderPostRequestGroupMembershipClaimOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.UsePatchOidcProviderPostRequestGroupMembershipClaimOneOf = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			if err = validator.Validate(dst.String); err != nil {
				dst.String = nil
			} else {
				match++
			}
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UsePatchOidcProviderPostRequestGroupMembershipClaimOneOf = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UsePatchOidcProviderPostRequestGroupMembershipClaim)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UsePatchOidcProviderPostRequestGroupMembershipClaim)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UsePatchOidcProviderPostRequestGroupMembershipClaim) MarshalJSON() ([]byte, error) {
	if src.UsePatchOidcProviderPostRequestGroupMembershipClaimOneOf != nil {
		return json.Marshal(&src.UsePatchOidcProviderPostRequestGroupMembershipClaimOneOf)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UsePatchOidcProviderPostRequestGroupMembershipClaim) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.UsePatchOidcProviderPostRequestGroupMembershipClaimOneOf != nil {
		return obj.UsePatchOidcProviderPostRequestGroupMembershipClaimOneOf
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj UsePatchOidcProviderPostRequestGroupMembershipClaim) GetActualInstanceValue() (interface{}) {
	if obj.UsePatchOidcProviderPostRequestGroupMembershipClaimOneOf != nil {
		return *obj.UsePatchOidcProviderPostRequestGroupMembershipClaimOneOf
	}

	if obj.String != nil {
		return *obj.String
	}

	// all schemas are nil
	return nil
}

type NullableUsePatchOidcProviderPostRequestGroupMembershipClaim struct {
	value *UsePatchOidcProviderPostRequestGroupMembershipClaim
	isSet bool
}

func (v NullableUsePatchOidcProviderPostRequestGroupMembershipClaim) Get() *UsePatchOidcProviderPostRequestGroupMembershipClaim {
	return v.value
}

func (v *NullableUsePatchOidcProviderPostRequestGroupMembershipClaim) Set(val *UsePatchOidcProviderPostRequestGroupMembershipClaim) {
	v.value = val
	v.isSet = true
}

func (v NullableUsePatchOidcProviderPostRequestGroupMembershipClaim) IsSet() bool {
	return v.isSet
}

func (v *NullableUsePatchOidcProviderPostRequestGroupMembershipClaim) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsePatchOidcProviderPostRequestGroupMembershipClaim(val *UsePatchOidcProviderPostRequestGroupMembershipClaim) *NullableUsePatchOidcProviderPostRequestGroupMembershipClaim {
	return &NullableUsePatchOidcProviderPostRequestGroupMembershipClaim{value: val, isSet: true}
}

func (v NullableUsePatchOidcProviderPostRequestGroupMembershipClaim) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsePatchOidcProviderPostRequestGroupMembershipClaim) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


