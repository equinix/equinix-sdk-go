/*
Equinix Security Token Service

Exchange ID tokens for Equinix access tokens according to managed trust relationships.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stsv1

import (
	"encoding/json"
	"fmt"
)

// checks if the SrvGetServiceIdTokenPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SrvGetServiceIdTokenPostRequest{}

// SrvGetServiceIdTokenPostRequest struct for SrvGetServiceIdTokenPostRequest
type SrvGetServiceIdTokenPostRequest struct {
	// Globally unique identifier of a project.
	ProjectId string `json:"projectId" validate:"regexp=^project:[0-9a-zA-Z](?![^:]*-$)(?![^:]*--)[0-9a-zA-Z-]{0,35}$"`
	// array of case-sensitive audiences to include in the `aud` claim of the ID token
	Audiences []string `json:"audiences"`
	AdditionalProperties map[string]interface{}
}

type _SrvGetServiceIdTokenPostRequest SrvGetServiceIdTokenPostRequest

// NewSrvGetServiceIdTokenPostRequest instantiates a new SrvGetServiceIdTokenPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSrvGetServiceIdTokenPostRequest(projectId string, audiences []string) *SrvGetServiceIdTokenPostRequest {
	this := SrvGetServiceIdTokenPostRequest{}
	this.ProjectId = projectId
	this.Audiences = audiences
	return &this
}

// NewSrvGetServiceIdTokenPostRequestWithDefaults instantiates a new SrvGetServiceIdTokenPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSrvGetServiceIdTokenPostRequestWithDefaults() *SrvGetServiceIdTokenPostRequest {
	this := SrvGetServiceIdTokenPostRequest{}
	return &this
}

// GetProjectId returns the ProjectId field value
func (o *SrvGetServiceIdTokenPostRequest) GetProjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *SrvGetServiceIdTokenPostRequest) GetProjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *SrvGetServiceIdTokenPostRequest) SetProjectId(v string) {
	o.ProjectId = v
}

// GetAudiences returns the Audiences field value
func (o *SrvGetServiceIdTokenPostRequest) GetAudiences() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Audiences
}

// GetAudiencesOk returns a tuple with the Audiences field value
// and a boolean to check if the value has been set.
func (o *SrvGetServiceIdTokenPostRequest) GetAudiencesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Audiences, true
}

// SetAudiences sets field value
func (o *SrvGetServiceIdTokenPostRequest) SetAudiences(v []string) {
	o.Audiences = v
}

func (o SrvGetServiceIdTokenPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SrvGetServiceIdTokenPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["projectId"] = o.ProjectId
	toSerialize["audiences"] = o.Audiences

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SrvGetServiceIdTokenPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"projectId",
		"audiences",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSrvGetServiceIdTokenPostRequest := _SrvGetServiceIdTokenPostRequest{}

	err = json.Unmarshal(data, &varSrvGetServiceIdTokenPostRequest)

	if err != nil {
		return err
	}

	*o = SrvGetServiceIdTokenPostRequest(varSrvGetServiceIdTokenPostRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "projectId")
		delete(additionalProperties, "audiences")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSrvGetServiceIdTokenPostRequest struct {
	value *SrvGetServiceIdTokenPostRequest
	isSet bool
}

func (v NullableSrvGetServiceIdTokenPostRequest) Get() *SrvGetServiceIdTokenPostRequest {
	return v.value
}

func (v *NullableSrvGetServiceIdTokenPostRequest) Set(val *SrvGetServiceIdTokenPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSrvGetServiceIdTokenPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSrvGetServiceIdTokenPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSrvGetServiceIdTokenPostRequest(val *SrvGetServiceIdTokenPostRequest) *NullableSrvGetServiceIdTokenPostRequest {
	return &NullableSrvGetServiceIdTokenPostRequest{value: val, isSet: true}
}

func (v NullableSrvGetServiceIdTokenPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSrvGetServiceIdTokenPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


