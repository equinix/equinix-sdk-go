/*
Equinix Security Token Service

Exchange ID tokens for Equinix access tokens according to managed trust relationships.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stsv1

import (
	"encoding/json"
	"fmt"
)

// UseTokenPost200ResponseTokenType the model 'UseTokenPost200ResponseTokenType'
type UseTokenPost200ResponseTokenType string

// List of _use_token_post_200_response_token_type
const (
	USETOKENPOST200RESPONSETOKENTYPE_BEARER UseTokenPost200ResponseTokenType = "Bearer"
	USETOKENPOST200RESPONSETOKENTYPE_DPO_P  UseTokenPost200ResponseTokenType = "DPoP"
)

// All allowed values of UseTokenPost200ResponseTokenType enum
var AllowedUseTokenPost200ResponseTokenTypeEnumValues = []UseTokenPost200ResponseTokenType{
	"Bearer",
	"DPoP",
}

func (v *UseTokenPost200ResponseTokenType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UseTokenPost200ResponseTokenType(value)
	for _, existing := range AllowedUseTokenPost200ResponseTokenTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UseTokenPost200ResponseTokenType", value)
}

// NewUseTokenPost200ResponseTokenTypeFromValue returns a pointer to a valid UseTokenPost200ResponseTokenType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUseTokenPost200ResponseTokenTypeFromValue(v string) (*UseTokenPost200ResponseTokenType, error) {
	ev := UseTokenPost200ResponseTokenType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UseTokenPost200ResponseTokenType: valid values are %v", v, AllowedUseTokenPost200ResponseTokenTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UseTokenPost200ResponseTokenType) IsValid() bool {
	for _, existing := range AllowedUseTokenPost200ResponseTokenTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to _use_token_post_200_response_token_type value
func (v UseTokenPost200ResponseTokenType) Ptr() *UseTokenPost200ResponseTokenType {
	return &v
}

type NullableUseTokenPost200ResponseTokenType struct {
	value *UseTokenPost200ResponseTokenType
	isSet bool
}

func (v NullableUseTokenPost200ResponseTokenType) Get() *UseTokenPost200ResponseTokenType {
	return v.value
}

func (v *NullableUseTokenPost200ResponseTokenType) Set(val *UseTokenPost200ResponseTokenType) {
	v.value = val
	v.isSet = true
}

func (v NullableUseTokenPost200ResponseTokenType) IsSet() bool {
	return v.isSet
}

func (v *NullableUseTokenPost200ResponseTokenType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUseTokenPost200ResponseTokenType(val *UseTokenPost200ResponseTokenType) *NullableUseTokenPost200ResponseTokenType {
	return &NullableUseTokenPost200ResponseTokenType{value: val, isSet: true}
}

func (v NullableUseTokenPost200ResponseTokenType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUseTokenPost200ResponseTokenType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
