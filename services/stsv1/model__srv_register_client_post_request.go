/*
Equinix Security Token Service

Exchange ID tokens for Equinix access tokens according to managed trust relationships.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stsv1

import (
	"encoding/json"
	"fmt"
)

// checks if the SrvRegisterClientPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SrvRegisterClientPostRequest{}

// SrvRegisterClientPostRequest struct for SrvRegisterClientPostRequest
type SrvRegisterClientPostRequest struct {
	TokenEndpointAuthMethod interface{} `json:"tokenEndpointAuthMethod"`
	GrantTypes []interface{} `json:"grantTypes"`
	ResponseTypes []interface{} `json:"responseTypes"`
	// Uniquely identifies an access policy within a project.
	ServiceAccessPolicyId string `json:"serviceAccessPolicyId" validate:"regexp=^accesspolicy:[a-zA-Z](?![^:]*-$)(?![^:]*--)[a-zA-Z0-9-]{0,49}$"`
	// Fully qualified, universally unique id of a service. Starts with the NamespaceId. Formatted like   \"service:&lt;namespace&gt;/&lt;service&gt;\".
	ServiceId *string `json:"serviceId,omitempty" validate:"regexp=^service:[a-zA-Z][a-zA-Z0-9]{0,49}\\/[a-zA-Z][a-zA-Z0-9]{0,49}$"`
	// Equinix resource name, a universally unique identifier for a resource across all clouds, regions, and   services. Formatted as   \"ern:&lt;cloudId&gt;:&lt;serviceId&gt;:&lt;regionId&gt;:&lt;projectId&gt;:&lt;resourceType&gt;:&lt;resourceId&gt;\".
	ServiceErn *string `json:"serviceErn,omitempty" validate:"regexp=^ern:(?<cloud>[^:]{1,50}):(?<service>[^:\\/]{1,50}\\/[^:\\/]{1,50}):(?<region>[^:]{1,50}):(?<project>[^:]{1,36}):(?<resourcetype>[^:]{1,50}):(?<resource>[^:]{1,50})$"`
	AdditionalProperties map[string]interface{}
}

type _SrvRegisterClientPostRequest SrvRegisterClientPostRequest

// NewSrvRegisterClientPostRequest instantiates a new SrvRegisterClientPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSrvRegisterClientPostRequest(tokenEndpointAuthMethod interface{}, grantTypes []interface{}, responseTypes []interface{}, serviceAccessPolicyId string) *SrvRegisterClientPostRequest {
	this := SrvRegisterClientPostRequest{}
	this.TokenEndpointAuthMethod = tokenEndpointAuthMethod
	this.GrantTypes = grantTypes
	this.ResponseTypes = responseTypes
	this.ServiceAccessPolicyId = serviceAccessPolicyId
	return &this
}

// NewSrvRegisterClientPostRequestWithDefaults instantiates a new SrvRegisterClientPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSrvRegisterClientPostRequestWithDefaults() *SrvRegisterClientPostRequest {
	this := SrvRegisterClientPostRequest{}
	return &this
}

// GetTokenEndpointAuthMethod returns the TokenEndpointAuthMethod field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *SrvRegisterClientPostRequest) GetTokenEndpointAuthMethod() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.TokenEndpointAuthMethod
}

// GetTokenEndpointAuthMethodOk returns a tuple with the TokenEndpointAuthMethod field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SrvRegisterClientPostRequest) GetTokenEndpointAuthMethodOk() (*interface{}, bool) {
	if o == nil || IsNil(o.TokenEndpointAuthMethod) {
		return nil, false
	}
	return &o.TokenEndpointAuthMethod, true
}

// SetTokenEndpointAuthMethod sets field value
func (o *SrvRegisterClientPostRequest) SetTokenEndpointAuthMethod(v interface{}) {
	o.TokenEndpointAuthMethod = v
}

// GetGrantTypes returns the GrantTypes field value
func (o *SrvRegisterClientPostRequest) GetGrantTypes() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}

	return o.GrantTypes
}

// GetGrantTypesOk returns a tuple with the GrantTypes field value
// and a boolean to check if the value has been set.
func (o *SrvRegisterClientPostRequest) GetGrantTypesOk() ([]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.GrantTypes, true
}

// SetGrantTypes sets field value
func (o *SrvRegisterClientPostRequest) SetGrantTypes(v []interface{}) {
	o.GrantTypes = v
}

// GetResponseTypes returns the ResponseTypes field value
func (o *SrvRegisterClientPostRequest) GetResponseTypes() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}

	return o.ResponseTypes
}

// GetResponseTypesOk returns a tuple with the ResponseTypes field value
// and a boolean to check if the value has been set.
func (o *SrvRegisterClientPostRequest) GetResponseTypesOk() ([]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResponseTypes, true
}

// SetResponseTypes sets field value
func (o *SrvRegisterClientPostRequest) SetResponseTypes(v []interface{}) {
	o.ResponseTypes = v
}

// GetServiceAccessPolicyId returns the ServiceAccessPolicyId field value
func (o *SrvRegisterClientPostRequest) GetServiceAccessPolicyId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceAccessPolicyId
}

// GetServiceAccessPolicyIdOk returns a tuple with the ServiceAccessPolicyId field value
// and a boolean to check if the value has been set.
func (o *SrvRegisterClientPostRequest) GetServiceAccessPolicyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceAccessPolicyId, true
}

// SetServiceAccessPolicyId sets field value
func (o *SrvRegisterClientPostRequest) SetServiceAccessPolicyId(v string) {
	o.ServiceAccessPolicyId = v
}

// GetServiceId returns the ServiceId field value if set, zero value otherwise.
func (o *SrvRegisterClientPostRequest) GetServiceId() string {
	if o == nil || IsNil(o.ServiceId) {
		var ret string
		return ret
	}
	return *o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SrvRegisterClientPostRequest) GetServiceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceId) {
		return nil, false
	}
	return o.ServiceId, true
}

// HasServiceId returns a boolean if a field has been set.
func (o *SrvRegisterClientPostRequest) HasServiceId() bool {
	if o != nil && !IsNil(o.ServiceId) {
		return true
	}

	return false
}

// SetServiceId gets a reference to the given string and assigns it to the ServiceId field.
func (o *SrvRegisterClientPostRequest) SetServiceId(v string) {
	o.ServiceId = &v
}

// GetServiceErn returns the ServiceErn field value if set, zero value otherwise.
func (o *SrvRegisterClientPostRequest) GetServiceErn() string {
	if o == nil || IsNil(o.ServiceErn) {
		var ret string
		return ret
	}
	return *o.ServiceErn
}

// GetServiceErnOk returns a tuple with the ServiceErn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SrvRegisterClientPostRequest) GetServiceErnOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceErn) {
		return nil, false
	}
	return o.ServiceErn, true
}

// HasServiceErn returns a boolean if a field has been set.
func (o *SrvRegisterClientPostRequest) HasServiceErn() bool {
	if o != nil && !IsNil(o.ServiceErn) {
		return true
	}

	return false
}

// SetServiceErn gets a reference to the given string and assigns it to the ServiceErn field.
func (o *SrvRegisterClientPostRequest) SetServiceErn(v string) {
	o.ServiceErn = &v
}

func (o SrvRegisterClientPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SrvRegisterClientPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.TokenEndpointAuthMethod != nil {
		toSerialize["tokenEndpointAuthMethod"] = o.TokenEndpointAuthMethod
	}
	toSerialize["grantTypes"] = o.GrantTypes
	toSerialize["responseTypes"] = o.ResponseTypes
	toSerialize["serviceAccessPolicyId"] = o.ServiceAccessPolicyId
	if !IsNil(o.ServiceId) {
		toSerialize["serviceId"] = o.ServiceId
	}
	if !IsNil(o.ServiceErn) {
		toSerialize["serviceErn"] = o.ServiceErn
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SrvRegisterClientPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tokenEndpointAuthMethod",
		"grantTypes",
		"responseTypes",
		"serviceAccessPolicyId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSrvRegisterClientPostRequest := _SrvRegisterClientPostRequest{}

	err = json.Unmarshal(data, &varSrvRegisterClientPostRequest)

	if err != nil {
		return err
	}

	*o = SrvRegisterClientPostRequest(varSrvRegisterClientPostRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "tokenEndpointAuthMethod")
		delete(additionalProperties, "grantTypes")
		delete(additionalProperties, "responseTypes")
		delete(additionalProperties, "serviceAccessPolicyId")
		delete(additionalProperties, "serviceId")
		delete(additionalProperties, "serviceErn")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSrvRegisterClientPostRequest struct {
	value *SrvRegisterClientPostRequest
	isSet bool
}

func (v NullableSrvRegisterClientPostRequest) Get() *SrvRegisterClientPostRequest {
	return v.value
}

func (v *NullableSrvRegisterClientPostRequest) Set(val *SrvRegisterClientPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSrvRegisterClientPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSrvRegisterClientPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSrvRegisterClientPostRequest(val *SrvRegisterClientPostRequest) *NullableSrvRegisterClientPostRequest {
	return &NullableSrvRegisterClientPostRequest{value: val, isSet: true}
}

func (v NullableSrvRegisterClientPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSrvRegisterClientPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


