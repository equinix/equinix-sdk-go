/*
Equinix Security Token Service

Exchange ID tokens for Equinix access tokens according to managed trust relationships.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stsv1

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// OpsApiService OpsApi service
type OpsApiService service

type ApiOpsCreateOidcProviderPostRequest struct {
	ctx context.Context
	ApiService *OpsApiService
	opsCreateOidcProviderPostRequest *OpsCreateOidcProviderPostRequest
}

func (r ApiOpsCreateOidcProviderPostRequest) OpsCreateOidcProviderPostRequest(opsCreateOidcProviderPostRequest OpsCreateOidcProviderPostRequest) ApiOpsCreateOidcProviderPostRequest {
	r.opsCreateOidcProviderPostRequest = &opsCreateOidcProviderPostRequest
	return r
}

func (r ApiOpsCreateOidcProviderPostRequest) Execute() (*OpsCreateOidcProviderPost200Response, *http.Response, error) {
	return r.ApiService.OpsCreateOidcProviderPostExecute(r)
}

/*
OpsCreateOidcProviderPost /ops/createOidcProvider

Allows an operator to register an OIDC provider for the project identified by `projectId`. This creates a trust
  relationship between the project and the OIDC provider. This allows bootstrapping in which the operator creates an
  initial trusted OIDC provider for users to access their projects. Access control is coarse-grained.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOpsCreateOidcProviderPostRequest
*/
func (a *OpsApiService) OpsCreateOidcProviderPost(ctx context.Context) ApiOpsCreateOidcProviderPostRequest {
	return ApiOpsCreateOidcProviderPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OpsCreateOidcProviderPost200Response
func (a *OpsApiService) OpsCreateOidcProviderPostExecute(r ApiOpsCreateOidcProviderPostRequest) (*OpsCreateOidcProviderPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpsCreateOidcProviderPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpsApiService.OpsCreateOidcProviderPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ops/createOidcProvider"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.opsCreateOidcProviderPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOpsListOidcProvidersPostRequest struct {
	ctx context.Context
	ApiService *OpsApiService
	opsListOidcProvidersPostRequest *OpsListOidcProvidersPostRequest
}

func (r ApiOpsListOidcProvidersPostRequest) OpsListOidcProvidersPostRequest(opsListOidcProvidersPostRequest OpsListOidcProvidersPostRequest) ApiOpsListOidcProvidersPostRequest {
	r.opsListOidcProvidersPostRequest = &opsListOidcProvidersPostRequest
	return r
}

func (r ApiOpsListOidcProvidersPostRequest) Execute() (*OpsListOidcProvidersPost200Response, *http.Response, error) {
	return r.ApiService.OpsListOidcProvidersPostExecute(r)
}

/*
OpsListOidcProvidersPost /ops/listOidcProviders

Allows an operator to list all of the OIDC providers that are trusted by a given `projectId`. Access control is
  coarse-grained.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOpsListOidcProvidersPostRequest
*/
func (a *OpsApiService) OpsListOidcProvidersPost(ctx context.Context) ApiOpsListOidcProvidersPostRequest {
	return ApiOpsListOidcProvidersPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OpsListOidcProvidersPost200Response
func (a *OpsApiService) OpsListOidcProvidersPostExecute(r ApiOpsListOidcProvidersPostRequest) (*OpsListOidcProvidersPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpsListOidcProvidersPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpsApiService.OpsListOidcProvidersPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ops/listOidcProviders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.opsListOidcProvidersPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
