/*
Equinix Security Token Service

Exchange ID tokens for Equinix access tokens according to managed trust relationships. STS is an alpha service and is not generally available to customers.

API version: 1.0.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stsv1alpha

import (
	"encoding/json"
	"fmt"
)

// UseTokenPostRequestSubjectTokenType the model 'UseTokenPostRequestSubjectTokenType'
type UseTokenPostRequestSubjectTokenType string

// List of _use_token_post_request_subject_token_type
const (
	USETOKENPOSTREQUESTSUBJECTTOKENTYPE_URN_IETF_PARAMS_OAUTH_TOKEN_TYPE_ID_TOKEN UseTokenPostRequestSubjectTokenType = "urn:ietf:params:oauth:token-type:id_token"
)

// All allowed values of UseTokenPostRequestSubjectTokenType enum
var AllowedUseTokenPostRequestSubjectTokenTypeEnumValues = []UseTokenPostRequestSubjectTokenType{
	"urn:ietf:params:oauth:token-type:id_token",
}

func (v *UseTokenPostRequestSubjectTokenType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UseTokenPostRequestSubjectTokenType(value)
	for _, existing := range AllowedUseTokenPostRequestSubjectTokenTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UseTokenPostRequestSubjectTokenType", value)
}

// NewUseTokenPostRequestSubjectTokenTypeFromValue returns a pointer to a valid UseTokenPostRequestSubjectTokenType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUseTokenPostRequestSubjectTokenTypeFromValue(v string) (*UseTokenPostRequestSubjectTokenType, error) {
	ev := UseTokenPostRequestSubjectTokenType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UseTokenPostRequestSubjectTokenType: valid values are %v", v, AllowedUseTokenPostRequestSubjectTokenTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UseTokenPostRequestSubjectTokenType) IsValid() bool {
	for _, existing := range AllowedUseTokenPostRequestSubjectTokenTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to _use_token_post_request_subject_token_type value
func (v UseTokenPostRequestSubjectTokenType) Ptr() *UseTokenPostRequestSubjectTokenType {
	return &v
}

type NullableUseTokenPostRequestSubjectTokenType struct {
	value *UseTokenPostRequestSubjectTokenType
	isSet bool
}

func (v NullableUseTokenPostRequestSubjectTokenType) Get() *UseTokenPostRequestSubjectTokenType {
	return v.value
}

func (v *NullableUseTokenPostRequestSubjectTokenType) Set(val *UseTokenPostRequestSubjectTokenType) {
	v.value = val
	v.isSet = true
}

func (v NullableUseTokenPostRequestSubjectTokenType) IsSet() bool {
	return v.isSet
}

func (v *NullableUseTokenPostRequestSubjectTokenType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUseTokenPostRequestSubjectTokenType(val *UseTokenPostRequestSubjectTokenType) *NullableUseTokenPostRequestSubjectTokenType {
	return &NullableUseTokenPostRequestSubjectTokenType{value: val, isSet: true}
}

func (v NullableUseTokenPostRequestSubjectTokenType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUseTokenPostRequestSubjectTokenType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
