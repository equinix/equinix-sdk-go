/*
Equinix Security Token Service

Exchange ID tokens for Equinix access tokens according to managed trust relationships. STS is an alpha service and is not generally available to customers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stsv1alpha

import (
	"encoding/json"
	"fmt"
)

// TokenExchangeResponseTokenType the model 'TokenExchangeResponseTokenType'
type TokenExchangeResponseTokenType string

// List of TokenExchangeResponse_token_type
const (
	TOKENEXCHANGERESPONSETOKENTYPE_BEARER TokenExchangeResponseTokenType = "Bearer"
)

// All allowed values of TokenExchangeResponseTokenType enum
var AllowedTokenExchangeResponseTokenTypeEnumValues = []TokenExchangeResponseTokenType{
	"Bearer",
}

func (v *TokenExchangeResponseTokenType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TokenExchangeResponseTokenType(value)
	for _, existing := range AllowedTokenExchangeResponseTokenTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TokenExchangeResponseTokenType", value)
}

// NewTokenExchangeResponseTokenTypeFromValue returns a pointer to a valid TokenExchangeResponseTokenType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTokenExchangeResponseTokenTypeFromValue(v string) (*TokenExchangeResponseTokenType, error) {
	ev := TokenExchangeResponseTokenType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TokenExchangeResponseTokenType: valid values are %v", v, AllowedTokenExchangeResponseTokenTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TokenExchangeResponseTokenType) IsValid() bool {
	for _, existing := range AllowedTokenExchangeResponseTokenTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TokenExchangeResponse_token_type value
func (v TokenExchangeResponseTokenType) Ptr() *TokenExchangeResponseTokenType {
	return &v
}

type NullableTokenExchangeResponseTokenType struct {
	value *TokenExchangeResponseTokenType
	isSet bool
}

func (v NullableTokenExchangeResponseTokenType) Get() *TokenExchangeResponseTokenType {
	return v.value
}

func (v *NullableTokenExchangeResponseTokenType) Set(val *TokenExchangeResponseTokenType) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenExchangeResponseTokenType) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenExchangeResponseTokenType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenExchangeResponseTokenType(val *TokenExchangeResponseTokenType) *NullableTokenExchangeResponseTokenType {
	return &NullableTokenExchangeResponseTokenType{value: val, isSet: true}
}

func (v NullableTokenExchangeResponseTokenType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenExchangeResponseTokenType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
