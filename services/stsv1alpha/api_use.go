/*
Equinix Security Token Service

Exchange ID tokens for Equinix access tokens according to managed trust relationships. STS is an alpha service and is not generally available to customers.

API version: 1.0.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stsv1alpha

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// UseApiService UseApi service
type UseApiService service

type ApiUseTokenPostRequest struct {
	ctx              context.Context
	ApiService       *UseApiService
	grantType        *UseTokenPostRequestGrantType
	scope            *string
	subjectToken     *string
	subjectTokenType *UseTokenPostRequestSubjectTokenType
}

func (r ApiUseTokenPostRequest) GrantType(grantType UseTokenPostRequestGrantType) ApiUseTokenPostRequest {
	r.grantType = &grantType
	return r
}

func (r ApiUseTokenPostRequest) Scope(scope string) ApiUseTokenPostRequest {
	r.scope = &scope
	return r
}

func (r ApiUseTokenPostRequest) SubjectToken(subjectToken string) ApiUseTokenPostRequest {
	r.subjectToken = &subjectToken
	return r
}

func (r ApiUseTokenPostRequest) SubjectTokenType(subjectTokenType UseTokenPostRequestSubjectTokenType) ApiUseTokenPostRequest {
	r.subjectTokenType = &subjectTokenType
	return r
}

func (r ApiUseTokenPostRequest) Execute() (*TokenExchangeResponse, *http.Response, error) {
	return r.ApiService.UseTokenPostExecute(r)
}

/*
UseTokenPost Method for UseTokenPost

An OAuth 2.0 token endpoint supporting RFC 8693 token exchange, used to exchange an OIDC ID token issued by a trusted OIDC provider to a trusted client for an access token that can be used access other Equinix product APIs.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiUseTokenPostRequest
*/
func (a *UseApiService) UseTokenPost(ctx context.Context) ApiUseTokenPostRequest {
	return ApiUseTokenPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return TokenExchangeResponse
func (a *UseApiService) UseTokenPostExecute(r ApiUseTokenPostRequest) (*TokenExchangeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TokenExchangeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UseApiService.UseTokenPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/use/token"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.grantType == nil {
		return localVarReturnValue, nil, reportError("grantType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "grant_type", r.grantType, "", "")
	if r.scope != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "scope", r.scope, "", "")
	}
	if r.subjectToken != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "subject_token", r.subjectToken, "", "")
	}
	if r.subjectTokenType != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "subject_token_type", r.subjectTokenType, "", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
