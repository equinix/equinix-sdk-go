/*
Equinix API Authentication

Equinix APIs use the OAuth 2.0 for authentication and authorization. Equinix supports the resource owner password and the client credentials flow. To begin, obtain OAuth 2.0 client credentials from the Equinix Developer Console under \"My Apps\". Then your client application  requests an access token from the Equinix API Authorization endpoint, extracts the access_token from the response, and sends the Bearer token to the API that you want to access

API version: 1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accesstokenv1

import (
	"encoding/json"
	"fmt"
)

// checks if the Oauth2TokenRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Oauth2TokenRequest{}

// Oauth2TokenRequest struct for Oauth2TokenRequest
type Oauth2TokenRequest struct {
	// Deprecated - The Equinix username used to access portals
	UserName *string `json:"user_name,omitempty"`
	// Deprecated - The Equinix user password used to access portals
	UserPassword *string `json:"user_password,omitempty"`
	// API Consumer Key available under \"My Apps\" in developer portal
	ClientId string `json:"client_id"`
	// API Consumer secret available under \"My Apps\" in developer portal
	ClientSecret string `json:"client_secret"`
	// The OAuth2 grant type used for authorization. Supported values are \"password\" & \"client_credentials\". user_name and password is not considered in case this value is \"client_credentials\". If the grant_type is not passed, by default it would consider \"password\" type in which user_name and password is required. Note that the password grant type is deprecated. Recommended to use grant_type of 'client_credentials' instead.
	GrantType *string `json:"grant_type,omitempty"`
	// For enhanced security, you may encrypt the password value while requesting for an access_token. Currently only \"md5-b64\" hashing is supported. Any other value would treat password value as raw string
	PasswordEncoding     *string `json:"password_encoding,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Oauth2TokenRequest Oauth2TokenRequest

// NewOauth2TokenRequest instantiates a new Oauth2TokenRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOauth2TokenRequest(clientId string, clientSecret string) *Oauth2TokenRequest {
	this := Oauth2TokenRequest{}
	this.ClientId = clientId
	this.ClientSecret = clientSecret
	var passwordEncoding string = "none"
	this.PasswordEncoding = &passwordEncoding
	return &this
}

// NewOauth2TokenRequestWithDefaults instantiates a new Oauth2TokenRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOauth2TokenRequestWithDefaults() *Oauth2TokenRequest {
	this := Oauth2TokenRequest{}
	var passwordEncoding string = "none"
	this.PasswordEncoding = &passwordEncoding
	return &this
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *Oauth2TokenRequest) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Oauth2TokenRequest) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *Oauth2TokenRequest) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *Oauth2TokenRequest) SetUserName(v string) {
	o.UserName = &v
}

// GetUserPassword returns the UserPassword field value if set, zero value otherwise.
func (o *Oauth2TokenRequest) GetUserPassword() string {
	if o == nil || IsNil(o.UserPassword) {
		var ret string
		return ret
	}
	return *o.UserPassword
}

// GetUserPasswordOk returns a tuple with the UserPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Oauth2TokenRequest) GetUserPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.UserPassword) {
		return nil, false
	}
	return o.UserPassword, true
}

// HasUserPassword returns a boolean if a field has been set.
func (o *Oauth2TokenRequest) HasUserPassword() bool {
	if o != nil && !IsNil(o.UserPassword) {
		return true
	}

	return false
}

// SetUserPassword gets a reference to the given string and assigns it to the UserPassword field.
func (o *Oauth2TokenRequest) SetUserPassword(v string) {
	o.UserPassword = &v
}

// GetClientId returns the ClientId field value
func (o *Oauth2TokenRequest) GetClientId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value
// and a boolean to check if the value has been set.
func (o *Oauth2TokenRequest) GetClientIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientId, true
}

// SetClientId sets field value
func (o *Oauth2TokenRequest) SetClientId(v string) {
	o.ClientId = v
}

// GetClientSecret returns the ClientSecret field value
func (o *Oauth2TokenRequest) GetClientSecret() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientSecret
}

// GetClientSecretOk returns a tuple with the ClientSecret field value
// and a boolean to check if the value has been set.
func (o *Oauth2TokenRequest) GetClientSecretOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientSecret, true
}

// SetClientSecret sets field value
func (o *Oauth2TokenRequest) SetClientSecret(v string) {
	o.ClientSecret = v
}

// GetGrantType returns the GrantType field value if set, zero value otherwise.
func (o *Oauth2TokenRequest) GetGrantType() string {
	if o == nil || IsNil(o.GrantType) {
		var ret string
		return ret
	}
	return *o.GrantType
}

// GetGrantTypeOk returns a tuple with the GrantType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Oauth2TokenRequest) GetGrantTypeOk() (*string, bool) {
	if o == nil || IsNil(o.GrantType) {
		return nil, false
	}
	return o.GrantType, true
}

// HasGrantType returns a boolean if a field has been set.
func (o *Oauth2TokenRequest) HasGrantType() bool {
	if o != nil && !IsNil(o.GrantType) {
		return true
	}

	return false
}

// SetGrantType gets a reference to the given string and assigns it to the GrantType field.
func (o *Oauth2TokenRequest) SetGrantType(v string) {
	o.GrantType = &v
}

// GetPasswordEncoding returns the PasswordEncoding field value if set, zero value otherwise.
func (o *Oauth2TokenRequest) GetPasswordEncoding() string {
	if o == nil || IsNil(o.PasswordEncoding) {
		var ret string
		return ret
	}
	return *o.PasswordEncoding
}

// GetPasswordEncodingOk returns a tuple with the PasswordEncoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Oauth2TokenRequest) GetPasswordEncodingOk() (*string, bool) {
	if o == nil || IsNil(o.PasswordEncoding) {
		return nil, false
	}
	return o.PasswordEncoding, true
}

// HasPasswordEncoding returns a boolean if a field has been set.
func (o *Oauth2TokenRequest) HasPasswordEncoding() bool {
	if o != nil && !IsNil(o.PasswordEncoding) {
		return true
	}

	return false
}

// SetPasswordEncoding gets a reference to the given string and assigns it to the PasswordEncoding field.
func (o *Oauth2TokenRequest) SetPasswordEncoding(v string) {
	o.PasswordEncoding = &v
}

func (o Oauth2TokenRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Oauth2TokenRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserName) {
		toSerialize["user_name"] = o.UserName
	}
	if !IsNil(o.UserPassword) {
		toSerialize["user_password"] = o.UserPassword
	}
	toSerialize["client_id"] = o.ClientId
	toSerialize["client_secret"] = o.ClientSecret
	if !IsNil(o.GrantType) {
		toSerialize["grant_type"] = o.GrantType
	}
	if !IsNil(o.PasswordEncoding) {
		toSerialize["password_encoding"] = o.PasswordEncoding
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Oauth2TokenRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"client_id",
		"client_secret",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOauth2TokenRequest := _Oauth2TokenRequest{}

	err = json.Unmarshal(data, &varOauth2TokenRequest)

	if err != nil {
		return err
	}

	*o = Oauth2TokenRequest(varOauth2TokenRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "user_name")
		delete(additionalProperties, "user_password")
		delete(additionalProperties, "client_id")
		delete(additionalProperties, "client_secret")
		delete(additionalProperties, "grant_type")
		delete(additionalProperties, "password_encoding")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOauth2TokenRequest struct {
	value *Oauth2TokenRequest
	isSet bool
}

func (v NullableOauth2TokenRequest) Get() *Oauth2TokenRequest {
	return v.value
}

func (v *NullableOauth2TokenRequest) Set(val *Oauth2TokenRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableOauth2TokenRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableOauth2TokenRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOauth2TokenRequest(val *Oauth2TokenRequest) *NullableOauth2TokenRequest {
	return &NullableOauth2TokenRequest{value: val, isSet: true}
}

func (v NullableOauth2TokenRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOauth2TokenRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
