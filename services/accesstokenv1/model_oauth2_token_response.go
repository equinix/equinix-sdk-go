/*
Equinix API Authentication

Equinix APIs use the OAuth 2.0 for authentication and authorization. Equinix supports the resource owner password and the client credentials flow. To begin, obtain OAuth 2.0 client credentials from the Equinix Developer Console under \"My Apps\". Then your client application  requests an access token from the Equinix API Authorization endpoint, extracts the access_token from the response, and sends the Bearer token to the API that you want to access

API version: 1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accesstokenv1

import (
	"encoding/json"
	"fmt"
)

// checks if the Oauth2TokenResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Oauth2TokenResponse{}

// Oauth2TokenResponse struct for Oauth2TokenResponse
type Oauth2TokenResponse struct {
	// the OAuth2 Bearer token required to access Equinix API's
	AccessToken string `json:"access_token"`
	// The max validity in seconds for this access_token
	TokenTimeout string `json:"token_timeout"`
	// The Equinix user account to which this token is associated with
	UserName string `json:"user_name"`
	// The type of access_token returned in this response
	TokenType string `json:"token_type"`
	// The OAuth2 refresh token which could be used to retrieve a new access_token without user credentials. The refresh_token has a max validity of 60 days after which a new Access Token request must be made. Refresh token is Not returned for \"client_credentials\" grant type
	RefreshToken *string `json:"refresh_token,omitempty"`
	// The max validity in seconds for the refresh_token. This field is not retruned for the \"client_credentials\" grant type
	RefreshTokenTimeout  *string `json:"refresh_token_timeout,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Oauth2TokenResponse Oauth2TokenResponse

// NewOauth2TokenResponse instantiates a new Oauth2TokenResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOauth2TokenResponse(accessToken string, tokenTimeout string, userName string, tokenType string) *Oauth2TokenResponse {
	this := Oauth2TokenResponse{}
	this.AccessToken = accessToken
	this.TokenTimeout = tokenTimeout
	this.UserName = userName
	this.TokenType = tokenType
	var refreshTokenTimeout string = "5182560 (60 days)"
	this.RefreshTokenTimeout = &refreshTokenTimeout
	return &this
}

// NewOauth2TokenResponseWithDefaults instantiates a new Oauth2TokenResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOauth2TokenResponseWithDefaults() *Oauth2TokenResponse {
	this := Oauth2TokenResponse{}
	var tokenTimeout string = "3599 (60 minutes)"
	this.TokenTimeout = tokenTimeout
	var tokenType string = "Bearer"
	this.TokenType = tokenType
	var refreshTokenTimeout string = "5182560 (60 days)"
	this.RefreshTokenTimeout = &refreshTokenTimeout
	return &this
}

// GetAccessToken returns the AccessToken field value
func (o *Oauth2TokenResponse) GetAccessToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessToken
}

// GetAccessTokenOk returns a tuple with the AccessToken field value
// and a boolean to check if the value has been set.
func (o *Oauth2TokenResponse) GetAccessTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessToken, true
}

// SetAccessToken sets field value
func (o *Oauth2TokenResponse) SetAccessToken(v string) {
	o.AccessToken = v
}

// GetTokenTimeout returns the TokenTimeout field value
func (o *Oauth2TokenResponse) GetTokenTimeout() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenTimeout
}

// GetTokenTimeoutOk returns a tuple with the TokenTimeout field value
// and a boolean to check if the value has been set.
func (o *Oauth2TokenResponse) GetTokenTimeoutOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenTimeout, true
}

// SetTokenTimeout sets field value
func (o *Oauth2TokenResponse) SetTokenTimeout(v string) {
	o.TokenTimeout = v
}

// GetUserName returns the UserName field value
func (o *Oauth2TokenResponse) GetUserName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value
// and a boolean to check if the value has been set.
func (o *Oauth2TokenResponse) GetUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserName, true
}

// SetUserName sets field value
func (o *Oauth2TokenResponse) SetUserName(v string) {
	o.UserName = v
}

// GetTokenType returns the TokenType field value
func (o *Oauth2TokenResponse) GetTokenType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenType
}

// GetTokenTypeOk returns a tuple with the TokenType field value
// and a boolean to check if the value has been set.
func (o *Oauth2TokenResponse) GetTokenTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenType, true
}

// SetTokenType sets field value
func (o *Oauth2TokenResponse) SetTokenType(v string) {
	o.TokenType = v
}

// GetRefreshToken returns the RefreshToken field value if set, zero value otherwise.
func (o *Oauth2TokenResponse) GetRefreshToken() string {
	if o == nil || IsNil(o.RefreshToken) {
		var ret string
		return ret
	}
	return *o.RefreshToken
}

// GetRefreshTokenOk returns a tuple with the RefreshToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Oauth2TokenResponse) GetRefreshTokenOk() (*string, bool) {
	if o == nil || IsNil(o.RefreshToken) {
		return nil, false
	}
	return o.RefreshToken, true
}

// HasRefreshToken returns a boolean if a field has been set.
func (o *Oauth2TokenResponse) HasRefreshToken() bool {
	if o != nil && !IsNil(o.RefreshToken) {
		return true
	}

	return false
}

// SetRefreshToken gets a reference to the given string and assigns it to the RefreshToken field.
func (o *Oauth2TokenResponse) SetRefreshToken(v string) {
	o.RefreshToken = &v
}

// GetRefreshTokenTimeout returns the RefreshTokenTimeout field value if set, zero value otherwise.
func (o *Oauth2TokenResponse) GetRefreshTokenTimeout() string {
	if o == nil || IsNil(o.RefreshTokenTimeout) {
		var ret string
		return ret
	}
	return *o.RefreshTokenTimeout
}

// GetRefreshTokenTimeoutOk returns a tuple with the RefreshTokenTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Oauth2TokenResponse) GetRefreshTokenTimeoutOk() (*string, bool) {
	if o == nil || IsNil(o.RefreshTokenTimeout) {
		return nil, false
	}
	return o.RefreshTokenTimeout, true
}

// HasRefreshTokenTimeout returns a boolean if a field has been set.
func (o *Oauth2TokenResponse) HasRefreshTokenTimeout() bool {
	if o != nil && !IsNil(o.RefreshTokenTimeout) {
		return true
	}

	return false
}

// SetRefreshTokenTimeout gets a reference to the given string and assigns it to the RefreshTokenTimeout field.
func (o *Oauth2TokenResponse) SetRefreshTokenTimeout(v string) {
	o.RefreshTokenTimeout = &v
}

func (o Oauth2TokenResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Oauth2TokenResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["access_token"] = o.AccessToken
	toSerialize["token_timeout"] = o.TokenTimeout
	toSerialize["user_name"] = o.UserName
	toSerialize["token_type"] = o.TokenType
	if !IsNil(o.RefreshToken) {
		toSerialize["refresh_token"] = o.RefreshToken
	}
	if !IsNil(o.RefreshTokenTimeout) {
		toSerialize["refresh_token_timeout"] = o.RefreshTokenTimeout
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Oauth2TokenResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"access_token",
		"token_timeout",
		"user_name",
		"token_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOauth2TokenResponse := _Oauth2TokenResponse{}

	err = json.Unmarshal(data, &varOauth2TokenResponse)

	if err != nil {
		return err
	}

	*o = Oauth2TokenResponse(varOauth2TokenResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "access_token")
		delete(additionalProperties, "token_timeout")
		delete(additionalProperties, "user_name")
		delete(additionalProperties, "token_type")
		delete(additionalProperties, "refresh_token")
		delete(additionalProperties, "refresh_token_timeout")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOauth2TokenResponse struct {
	value *Oauth2TokenResponse
	isSet bool
}

func (v NullableOauth2TokenResponse) Get() *Oauth2TokenResponse {
	return v.value
}

func (v *NullableOauth2TokenResponse) Set(val *Oauth2TokenResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableOauth2TokenResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableOauth2TokenResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOauth2TokenResponse(val *Oauth2TokenResponse) *NullableOauth2TokenResponse {
	return &NullableOauth2TokenResponse{value: val, isSet: true}
}

func (v NullableOauth2TokenResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOauth2TokenResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
