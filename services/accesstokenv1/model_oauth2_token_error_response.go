/*
Equinix API Authentication

Equinix APIs use the OAuth 2.0 for authentication and authorization. Equinix supports the resource owner password and the client credentials flow. To begin, obtain OAuth 2.0 client credentials from the Equinix Developer Console under \"My Apps\". Then your client application  requests an access token from the Equinix API Authorization endpoint, extracts the access_token from the response, and sends the Bearer token to the API that you want to access

API version: 1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accesstokenv1

import (
	"encoding/json"
	"fmt"
)

// checks if the Oauth2TokenErrorResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Oauth2TokenErrorResponse{}

// Oauth2TokenErrorResponse struct for Oauth2TokenErrorResponse
type Oauth2TokenErrorResponse struct {
	// The module associated with this error
	ErrorDomain string `json:"error_domain"`
	// The error title
	ErrorTitle string `json:"error_title"`
	// The code used to identify the error category
	ErrorCode string `json:"error_code"`
	// The error message to be used for auditing purpose by the consuming application
	DeveloperMessage string `json:"developer_message"`
	// The error message which could be displayed to the end user
	ErrorMessage         string `json:"error_message"`
	AdditionalProperties map[string]interface{}
}

type _Oauth2TokenErrorResponse Oauth2TokenErrorResponse

// NewOauth2TokenErrorResponse instantiates a new Oauth2TokenErrorResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOauth2TokenErrorResponse(errorDomain string, errorTitle string, errorCode string, developerMessage string, errorMessage string) *Oauth2TokenErrorResponse {
	this := Oauth2TokenErrorResponse{}
	this.ErrorDomain = errorDomain
	this.ErrorTitle = errorTitle
	this.ErrorCode = errorCode
	this.DeveloperMessage = developerMessage
	this.ErrorMessage = errorMessage
	return &this
}

// NewOauth2TokenErrorResponseWithDefaults instantiates a new Oauth2TokenErrorResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOauth2TokenErrorResponseWithDefaults() *Oauth2TokenErrorResponse {
	this := Oauth2TokenErrorResponse{}
	return &this
}

// GetErrorDomain returns the ErrorDomain field value
func (o *Oauth2TokenErrorResponse) GetErrorDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ErrorDomain
}

// GetErrorDomainOk returns a tuple with the ErrorDomain field value
// and a boolean to check if the value has been set.
func (o *Oauth2TokenErrorResponse) GetErrorDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorDomain, true
}

// SetErrorDomain sets field value
func (o *Oauth2TokenErrorResponse) SetErrorDomain(v string) {
	o.ErrorDomain = v
}

// GetErrorTitle returns the ErrorTitle field value
func (o *Oauth2TokenErrorResponse) GetErrorTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ErrorTitle
}

// GetErrorTitleOk returns a tuple with the ErrorTitle field value
// and a boolean to check if the value has been set.
func (o *Oauth2TokenErrorResponse) GetErrorTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorTitle, true
}

// SetErrorTitle sets field value
func (o *Oauth2TokenErrorResponse) SetErrorTitle(v string) {
	o.ErrorTitle = v
}

// GetErrorCode returns the ErrorCode field value
func (o *Oauth2TokenErrorResponse) GetErrorCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value
// and a boolean to check if the value has been set.
func (o *Oauth2TokenErrorResponse) GetErrorCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorCode, true
}

// SetErrorCode sets field value
func (o *Oauth2TokenErrorResponse) SetErrorCode(v string) {
	o.ErrorCode = v
}

// GetDeveloperMessage returns the DeveloperMessage field value
func (o *Oauth2TokenErrorResponse) GetDeveloperMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeveloperMessage
}

// GetDeveloperMessageOk returns a tuple with the DeveloperMessage field value
// and a boolean to check if the value has been set.
func (o *Oauth2TokenErrorResponse) GetDeveloperMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeveloperMessage, true
}

// SetDeveloperMessage sets field value
func (o *Oauth2TokenErrorResponse) SetDeveloperMessage(v string) {
	o.DeveloperMessage = v
}

// GetErrorMessage returns the ErrorMessage field value
func (o *Oauth2TokenErrorResponse) GetErrorMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value
// and a boolean to check if the value has been set.
func (o *Oauth2TokenErrorResponse) GetErrorMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorMessage, true
}

// SetErrorMessage sets field value
func (o *Oauth2TokenErrorResponse) SetErrorMessage(v string) {
	o.ErrorMessage = v
}

func (o Oauth2TokenErrorResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Oauth2TokenErrorResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["error_domain"] = o.ErrorDomain
	toSerialize["error_title"] = o.ErrorTitle
	toSerialize["error_code"] = o.ErrorCode
	toSerialize["developer_message"] = o.DeveloperMessage
	toSerialize["error_message"] = o.ErrorMessage

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Oauth2TokenErrorResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"error_domain",
		"error_title",
		"error_code",
		"developer_message",
		"error_message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOauth2TokenErrorResponse := _Oauth2TokenErrorResponse{}

	err = json.Unmarshal(data, &varOauth2TokenErrorResponse)

	if err != nil {
		return err
	}

	*o = Oauth2TokenErrorResponse(varOauth2TokenErrorResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "error_domain")
		delete(additionalProperties, "error_title")
		delete(additionalProperties, "error_code")
		delete(additionalProperties, "developer_message")
		delete(additionalProperties, "error_message")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOauth2TokenErrorResponse struct {
	value *Oauth2TokenErrorResponse
	isSet bool
}

func (v NullableOauth2TokenErrorResponse) Get() *Oauth2TokenErrorResponse {
	return v.value
}

func (v *NullableOauth2TokenErrorResponse) Set(val *Oauth2TokenErrorResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableOauth2TokenErrorResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableOauth2TokenErrorResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOauth2TokenErrorResponse(val *Oauth2TokenErrorResponse) *NullableOauth2TokenErrorResponse {
	return &NullableOauth2TokenErrorResponse{value: val, isSet: true}
}

func (v NullableOauth2TokenErrorResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOauth2TokenErrorResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
