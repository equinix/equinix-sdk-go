/*
Equinix API Authentication

Equinix APIs use the OAuth 2.0 for authentication and authorization. Equinix supports the resource owner password and the client credentials flow. To begin, obtain OAuth 2.0 client credentials from the Equinix Developer Console under \"My Apps\". Then your client application  requests an access token from the Equinix API Authorization endpoint, extracts the access_token from the response, and sends the Bearer token to the API that you want to access

API version: 1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accesstokenv1

import (
	"encoding/json"
	"fmt"
)

// checks if the Oauth2RefreshTokenRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Oauth2RefreshTokenRequest{}

// Oauth2RefreshTokenRequest struct for Oauth2RefreshTokenRequest
type Oauth2RefreshTokenRequest struct {
	// API Consumer Key available under \"My Apps\" in developer portal
	ClientId string `json:"client_id"`
	// API Consumer secret available under \"My Apps\" in developer portal
	ClientSecret string `json:"client_secret"`
	// The OAuth2 refresh_token retrieved from the previous successful Access Token API call
	RefreshToken         string `json:"refresh_token"`
	AdditionalProperties map[string]interface{}
}

type _Oauth2RefreshTokenRequest Oauth2RefreshTokenRequest

// NewOauth2RefreshTokenRequest instantiates a new Oauth2RefreshTokenRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOauth2RefreshTokenRequest(clientId string, clientSecret string, refreshToken string) *Oauth2RefreshTokenRequest {
	this := Oauth2RefreshTokenRequest{}
	this.ClientId = clientId
	this.ClientSecret = clientSecret
	this.RefreshToken = refreshToken
	return &this
}

// NewOauth2RefreshTokenRequestWithDefaults instantiates a new Oauth2RefreshTokenRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOauth2RefreshTokenRequestWithDefaults() *Oauth2RefreshTokenRequest {
	this := Oauth2RefreshTokenRequest{}
	return &this
}

// GetClientId returns the ClientId field value
func (o *Oauth2RefreshTokenRequest) GetClientId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value
// and a boolean to check if the value has been set.
func (o *Oauth2RefreshTokenRequest) GetClientIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientId, true
}

// SetClientId sets field value
func (o *Oauth2RefreshTokenRequest) SetClientId(v string) {
	o.ClientId = v
}

// GetClientSecret returns the ClientSecret field value
func (o *Oauth2RefreshTokenRequest) GetClientSecret() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientSecret
}

// GetClientSecretOk returns a tuple with the ClientSecret field value
// and a boolean to check if the value has been set.
func (o *Oauth2RefreshTokenRequest) GetClientSecretOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientSecret, true
}

// SetClientSecret sets field value
func (o *Oauth2RefreshTokenRequest) SetClientSecret(v string) {
	o.ClientSecret = v
}

// GetRefreshToken returns the RefreshToken field value
func (o *Oauth2RefreshTokenRequest) GetRefreshToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RefreshToken
}

// GetRefreshTokenOk returns a tuple with the RefreshToken field value
// and a boolean to check if the value has been set.
func (o *Oauth2RefreshTokenRequest) GetRefreshTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RefreshToken, true
}

// SetRefreshToken sets field value
func (o *Oauth2RefreshTokenRequest) SetRefreshToken(v string) {
	o.RefreshToken = v
}

func (o Oauth2RefreshTokenRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Oauth2RefreshTokenRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["client_id"] = o.ClientId
	toSerialize["client_secret"] = o.ClientSecret
	toSerialize["refresh_token"] = o.RefreshToken

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Oauth2RefreshTokenRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"client_id",
		"client_secret",
		"refresh_token",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOauth2RefreshTokenRequest := _Oauth2RefreshTokenRequest{}

	err = json.Unmarshal(data, &varOauth2RefreshTokenRequest)

	if err != nil {
		return err
	}

	*o = Oauth2RefreshTokenRequest(varOauth2RefreshTokenRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "client_id")
		delete(additionalProperties, "client_secret")
		delete(additionalProperties, "refresh_token")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOauth2RefreshTokenRequest struct {
	value *Oauth2RefreshTokenRequest
	isSet bool
}

func (v NullableOauth2RefreshTokenRequest) Get() *Oauth2RefreshTokenRequest {
	return v.value
}

func (v *NullableOauth2RefreshTokenRequest) Set(val *Oauth2RefreshTokenRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableOauth2RefreshTokenRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableOauth2RefreshTokenRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOauth2RefreshTokenRequest(val *Oauth2RefreshTokenRequest) *NullableOauth2RefreshTokenRequest {
	return &NullableOauth2RefreshTokenRequest{value: val, isSet: true}
}

func (v NullableOauth2RefreshTokenRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOauth2RefreshTokenRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
