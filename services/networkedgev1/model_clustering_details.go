/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the ClusteringDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusteringDetails{}

// ClusteringDetails struct for ClusteringDetails
type ClusteringDetails struct {
	// Whether this device management type supports clustering.
	ClusteringEnabled *bool `json:"clusteringEnabled,omitempty"`
	// The number of nodes you can have for a cluster device.
	MaxAllowedNodes      *int32 `json:"maxAllowedNodes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ClusteringDetails ClusteringDetails

// NewClusteringDetails instantiates a new ClusteringDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusteringDetails() *ClusteringDetails {
	this := ClusteringDetails{}
	return &this
}

// NewClusteringDetailsWithDefaults instantiates a new ClusteringDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusteringDetailsWithDefaults() *ClusteringDetails {
	this := ClusteringDetails{}
	return &this
}

// GetClusteringEnabled returns the ClusteringEnabled field value if set, zero value otherwise.
func (o *ClusteringDetails) GetClusteringEnabled() bool {
	if o == nil || IsNil(o.ClusteringEnabled) {
		var ret bool
		return ret
	}
	return *o.ClusteringEnabled
}

// GetClusteringEnabledOk returns a tuple with the ClusteringEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusteringDetails) GetClusteringEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ClusteringEnabled) {
		return nil, false
	}
	return o.ClusteringEnabled, true
}

// HasClusteringEnabled returns a boolean if a field has been set.
func (o *ClusteringDetails) HasClusteringEnabled() bool {
	if o != nil && !IsNil(o.ClusteringEnabled) {
		return true
	}

	return false
}

// SetClusteringEnabled gets a reference to the given bool and assigns it to the ClusteringEnabled field.
func (o *ClusteringDetails) SetClusteringEnabled(v bool) {
	o.ClusteringEnabled = &v
}

// GetMaxAllowedNodes returns the MaxAllowedNodes field value if set, zero value otherwise.
func (o *ClusteringDetails) GetMaxAllowedNodes() int32 {
	if o == nil || IsNil(o.MaxAllowedNodes) {
		var ret int32
		return ret
	}
	return *o.MaxAllowedNodes
}

// GetMaxAllowedNodesOk returns a tuple with the MaxAllowedNodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusteringDetails) GetMaxAllowedNodesOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxAllowedNodes) {
		return nil, false
	}
	return o.MaxAllowedNodes, true
}

// HasMaxAllowedNodes returns a boolean if a field has been set.
func (o *ClusteringDetails) HasMaxAllowedNodes() bool {
	if o != nil && !IsNil(o.MaxAllowedNodes) {
		return true
	}

	return false
}

// SetMaxAllowedNodes gets a reference to the given int32 and assigns it to the MaxAllowedNodes field.
func (o *ClusteringDetails) SetMaxAllowedNodes(v int32) {
	o.MaxAllowedNodes = &v
}

func (o ClusteringDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusteringDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClusteringEnabled) {
		toSerialize["clusteringEnabled"] = o.ClusteringEnabled
	}
	if !IsNil(o.MaxAllowedNodes) {
		toSerialize["maxAllowedNodes"] = o.MaxAllowedNodes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ClusteringDetails) UnmarshalJSON(data []byte) (err error) {
	varClusteringDetails := _ClusteringDetails{}

	err = json.Unmarshal(data, &varClusteringDetails)

	if err != nil {
		return err
	}

	*o = ClusteringDetails(varClusteringDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "clusteringEnabled")
		delete(additionalProperties, "maxAllowedNodes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableClusteringDetails struct {
	value *ClusteringDetails
	isSet bool
}

func (v NullableClusteringDetails) Get() *ClusteringDetails {
	return v.value
}

func (v *NullableClusteringDetails) Set(val *ClusteringDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableClusteringDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableClusteringDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusteringDetails(val *ClusteringDetails) *NullableClusteringDetails {
	return &NullableClusteringDetails{value: val, isSet: true}
}

func (v NullableClusteringDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusteringDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
