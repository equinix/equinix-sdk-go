/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the PolledThroughputMetrics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PolledThroughputMetrics{}

// PolledThroughputMetrics struct for PolledThroughputMetrics
type PolledThroughputMetrics struct {
	// The end of a polled time period.
	IntervalDateTime *string `json:"intervalDateTime,omitempty"`
	// Mean traffic throughput.
	Mean                 *float32 `json:"mean,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PolledThroughputMetrics PolledThroughputMetrics

// NewPolledThroughputMetrics instantiates a new PolledThroughputMetrics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolledThroughputMetrics() *PolledThroughputMetrics {
	this := PolledThroughputMetrics{}
	return &this
}

// NewPolledThroughputMetricsWithDefaults instantiates a new PolledThroughputMetrics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolledThroughputMetricsWithDefaults() *PolledThroughputMetrics {
	this := PolledThroughputMetrics{}
	return &this
}

// GetIntervalDateTime returns the IntervalDateTime field value if set, zero value otherwise.
func (o *PolledThroughputMetrics) GetIntervalDateTime() string {
	if o == nil || IsNil(o.IntervalDateTime) {
		var ret string
		return ret
	}
	return *o.IntervalDateTime
}

// GetIntervalDateTimeOk returns a tuple with the IntervalDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolledThroughputMetrics) GetIntervalDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.IntervalDateTime) {
		return nil, false
	}
	return o.IntervalDateTime, true
}

// HasIntervalDateTime returns a boolean if a field has been set.
func (o *PolledThroughputMetrics) HasIntervalDateTime() bool {
	if o != nil && !IsNil(o.IntervalDateTime) {
		return true
	}

	return false
}

// SetIntervalDateTime gets a reference to the given string and assigns it to the IntervalDateTime field.
func (o *PolledThroughputMetrics) SetIntervalDateTime(v string) {
	o.IntervalDateTime = &v
}

// GetMean returns the Mean field value if set, zero value otherwise.
func (o *PolledThroughputMetrics) GetMean() float32 {
	if o == nil || IsNil(o.Mean) {
		var ret float32
		return ret
	}
	return *o.Mean
}

// GetMeanOk returns a tuple with the Mean field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolledThroughputMetrics) GetMeanOk() (*float32, bool) {
	if o == nil || IsNil(o.Mean) {
		return nil, false
	}
	return o.Mean, true
}

// HasMean returns a boolean if a field has been set.
func (o *PolledThroughputMetrics) HasMean() bool {
	if o != nil && !IsNil(o.Mean) {
		return true
	}

	return false
}

// SetMean gets a reference to the given float32 and assigns it to the Mean field.
func (o *PolledThroughputMetrics) SetMean(v float32) {
	o.Mean = &v
}

func (o PolledThroughputMetrics) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PolledThroughputMetrics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IntervalDateTime) {
		toSerialize["intervalDateTime"] = o.IntervalDateTime
	}
	if !IsNil(o.Mean) {
		toSerialize["mean"] = o.Mean
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PolledThroughputMetrics) UnmarshalJSON(data []byte) (err error) {
	varPolledThroughputMetrics := _PolledThroughputMetrics{}

	err = json.Unmarshal(data, &varPolledThroughputMetrics)

	if err != nil {
		return err
	}

	*o = PolledThroughputMetrics(varPolledThroughputMetrics)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "intervalDateTime")
		delete(additionalProperties, "mean")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePolledThroughputMetrics struct {
	value *PolledThroughputMetrics
	isSet bool
}

func (v NullablePolledThroughputMetrics) Get() *PolledThroughputMetrics {
	return v.value
}

func (v *NullablePolledThroughputMetrics) Set(val *PolledThroughputMetrics) {
	v.value = val
	v.isSet = true
}

func (v NullablePolledThroughputMetrics) IsSet() bool {
	return v.isSet
}

func (v *NullablePolledThroughputMetrics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolledThroughputMetrics(val *PolledThroughputMetrics) *NullablePolledThroughputMetrics {
	return &NullablePolledThroughputMetrics{value: val, isSet: true}
}

func (v NullablePolledThroughputMetrics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolledThroughputMetrics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
