/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the VirtualDeviceDeleteRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VirtualDeviceDeleteRequest{}

// VirtualDeviceDeleteRequest struct for VirtualDeviceDeleteRequest
type VirtualDeviceDeleteRequest struct {
	// If you do not provide a deactivation key for a Palo Alto BYOL device, you must contact your vendor to release the license.
	DeactivationKey      *string                       `json:"deactivationKey,omitempty"`
	Secondary            *SecondaryDeviceDeleteRequest `json:"secondary,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VirtualDeviceDeleteRequest VirtualDeviceDeleteRequest

// NewVirtualDeviceDeleteRequest instantiates a new VirtualDeviceDeleteRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualDeviceDeleteRequest() *VirtualDeviceDeleteRequest {
	this := VirtualDeviceDeleteRequest{}
	return &this
}

// NewVirtualDeviceDeleteRequestWithDefaults instantiates a new VirtualDeviceDeleteRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualDeviceDeleteRequestWithDefaults() *VirtualDeviceDeleteRequest {
	this := VirtualDeviceDeleteRequest{}
	return &this
}

// GetDeactivationKey returns the DeactivationKey field value if set, zero value otherwise.
func (o *VirtualDeviceDeleteRequest) GetDeactivationKey() string {
	if o == nil || IsNil(o.DeactivationKey) {
		var ret string
		return ret
	}
	return *o.DeactivationKey
}

// GetDeactivationKeyOk returns a tuple with the DeactivationKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceDeleteRequest) GetDeactivationKeyOk() (*string, bool) {
	if o == nil || IsNil(o.DeactivationKey) {
		return nil, false
	}
	return o.DeactivationKey, true
}

// HasDeactivationKey returns a boolean if a field has been set.
func (o *VirtualDeviceDeleteRequest) HasDeactivationKey() bool {
	if o != nil && !IsNil(o.DeactivationKey) {
		return true
	}

	return false
}

// SetDeactivationKey gets a reference to the given string and assigns it to the DeactivationKey field.
func (o *VirtualDeviceDeleteRequest) SetDeactivationKey(v string) {
	o.DeactivationKey = &v
}

// GetSecondary returns the Secondary field value if set, zero value otherwise.
func (o *VirtualDeviceDeleteRequest) GetSecondary() SecondaryDeviceDeleteRequest {
	if o == nil || IsNil(o.Secondary) {
		var ret SecondaryDeviceDeleteRequest
		return ret
	}
	return *o.Secondary
}

// GetSecondaryOk returns a tuple with the Secondary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceDeleteRequest) GetSecondaryOk() (*SecondaryDeviceDeleteRequest, bool) {
	if o == nil || IsNil(o.Secondary) {
		return nil, false
	}
	return o.Secondary, true
}

// HasSecondary returns a boolean if a field has been set.
func (o *VirtualDeviceDeleteRequest) HasSecondary() bool {
	if o != nil && !IsNil(o.Secondary) {
		return true
	}

	return false
}

// SetSecondary gets a reference to the given SecondaryDeviceDeleteRequest and assigns it to the Secondary field.
func (o *VirtualDeviceDeleteRequest) SetSecondary(v SecondaryDeviceDeleteRequest) {
	o.Secondary = &v
}

func (o VirtualDeviceDeleteRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VirtualDeviceDeleteRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeactivationKey) {
		toSerialize["deactivationKey"] = o.DeactivationKey
	}
	if !IsNil(o.Secondary) {
		toSerialize["secondary"] = o.Secondary
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VirtualDeviceDeleteRequest) UnmarshalJSON(data []byte) (err error) {
	varVirtualDeviceDeleteRequest := _VirtualDeviceDeleteRequest{}

	err = json.Unmarshal(data, &varVirtualDeviceDeleteRequest)

	if err != nil {
		return err
	}

	*o = VirtualDeviceDeleteRequest(varVirtualDeviceDeleteRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "deactivationKey")
		delete(additionalProperties, "secondary")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVirtualDeviceDeleteRequest struct {
	value *VirtualDeviceDeleteRequest
	isSet bool
}

func (v NullableVirtualDeviceDeleteRequest) Get() *VirtualDeviceDeleteRequest {
	return v.value
}

func (v *NullableVirtualDeviceDeleteRequest) Set(val *VirtualDeviceDeleteRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualDeviceDeleteRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualDeviceDeleteRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualDeviceDeleteRequest(val *VirtualDeviceDeleteRequest) *NullableVirtualDeviceDeleteRequest {
	return &NullableVirtualDeviceDeleteRequest{value: val, isSet: true}
}

func (v NullableVirtualDeviceDeleteRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualDeviceDeleteRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
