/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the AclObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AclObject{}

// AclObject struct for AclObject
type AclObject struct {
	// Type of interface, whether MGMT or WAN.
	InterfaceType *string `json:"interfaceType,omitempty"`
	// The unique ID of template.
	Uuid                 *string `json:"uuid,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AclObject AclObject

// NewAclObject instantiates a new AclObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAclObject() *AclObject {
	this := AclObject{}
	return &this
}

// NewAclObjectWithDefaults instantiates a new AclObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAclObjectWithDefaults() *AclObject {
	this := AclObject{}
	return &this
}

// GetInterfaceType returns the InterfaceType field value if set, zero value otherwise.
func (o *AclObject) GetInterfaceType() string {
	if o == nil || IsNil(o.InterfaceType) {
		var ret string
		return ret
	}
	return *o.InterfaceType
}

// GetInterfaceTypeOk returns a tuple with the InterfaceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AclObject) GetInterfaceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.InterfaceType) {
		return nil, false
	}
	return o.InterfaceType, true
}

// HasInterfaceType returns a boolean if a field has been set.
func (o *AclObject) HasInterfaceType() bool {
	if o != nil && !IsNil(o.InterfaceType) {
		return true
	}

	return false
}

// SetInterfaceType gets a reference to the given string and assigns it to the InterfaceType field.
func (o *AclObject) SetInterfaceType(v string) {
	o.InterfaceType = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *AclObject) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AclObject) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *AclObject) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *AclObject) SetUuid(v string) {
	o.Uuid = &v
}

func (o AclObject) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AclObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InterfaceType) {
		toSerialize["interfaceType"] = o.InterfaceType
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AclObject) UnmarshalJSON(data []byte) (err error) {
	varAclObject := _AclObject{}

	err = json.Unmarshal(data, &varAclObject)

	if err != nil {
		return err
	}

	*o = AclObject(varAclObject)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "interfaceType")
		delete(additionalProperties, "uuid")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAclObject struct {
	value *AclObject
	isSet bool
}

func (v NullableAclObject) Get() *AclObject {
	return v.value
}

func (v *NullableAclObject) Set(val *AclObject) {
	v.value = val
	v.isSet = true
}

func (v NullableAclObject) IsSet() bool {
	return v.isSet
}

func (v *NullableAclObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAclObject(val *AclObject) *NullableAclObject {
	return &NullableAclObject{value: val, isSet: true}
}

func (v NullableAclObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAclObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
