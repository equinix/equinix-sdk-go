/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the Node1Details type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Node1Details{}

// Node1Details struct for Node1Details
type Node1Details struct {
	// License file id is required for Fortinet and Juniper clusters.
	LicenseFileId *string `json:"licenseFileId,omitempty"`
	// License token is required for Palo Alto clusters.
	LicenseToken         *string                   `json:"licenseToken,omitempty"`
	VendorConfig         *VendorConfigDetailsNode1 `json:"vendorConfig,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Node1Details Node1Details

// NewNode1Details instantiates a new Node1Details object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNode1Details() *Node1Details {
	this := Node1Details{}
	return &this
}

// NewNode1DetailsWithDefaults instantiates a new Node1Details object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNode1DetailsWithDefaults() *Node1Details {
	this := Node1Details{}
	return &this
}

// GetLicenseFileId returns the LicenseFileId field value if set, zero value otherwise.
func (o *Node1Details) GetLicenseFileId() string {
	if o == nil || IsNil(o.LicenseFileId) {
		var ret string
		return ret
	}
	return *o.LicenseFileId
}

// GetLicenseFileIdOk returns a tuple with the LicenseFileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node1Details) GetLicenseFileIdOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseFileId) {
		return nil, false
	}
	return o.LicenseFileId, true
}

// HasLicenseFileId returns a boolean if a field has been set.
func (o *Node1Details) HasLicenseFileId() bool {
	if o != nil && !IsNil(o.LicenseFileId) {
		return true
	}

	return false
}

// SetLicenseFileId gets a reference to the given string and assigns it to the LicenseFileId field.
func (o *Node1Details) SetLicenseFileId(v string) {
	o.LicenseFileId = &v
}

// GetLicenseToken returns the LicenseToken field value if set, zero value otherwise.
func (o *Node1Details) GetLicenseToken() string {
	if o == nil || IsNil(o.LicenseToken) {
		var ret string
		return ret
	}
	return *o.LicenseToken
}

// GetLicenseTokenOk returns a tuple with the LicenseToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node1Details) GetLicenseTokenOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseToken) {
		return nil, false
	}
	return o.LicenseToken, true
}

// HasLicenseToken returns a boolean if a field has been set.
func (o *Node1Details) HasLicenseToken() bool {
	if o != nil && !IsNil(o.LicenseToken) {
		return true
	}

	return false
}

// SetLicenseToken gets a reference to the given string and assigns it to the LicenseToken field.
func (o *Node1Details) SetLicenseToken(v string) {
	o.LicenseToken = &v
}

// GetVendorConfig returns the VendorConfig field value if set, zero value otherwise.
func (o *Node1Details) GetVendorConfig() VendorConfigDetailsNode1 {
	if o == nil || IsNil(o.VendorConfig) {
		var ret VendorConfigDetailsNode1
		return ret
	}
	return *o.VendorConfig
}

// GetVendorConfigOk returns a tuple with the VendorConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node1Details) GetVendorConfigOk() (*VendorConfigDetailsNode1, bool) {
	if o == nil || IsNil(o.VendorConfig) {
		return nil, false
	}
	return o.VendorConfig, true
}

// HasVendorConfig returns a boolean if a field has been set.
func (o *Node1Details) HasVendorConfig() bool {
	if o != nil && !IsNil(o.VendorConfig) {
		return true
	}

	return false
}

// SetVendorConfig gets a reference to the given VendorConfigDetailsNode1 and assigns it to the VendorConfig field.
func (o *Node1Details) SetVendorConfig(v VendorConfigDetailsNode1) {
	o.VendorConfig = &v
}

func (o Node1Details) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Node1Details) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LicenseFileId) {
		toSerialize["licenseFileId"] = o.LicenseFileId
	}
	if !IsNil(o.LicenseToken) {
		toSerialize["licenseToken"] = o.LicenseToken
	}
	if !IsNil(o.VendorConfig) {
		toSerialize["vendorConfig"] = o.VendorConfig
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Node1Details) UnmarshalJSON(data []byte) (err error) {
	varNode1Details := _Node1Details{}

	err = json.Unmarshal(data, &varNode1Details)

	if err != nil {
		return err
	}

	*o = Node1Details(varNode1Details)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "licenseFileId")
		delete(additionalProperties, "licenseToken")
		delete(additionalProperties, "vendorConfig")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNode1Details struct {
	value *Node1Details
	isSet bool
}

func (v NullableNode1Details) Get() *Node1Details {
	return v.value
}

func (v *NullableNode1Details) Set(val *Node1Details) {
	v.value = val
	v.isSet = true
}

func (v NullableNode1Details) IsSet() bool {
	return v.isSet
}

func (v *NullableNode1Details) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNode1Details(val *Node1Details) *NullableNode1Details {
	return &NullableNode1Details{value: val, isSet: true}
}

func (v NullableNode1Details) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNode1Details) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
