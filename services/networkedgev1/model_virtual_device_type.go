/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the VirtualDeviceType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VirtualDeviceType{}

// VirtualDeviceType struct for VirtualDeviceType
type VirtualDeviceType struct {
	// The type of the device.
	DeviceTypeCode *string `json:"deviceTypeCode,omitempty"`
	// The name of the device.
	Name *string `json:"name,omitempty"`
	// The description of the device.
	Description *string `json:"description,omitempty"`
	// The vendor of the device.
	Vendor *string `json:"vendor,omitempty"`
	// The type of the virtual device, whether router or firewall.
	Category *string `json:"category,omitempty"`
	// The maximum available number of interfaces.
	MaxInterfaceCount *int32 `json:"maxInterfaceCount,omitempty"`
	// The default number of interfaces.
	DefaultInterfaceCount *int32 `json:"defaultInterfaceCount,omitempty"`
	// The maximum number of available interfaces in case you are clustering.
	ClusterMaxInterfaceCount *int32 `json:"clusterMaxInterfaceCount,omitempty"`
	// The default number of available interfaces in case you are clustering.
	ClusterDefaultInterfaceCount *int32 `json:"clusterDefaultInterfaceCount,omitempty"`
	// An array of metros where the device is available.
	AvailableMetros []Metro `json:"availableMetros,omitempty"`
	// An array of available software packages
	SoftwarePackages      []SoftwarePackage                       `json:"softwarePackages,omitempty"`
	DeviceManagementTypes *VirtualDeviceTypeDeviceManagementTypes `json:"deviceManagementTypes,omitempty"`
	AdditionalProperties  map[string]interface{}
}

type _VirtualDeviceType VirtualDeviceType

// NewVirtualDeviceType instantiates a new VirtualDeviceType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualDeviceType() *VirtualDeviceType {
	this := VirtualDeviceType{}
	return &this
}

// NewVirtualDeviceTypeWithDefaults instantiates a new VirtualDeviceType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualDeviceTypeWithDefaults() *VirtualDeviceType {
	this := VirtualDeviceType{}
	return &this
}

// GetDeviceTypeCode returns the DeviceTypeCode field value if set, zero value otherwise.
func (o *VirtualDeviceType) GetDeviceTypeCode() string {
	if o == nil || IsNil(o.DeviceTypeCode) {
		var ret string
		return ret
	}
	return *o.DeviceTypeCode
}

// GetDeviceTypeCodeOk returns a tuple with the DeviceTypeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceType) GetDeviceTypeCodeOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceTypeCode) {
		return nil, false
	}
	return o.DeviceTypeCode, true
}

// HasDeviceTypeCode returns a boolean if a field has been set.
func (o *VirtualDeviceType) HasDeviceTypeCode() bool {
	if o != nil && !IsNil(o.DeviceTypeCode) {
		return true
	}

	return false
}

// SetDeviceTypeCode gets a reference to the given string and assigns it to the DeviceTypeCode field.
func (o *VirtualDeviceType) SetDeviceTypeCode(v string) {
	o.DeviceTypeCode = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VirtualDeviceType) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceType) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VirtualDeviceType) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VirtualDeviceType) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *VirtualDeviceType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *VirtualDeviceType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *VirtualDeviceType) SetDescription(v string) {
	o.Description = &v
}

// GetVendor returns the Vendor field value if set, zero value otherwise.
func (o *VirtualDeviceType) GetVendor() string {
	if o == nil || IsNil(o.Vendor) {
		var ret string
		return ret
	}
	return *o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceType) GetVendorOk() (*string, bool) {
	if o == nil || IsNil(o.Vendor) {
		return nil, false
	}
	return o.Vendor, true
}

// HasVendor returns a boolean if a field has been set.
func (o *VirtualDeviceType) HasVendor() bool {
	if o != nil && !IsNil(o.Vendor) {
		return true
	}

	return false
}

// SetVendor gets a reference to the given string and assigns it to the Vendor field.
func (o *VirtualDeviceType) SetVendor(v string) {
	o.Vendor = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *VirtualDeviceType) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceType) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *VirtualDeviceType) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *VirtualDeviceType) SetCategory(v string) {
	o.Category = &v
}

// GetMaxInterfaceCount returns the MaxInterfaceCount field value if set, zero value otherwise.
func (o *VirtualDeviceType) GetMaxInterfaceCount() int32 {
	if o == nil || IsNil(o.MaxInterfaceCount) {
		var ret int32
		return ret
	}
	return *o.MaxInterfaceCount
}

// GetMaxInterfaceCountOk returns a tuple with the MaxInterfaceCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceType) GetMaxInterfaceCountOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxInterfaceCount) {
		return nil, false
	}
	return o.MaxInterfaceCount, true
}

// HasMaxInterfaceCount returns a boolean if a field has been set.
func (o *VirtualDeviceType) HasMaxInterfaceCount() bool {
	if o != nil && !IsNil(o.MaxInterfaceCount) {
		return true
	}

	return false
}

// SetMaxInterfaceCount gets a reference to the given int32 and assigns it to the MaxInterfaceCount field.
func (o *VirtualDeviceType) SetMaxInterfaceCount(v int32) {
	o.MaxInterfaceCount = &v
}

// GetDefaultInterfaceCount returns the DefaultInterfaceCount field value if set, zero value otherwise.
func (o *VirtualDeviceType) GetDefaultInterfaceCount() int32 {
	if o == nil || IsNil(o.DefaultInterfaceCount) {
		var ret int32
		return ret
	}
	return *o.DefaultInterfaceCount
}

// GetDefaultInterfaceCountOk returns a tuple with the DefaultInterfaceCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceType) GetDefaultInterfaceCountOk() (*int32, bool) {
	if o == nil || IsNil(o.DefaultInterfaceCount) {
		return nil, false
	}
	return o.DefaultInterfaceCount, true
}

// HasDefaultInterfaceCount returns a boolean if a field has been set.
func (o *VirtualDeviceType) HasDefaultInterfaceCount() bool {
	if o != nil && !IsNil(o.DefaultInterfaceCount) {
		return true
	}

	return false
}

// SetDefaultInterfaceCount gets a reference to the given int32 and assigns it to the DefaultInterfaceCount field.
func (o *VirtualDeviceType) SetDefaultInterfaceCount(v int32) {
	o.DefaultInterfaceCount = &v
}

// GetClusterMaxInterfaceCount returns the ClusterMaxInterfaceCount field value if set, zero value otherwise.
func (o *VirtualDeviceType) GetClusterMaxInterfaceCount() int32 {
	if o == nil || IsNil(o.ClusterMaxInterfaceCount) {
		var ret int32
		return ret
	}
	return *o.ClusterMaxInterfaceCount
}

// GetClusterMaxInterfaceCountOk returns a tuple with the ClusterMaxInterfaceCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceType) GetClusterMaxInterfaceCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ClusterMaxInterfaceCount) {
		return nil, false
	}
	return o.ClusterMaxInterfaceCount, true
}

// HasClusterMaxInterfaceCount returns a boolean if a field has been set.
func (o *VirtualDeviceType) HasClusterMaxInterfaceCount() bool {
	if o != nil && !IsNil(o.ClusterMaxInterfaceCount) {
		return true
	}

	return false
}

// SetClusterMaxInterfaceCount gets a reference to the given int32 and assigns it to the ClusterMaxInterfaceCount field.
func (o *VirtualDeviceType) SetClusterMaxInterfaceCount(v int32) {
	o.ClusterMaxInterfaceCount = &v
}

// GetClusterDefaultInterfaceCount returns the ClusterDefaultInterfaceCount field value if set, zero value otherwise.
func (o *VirtualDeviceType) GetClusterDefaultInterfaceCount() int32 {
	if o == nil || IsNil(o.ClusterDefaultInterfaceCount) {
		var ret int32
		return ret
	}
	return *o.ClusterDefaultInterfaceCount
}

// GetClusterDefaultInterfaceCountOk returns a tuple with the ClusterDefaultInterfaceCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceType) GetClusterDefaultInterfaceCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ClusterDefaultInterfaceCount) {
		return nil, false
	}
	return o.ClusterDefaultInterfaceCount, true
}

// HasClusterDefaultInterfaceCount returns a boolean if a field has been set.
func (o *VirtualDeviceType) HasClusterDefaultInterfaceCount() bool {
	if o != nil && !IsNil(o.ClusterDefaultInterfaceCount) {
		return true
	}

	return false
}

// SetClusterDefaultInterfaceCount gets a reference to the given int32 and assigns it to the ClusterDefaultInterfaceCount field.
func (o *VirtualDeviceType) SetClusterDefaultInterfaceCount(v int32) {
	o.ClusterDefaultInterfaceCount = &v
}

// GetAvailableMetros returns the AvailableMetros field value if set, zero value otherwise.
func (o *VirtualDeviceType) GetAvailableMetros() []Metro {
	if o == nil || IsNil(o.AvailableMetros) {
		var ret []Metro
		return ret
	}
	return o.AvailableMetros
}

// GetAvailableMetrosOk returns a tuple with the AvailableMetros field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceType) GetAvailableMetrosOk() ([]Metro, bool) {
	if o == nil || IsNil(o.AvailableMetros) {
		return nil, false
	}
	return o.AvailableMetros, true
}

// HasAvailableMetros returns a boolean if a field has been set.
func (o *VirtualDeviceType) HasAvailableMetros() bool {
	if o != nil && !IsNil(o.AvailableMetros) {
		return true
	}

	return false
}

// SetAvailableMetros gets a reference to the given []Metro and assigns it to the AvailableMetros field.
func (o *VirtualDeviceType) SetAvailableMetros(v []Metro) {
	o.AvailableMetros = v
}

// GetSoftwarePackages returns the SoftwarePackages field value if set, zero value otherwise.
func (o *VirtualDeviceType) GetSoftwarePackages() []SoftwarePackage {
	if o == nil || IsNil(o.SoftwarePackages) {
		var ret []SoftwarePackage
		return ret
	}
	return o.SoftwarePackages
}

// GetSoftwarePackagesOk returns a tuple with the SoftwarePackages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceType) GetSoftwarePackagesOk() ([]SoftwarePackage, bool) {
	if o == nil || IsNil(o.SoftwarePackages) {
		return nil, false
	}
	return o.SoftwarePackages, true
}

// HasSoftwarePackages returns a boolean if a field has been set.
func (o *VirtualDeviceType) HasSoftwarePackages() bool {
	if o != nil && !IsNil(o.SoftwarePackages) {
		return true
	}

	return false
}

// SetSoftwarePackages gets a reference to the given []SoftwarePackage and assigns it to the SoftwarePackages field.
func (o *VirtualDeviceType) SetSoftwarePackages(v []SoftwarePackage) {
	o.SoftwarePackages = v
}

// GetDeviceManagementTypes returns the DeviceManagementTypes field value if set, zero value otherwise.
func (o *VirtualDeviceType) GetDeviceManagementTypes() VirtualDeviceTypeDeviceManagementTypes {
	if o == nil || IsNil(o.DeviceManagementTypes) {
		var ret VirtualDeviceTypeDeviceManagementTypes
		return ret
	}
	return *o.DeviceManagementTypes
}

// GetDeviceManagementTypesOk returns a tuple with the DeviceManagementTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceType) GetDeviceManagementTypesOk() (*VirtualDeviceTypeDeviceManagementTypes, bool) {
	if o == nil || IsNil(o.DeviceManagementTypes) {
		return nil, false
	}
	return o.DeviceManagementTypes, true
}

// HasDeviceManagementTypes returns a boolean if a field has been set.
func (o *VirtualDeviceType) HasDeviceManagementTypes() bool {
	if o != nil && !IsNil(o.DeviceManagementTypes) {
		return true
	}

	return false
}

// SetDeviceManagementTypes gets a reference to the given VirtualDeviceTypeDeviceManagementTypes and assigns it to the DeviceManagementTypes field.
func (o *VirtualDeviceType) SetDeviceManagementTypes(v VirtualDeviceTypeDeviceManagementTypes) {
	o.DeviceManagementTypes = &v
}

func (o VirtualDeviceType) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VirtualDeviceType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeviceTypeCode) {
		toSerialize["deviceTypeCode"] = o.DeviceTypeCode
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Vendor) {
		toSerialize["vendor"] = o.Vendor
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.MaxInterfaceCount) {
		toSerialize["maxInterfaceCount"] = o.MaxInterfaceCount
	}
	if !IsNil(o.DefaultInterfaceCount) {
		toSerialize["defaultInterfaceCount"] = o.DefaultInterfaceCount
	}
	if !IsNil(o.ClusterMaxInterfaceCount) {
		toSerialize["clusterMaxInterfaceCount"] = o.ClusterMaxInterfaceCount
	}
	if !IsNil(o.ClusterDefaultInterfaceCount) {
		toSerialize["clusterDefaultInterfaceCount"] = o.ClusterDefaultInterfaceCount
	}
	if !IsNil(o.AvailableMetros) {
		toSerialize["availableMetros"] = o.AvailableMetros
	}
	if !IsNil(o.SoftwarePackages) {
		toSerialize["softwarePackages"] = o.SoftwarePackages
	}
	if !IsNil(o.DeviceManagementTypes) {
		toSerialize["deviceManagementTypes"] = o.DeviceManagementTypes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VirtualDeviceType) UnmarshalJSON(data []byte) (err error) {
	varVirtualDeviceType := _VirtualDeviceType{}

	err = json.Unmarshal(data, &varVirtualDeviceType)

	if err != nil {
		return err
	}

	*o = VirtualDeviceType(varVirtualDeviceType)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "deviceTypeCode")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "vendor")
		delete(additionalProperties, "category")
		delete(additionalProperties, "maxInterfaceCount")
		delete(additionalProperties, "defaultInterfaceCount")
		delete(additionalProperties, "clusterMaxInterfaceCount")
		delete(additionalProperties, "clusterDefaultInterfaceCount")
		delete(additionalProperties, "availableMetros")
		delete(additionalProperties, "softwarePackages")
		delete(additionalProperties, "deviceManagementTypes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVirtualDeviceType struct {
	value *VirtualDeviceType
	isSet bool
}

func (v NullableVirtualDeviceType) Get() *VirtualDeviceType {
	return v.value
}

func (v *NullableVirtualDeviceType) Set(val *VirtualDeviceType) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualDeviceType) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualDeviceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualDeviceType(val *VirtualDeviceType) *NullableVirtualDeviceType {
	return &NullableVirtualDeviceType{value: val, isSet: true}
}

func (v NullableVirtualDeviceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualDeviceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
