/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the VendorConfigDetailsNode1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VendorConfigDetailsNode1{}

// VendorConfigDetailsNode1 struct for VendorConfigDetailsNode1
type VendorConfigDetailsNode1 struct {
	// The host name. Only a-z, A-Z, 0-9, and hyphen(-) are allowed. It should start with a letter and end with a letter or digit. The length should be between 2-30 characters. Exceptions - FTDv 2-14; Aruba 2-24.
	Hostname     *string `json:"hostname,omitempty"`
	RootPassword *string `json:"rootPassword,omitempty"`
	// The administrative password of the device. You can use it to log in to the console. This field is not available for all device types.
	AdminPassword        *string `json:"adminPassword,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VendorConfigDetailsNode1 VendorConfigDetailsNode1

// NewVendorConfigDetailsNode1 instantiates a new VendorConfigDetailsNode1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVendorConfigDetailsNode1() *VendorConfigDetailsNode1 {
	this := VendorConfigDetailsNode1{}
	return &this
}

// NewVendorConfigDetailsNode1WithDefaults instantiates a new VendorConfigDetailsNode1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVendorConfigDetailsNode1WithDefaults() *VendorConfigDetailsNode1 {
	this := VendorConfigDetailsNode1{}
	return &this
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *VendorConfigDetailsNode1) GetHostname() string {
	if o == nil || IsNil(o.Hostname) {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VendorConfigDetailsNode1) GetHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *VendorConfigDetailsNode1) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *VendorConfigDetailsNode1) SetHostname(v string) {
	o.Hostname = &v
}

// GetRootPassword returns the RootPassword field value if set, zero value otherwise.
func (o *VendorConfigDetailsNode1) GetRootPassword() string {
	if o == nil || IsNil(o.RootPassword) {
		var ret string
		return ret
	}
	return *o.RootPassword
}

// GetRootPasswordOk returns a tuple with the RootPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VendorConfigDetailsNode1) GetRootPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.RootPassword) {
		return nil, false
	}
	return o.RootPassword, true
}

// HasRootPassword returns a boolean if a field has been set.
func (o *VendorConfigDetailsNode1) HasRootPassword() bool {
	if o != nil && !IsNil(o.RootPassword) {
		return true
	}

	return false
}

// SetRootPassword gets a reference to the given string and assigns it to the RootPassword field.
func (o *VendorConfigDetailsNode1) SetRootPassword(v string) {
	o.RootPassword = &v
}

// GetAdminPassword returns the AdminPassword field value if set, zero value otherwise.
func (o *VendorConfigDetailsNode1) GetAdminPassword() string {
	if o == nil || IsNil(o.AdminPassword) {
		var ret string
		return ret
	}
	return *o.AdminPassword
}

// GetAdminPasswordOk returns a tuple with the AdminPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VendorConfigDetailsNode1) GetAdminPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.AdminPassword) {
		return nil, false
	}
	return o.AdminPassword, true
}

// HasAdminPassword returns a boolean if a field has been set.
func (o *VendorConfigDetailsNode1) HasAdminPassword() bool {
	if o != nil && !IsNil(o.AdminPassword) {
		return true
	}

	return false
}

// SetAdminPassword gets a reference to the given string and assigns it to the AdminPassword field.
func (o *VendorConfigDetailsNode1) SetAdminPassword(v string) {
	o.AdminPassword = &v
}

func (o VendorConfigDetailsNode1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VendorConfigDetailsNode1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hostname) {
		toSerialize["hostname"] = o.Hostname
	}
	if !IsNil(o.RootPassword) {
		toSerialize["rootPassword"] = o.RootPassword
	}
	if !IsNil(o.AdminPassword) {
		toSerialize["adminPassword"] = o.AdminPassword
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VendorConfigDetailsNode1) UnmarshalJSON(data []byte) (err error) {
	varVendorConfigDetailsNode1 := _VendorConfigDetailsNode1{}

	err = json.Unmarshal(data, &varVendorConfigDetailsNode1)

	if err != nil {
		return err
	}

	*o = VendorConfigDetailsNode1(varVendorConfigDetailsNode1)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "hostname")
		delete(additionalProperties, "rootPassword")
		delete(additionalProperties, "adminPassword")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVendorConfigDetailsNode1 struct {
	value *VendorConfigDetailsNode1
	isSet bool
}

func (v NullableVendorConfigDetailsNode1) Get() *VendorConfigDetailsNode1 {
	return v.value
}

func (v *NullableVendorConfigDetailsNode1) Set(val *VendorConfigDetailsNode1) {
	v.value = val
	v.isSet = true
}

func (v NullableVendorConfigDetailsNode1) IsSet() bool {
	return v.isSet
}

func (v *NullableVendorConfigDetailsNode1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVendorConfigDetailsNode1(val *VendorConfigDetailsNode1) *NullableVendorConfigDetailsNode1 {
	return &NullableVendorConfigDetailsNode1{value: val, isSet: true}
}

func (v NullableVendorConfigDetailsNode1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVendorConfigDetailsNode1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
