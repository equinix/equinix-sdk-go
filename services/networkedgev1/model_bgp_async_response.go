/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the BgpAsyncResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BgpAsyncResponse{}

// BgpAsyncResponse struct for BgpAsyncResponse
type BgpAsyncResponse struct {
	Uuid                 *string `json:"uuid,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _BgpAsyncResponse BgpAsyncResponse

// NewBgpAsyncResponse instantiates a new BgpAsyncResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBgpAsyncResponse() *BgpAsyncResponse {
	this := BgpAsyncResponse{}
	return &this
}

// NewBgpAsyncResponseWithDefaults instantiates a new BgpAsyncResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBgpAsyncResponseWithDefaults() *BgpAsyncResponse {
	this := BgpAsyncResponse{}
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *BgpAsyncResponse) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpAsyncResponse) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *BgpAsyncResponse) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *BgpAsyncResponse) SetUuid(v string) {
	o.Uuid = &v
}

func (o BgpAsyncResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BgpAsyncResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BgpAsyncResponse) UnmarshalJSON(data []byte) (err error) {
	varBgpAsyncResponse := _BgpAsyncResponse{}

	err = json.Unmarshal(data, &varBgpAsyncResponse)

	if err != nil {
		return err
	}

	*o = BgpAsyncResponse(varBgpAsyncResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "uuid")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBgpAsyncResponse struct {
	value *BgpAsyncResponse
	isSet bool
}

func (v NullableBgpAsyncResponse) Get() *BgpAsyncResponse {
	return v.value
}

func (v *NullableBgpAsyncResponse) Set(val *BgpAsyncResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableBgpAsyncResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableBgpAsyncResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBgpAsyncResponse(val *BgpAsyncResponse) *NullableBgpAsyncResponse {
	return &NullableBgpAsyncResponse{value: val, isSet: true}
}

func (v NullableBgpAsyncResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBgpAsyncResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
