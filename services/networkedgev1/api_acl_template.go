/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ACLTemplateApiService ACLTemplateApi service
type ACLTemplateApiService service

type ApiCreateDeviceACLTemplateUsingPostRequest struct {
	ctx                context.Context
	ApiService         *ACLTemplateApiService
	authorization      *string
	aclTemplateRequest *DeviceACLTemplateRequest
	accountUcmId       *string
}

// The OAuth Bearer token. Please add the prefix &#39;Bearer &#39; before the token.
func (r ApiCreateDeviceACLTemplateUsingPostRequest) Authorization(authorization string) ApiCreateDeviceACLTemplateUsingPostRequest {
	r.authorization = &authorization
	return r
}

// Creates an ACL template.
func (r ApiCreateDeviceACLTemplateUsingPostRequest) AclTemplateRequest(aclTemplateRequest DeviceACLTemplateRequest) ApiCreateDeviceACLTemplateUsingPostRequest {
	r.aclTemplateRequest = &aclTemplateRequest
	return r
}

// A reseller creating an ACL template for a customer can pass the accountUcmId of the customer.
func (r ApiCreateDeviceACLTemplateUsingPostRequest) AccountUcmId(accountUcmId string) ApiCreateDeviceACLTemplateUsingPostRequest {
	r.accountUcmId = &accountUcmId
	return r
}

func (r ApiCreateDeviceACLTemplateUsingPostRequest) Execute() (*VirtualDeviceCreateResponse, *http.Response, error) {
	return r.ApiService.CreateDeviceACLTemplateUsingPostExecute(r)
}

/*
CreateDeviceACLTemplateUsingPost Create ACL Template

Creates ACL templates. You can find the unique ID of the ACL template in the location header.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateDeviceACLTemplateUsingPostRequest
*/
func (a *ACLTemplateApiService) CreateDeviceACLTemplateUsingPost(ctx context.Context) ApiCreateDeviceACLTemplateUsingPostRequest {
	return ApiCreateDeviceACLTemplateUsingPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return VirtualDeviceCreateResponse
func (a *ACLTemplateApiService) CreateDeviceACLTemplateUsingPostExecute(r ApiCreateDeviceACLTemplateUsingPostRequest) (*VirtualDeviceCreateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VirtualDeviceCreateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ACLTemplateApiService.CreateDeviceACLTemplateUsingPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ne/v1/aclTemplates"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.aclTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("aclTemplateRequest is required and must be specified")
	}

	if r.accountUcmId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "accountUcmId", r.accountUcmId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "")
	// body params
	localVarPostBody = r.aclTemplateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v FieldErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorMessageResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorMessageResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeletedeviceACLUsingDELETERequest struct {
	ctx           context.Context
	ApiService    *ACLTemplateApiService
	uuid          string
	authorization *string
	accountUcmId  *string
}

// The OAuth Bearer token. Please add the prefix &#39;Bearer &#39; before the token.
func (r ApiDeletedeviceACLUsingDELETERequest) Authorization(authorization string) ApiDeletedeviceACLUsingDELETERequest {
	r.authorization = &authorization
	return r
}

// A reseller deleting an ACL template for a customer must pass the accountUcmId of the customer.
func (r ApiDeletedeviceACLUsingDELETERequest) AccountUcmId(accountUcmId string) ApiDeletedeviceACLUsingDELETERequest {
	r.accountUcmId = &accountUcmId
	return r
}

func (r ApiDeletedeviceACLUsingDELETERequest) Execute() (*http.Response, error) {
	return r.ApiService.DeletedeviceACLUsingDELETEExecute(r)
}

/*
DeletedeviceACLUsingDELETE Delete ACL template

Deletes an ACL template. You must provide the unique Id of the ACL template as a path parameter.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uuid Unique ID of an ACL template
	@return ApiDeletedeviceACLUsingDELETERequest
*/
func (a *ACLTemplateApiService) DeletedeviceACLUsingDELETE(ctx context.Context, uuid string) ApiDeletedeviceACLUsingDELETERequest {
	return ApiDeletedeviceACLUsingDELETERequest{
		ApiService: a,
		ctx:        ctx,
		uuid:       uuid,
	}
}

// Execute executes the request
func (a *ACLTemplateApiService) DeletedeviceACLUsingDELETEExecute(r ApiDeletedeviceACLUsingDELETERequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ACLTemplateApiService.DeletedeviceACLUsingDELETE")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ne/v1/aclTemplates/{uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"uuid"+"}", url.PathEscape(parameterValueToString(r.uuid, "uuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return nil, reportError("authorization is required and must be specified")
	}

	if r.accountUcmId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "accountUcmId", r.accountUcmId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorMessageResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorMessageResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorMessageResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetDeviceACLTemplateUsingGET1Request struct {
	ctx           context.Context
	ApiService    *ACLTemplateApiService
	authorization *string
	offset        *string
	limit         *string
	accountUcmId  *string
}

// The OAuth Bearer token. Please add the prefix &#39;Bearer &#39; before the token.
func (r ApiGetDeviceACLTemplateUsingGET1Request) Authorization(authorization string) ApiGetDeviceACLTemplateUsingGET1Request {
	r.authorization = &authorization
	return r
}

// Specifies where to start a page. It is the starting point of the collection returned from the server.
func (r ApiGetDeviceACLTemplateUsingGET1Request) Offset(offset string) ApiGetDeviceACLTemplateUsingGET1Request {
	r.offset = &offset
	return r
}

// Specifies the page size.
func (r ApiGetDeviceACLTemplateUsingGET1Request) Limit(limit string) ApiGetDeviceACLTemplateUsingGET1Request {
	r.limit = &limit
	return r
}

// Unique ID of the account. A reseller querying for the ACLs of a customer should input the accountUcmId of the customer.
func (r ApiGetDeviceACLTemplateUsingGET1Request) AccountUcmId(accountUcmId string) ApiGetDeviceACLTemplateUsingGET1Request {
	r.accountUcmId = &accountUcmId
	return r
}

func (r ApiGetDeviceACLTemplateUsingGET1Request) Execute() (*DeviceACLPageResponse, *http.Response, error) {
	return r.ApiService.GetDeviceACLTemplateUsingGET1Execute(r)
}

/*
GetDeviceACLTemplateUsingGET1 Get ACL Templates

Returns all ACL templates. The ACL templates list the networks that require access to the device.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetDeviceACLTemplateUsingGET1Request
*/
func (a *ACLTemplateApiService) GetDeviceACLTemplateUsingGET1(ctx context.Context) ApiGetDeviceACLTemplateUsingGET1Request {
	return ApiGetDeviceACLTemplateUsingGET1Request{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeviceACLPageResponse
func (a *ACLTemplateApiService) GetDeviceACLTemplateUsingGET1Execute(r ApiGetDeviceACLTemplateUsingGET1Request) (*DeviceACLPageResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeviceACLPageResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ACLTemplateApiService.GetDeviceACLTemplateUsingGET1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ne/v1/aclTemplates"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}

	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	} else {
		var defaultValue string = "0"
		r.offset = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	} else {
		var defaultValue string = "20"
		r.limit = &defaultValue
	}
	if r.accountUcmId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "accountUcmId", r.accountUcmId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorMessageResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDeviceTemplatebyUuidRequest struct {
	ctx           context.Context
	ApiService    *ACLTemplateApiService
	uuid          string
	authorization *string
}

// The OAuth Bearer token. Please add the prefix &#39;Bearer &#39; before the token.
func (r ApiGetDeviceTemplatebyUuidRequest) Authorization(authorization string) ApiGetDeviceTemplatebyUuidRequest {
	r.authorization = &authorization
	return r
}

func (r ApiGetDeviceTemplatebyUuidRequest) Execute() (*ACLTemplateDetailsResponse, *http.Response, error) {
	return r.ApiService.GetDeviceTemplatebyUuidExecute(r)
}

/*
GetDeviceTemplatebyUuid Get ACL Template {uuid}

Returns details of any existing template. You must provide the unique ID of an existing template as a path parameter.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uuid Unique Id of an ACL template
	@return ApiGetDeviceTemplatebyUuidRequest
*/
func (a *ACLTemplateApiService) GetDeviceTemplatebyUuid(ctx context.Context, uuid string) ApiGetDeviceTemplatebyUuidRequest {
	return ApiGetDeviceTemplatebyUuidRequest{
		ApiService: a,
		ctx:        ctx,
		uuid:       uuid,
	}
}

// Execute executes the request
//
//	@return ACLTemplateDetailsResponse
func (a *ACLTemplateApiService) GetDeviceTemplatebyUuidExecute(r ApiGetDeviceTemplatebyUuidRequest) (*ACLTemplateDetailsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ACLTemplateDetailsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ACLTemplateApiService.GetDeviceTemplatebyUuid")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ne/v1/aclTemplates/{uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"uuid"+"}", url.PathEscape(parameterValueToString(r.uuid, "uuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorMessageResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorMessageResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDeviceTemplatesbyUuidRequest struct {
	ctx               context.Context
	ApiService        *ACLTemplateApiService
	virtualDeviceUuid string
	authorization     *string
}

// The OAuth Bearer token. Please add the prefix &#39;Bearer &#39; before the token.
func (r ApiGetDeviceTemplatesbyUuidRequest) Authorization(authorization string) ApiGetDeviceTemplatesbyUuidRequest {
	r.authorization = &authorization
	return r
}

func (r ApiGetDeviceTemplatesbyUuidRequest) Execute() (*InitialDeviceACLResponse, *http.Response, error) {
	return r.ApiService.GetDeviceTemplatesbyUuidExecute(r)
}

/*
GetDeviceTemplatesbyUuid Get ACL of Virtual Device

Returns the details of ACL templates associated with a device. You must provide the unique ID of an existing virtual device as a path parameter.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param virtualDeviceUuid Unique Id of a virtual device.
	@return ApiGetDeviceTemplatesbyUuidRequest
*/
func (a *ACLTemplateApiService) GetDeviceTemplatesbyUuid(ctx context.Context, virtualDeviceUuid string) ApiGetDeviceTemplatesbyUuidRequest {
	return ApiGetDeviceTemplatesbyUuidRequest{
		ApiService:        a,
		ctx:               ctx,
		virtualDeviceUuid: virtualDeviceUuid,
	}
}

// Execute executes the request
//
//	@return InitialDeviceACLResponse
func (a *ACLTemplateApiService) GetDeviceTemplatesbyUuidExecute(r ApiGetDeviceTemplatesbyUuidRequest) (*InitialDeviceACLResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InitialDeviceACLResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ACLTemplateApiService.GetDeviceTemplatesbyUuid")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ne/v1/devices/{virtualDeviceUuid}/acl"
	localVarPath = strings.Replace(localVarPath, "{"+"virtualDeviceUuid"+"}", url.PathEscape(parameterValueToString(r.virtualDeviceUuid, "virtualDeviceUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorMessageResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorMessageResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchDeviceTemplatesbyUuidRequest struct {
	ctx                context.Context
	ApiService         *ACLTemplateApiService
	virtualDeviceUuid  string
	authorization      *string
	aclTemplateRequest *UpdateDeviceACLTemplateRequest
	accountUcmId       *string
}

// The OAuth Bearer token. Please add the prefix &#39;Bearer &#39; before the token.
func (r ApiPatchDeviceTemplatesbyUuidRequest) Authorization(authorization string) ApiPatchDeviceTemplatesbyUuidRequest {
	r.authorization = &authorization
	return r
}

// Update the ACL of a device.
func (r ApiPatchDeviceTemplatesbyUuidRequest) AclTemplateRequest(aclTemplateRequest UpdateDeviceACLTemplateRequest) ApiPatchDeviceTemplatesbyUuidRequest {
	r.aclTemplateRequest = &aclTemplateRequest
	return r
}

// A reseller updating a device ACL template for a customer can pass the accountUcmId of the customer.
func (r ApiPatchDeviceTemplatesbyUuidRequest) AccountUcmId(accountUcmId string) ApiPatchDeviceTemplatesbyUuidRequest {
	r.accountUcmId = &accountUcmId
	return r
}

func (r ApiPatchDeviceTemplatesbyUuidRequest) Execute() (*http.Response, error) {
	return r.ApiService.PatchDeviceTemplatesbyUuidExecute(r)
}

/*
PatchDeviceTemplatesbyUuid Update ACL of Virtual Device

Updates or removes the details of ACL templates associated with a device. You must provide the unique ID of an existing virtual device as a path parameter.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param virtualDeviceUuid Unique Id of a virtual device.
	@return ApiPatchDeviceTemplatesbyUuidRequest
*/
func (a *ACLTemplateApiService) PatchDeviceTemplatesbyUuid(ctx context.Context, virtualDeviceUuid string) ApiPatchDeviceTemplatesbyUuidRequest {
	return ApiPatchDeviceTemplatesbyUuidRequest{
		ApiService:        a,
		ctx:               ctx,
		virtualDeviceUuid: virtualDeviceUuid,
	}
}

// Execute executes the request
func (a *ACLTemplateApiService) PatchDeviceTemplatesbyUuidExecute(r ApiPatchDeviceTemplatesbyUuidRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPatch
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ACLTemplateApiService.PatchDeviceTemplatesbyUuid")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ne/v1/devices/{virtualDeviceUuid}/acl"
	localVarPath = strings.Replace(localVarPath, "{"+"virtualDeviceUuid"+"}", url.PathEscape(parameterValueToString(r.virtualDeviceUuid, "virtualDeviceUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return nil, reportError("authorization is required and must be specified")
	}
	if r.aclTemplateRequest == nil {
		return nil, reportError("aclTemplateRequest is required and must be specified")
	}

	if r.accountUcmId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "accountUcmId", r.accountUcmId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "")
	// body params
	localVarPostBody = r.aclTemplateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorMessageResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorMessageResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPostDeviceTemplatesbyUuidRequest struct {
	ctx                context.Context
	ApiService         *ACLTemplateApiService
	virtualDeviceUuid  string
	authorization      *string
	aclTemplateRequest *UpdateDeviceACLTemplateRequest
	accountUcmId       *string
}

// The OAuth Bearer token. Please add the prefix &#39;Bearer &#39; before the token.
func (r ApiPostDeviceTemplatesbyUuidRequest) Authorization(authorization string) ApiPostDeviceTemplatesbyUuidRequest {
	r.authorization = &authorization
	return r
}

// Update the ACL of a device.
func (r ApiPostDeviceTemplatesbyUuidRequest) AclTemplateRequest(aclTemplateRequest UpdateDeviceACLTemplateRequest) ApiPostDeviceTemplatesbyUuidRequest {
	r.aclTemplateRequest = &aclTemplateRequest
	return r
}

// A reseller updating a device ACL template for a customer can pass the accountUcmId of the customer.
func (r ApiPostDeviceTemplatesbyUuidRequest) AccountUcmId(accountUcmId string) ApiPostDeviceTemplatesbyUuidRequest {
	r.accountUcmId = &accountUcmId
	return r
}

func (r ApiPostDeviceTemplatesbyUuidRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostDeviceTemplatesbyUuidExecute(r)
}

/*
PostDeviceTemplatesbyUuid Add ACL to Virtual Device

Updates the details of ACL templates associated with a device. You must provide the unique ID of an existing virtual device as a path parameter.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param virtualDeviceUuid Unique Id of a virtual device.
	@return ApiPostDeviceTemplatesbyUuidRequest
*/
func (a *ACLTemplateApiService) PostDeviceTemplatesbyUuid(ctx context.Context, virtualDeviceUuid string) ApiPostDeviceTemplatesbyUuidRequest {
	return ApiPostDeviceTemplatesbyUuidRequest{
		ApiService:        a,
		ctx:               ctx,
		virtualDeviceUuid: virtualDeviceUuid,
	}
}

// Execute executes the request
func (a *ACLTemplateApiService) PostDeviceTemplatesbyUuidExecute(r ApiPostDeviceTemplatesbyUuidRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ACLTemplateApiService.PostDeviceTemplatesbyUuid")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ne/v1/devices/{virtualDeviceUuid}/acl"
	localVarPath = strings.Replace(localVarPath, "{"+"virtualDeviceUuid"+"}", url.PathEscape(parameterValueToString(r.virtualDeviceUuid, "virtualDeviceUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return nil, reportError("authorization is required and must be specified")
	}
	if r.aclTemplateRequest == nil {
		return nil, reportError("aclTemplateRequest is required and must be specified")
	}

	if r.accountUcmId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "accountUcmId", r.accountUcmId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "")
	// body params
	localVarPostBody = r.aclTemplateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorMessageResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorMessageResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSendDnsLookupPOST1Request struct {
	ctx              context.Context
	ApiService       *ACLTemplateApiService
	authorization    *string
	dnsLookupRequest *DNSLookupRequest
}

// The OAuth Bearer token. Please add the prefix &#39;Bearer &#39; before the token.
func (r ApiSendDnsLookupPOST1Request) Authorization(authorization string) ApiSendDnsLookupPOST1Request {
	r.authorization = &authorization
	return r
}

// dnsLookupRequest
func (r ApiSendDnsLookupPOST1Request) DnsLookupRequest(dnsLookupRequest DNSLookupRequest) ApiSendDnsLookupPOST1Request {
	r.dnsLookupRequest = &dnsLookupRequest
	return r
}

func (r ApiSendDnsLookupPOST1Request) Execute() (*DNSLookupResponse, *http.Response, error) {
	return r.ApiService.SendDnsLookupPOST1Execute(r)
}

/*
SendDnsLookupPOST1 Post DNS Lookup

Call this method to lookup IP addresses associated with domains of a metro or a virtual device.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSendDnsLookupPOST1Request
*/
func (a *ACLTemplateApiService) SendDnsLookupPOST1(ctx context.Context) ApiSendDnsLookupPOST1Request {
	return ApiSendDnsLookupPOST1Request{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DNSLookupResponse
func (a *ACLTemplateApiService) SendDnsLookupPOST1Execute(r ApiSendDnsLookupPOST1Request) (*DNSLookupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DNSLookupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ACLTemplateApiService.SendDnsLookupPOST1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ne/v1/dnsLookup"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.dnsLookupRequest == nil {
		return localVarReturnValue, nil, reportError("dnsLookupRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "")
	// body params
	localVarPostBody = r.dnsLookupRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateDeviceACLTemplateUsingPUTRequest struct {
	ctx                context.Context
	ApiService         *ACLTemplateApiService
	uuid               string
	authorization      *string
	aclTemplateRequest *DeviceACLTemplateRequest
	accountUcmId       *string
}

// The OAuth Bearer token. Please add the prefix &#39;Bearer &#39; before the token.
func (r ApiUpdateDeviceACLTemplateUsingPUTRequest) Authorization(authorization string) ApiUpdateDeviceACLTemplateUsingPUTRequest {
	r.authorization = &authorization
	return r
}

// Update an ACL template.
func (r ApiUpdateDeviceACLTemplateUsingPUTRequest) AclTemplateRequest(aclTemplateRequest DeviceACLTemplateRequest) ApiUpdateDeviceACLTemplateUsingPUTRequest {
	r.aclTemplateRequest = &aclTemplateRequest
	return r
}

// A reseller updating an ACL template for a customer must pass the accountUcmId of the customer.
func (r ApiUpdateDeviceACLTemplateUsingPUTRequest) AccountUcmId(accountUcmId string) ApiUpdateDeviceACLTemplateUsingPUTRequest {
	r.accountUcmId = &accountUcmId
	return r
}

func (r ApiUpdateDeviceACLTemplateUsingPUTRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateDeviceACLTemplateUsingPUTExecute(r)
}

/*
UpdateDeviceACLTemplateUsingPUT Update ACL Template

Updates an ACL template. You must pass the unique Id of the ACL template as a path parameter.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uuid Unique ID of an ACL template
	@return ApiUpdateDeviceACLTemplateUsingPUTRequest
*/
func (a *ACLTemplateApiService) UpdateDeviceACLTemplateUsingPUT(ctx context.Context, uuid string) ApiUpdateDeviceACLTemplateUsingPUTRequest {
	return ApiUpdateDeviceACLTemplateUsingPUTRequest{
		ApiService: a,
		ctx:        ctx,
		uuid:       uuid,
	}
}

// Execute executes the request
func (a *ACLTemplateApiService) UpdateDeviceACLTemplateUsingPUTExecute(r ApiUpdateDeviceACLTemplateUsingPUTRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ACLTemplateApiService.UpdateDeviceACLTemplateUsingPUT")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ne/v1/aclTemplates/{uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"uuid"+"}", url.PathEscape(parameterValueToString(r.uuid, "uuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return nil, reportError("authorization is required and must be specified")
	}
	if r.aclTemplateRequest == nil {
		return nil, reportError("aclTemplateRequest is required and must be specified")
	}

	if r.accountUcmId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "accountUcmId", r.accountUcmId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "")
	// body params
	localVarPostBody = r.aclTemplateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v FieldErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorMessageResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorMessageResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
