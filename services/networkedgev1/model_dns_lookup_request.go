/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the DNSLookupRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DNSLookupRequest{}

// DNSLookupRequest struct for DNSLookupRequest
type DNSLookupRequest struct {
	// Domain names
	Fqdns []string `json:"fqdns,omitempty"`
	// The unique Id of a virtual device
	Uuid *string `json:"uuid,omitempty"`
	// Metro code
	MetroCode            *string `json:"metroCode,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DNSLookupRequest DNSLookupRequest

// NewDNSLookupRequest instantiates a new DNSLookupRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDNSLookupRequest() *DNSLookupRequest {
	this := DNSLookupRequest{}
	return &this
}

// NewDNSLookupRequestWithDefaults instantiates a new DNSLookupRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDNSLookupRequestWithDefaults() *DNSLookupRequest {
	this := DNSLookupRequest{}
	return &this
}

// GetFqdns returns the Fqdns field value if set, zero value otherwise.
func (o *DNSLookupRequest) GetFqdns() []string {
	if o == nil || IsNil(o.Fqdns) {
		var ret []string
		return ret
	}
	return o.Fqdns
}

// GetFqdnsOk returns a tuple with the Fqdns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSLookupRequest) GetFqdnsOk() ([]string, bool) {
	if o == nil || IsNil(o.Fqdns) {
		return nil, false
	}
	return o.Fqdns, true
}

// HasFqdns returns a boolean if a field has been set.
func (o *DNSLookupRequest) HasFqdns() bool {
	if o != nil && !IsNil(o.Fqdns) {
		return true
	}

	return false
}

// SetFqdns gets a reference to the given []string and assigns it to the Fqdns field.
func (o *DNSLookupRequest) SetFqdns(v []string) {
	o.Fqdns = v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *DNSLookupRequest) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSLookupRequest) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *DNSLookupRequest) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *DNSLookupRequest) SetUuid(v string) {
	o.Uuid = &v
}

// GetMetroCode returns the MetroCode field value if set, zero value otherwise.
func (o *DNSLookupRequest) GetMetroCode() string {
	if o == nil || IsNil(o.MetroCode) {
		var ret string
		return ret
	}
	return *o.MetroCode
}

// GetMetroCodeOk returns a tuple with the MetroCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSLookupRequest) GetMetroCodeOk() (*string, bool) {
	if o == nil || IsNil(o.MetroCode) {
		return nil, false
	}
	return o.MetroCode, true
}

// HasMetroCode returns a boolean if a field has been set.
func (o *DNSLookupRequest) HasMetroCode() bool {
	if o != nil && !IsNil(o.MetroCode) {
		return true
	}

	return false
}

// SetMetroCode gets a reference to the given string and assigns it to the MetroCode field.
func (o *DNSLookupRequest) SetMetroCode(v string) {
	o.MetroCode = &v
}

func (o DNSLookupRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DNSLookupRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Fqdns) {
		toSerialize["fqdns"] = o.Fqdns
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.MetroCode) {
		toSerialize["metroCode"] = o.MetroCode
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DNSLookupRequest) UnmarshalJSON(data []byte) (err error) {
	varDNSLookupRequest := _DNSLookupRequest{}

	err = json.Unmarshal(data, &varDNSLookupRequest)

	if err != nil {
		return err
	}

	*o = DNSLookupRequest(varDNSLookupRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "fqdns")
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "metroCode")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDNSLookupRequest struct {
	value *DNSLookupRequest
	isSet bool
}

func (v NullableDNSLookupRequest) Get() *DNSLookupRequest {
	return v.value
}

func (v *NullableDNSLookupRequest) Set(val *DNSLookupRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDNSLookupRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDNSLookupRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDNSLookupRequest(val *DNSLookupRequest) *NullableDNSLookupRequest {
	return &NullableDNSLookupRequest{value: val, isSet: true}
}

func (v NullableDNSLookupRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDNSLookupRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
