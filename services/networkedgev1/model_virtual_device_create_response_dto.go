/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the VirtualDeviceCreateResponseDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VirtualDeviceCreateResponseDto{}

// VirtualDeviceCreateResponseDto struct for VirtualDeviceCreateResponseDto
type VirtualDeviceCreateResponseDto struct {
	SecondaryUuid        *string `json:"secondaryUuid,omitempty"`
	Uuid                 *string `json:"uuid,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VirtualDeviceCreateResponseDto VirtualDeviceCreateResponseDto

// NewVirtualDeviceCreateResponseDto instantiates a new VirtualDeviceCreateResponseDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualDeviceCreateResponseDto() *VirtualDeviceCreateResponseDto {
	this := VirtualDeviceCreateResponseDto{}
	return &this
}

// NewVirtualDeviceCreateResponseDtoWithDefaults instantiates a new VirtualDeviceCreateResponseDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualDeviceCreateResponseDtoWithDefaults() *VirtualDeviceCreateResponseDto {
	this := VirtualDeviceCreateResponseDto{}
	return &this
}

// GetSecondaryUuid returns the SecondaryUuid field value if set, zero value otherwise.
func (o *VirtualDeviceCreateResponseDto) GetSecondaryUuid() string {
	if o == nil || IsNil(o.SecondaryUuid) {
		var ret string
		return ret
	}
	return *o.SecondaryUuid
}

// GetSecondaryUuidOk returns a tuple with the SecondaryUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceCreateResponseDto) GetSecondaryUuidOk() (*string, bool) {
	if o == nil || IsNil(o.SecondaryUuid) {
		return nil, false
	}
	return o.SecondaryUuid, true
}

// HasSecondaryUuid returns a boolean if a field has been set.
func (o *VirtualDeviceCreateResponseDto) HasSecondaryUuid() bool {
	if o != nil && !IsNil(o.SecondaryUuid) {
		return true
	}

	return false
}

// SetSecondaryUuid gets a reference to the given string and assigns it to the SecondaryUuid field.
func (o *VirtualDeviceCreateResponseDto) SetSecondaryUuid(v string) {
	o.SecondaryUuid = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *VirtualDeviceCreateResponseDto) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceCreateResponseDto) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *VirtualDeviceCreateResponseDto) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *VirtualDeviceCreateResponseDto) SetUuid(v string) {
	o.Uuid = &v
}

func (o VirtualDeviceCreateResponseDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VirtualDeviceCreateResponseDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SecondaryUuid) {
		toSerialize["secondaryUuid"] = o.SecondaryUuid
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VirtualDeviceCreateResponseDto) UnmarshalJSON(data []byte) (err error) {
	varVirtualDeviceCreateResponseDto := _VirtualDeviceCreateResponseDto{}

	err = json.Unmarshal(data, &varVirtualDeviceCreateResponseDto)

	if err != nil {
		return err
	}

	*o = VirtualDeviceCreateResponseDto(varVirtualDeviceCreateResponseDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "secondaryUuid")
		delete(additionalProperties, "uuid")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVirtualDeviceCreateResponseDto struct {
	value *VirtualDeviceCreateResponseDto
	isSet bool
}

func (v NullableVirtualDeviceCreateResponseDto) Get() *VirtualDeviceCreateResponseDto {
	return v.value
}

func (v *NullableVirtualDeviceCreateResponseDto) Set(val *VirtualDeviceCreateResponseDto) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualDeviceCreateResponseDto) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualDeviceCreateResponseDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualDeviceCreateResponseDto(val *VirtualDeviceCreateResponseDto) *NullableVirtualDeviceCreateResponseDto {
	return &NullableVirtualDeviceCreateResponseDto{value: val, isSet: true}
}

func (v NullableVirtualDeviceCreateResponseDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualDeviceCreateResponseDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
