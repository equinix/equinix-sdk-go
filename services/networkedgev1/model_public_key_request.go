/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
	"fmt"
)

// checks if the PublicKeyRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicKeyRequest{}

// PublicKeyRequest struct for PublicKeyRequest
type PublicKeyRequest struct {
	// Key name
	KeyName string `json:"keyName"`
	// Key value
	KeyValue string `json:"keyValue"`
	// Key type, whether RSA or DSA. Default is RSA.
	KeyType              *string `json:"keyType,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PublicKeyRequest PublicKeyRequest

// NewPublicKeyRequest instantiates a new PublicKeyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicKeyRequest(keyName string, keyValue string) *PublicKeyRequest {
	this := PublicKeyRequest{}
	this.KeyName = keyName
	this.KeyValue = keyValue
	return &this
}

// NewPublicKeyRequestWithDefaults instantiates a new PublicKeyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicKeyRequestWithDefaults() *PublicKeyRequest {
	this := PublicKeyRequest{}
	return &this
}

// GetKeyName returns the KeyName field value
func (o *PublicKeyRequest) GetKeyName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeyName
}

// GetKeyNameOk returns a tuple with the KeyName field value
// and a boolean to check if the value has been set.
func (o *PublicKeyRequest) GetKeyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyName, true
}

// SetKeyName sets field value
func (o *PublicKeyRequest) SetKeyName(v string) {
	o.KeyName = v
}

// GetKeyValue returns the KeyValue field value
func (o *PublicKeyRequest) GetKeyValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeyValue
}

// GetKeyValueOk returns a tuple with the KeyValue field value
// and a boolean to check if the value has been set.
func (o *PublicKeyRequest) GetKeyValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyValue, true
}

// SetKeyValue sets field value
func (o *PublicKeyRequest) SetKeyValue(v string) {
	o.KeyValue = v
}

// GetKeyType returns the KeyType field value if set, zero value otherwise.
func (o *PublicKeyRequest) GetKeyType() string {
	if o == nil || IsNil(o.KeyType) {
		var ret string
		return ret
	}
	return *o.KeyType
}

// GetKeyTypeOk returns a tuple with the KeyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicKeyRequest) GetKeyTypeOk() (*string, bool) {
	if o == nil || IsNil(o.KeyType) {
		return nil, false
	}
	return o.KeyType, true
}

// HasKeyType returns a boolean if a field has been set.
func (o *PublicKeyRequest) HasKeyType() bool {
	if o != nil && !IsNil(o.KeyType) {
		return true
	}

	return false
}

// SetKeyType gets a reference to the given string and assigns it to the KeyType field.
func (o *PublicKeyRequest) SetKeyType(v string) {
	o.KeyType = &v
}

func (o PublicKeyRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicKeyRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["keyName"] = o.KeyName
	toSerialize["keyValue"] = o.KeyValue
	if !IsNil(o.KeyType) {
		toSerialize["keyType"] = o.KeyType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PublicKeyRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"keyName",
		"keyValue",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicKeyRequest := _PublicKeyRequest{}

	err = json.Unmarshal(data, &varPublicKeyRequest)

	if err != nil {
		return err
	}

	*o = PublicKeyRequest(varPublicKeyRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "keyName")
		delete(additionalProperties, "keyValue")
		delete(additionalProperties, "keyType")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePublicKeyRequest struct {
	value *PublicKeyRequest
	isSet bool
}

func (v NullablePublicKeyRequest) Get() *PublicKeyRequest {
	return v.value
}

func (v *NullablePublicKeyRequest) Set(val *PublicKeyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicKeyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicKeyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicKeyRequest(val *PublicKeyRequest) *NullablePublicKeyRequest {
	return &NullablePublicKeyRequest{value: val, isSet: true}
}

func (v NullablePublicKeyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicKeyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
