/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
	"fmt"
)

// checks if the DeviceRMAPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceRMAPostRequest{}

// DeviceRMAPostRequest struct for DeviceRMAPostRequest
type DeviceRMAPostRequest struct {
	// Any version you want.
	Version string `json:"version"`
	// For a C8KV device, this is the Id of the uploaded bootstrap file. Upload your Cisco bootstrap file by calling Upload File. In the response, you'll get a fileUuid that you can enter here as cloudInitFileId. This field may be required for some vendors.
	CloudInitFileId *string `json:"cloudInitFileId,omitempty"`
	// This is the Id of the uploaded license file. For a CSR1KV SDWAN device, upload your license file by calling Post License File. In the response, you'll get a fileId that you can enter here as licenseFileId. This field may be required for some vendors.
	LicenseFileId *string `json:"licenseFileId,omitempty"`
	// License token. For a cluster, you will need to provide license tokens for both node0 and node1. To get the exact payload for different vendors, check the Postman script on the API Reference page of online documentation.
	Token                *string               `json:"token,omitempty"`
	VendorConfig         *RMAVendorConfig      `json:"vendorConfig,omitempty"`
	UserPublicKey        *UserPublicKeyRequest `json:"userPublicKey,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DeviceRMAPostRequest DeviceRMAPostRequest

// NewDeviceRMAPostRequest instantiates a new DeviceRMAPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceRMAPostRequest(version string) *DeviceRMAPostRequest {
	this := DeviceRMAPostRequest{}
	this.Version = version
	return &this
}

// NewDeviceRMAPostRequestWithDefaults instantiates a new DeviceRMAPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceRMAPostRequestWithDefaults() *DeviceRMAPostRequest {
	this := DeviceRMAPostRequest{}
	return &this
}

// GetVersion returns the Version field value
func (o *DeviceRMAPostRequest) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *DeviceRMAPostRequest) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *DeviceRMAPostRequest) SetVersion(v string) {
	o.Version = v
}

// GetCloudInitFileId returns the CloudInitFileId field value if set, zero value otherwise.
func (o *DeviceRMAPostRequest) GetCloudInitFileId() string {
	if o == nil || IsNil(o.CloudInitFileId) {
		var ret string
		return ret
	}
	return *o.CloudInitFileId
}

// GetCloudInitFileIdOk returns a tuple with the CloudInitFileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRMAPostRequest) GetCloudInitFileIdOk() (*string, bool) {
	if o == nil || IsNil(o.CloudInitFileId) {
		return nil, false
	}
	return o.CloudInitFileId, true
}

// HasCloudInitFileId returns a boolean if a field has been set.
func (o *DeviceRMAPostRequest) HasCloudInitFileId() bool {
	if o != nil && !IsNil(o.CloudInitFileId) {
		return true
	}

	return false
}

// SetCloudInitFileId gets a reference to the given string and assigns it to the CloudInitFileId field.
func (o *DeviceRMAPostRequest) SetCloudInitFileId(v string) {
	o.CloudInitFileId = &v
}

// GetLicenseFileId returns the LicenseFileId field value if set, zero value otherwise.
func (o *DeviceRMAPostRequest) GetLicenseFileId() string {
	if o == nil || IsNil(o.LicenseFileId) {
		var ret string
		return ret
	}
	return *o.LicenseFileId
}

// GetLicenseFileIdOk returns a tuple with the LicenseFileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRMAPostRequest) GetLicenseFileIdOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseFileId) {
		return nil, false
	}
	return o.LicenseFileId, true
}

// HasLicenseFileId returns a boolean if a field has been set.
func (o *DeviceRMAPostRequest) HasLicenseFileId() bool {
	if o != nil && !IsNil(o.LicenseFileId) {
		return true
	}

	return false
}

// SetLicenseFileId gets a reference to the given string and assigns it to the LicenseFileId field.
func (o *DeviceRMAPostRequest) SetLicenseFileId(v string) {
	o.LicenseFileId = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *DeviceRMAPostRequest) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRMAPostRequest) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *DeviceRMAPostRequest) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *DeviceRMAPostRequest) SetToken(v string) {
	o.Token = &v
}

// GetVendorConfig returns the VendorConfig field value if set, zero value otherwise.
func (o *DeviceRMAPostRequest) GetVendorConfig() RMAVendorConfig {
	if o == nil || IsNil(o.VendorConfig) {
		var ret RMAVendorConfig
		return ret
	}
	return *o.VendorConfig
}

// GetVendorConfigOk returns a tuple with the VendorConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRMAPostRequest) GetVendorConfigOk() (*RMAVendorConfig, bool) {
	if o == nil || IsNil(o.VendorConfig) {
		return nil, false
	}
	return o.VendorConfig, true
}

// HasVendorConfig returns a boolean if a field has been set.
func (o *DeviceRMAPostRequest) HasVendorConfig() bool {
	if o != nil && !IsNil(o.VendorConfig) {
		return true
	}

	return false
}

// SetVendorConfig gets a reference to the given RMAVendorConfig and assigns it to the VendorConfig field.
func (o *DeviceRMAPostRequest) SetVendorConfig(v RMAVendorConfig) {
	o.VendorConfig = &v
}

// GetUserPublicKey returns the UserPublicKey field value if set, zero value otherwise.
func (o *DeviceRMAPostRequest) GetUserPublicKey() UserPublicKeyRequest {
	if o == nil || IsNil(o.UserPublicKey) {
		var ret UserPublicKeyRequest
		return ret
	}
	return *o.UserPublicKey
}

// GetUserPublicKeyOk returns a tuple with the UserPublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRMAPostRequest) GetUserPublicKeyOk() (*UserPublicKeyRequest, bool) {
	if o == nil || IsNil(o.UserPublicKey) {
		return nil, false
	}
	return o.UserPublicKey, true
}

// HasUserPublicKey returns a boolean if a field has been set.
func (o *DeviceRMAPostRequest) HasUserPublicKey() bool {
	if o != nil && !IsNil(o.UserPublicKey) {
		return true
	}

	return false
}

// SetUserPublicKey gets a reference to the given UserPublicKeyRequest and assigns it to the UserPublicKey field.
func (o *DeviceRMAPostRequest) SetUserPublicKey(v UserPublicKeyRequest) {
	o.UserPublicKey = &v
}

func (o DeviceRMAPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceRMAPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["version"] = o.Version
	if !IsNil(o.CloudInitFileId) {
		toSerialize["cloudInitFileId"] = o.CloudInitFileId
	}
	if !IsNil(o.LicenseFileId) {
		toSerialize["licenseFileId"] = o.LicenseFileId
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	if !IsNil(o.VendorConfig) {
		toSerialize["vendorConfig"] = o.VendorConfig
	}
	if !IsNil(o.UserPublicKey) {
		toSerialize["userPublicKey"] = o.UserPublicKey
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeviceRMAPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeviceRMAPostRequest := _DeviceRMAPostRequest{}

	err = json.Unmarshal(data, &varDeviceRMAPostRequest)

	if err != nil {
		return err
	}

	*o = DeviceRMAPostRequest(varDeviceRMAPostRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "version")
		delete(additionalProperties, "cloudInitFileId")
		delete(additionalProperties, "licenseFileId")
		delete(additionalProperties, "token")
		delete(additionalProperties, "vendorConfig")
		delete(additionalProperties, "userPublicKey")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeviceRMAPostRequest struct {
	value *DeviceRMAPostRequest
	isSet bool
}

func (v NullableDeviceRMAPostRequest) Get() *DeviceRMAPostRequest {
	return v.value
}

func (v *NullableDeviceRMAPostRequest) Set(val *DeviceRMAPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceRMAPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceRMAPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceRMAPostRequest(val *DeviceRMAPostRequest) *NullableDeviceRMAPostRequest {
	return &NullableDeviceRMAPostRequest{value: val, isSet: true}
}

func (v NullableDeviceRMAPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceRMAPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
