/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the ClusterConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterConfig{}

// ClusterConfig struct for ClusterConfig
type ClusterConfig struct {
	// The cluster name.
	ClusterName          *string             `json:"clusterName,omitempty"`
	ClusterNodeDetails   *ClusterNodeDetails `json:"clusterNodeDetails,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ClusterConfig ClusterConfig

// NewClusterConfig instantiates a new ClusterConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterConfig() *ClusterConfig {
	this := ClusterConfig{}
	return &this
}

// NewClusterConfigWithDefaults instantiates a new ClusterConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterConfigWithDefaults() *ClusterConfig {
	this := ClusterConfig{}
	return &this
}

// GetClusterName returns the ClusterName field value if set, zero value otherwise.
func (o *ClusterConfig) GetClusterName() string {
	if o == nil || IsNil(o.ClusterName) {
		var ret string
		return ret
	}
	return *o.ClusterName
}

// GetClusterNameOk returns a tuple with the ClusterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterConfig) GetClusterNameOk() (*string, bool) {
	if o == nil || IsNil(o.ClusterName) {
		return nil, false
	}
	return o.ClusterName, true
}

// HasClusterName returns a boolean if a field has been set.
func (o *ClusterConfig) HasClusterName() bool {
	if o != nil && !IsNil(o.ClusterName) {
		return true
	}

	return false
}

// SetClusterName gets a reference to the given string and assigns it to the ClusterName field.
func (o *ClusterConfig) SetClusterName(v string) {
	o.ClusterName = &v
}

// GetClusterNodeDetails returns the ClusterNodeDetails field value if set, zero value otherwise.
func (o *ClusterConfig) GetClusterNodeDetails() ClusterNodeDetails {
	if o == nil || IsNil(o.ClusterNodeDetails) {
		var ret ClusterNodeDetails
		return ret
	}
	return *o.ClusterNodeDetails
}

// GetClusterNodeDetailsOk returns a tuple with the ClusterNodeDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterConfig) GetClusterNodeDetailsOk() (*ClusterNodeDetails, bool) {
	if o == nil || IsNil(o.ClusterNodeDetails) {
		return nil, false
	}
	return o.ClusterNodeDetails, true
}

// HasClusterNodeDetails returns a boolean if a field has been set.
func (o *ClusterConfig) HasClusterNodeDetails() bool {
	if o != nil && !IsNil(o.ClusterNodeDetails) {
		return true
	}

	return false
}

// SetClusterNodeDetails gets a reference to the given ClusterNodeDetails and assigns it to the ClusterNodeDetails field.
func (o *ClusterConfig) SetClusterNodeDetails(v ClusterNodeDetails) {
	o.ClusterNodeDetails = &v
}

func (o ClusterConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClusterName) {
		toSerialize["clusterName"] = o.ClusterName
	}
	if !IsNil(o.ClusterNodeDetails) {
		toSerialize["clusterNodeDetails"] = o.ClusterNodeDetails
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ClusterConfig) UnmarshalJSON(data []byte) (err error) {
	varClusterConfig := _ClusterConfig{}

	err = json.Unmarshal(data, &varClusterConfig)

	if err != nil {
		return err
	}

	*o = ClusterConfig(varClusterConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "clusterName")
		delete(additionalProperties, "clusterNodeDetails")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableClusterConfig struct {
	value *ClusterConfig
	isSet bool
}

func (v NullableClusterConfig) Get() *ClusterConfig {
	return v.value
}

func (v *NullableClusterConfig) Set(val *ClusterConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterConfig(val *ClusterConfig) *NullableClusterConfig {
	return &NullableClusterConfig{value: val, isSet: true}
}

func (v NullableClusterConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
