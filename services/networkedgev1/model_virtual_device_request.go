/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
	"fmt"
)

// checks if the VirtualDeviceRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VirtualDeviceRequest{}

// VirtualDeviceRequest struct for VirtualDeviceRequest
type VirtualDeviceRequest struct {
	// Account number. Either an account number or accountReferenceId is required.
	AccountNumber *string `json:"accountNumber,omitempty"`
	// AccountReferenceId. This is a temporary ID that can be used to create a device when the account status is still pending, not active. Either an account number or accountReferenceId is required.
	AccountReferenceId *string `json:"accountReferenceId,omitempty"`
	// Customer project Id. Required for CRH-enabled customers.
	ProjectId *string `json:"projectId,omitempty"`
	// Version.
	Version string `json:"version"`
	// Virtual device type (device type code)
	DeviceTypeCode string `json:"deviceTypeCode"`
	// Host name prefix for identification. Only a-z, A-Z, 0-9, and hyphen(-) are allowed. It should start with a letter and end with a letter or digit. The length should be between 2-30 characters. Exceptions - FTDv 2-14 characters; Aruba 2-24 characters.
	HostNamePrefix *string `json:"hostNamePrefix,omitempty"`
	// To create a device, you must accept the order terms. Call Get Order Terms to review the details. If you are creating an Equinix-Configured device, read your vendor's terms by calling Get Vendor Terms.
	AgreeOrderTerms bool `json:"agreeOrderTerms"`
	// License type. One of SUB (Subscription) or BYOL (Bring Your Own License)
	LicenseMode string `json:"licenseMode"`
	// This field will be deprecated in the future.
	LicenseCategory *string `json:"licenseCategory,omitempty"`
	// For Juniper devices you need to provide a licenseFileId if you want to BYOL (Bring Your Own License). You get a licenseFileId when you upload a license file by calling license upload API (Upload a license file before creating a virtual device). For Cisco devices, you do not need to provide a licenseFileId at the time of device creation. Once the device is provisioned, you can get the deviceSerialNo by calling Get virtual device {uuid} API. With the deviceSerialNo you can generate a license file on Cisco site. Afterward, you can upload the license file by calling license upload API (Upload a license file after creating a virtual device).
	LicenseFileId *string `json:"licenseFileId,omitempty"`
	// In case you want to BYOL (Bring Your Own License) for a Palo Alto device, you must provide a license token. This field must have 8 alphanumeric characters.
	LicenseToken *string `json:"licenseToken,omitempty"`
	// Some devices require a day0TextFileId. Upload your license file by calling Upload File API. You'll get a fileUuid in the response. You can enter the value in the day0TextFileId field of the create payload to create a virtual device. Check the payloads of individual devices (provided as Postman Scripts on our API doc site) for details.
	Day0TextFileId *string `json:"day0TextFileId,omitempty"`
	// Term length in months.
	Termlength *string `json:"termlength,omitempty"`
	// Metro code
	MetroCode string `json:"metroCode"`
	// Software package code
	PackageCode *string `json:"packageCode,omitempty"`
	// An array of sshUsernames and passwords
	SshUsers []SshUsers `json:"sshUsers,omitempty"`
	// Numeric throughput. For Cisco8KV self-configured devices, you can choose either numeric or tier throughput options.
	Throughput *int32 `json:"throughput,omitempty"`
	// Throughput unit.
	ThroughputUnit *string `json:"throughputUnit,omitempty"`
	// Tier throughput. Relevant for Cisco8KV devices. For Cisco8KV self-configured devices, you can choose either numeric or tier throughput options. Possible values - 0, 1, 2, 3. Default - 2
	Tier *int32 `json:"tier,omitempty"`
	// Virtual device name for identification. This should be minimum 3 and maximum 50 characters long.
	VirtualDeviceName string  `json:"virtualDeviceName"`
	OrderingContact   *string `json:"orderingContact,omitempty"`
	// Email addresses for notification. We need a minimum of 1 and no more than 5 email addresses.
	Notifications []string `json:"notifications"`
	// An array of ACLs
	AclDetails []ACLDetails `json:"aclDetails,omitempty"`
	// Secondary additional bandwidth to be configured (in Mbps for HA). Default bandwidth provided is 15 Mbps.
	AdditionalBandwidth *int32 `json:"additionalBandwidth,omitempty"`
	// Whether the device is SELF-CONFIGURED or EQUINIX-CONFIGURED
	DeviceManagementType string                `json:"deviceManagementType"`
	Core                 int32                 `json:"core"`
	InterfaceCount       *int32                `json:"interfaceCount,omitempty"`
	SiteId               *string               `json:"siteId,omitempty"`
	SystemIpAddress      *string               `json:"systemIpAddress,omitempty"`
	VendorConfig         *VendorConfig         `json:"vendorConfig,omitempty"`
	UserPublicKey        *UserPublicKeyRequest `json:"userPublicKey,omitempty"`
	// If you are creating a CSRSDWAN, you may specify the ipType, either DHCP or Static. If you do not specify a value, Equinix will default to Static.
	IpType *string `json:"ipType,omitempty"`
	// You may specify any available interface on the device as the sshInterfaceId. This field is only applicable to self-configured devices.
	SshInterfaceId *string `json:"sshInterfaceId,omitempty"`
	// License URL. This field is only relevant for Ciso ASAv devices.
	SmartLicenseUrl *string `json:"smartLicenseUrl,omitempty"`
	// Unique ID of an existing device. Use this field to let Equinix know if you want  your new device to be in a different location from any existing virtual device. This field is only meaningful for single devices.
	DiverseFromDeviceUuid *string        `json:"diverseFromDeviceUuid,omitempty"`
	ClusterDetails        *ClusterConfig `json:"clusterDetails,omitempty"`
	// This field is mandatory if you are using this API to add a secondary device to an existing primary device.
	PrimaryDeviceUuid *string `json:"primaryDeviceUuid,omitempty"`
	// Specifies the connectivity on the device. You can have INTERNET-ACCESS, PRIVATE, or INTERNET-ACCESS-WITH-PRVT-MGMT. Private devices don't have ACLs or bandwidth.
	Connectivity *string `json:"connectivity,omitempty"`
	// The name of the channel partner.
	ChannelPartner *string `json:"channelPartner,omitempty"`
	// The Id of a previously uploaded license or cloud_init file.
	CloudInitFileId *string `json:"cloudInitFileId,omitempty"`
	// Purchase Order information will be included in your order confirmation email.
	PurchaseOrderNumber *string `json:"purchaseOrderNumber,omitempty"`
	// Enter a short name/number to identify this order on the invoice.
	OrderReference       *string                `json:"orderReference,omitempty"`
	Secondary            *VirtualDevicHARequest `json:"secondary,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VirtualDeviceRequest VirtualDeviceRequest

// NewVirtualDeviceRequest instantiates a new VirtualDeviceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualDeviceRequest(version string, deviceTypeCode string, agreeOrderTerms bool, licenseMode string, metroCode string, virtualDeviceName string, notifications []string, deviceManagementType string, core int32) *VirtualDeviceRequest {
	this := VirtualDeviceRequest{}
	this.Version = version
	this.DeviceTypeCode = deviceTypeCode
	this.AgreeOrderTerms = agreeOrderTerms
	this.LicenseMode = licenseMode
	this.MetroCode = metroCode
	this.VirtualDeviceName = virtualDeviceName
	this.Notifications = notifications
	this.DeviceManagementType = deviceManagementType
	this.Core = core
	return &this
}

// NewVirtualDeviceRequestWithDefaults instantiates a new VirtualDeviceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualDeviceRequestWithDefaults() *VirtualDeviceRequest {
	this := VirtualDeviceRequest{}
	return &this
}

// GetAccountNumber returns the AccountNumber field value if set, zero value otherwise.
func (o *VirtualDeviceRequest) GetAccountNumber() string {
	if o == nil || IsNil(o.AccountNumber) {
		var ret string
		return ret
	}
	return *o.AccountNumber
}

// GetAccountNumberOk returns a tuple with the AccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceRequest) GetAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.AccountNumber) {
		return nil, false
	}
	return o.AccountNumber, true
}

// HasAccountNumber returns a boolean if a field has been set.
func (o *VirtualDeviceRequest) HasAccountNumber() bool {
	if o != nil && !IsNil(o.AccountNumber) {
		return true
	}

	return false
}

// SetAccountNumber gets a reference to the given string and assigns it to the AccountNumber field.
func (o *VirtualDeviceRequest) SetAccountNumber(v string) {
	o.AccountNumber = &v
}

// GetAccountReferenceId returns the AccountReferenceId field value if set, zero value otherwise.
func (o *VirtualDeviceRequest) GetAccountReferenceId() string {
	if o == nil || IsNil(o.AccountReferenceId) {
		var ret string
		return ret
	}
	return *o.AccountReferenceId
}

// GetAccountReferenceIdOk returns a tuple with the AccountReferenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceRequest) GetAccountReferenceIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountReferenceId) {
		return nil, false
	}
	return o.AccountReferenceId, true
}

// HasAccountReferenceId returns a boolean if a field has been set.
func (o *VirtualDeviceRequest) HasAccountReferenceId() bool {
	if o != nil && !IsNil(o.AccountReferenceId) {
		return true
	}

	return false
}

// SetAccountReferenceId gets a reference to the given string and assigns it to the AccountReferenceId field.
func (o *VirtualDeviceRequest) SetAccountReferenceId(v string) {
	o.AccountReferenceId = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *VirtualDeviceRequest) GetProjectId() string {
	if o == nil || IsNil(o.ProjectId) {
		var ret string
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceRequest) GetProjectIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *VirtualDeviceRequest) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given string and assigns it to the ProjectId field.
func (o *VirtualDeviceRequest) SetProjectId(v string) {
	o.ProjectId = &v
}

// GetVersion returns the Version field value
func (o *VirtualDeviceRequest) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *VirtualDeviceRequest) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *VirtualDeviceRequest) SetVersion(v string) {
	o.Version = v
}

// GetDeviceTypeCode returns the DeviceTypeCode field value
func (o *VirtualDeviceRequest) GetDeviceTypeCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeviceTypeCode
}

// GetDeviceTypeCodeOk returns a tuple with the DeviceTypeCode field value
// and a boolean to check if the value has been set.
func (o *VirtualDeviceRequest) GetDeviceTypeCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceTypeCode, true
}

// SetDeviceTypeCode sets field value
func (o *VirtualDeviceRequest) SetDeviceTypeCode(v string) {
	o.DeviceTypeCode = v
}

// GetHostNamePrefix returns the HostNamePrefix field value if set, zero value otherwise.
func (o *VirtualDeviceRequest) GetHostNamePrefix() string {
	if o == nil || IsNil(o.HostNamePrefix) {
		var ret string
		return ret
	}
	return *o.HostNamePrefix
}

// GetHostNamePrefixOk returns a tuple with the HostNamePrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceRequest) GetHostNamePrefixOk() (*string, bool) {
	if o == nil || IsNil(o.HostNamePrefix) {
		return nil, false
	}
	return o.HostNamePrefix, true
}

// HasHostNamePrefix returns a boolean if a field has been set.
func (o *VirtualDeviceRequest) HasHostNamePrefix() bool {
	if o != nil && !IsNil(o.HostNamePrefix) {
		return true
	}

	return false
}

// SetHostNamePrefix gets a reference to the given string and assigns it to the HostNamePrefix field.
func (o *VirtualDeviceRequest) SetHostNamePrefix(v string) {
	o.HostNamePrefix = &v
}

// GetAgreeOrderTerms returns the AgreeOrderTerms field value
func (o *VirtualDeviceRequest) GetAgreeOrderTerms() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AgreeOrderTerms
}

// GetAgreeOrderTermsOk returns a tuple with the AgreeOrderTerms field value
// and a boolean to check if the value has been set.
func (o *VirtualDeviceRequest) GetAgreeOrderTermsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AgreeOrderTerms, true
}

// SetAgreeOrderTerms sets field value
func (o *VirtualDeviceRequest) SetAgreeOrderTerms(v bool) {
	o.AgreeOrderTerms = v
}

// GetLicenseMode returns the LicenseMode field value
func (o *VirtualDeviceRequest) GetLicenseMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LicenseMode
}

// GetLicenseModeOk returns a tuple with the LicenseMode field value
// and a boolean to check if the value has been set.
func (o *VirtualDeviceRequest) GetLicenseModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LicenseMode, true
}

// SetLicenseMode sets field value
func (o *VirtualDeviceRequest) SetLicenseMode(v string) {
	o.LicenseMode = v
}

// GetLicenseCategory returns the LicenseCategory field value if set, zero value otherwise.
func (o *VirtualDeviceRequest) GetLicenseCategory() string {
	if o == nil || IsNil(o.LicenseCategory) {
		var ret string
		return ret
	}
	return *o.LicenseCategory
}

// GetLicenseCategoryOk returns a tuple with the LicenseCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceRequest) GetLicenseCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseCategory) {
		return nil, false
	}
	return o.LicenseCategory, true
}

// HasLicenseCategory returns a boolean if a field has been set.
func (o *VirtualDeviceRequest) HasLicenseCategory() bool {
	if o != nil && !IsNil(o.LicenseCategory) {
		return true
	}

	return false
}

// SetLicenseCategory gets a reference to the given string and assigns it to the LicenseCategory field.
func (o *VirtualDeviceRequest) SetLicenseCategory(v string) {
	o.LicenseCategory = &v
}

// GetLicenseFileId returns the LicenseFileId field value if set, zero value otherwise.
func (o *VirtualDeviceRequest) GetLicenseFileId() string {
	if o == nil || IsNil(o.LicenseFileId) {
		var ret string
		return ret
	}
	return *o.LicenseFileId
}

// GetLicenseFileIdOk returns a tuple with the LicenseFileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceRequest) GetLicenseFileIdOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseFileId) {
		return nil, false
	}
	return o.LicenseFileId, true
}

// HasLicenseFileId returns a boolean if a field has been set.
func (o *VirtualDeviceRequest) HasLicenseFileId() bool {
	if o != nil && !IsNil(o.LicenseFileId) {
		return true
	}

	return false
}

// SetLicenseFileId gets a reference to the given string and assigns it to the LicenseFileId field.
func (o *VirtualDeviceRequest) SetLicenseFileId(v string) {
	o.LicenseFileId = &v
}

// GetLicenseToken returns the LicenseToken field value if set, zero value otherwise.
func (o *VirtualDeviceRequest) GetLicenseToken() string {
	if o == nil || IsNil(o.LicenseToken) {
		var ret string
		return ret
	}
	return *o.LicenseToken
}

// GetLicenseTokenOk returns a tuple with the LicenseToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceRequest) GetLicenseTokenOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseToken) {
		return nil, false
	}
	return o.LicenseToken, true
}

// HasLicenseToken returns a boolean if a field has been set.
func (o *VirtualDeviceRequest) HasLicenseToken() bool {
	if o != nil && !IsNil(o.LicenseToken) {
		return true
	}

	return false
}

// SetLicenseToken gets a reference to the given string and assigns it to the LicenseToken field.
func (o *VirtualDeviceRequest) SetLicenseToken(v string) {
	o.LicenseToken = &v
}

// GetDay0TextFileId returns the Day0TextFileId field value if set, zero value otherwise.
func (o *VirtualDeviceRequest) GetDay0TextFileId() string {
	if o == nil || IsNil(o.Day0TextFileId) {
		var ret string
		return ret
	}
	return *o.Day0TextFileId
}

// GetDay0TextFileIdOk returns a tuple with the Day0TextFileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceRequest) GetDay0TextFileIdOk() (*string, bool) {
	if o == nil || IsNil(o.Day0TextFileId) {
		return nil, false
	}
	return o.Day0TextFileId, true
}

// HasDay0TextFileId returns a boolean if a field has been set.
func (o *VirtualDeviceRequest) HasDay0TextFileId() bool {
	if o != nil && !IsNil(o.Day0TextFileId) {
		return true
	}

	return false
}

// SetDay0TextFileId gets a reference to the given string and assigns it to the Day0TextFileId field.
func (o *VirtualDeviceRequest) SetDay0TextFileId(v string) {
	o.Day0TextFileId = &v
}

// GetTermlength returns the Termlength field value if set, zero value otherwise.
func (o *VirtualDeviceRequest) GetTermlength() string {
	if o == nil || IsNil(o.Termlength) {
		var ret string
		return ret
	}
	return *o.Termlength
}

// GetTermlengthOk returns a tuple with the Termlength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceRequest) GetTermlengthOk() (*string, bool) {
	if o == nil || IsNil(o.Termlength) {
		return nil, false
	}
	return o.Termlength, true
}

// HasTermlength returns a boolean if a field has been set.
func (o *VirtualDeviceRequest) HasTermlength() bool {
	if o != nil && !IsNil(o.Termlength) {
		return true
	}

	return false
}

// SetTermlength gets a reference to the given string and assigns it to the Termlength field.
func (o *VirtualDeviceRequest) SetTermlength(v string) {
	o.Termlength = &v
}

// GetMetroCode returns the MetroCode field value
func (o *VirtualDeviceRequest) GetMetroCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetroCode
}

// GetMetroCodeOk returns a tuple with the MetroCode field value
// and a boolean to check if the value has been set.
func (o *VirtualDeviceRequest) GetMetroCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetroCode, true
}

// SetMetroCode sets field value
func (o *VirtualDeviceRequest) SetMetroCode(v string) {
	o.MetroCode = v
}

// GetPackageCode returns the PackageCode field value if set, zero value otherwise.
func (o *VirtualDeviceRequest) GetPackageCode() string {
	if o == nil || IsNil(o.PackageCode) {
		var ret string
		return ret
	}
	return *o.PackageCode
}

// GetPackageCodeOk returns a tuple with the PackageCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceRequest) GetPackageCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PackageCode) {
		return nil, false
	}
	return o.PackageCode, true
}

// HasPackageCode returns a boolean if a field has been set.
func (o *VirtualDeviceRequest) HasPackageCode() bool {
	if o != nil && !IsNil(o.PackageCode) {
		return true
	}

	return false
}

// SetPackageCode gets a reference to the given string and assigns it to the PackageCode field.
func (o *VirtualDeviceRequest) SetPackageCode(v string) {
	o.PackageCode = &v
}

// GetSshUsers returns the SshUsers field value if set, zero value otherwise.
func (o *VirtualDeviceRequest) GetSshUsers() []SshUsers {
	if o == nil || IsNil(o.SshUsers) {
		var ret []SshUsers
		return ret
	}
	return o.SshUsers
}

// GetSshUsersOk returns a tuple with the SshUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceRequest) GetSshUsersOk() ([]SshUsers, bool) {
	if o == nil || IsNil(o.SshUsers) {
		return nil, false
	}
	return o.SshUsers, true
}

// HasSshUsers returns a boolean if a field has been set.
func (o *VirtualDeviceRequest) HasSshUsers() bool {
	if o != nil && !IsNil(o.SshUsers) {
		return true
	}

	return false
}

// SetSshUsers gets a reference to the given []SshUsers and assigns it to the SshUsers field.
func (o *VirtualDeviceRequest) SetSshUsers(v []SshUsers) {
	o.SshUsers = v
}

// GetThroughput returns the Throughput field value if set, zero value otherwise.
func (o *VirtualDeviceRequest) GetThroughput() int32 {
	if o == nil || IsNil(o.Throughput) {
		var ret int32
		return ret
	}
	return *o.Throughput
}

// GetThroughputOk returns a tuple with the Throughput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceRequest) GetThroughputOk() (*int32, bool) {
	if o == nil || IsNil(o.Throughput) {
		return nil, false
	}
	return o.Throughput, true
}

// HasThroughput returns a boolean if a field has been set.
func (o *VirtualDeviceRequest) HasThroughput() bool {
	if o != nil && !IsNil(o.Throughput) {
		return true
	}

	return false
}

// SetThroughput gets a reference to the given int32 and assigns it to the Throughput field.
func (o *VirtualDeviceRequest) SetThroughput(v int32) {
	o.Throughput = &v
}

// GetThroughputUnit returns the ThroughputUnit field value if set, zero value otherwise.
func (o *VirtualDeviceRequest) GetThroughputUnit() string {
	if o == nil || IsNil(o.ThroughputUnit) {
		var ret string
		return ret
	}
	return *o.ThroughputUnit
}

// GetThroughputUnitOk returns a tuple with the ThroughputUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceRequest) GetThroughputUnitOk() (*string, bool) {
	if o == nil || IsNil(o.ThroughputUnit) {
		return nil, false
	}
	return o.ThroughputUnit, true
}

// HasThroughputUnit returns a boolean if a field has been set.
func (o *VirtualDeviceRequest) HasThroughputUnit() bool {
	if o != nil && !IsNil(o.ThroughputUnit) {
		return true
	}

	return false
}

// SetThroughputUnit gets a reference to the given string and assigns it to the ThroughputUnit field.
func (o *VirtualDeviceRequest) SetThroughputUnit(v string) {
	o.ThroughputUnit = &v
}

// GetTier returns the Tier field value if set, zero value otherwise.
func (o *VirtualDeviceRequest) GetTier() int32 {
	if o == nil || IsNil(o.Tier) {
		var ret int32
		return ret
	}
	return *o.Tier
}

// GetTierOk returns a tuple with the Tier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceRequest) GetTierOk() (*int32, bool) {
	if o == nil || IsNil(o.Tier) {
		return nil, false
	}
	return o.Tier, true
}

// HasTier returns a boolean if a field has been set.
func (o *VirtualDeviceRequest) HasTier() bool {
	if o != nil && !IsNil(o.Tier) {
		return true
	}

	return false
}

// SetTier gets a reference to the given int32 and assigns it to the Tier field.
func (o *VirtualDeviceRequest) SetTier(v int32) {
	o.Tier = &v
}

// GetVirtualDeviceName returns the VirtualDeviceName field value
func (o *VirtualDeviceRequest) GetVirtualDeviceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VirtualDeviceName
}

// GetVirtualDeviceNameOk returns a tuple with the VirtualDeviceName field value
// and a boolean to check if the value has been set.
func (o *VirtualDeviceRequest) GetVirtualDeviceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VirtualDeviceName, true
}

// SetVirtualDeviceName sets field value
func (o *VirtualDeviceRequest) SetVirtualDeviceName(v string) {
	o.VirtualDeviceName = v
}

// GetOrderingContact returns the OrderingContact field value if set, zero value otherwise.
func (o *VirtualDeviceRequest) GetOrderingContact() string {
	if o == nil || IsNil(o.OrderingContact) {
		var ret string
		return ret
	}
	return *o.OrderingContact
}

// GetOrderingContactOk returns a tuple with the OrderingContact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceRequest) GetOrderingContactOk() (*string, bool) {
	if o == nil || IsNil(o.OrderingContact) {
		return nil, false
	}
	return o.OrderingContact, true
}

// HasOrderingContact returns a boolean if a field has been set.
func (o *VirtualDeviceRequest) HasOrderingContact() bool {
	if o != nil && !IsNil(o.OrderingContact) {
		return true
	}

	return false
}

// SetOrderingContact gets a reference to the given string and assigns it to the OrderingContact field.
func (o *VirtualDeviceRequest) SetOrderingContact(v string) {
	o.OrderingContact = &v
}

// GetNotifications returns the Notifications field value
func (o *VirtualDeviceRequest) GetNotifications() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Notifications
}

// GetNotificationsOk returns a tuple with the Notifications field value
// and a boolean to check if the value has been set.
func (o *VirtualDeviceRequest) GetNotificationsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Notifications, true
}

// SetNotifications sets field value
func (o *VirtualDeviceRequest) SetNotifications(v []string) {
	o.Notifications = v
}

// GetAclDetails returns the AclDetails field value if set, zero value otherwise.
func (o *VirtualDeviceRequest) GetAclDetails() []ACLDetails {
	if o == nil || IsNil(o.AclDetails) {
		var ret []ACLDetails
		return ret
	}
	return o.AclDetails
}

// GetAclDetailsOk returns a tuple with the AclDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceRequest) GetAclDetailsOk() ([]ACLDetails, bool) {
	if o == nil || IsNil(o.AclDetails) {
		return nil, false
	}
	return o.AclDetails, true
}

// HasAclDetails returns a boolean if a field has been set.
func (o *VirtualDeviceRequest) HasAclDetails() bool {
	if o != nil && !IsNil(o.AclDetails) {
		return true
	}

	return false
}

// SetAclDetails gets a reference to the given []ACLDetails and assigns it to the AclDetails field.
func (o *VirtualDeviceRequest) SetAclDetails(v []ACLDetails) {
	o.AclDetails = v
}

// GetAdditionalBandwidth returns the AdditionalBandwidth field value if set, zero value otherwise.
func (o *VirtualDeviceRequest) GetAdditionalBandwidth() int32 {
	if o == nil || IsNil(o.AdditionalBandwidth) {
		var ret int32
		return ret
	}
	return *o.AdditionalBandwidth
}

// GetAdditionalBandwidthOk returns a tuple with the AdditionalBandwidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceRequest) GetAdditionalBandwidthOk() (*int32, bool) {
	if o == nil || IsNil(o.AdditionalBandwidth) {
		return nil, false
	}
	return o.AdditionalBandwidth, true
}

// HasAdditionalBandwidth returns a boolean if a field has been set.
func (o *VirtualDeviceRequest) HasAdditionalBandwidth() bool {
	if o != nil && !IsNil(o.AdditionalBandwidth) {
		return true
	}

	return false
}

// SetAdditionalBandwidth gets a reference to the given int32 and assigns it to the AdditionalBandwidth field.
func (o *VirtualDeviceRequest) SetAdditionalBandwidth(v int32) {
	o.AdditionalBandwidth = &v
}

// GetDeviceManagementType returns the DeviceManagementType field value
func (o *VirtualDeviceRequest) GetDeviceManagementType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeviceManagementType
}

// GetDeviceManagementTypeOk returns a tuple with the DeviceManagementType field value
// and a boolean to check if the value has been set.
func (o *VirtualDeviceRequest) GetDeviceManagementTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceManagementType, true
}

// SetDeviceManagementType sets field value
func (o *VirtualDeviceRequest) SetDeviceManagementType(v string) {
	o.DeviceManagementType = v
}

// GetCore returns the Core field value
func (o *VirtualDeviceRequest) GetCore() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Core
}

// GetCoreOk returns a tuple with the Core field value
// and a boolean to check if the value has been set.
func (o *VirtualDeviceRequest) GetCoreOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Core, true
}

// SetCore sets field value
func (o *VirtualDeviceRequest) SetCore(v int32) {
	o.Core = v
}

// GetInterfaceCount returns the InterfaceCount field value if set, zero value otherwise.
func (o *VirtualDeviceRequest) GetInterfaceCount() int32 {
	if o == nil || IsNil(o.InterfaceCount) {
		var ret int32
		return ret
	}
	return *o.InterfaceCount
}

// GetInterfaceCountOk returns a tuple with the InterfaceCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceRequest) GetInterfaceCountOk() (*int32, bool) {
	if o == nil || IsNil(o.InterfaceCount) {
		return nil, false
	}
	return o.InterfaceCount, true
}

// HasInterfaceCount returns a boolean if a field has been set.
func (o *VirtualDeviceRequest) HasInterfaceCount() bool {
	if o != nil && !IsNil(o.InterfaceCount) {
		return true
	}

	return false
}

// SetInterfaceCount gets a reference to the given int32 and assigns it to the InterfaceCount field.
func (o *VirtualDeviceRequest) SetInterfaceCount(v int32) {
	o.InterfaceCount = &v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *VirtualDeviceRequest) GetSiteId() string {
	if o == nil || IsNil(o.SiteId) {
		var ret string
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceRequest) GetSiteIdOk() (*string, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *VirtualDeviceRequest) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given string and assigns it to the SiteId field.
func (o *VirtualDeviceRequest) SetSiteId(v string) {
	o.SiteId = &v
}

// GetSystemIpAddress returns the SystemIpAddress field value if set, zero value otherwise.
func (o *VirtualDeviceRequest) GetSystemIpAddress() string {
	if o == nil || IsNil(o.SystemIpAddress) {
		var ret string
		return ret
	}
	return *o.SystemIpAddress
}

// GetSystemIpAddressOk returns a tuple with the SystemIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceRequest) GetSystemIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.SystemIpAddress) {
		return nil, false
	}
	return o.SystemIpAddress, true
}

// HasSystemIpAddress returns a boolean if a field has been set.
func (o *VirtualDeviceRequest) HasSystemIpAddress() bool {
	if o != nil && !IsNil(o.SystemIpAddress) {
		return true
	}

	return false
}

// SetSystemIpAddress gets a reference to the given string and assigns it to the SystemIpAddress field.
func (o *VirtualDeviceRequest) SetSystemIpAddress(v string) {
	o.SystemIpAddress = &v
}

// GetVendorConfig returns the VendorConfig field value if set, zero value otherwise.
func (o *VirtualDeviceRequest) GetVendorConfig() VendorConfig {
	if o == nil || IsNil(o.VendorConfig) {
		var ret VendorConfig
		return ret
	}
	return *o.VendorConfig
}

// GetVendorConfigOk returns a tuple with the VendorConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceRequest) GetVendorConfigOk() (*VendorConfig, bool) {
	if o == nil || IsNil(o.VendorConfig) {
		return nil, false
	}
	return o.VendorConfig, true
}

// HasVendorConfig returns a boolean if a field has been set.
func (o *VirtualDeviceRequest) HasVendorConfig() bool {
	if o != nil && !IsNil(o.VendorConfig) {
		return true
	}

	return false
}

// SetVendorConfig gets a reference to the given VendorConfig and assigns it to the VendorConfig field.
func (o *VirtualDeviceRequest) SetVendorConfig(v VendorConfig) {
	o.VendorConfig = &v
}

// GetUserPublicKey returns the UserPublicKey field value if set, zero value otherwise.
func (o *VirtualDeviceRequest) GetUserPublicKey() UserPublicKeyRequest {
	if o == nil || IsNil(o.UserPublicKey) {
		var ret UserPublicKeyRequest
		return ret
	}
	return *o.UserPublicKey
}

// GetUserPublicKeyOk returns a tuple with the UserPublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceRequest) GetUserPublicKeyOk() (*UserPublicKeyRequest, bool) {
	if o == nil || IsNil(o.UserPublicKey) {
		return nil, false
	}
	return o.UserPublicKey, true
}

// HasUserPublicKey returns a boolean if a field has been set.
func (o *VirtualDeviceRequest) HasUserPublicKey() bool {
	if o != nil && !IsNil(o.UserPublicKey) {
		return true
	}

	return false
}

// SetUserPublicKey gets a reference to the given UserPublicKeyRequest and assigns it to the UserPublicKey field.
func (o *VirtualDeviceRequest) SetUserPublicKey(v UserPublicKeyRequest) {
	o.UserPublicKey = &v
}

// GetIpType returns the IpType field value if set, zero value otherwise.
func (o *VirtualDeviceRequest) GetIpType() string {
	if o == nil || IsNil(o.IpType) {
		var ret string
		return ret
	}
	return *o.IpType
}

// GetIpTypeOk returns a tuple with the IpType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceRequest) GetIpTypeOk() (*string, bool) {
	if o == nil || IsNil(o.IpType) {
		return nil, false
	}
	return o.IpType, true
}

// HasIpType returns a boolean if a field has been set.
func (o *VirtualDeviceRequest) HasIpType() bool {
	if o != nil && !IsNil(o.IpType) {
		return true
	}

	return false
}

// SetIpType gets a reference to the given string and assigns it to the IpType field.
func (o *VirtualDeviceRequest) SetIpType(v string) {
	o.IpType = &v
}

// GetSshInterfaceId returns the SshInterfaceId field value if set, zero value otherwise.
func (o *VirtualDeviceRequest) GetSshInterfaceId() string {
	if o == nil || IsNil(o.SshInterfaceId) {
		var ret string
		return ret
	}
	return *o.SshInterfaceId
}

// GetSshInterfaceIdOk returns a tuple with the SshInterfaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceRequest) GetSshInterfaceIdOk() (*string, bool) {
	if o == nil || IsNil(o.SshInterfaceId) {
		return nil, false
	}
	return o.SshInterfaceId, true
}

// HasSshInterfaceId returns a boolean if a field has been set.
func (o *VirtualDeviceRequest) HasSshInterfaceId() bool {
	if o != nil && !IsNil(o.SshInterfaceId) {
		return true
	}

	return false
}

// SetSshInterfaceId gets a reference to the given string and assigns it to the SshInterfaceId field.
func (o *VirtualDeviceRequest) SetSshInterfaceId(v string) {
	o.SshInterfaceId = &v
}

// GetSmartLicenseUrl returns the SmartLicenseUrl field value if set, zero value otherwise.
func (o *VirtualDeviceRequest) GetSmartLicenseUrl() string {
	if o == nil || IsNil(o.SmartLicenseUrl) {
		var ret string
		return ret
	}
	return *o.SmartLicenseUrl
}

// GetSmartLicenseUrlOk returns a tuple with the SmartLicenseUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceRequest) GetSmartLicenseUrlOk() (*string, bool) {
	if o == nil || IsNil(o.SmartLicenseUrl) {
		return nil, false
	}
	return o.SmartLicenseUrl, true
}

// HasSmartLicenseUrl returns a boolean if a field has been set.
func (o *VirtualDeviceRequest) HasSmartLicenseUrl() bool {
	if o != nil && !IsNil(o.SmartLicenseUrl) {
		return true
	}

	return false
}

// SetSmartLicenseUrl gets a reference to the given string and assigns it to the SmartLicenseUrl field.
func (o *VirtualDeviceRequest) SetSmartLicenseUrl(v string) {
	o.SmartLicenseUrl = &v
}

// GetDiverseFromDeviceUuid returns the DiverseFromDeviceUuid field value if set, zero value otherwise.
func (o *VirtualDeviceRequest) GetDiverseFromDeviceUuid() string {
	if o == nil || IsNil(o.DiverseFromDeviceUuid) {
		var ret string
		return ret
	}
	return *o.DiverseFromDeviceUuid
}

// GetDiverseFromDeviceUuidOk returns a tuple with the DiverseFromDeviceUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceRequest) GetDiverseFromDeviceUuidOk() (*string, bool) {
	if o == nil || IsNil(o.DiverseFromDeviceUuid) {
		return nil, false
	}
	return o.DiverseFromDeviceUuid, true
}

// HasDiverseFromDeviceUuid returns a boolean if a field has been set.
func (o *VirtualDeviceRequest) HasDiverseFromDeviceUuid() bool {
	if o != nil && !IsNil(o.DiverseFromDeviceUuid) {
		return true
	}

	return false
}

// SetDiverseFromDeviceUuid gets a reference to the given string and assigns it to the DiverseFromDeviceUuid field.
func (o *VirtualDeviceRequest) SetDiverseFromDeviceUuid(v string) {
	o.DiverseFromDeviceUuid = &v
}

// GetClusterDetails returns the ClusterDetails field value if set, zero value otherwise.
func (o *VirtualDeviceRequest) GetClusterDetails() ClusterConfig {
	if o == nil || IsNil(o.ClusterDetails) {
		var ret ClusterConfig
		return ret
	}
	return *o.ClusterDetails
}

// GetClusterDetailsOk returns a tuple with the ClusterDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceRequest) GetClusterDetailsOk() (*ClusterConfig, bool) {
	if o == nil || IsNil(o.ClusterDetails) {
		return nil, false
	}
	return o.ClusterDetails, true
}

// HasClusterDetails returns a boolean if a field has been set.
func (o *VirtualDeviceRequest) HasClusterDetails() bool {
	if o != nil && !IsNil(o.ClusterDetails) {
		return true
	}

	return false
}

// SetClusterDetails gets a reference to the given ClusterConfig and assigns it to the ClusterDetails field.
func (o *VirtualDeviceRequest) SetClusterDetails(v ClusterConfig) {
	o.ClusterDetails = &v
}

// GetPrimaryDeviceUuid returns the PrimaryDeviceUuid field value if set, zero value otherwise.
func (o *VirtualDeviceRequest) GetPrimaryDeviceUuid() string {
	if o == nil || IsNil(o.PrimaryDeviceUuid) {
		var ret string
		return ret
	}
	return *o.PrimaryDeviceUuid
}

// GetPrimaryDeviceUuidOk returns a tuple with the PrimaryDeviceUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceRequest) GetPrimaryDeviceUuidOk() (*string, bool) {
	if o == nil || IsNil(o.PrimaryDeviceUuid) {
		return nil, false
	}
	return o.PrimaryDeviceUuid, true
}

// HasPrimaryDeviceUuid returns a boolean if a field has been set.
func (o *VirtualDeviceRequest) HasPrimaryDeviceUuid() bool {
	if o != nil && !IsNil(o.PrimaryDeviceUuid) {
		return true
	}

	return false
}

// SetPrimaryDeviceUuid gets a reference to the given string and assigns it to the PrimaryDeviceUuid field.
func (o *VirtualDeviceRequest) SetPrimaryDeviceUuid(v string) {
	o.PrimaryDeviceUuid = &v
}

// GetConnectivity returns the Connectivity field value if set, zero value otherwise.
func (o *VirtualDeviceRequest) GetConnectivity() string {
	if o == nil || IsNil(o.Connectivity) {
		var ret string
		return ret
	}
	return *o.Connectivity
}

// GetConnectivityOk returns a tuple with the Connectivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceRequest) GetConnectivityOk() (*string, bool) {
	if o == nil || IsNil(o.Connectivity) {
		return nil, false
	}
	return o.Connectivity, true
}

// HasConnectivity returns a boolean if a field has been set.
func (o *VirtualDeviceRequest) HasConnectivity() bool {
	if o != nil && !IsNil(o.Connectivity) {
		return true
	}

	return false
}

// SetConnectivity gets a reference to the given string and assigns it to the Connectivity field.
func (o *VirtualDeviceRequest) SetConnectivity(v string) {
	o.Connectivity = &v
}

// GetChannelPartner returns the ChannelPartner field value if set, zero value otherwise.
func (o *VirtualDeviceRequest) GetChannelPartner() string {
	if o == nil || IsNil(o.ChannelPartner) {
		var ret string
		return ret
	}
	return *o.ChannelPartner
}

// GetChannelPartnerOk returns a tuple with the ChannelPartner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceRequest) GetChannelPartnerOk() (*string, bool) {
	if o == nil || IsNil(o.ChannelPartner) {
		return nil, false
	}
	return o.ChannelPartner, true
}

// HasChannelPartner returns a boolean if a field has been set.
func (o *VirtualDeviceRequest) HasChannelPartner() bool {
	if o != nil && !IsNil(o.ChannelPartner) {
		return true
	}

	return false
}

// SetChannelPartner gets a reference to the given string and assigns it to the ChannelPartner field.
func (o *VirtualDeviceRequest) SetChannelPartner(v string) {
	o.ChannelPartner = &v
}

// GetCloudInitFileId returns the CloudInitFileId field value if set, zero value otherwise.
func (o *VirtualDeviceRequest) GetCloudInitFileId() string {
	if o == nil || IsNil(o.CloudInitFileId) {
		var ret string
		return ret
	}
	return *o.CloudInitFileId
}

// GetCloudInitFileIdOk returns a tuple with the CloudInitFileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceRequest) GetCloudInitFileIdOk() (*string, bool) {
	if o == nil || IsNil(o.CloudInitFileId) {
		return nil, false
	}
	return o.CloudInitFileId, true
}

// HasCloudInitFileId returns a boolean if a field has been set.
func (o *VirtualDeviceRequest) HasCloudInitFileId() bool {
	if o != nil && !IsNil(o.CloudInitFileId) {
		return true
	}

	return false
}

// SetCloudInitFileId gets a reference to the given string and assigns it to the CloudInitFileId field.
func (o *VirtualDeviceRequest) SetCloudInitFileId(v string) {
	o.CloudInitFileId = &v
}

// GetPurchaseOrderNumber returns the PurchaseOrderNumber field value if set, zero value otherwise.
func (o *VirtualDeviceRequest) GetPurchaseOrderNumber() string {
	if o == nil || IsNil(o.PurchaseOrderNumber) {
		var ret string
		return ret
	}
	return *o.PurchaseOrderNumber
}

// GetPurchaseOrderNumberOk returns a tuple with the PurchaseOrderNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceRequest) GetPurchaseOrderNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PurchaseOrderNumber) {
		return nil, false
	}
	return o.PurchaseOrderNumber, true
}

// HasPurchaseOrderNumber returns a boolean if a field has been set.
func (o *VirtualDeviceRequest) HasPurchaseOrderNumber() bool {
	if o != nil && !IsNil(o.PurchaseOrderNumber) {
		return true
	}

	return false
}

// SetPurchaseOrderNumber gets a reference to the given string and assigns it to the PurchaseOrderNumber field.
func (o *VirtualDeviceRequest) SetPurchaseOrderNumber(v string) {
	o.PurchaseOrderNumber = &v
}

// GetOrderReference returns the OrderReference field value if set, zero value otherwise.
func (o *VirtualDeviceRequest) GetOrderReference() string {
	if o == nil || IsNil(o.OrderReference) {
		var ret string
		return ret
	}
	return *o.OrderReference
}

// GetOrderReferenceOk returns a tuple with the OrderReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceRequest) GetOrderReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.OrderReference) {
		return nil, false
	}
	return o.OrderReference, true
}

// HasOrderReference returns a boolean if a field has been set.
func (o *VirtualDeviceRequest) HasOrderReference() bool {
	if o != nil && !IsNil(o.OrderReference) {
		return true
	}

	return false
}

// SetOrderReference gets a reference to the given string and assigns it to the OrderReference field.
func (o *VirtualDeviceRequest) SetOrderReference(v string) {
	o.OrderReference = &v
}

// GetSecondary returns the Secondary field value if set, zero value otherwise.
func (o *VirtualDeviceRequest) GetSecondary() VirtualDevicHARequest {
	if o == nil || IsNil(o.Secondary) {
		var ret VirtualDevicHARequest
		return ret
	}
	return *o.Secondary
}

// GetSecondaryOk returns a tuple with the Secondary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceRequest) GetSecondaryOk() (*VirtualDevicHARequest, bool) {
	if o == nil || IsNil(o.Secondary) {
		return nil, false
	}
	return o.Secondary, true
}

// HasSecondary returns a boolean if a field has been set.
func (o *VirtualDeviceRequest) HasSecondary() bool {
	if o != nil && !IsNil(o.Secondary) {
		return true
	}

	return false
}

// SetSecondary gets a reference to the given VirtualDevicHARequest and assigns it to the Secondary field.
func (o *VirtualDeviceRequest) SetSecondary(v VirtualDevicHARequest) {
	o.Secondary = &v
}

func (o VirtualDeviceRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VirtualDeviceRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountNumber) {
		toSerialize["accountNumber"] = o.AccountNumber
	}
	if !IsNil(o.AccountReferenceId) {
		toSerialize["accountReferenceId"] = o.AccountReferenceId
	}
	if !IsNil(o.ProjectId) {
		toSerialize["projectId"] = o.ProjectId
	}
	toSerialize["version"] = o.Version
	toSerialize["deviceTypeCode"] = o.DeviceTypeCode
	if !IsNil(o.HostNamePrefix) {
		toSerialize["hostNamePrefix"] = o.HostNamePrefix
	}
	toSerialize["agreeOrderTerms"] = o.AgreeOrderTerms
	toSerialize["licenseMode"] = o.LicenseMode
	if !IsNil(o.LicenseCategory) {
		toSerialize["licenseCategory"] = o.LicenseCategory
	}
	if !IsNil(o.LicenseFileId) {
		toSerialize["licenseFileId"] = o.LicenseFileId
	}
	if !IsNil(o.LicenseToken) {
		toSerialize["licenseToken"] = o.LicenseToken
	}
	if !IsNil(o.Day0TextFileId) {
		toSerialize["day0TextFileId"] = o.Day0TextFileId
	}
	if !IsNil(o.Termlength) {
		toSerialize["termlength"] = o.Termlength
	}
	toSerialize["metroCode"] = o.MetroCode
	if !IsNil(o.PackageCode) {
		toSerialize["packageCode"] = o.PackageCode
	}
	if !IsNil(o.SshUsers) {
		toSerialize["sshUsers"] = o.SshUsers
	}
	if !IsNil(o.Throughput) {
		toSerialize["throughput"] = o.Throughput
	}
	if !IsNil(o.ThroughputUnit) {
		toSerialize["throughputUnit"] = o.ThroughputUnit
	}
	if !IsNil(o.Tier) {
		toSerialize["tier"] = o.Tier
	}
	toSerialize["virtualDeviceName"] = o.VirtualDeviceName
	if !IsNil(o.OrderingContact) {
		toSerialize["orderingContact"] = o.OrderingContact
	}
	toSerialize["notifications"] = o.Notifications
	if !IsNil(o.AclDetails) {
		toSerialize["aclDetails"] = o.AclDetails
	}
	if !IsNil(o.AdditionalBandwidth) {
		toSerialize["additionalBandwidth"] = o.AdditionalBandwidth
	}
	toSerialize["deviceManagementType"] = o.DeviceManagementType
	toSerialize["core"] = o.Core
	if !IsNil(o.InterfaceCount) {
		toSerialize["interfaceCount"] = o.InterfaceCount
	}
	if !IsNil(o.SiteId) {
		toSerialize["siteId"] = o.SiteId
	}
	if !IsNil(o.SystemIpAddress) {
		toSerialize["systemIpAddress"] = o.SystemIpAddress
	}
	if !IsNil(o.VendorConfig) {
		toSerialize["vendorConfig"] = o.VendorConfig
	}
	if !IsNil(o.UserPublicKey) {
		toSerialize["userPublicKey"] = o.UserPublicKey
	}
	if !IsNil(o.IpType) {
		toSerialize["ipType"] = o.IpType
	}
	if !IsNil(o.SshInterfaceId) {
		toSerialize["sshInterfaceId"] = o.SshInterfaceId
	}
	if !IsNil(o.SmartLicenseUrl) {
		toSerialize["smartLicenseUrl"] = o.SmartLicenseUrl
	}
	if !IsNil(o.DiverseFromDeviceUuid) {
		toSerialize["diverseFromDeviceUuid"] = o.DiverseFromDeviceUuid
	}
	if !IsNil(o.ClusterDetails) {
		toSerialize["clusterDetails"] = o.ClusterDetails
	}
	if !IsNil(o.PrimaryDeviceUuid) {
		toSerialize["primaryDeviceUuid"] = o.PrimaryDeviceUuid
	}
	if !IsNil(o.Connectivity) {
		toSerialize["connectivity"] = o.Connectivity
	}
	if !IsNil(o.ChannelPartner) {
		toSerialize["channelPartner"] = o.ChannelPartner
	}
	if !IsNil(o.CloudInitFileId) {
		toSerialize["cloudInitFileId"] = o.CloudInitFileId
	}
	if !IsNil(o.PurchaseOrderNumber) {
		toSerialize["purchaseOrderNumber"] = o.PurchaseOrderNumber
	}
	if !IsNil(o.OrderReference) {
		toSerialize["orderReference"] = o.OrderReference
	}
	if !IsNil(o.Secondary) {
		toSerialize["secondary"] = o.Secondary
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VirtualDeviceRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"version",
		"deviceTypeCode",
		"agreeOrderTerms",
		"licenseMode",
		"metroCode",
		"virtualDeviceName",
		"notifications",
		"deviceManagementType",
		"core",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVirtualDeviceRequest := _VirtualDeviceRequest{}

	err = json.Unmarshal(data, &varVirtualDeviceRequest)

	if err != nil {
		return err
	}

	*o = VirtualDeviceRequest(varVirtualDeviceRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "accountNumber")
		delete(additionalProperties, "accountReferenceId")
		delete(additionalProperties, "projectId")
		delete(additionalProperties, "version")
		delete(additionalProperties, "deviceTypeCode")
		delete(additionalProperties, "hostNamePrefix")
		delete(additionalProperties, "agreeOrderTerms")
		delete(additionalProperties, "licenseMode")
		delete(additionalProperties, "licenseCategory")
		delete(additionalProperties, "licenseFileId")
		delete(additionalProperties, "licenseToken")
		delete(additionalProperties, "day0TextFileId")
		delete(additionalProperties, "termlength")
		delete(additionalProperties, "metroCode")
		delete(additionalProperties, "packageCode")
		delete(additionalProperties, "sshUsers")
		delete(additionalProperties, "throughput")
		delete(additionalProperties, "throughputUnit")
		delete(additionalProperties, "tier")
		delete(additionalProperties, "virtualDeviceName")
		delete(additionalProperties, "orderingContact")
		delete(additionalProperties, "notifications")
		delete(additionalProperties, "aclDetails")
		delete(additionalProperties, "additionalBandwidth")
		delete(additionalProperties, "deviceManagementType")
		delete(additionalProperties, "core")
		delete(additionalProperties, "interfaceCount")
		delete(additionalProperties, "siteId")
		delete(additionalProperties, "systemIpAddress")
		delete(additionalProperties, "vendorConfig")
		delete(additionalProperties, "userPublicKey")
		delete(additionalProperties, "ipType")
		delete(additionalProperties, "sshInterfaceId")
		delete(additionalProperties, "smartLicenseUrl")
		delete(additionalProperties, "diverseFromDeviceUuid")
		delete(additionalProperties, "clusterDetails")
		delete(additionalProperties, "primaryDeviceUuid")
		delete(additionalProperties, "connectivity")
		delete(additionalProperties, "channelPartner")
		delete(additionalProperties, "cloudInitFileId")
		delete(additionalProperties, "purchaseOrderNumber")
		delete(additionalProperties, "orderReference")
		delete(additionalProperties, "secondary")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVirtualDeviceRequest struct {
	value *VirtualDeviceRequest
	isSet bool
}

func (v NullableVirtualDeviceRequest) Get() *VirtualDeviceRequest {
	return v.value
}

func (v *NullableVirtualDeviceRequest) Set(val *VirtualDeviceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualDeviceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualDeviceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualDeviceRequest(val *VirtualDeviceRequest) *NullableVirtualDeviceRequest {
	return &NullableVirtualDeviceRequest{value: val, isSet: true}
}

func (v NullableVirtualDeviceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualDeviceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
