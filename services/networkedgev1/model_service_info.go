/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the ServiceInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceInfo{}

// ServiceInfo struct for ServiceInfo
type ServiceInfo struct {
	// The unique ID of the service.
	ServiceId *string `json:"serviceId,omitempty"`
	// The name of the service.
	ServiceName *string `json:"serviceName,omitempty"`
	// The operation you must perform to restore the backup successfully. UNSUPPORTED- You cannot restore this backup. DELETE- You need to delete this service to restore the backup. NONE- You do not need to change anything to restore the backup.
	OperationNeededToPerform *string `json:"operationNeededToPerform,omitempty"`
	AdditionalProperties     map[string]interface{}
}

type _ServiceInfo ServiceInfo

// NewServiceInfo instantiates a new ServiceInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceInfo() *ServiceInfo {
	this := ServiceInfo{}
	return &this
}

// NewServiceInfoWithDefaults instantiates a new ServiceInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceInfoWithDefaults() *ServiceInfo {
	this := ServiceInfo{}
	return &this
}

// GetServiceId returns the ServiceId field value if set, zero value otherwise.
func (o *ServiceInfo) GetServiceId() string {
	if o == nil || IsNil(o.ServiceId) {
		var ret string
		return ret
	}
	return *o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceInfo) GetServiceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceId) {
		return nil, false
	}
	return o.ServiceId, true
}

// HasServiceId returns a boolean if a field has been set.
func (o *ServiceInfo) HasServiceId() bool {
	if o != nil && !IsNil(o.ServiceId) {
		return true
	}

	return false
}

// SetServiceId gets a reference to the given string and assigns it to the ServiceId field.
func (o *ServiceInfo) SetServiceId(v string) {
	o.ServiceId = &v
}

// GetServiceName returns the ServiceName field value if set, zero value otherwise.
func (o *ServiceInfo) GetServiceName() string {
	if o == nil || IsNil(o.ServiceName) {
		var ret string
		return ret
	}
	return *o.ServiceName
}

// GetServiceNameOk returns a tuple with the ServiceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceInfo) GetServiceNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceName) {
		return nil, false
	}
	return o.ServiceName, true
}

// HasServiceName returns a boolean if a field has been set.
func (o *ServiceInfo) HasServiceName() bool {
	if o != nil && !IsNil(o.ServiceName) {
		return true
	}

	return false
}

// SetServiceName gets a reference to the given string and assigns it to the ServiceName field.
func (o *ServiceInfo) SetServiceName(v string) {
	o.ServiceName = &v
}

// GetOperationNeededToPerform returns the OperationNeededToPerform field value if set, zero value otherwise.
func (o *ServiceInfo) GetOperationNeededToPerform() string {
	if o == nil || IsNil(o.OperationNeededToPerform) {
		var ret string
		return ret
	}
	return *o.OperationNeededToPerform
}

// GetOperationNeededToPerformOk returns a tuple with the OperationNeededToPerform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceInfo) GetOperationNeededToPerformOk() (*string, bool) {
	if o == nil || IsNil(o.OperationNeededToPerform) {
		return nil, false
	}
	return o.OperationNeededToPerform, true
}

// HasOperationNeededToPerform returns a boolean if a field has been set.
func (o *ServiceInfo) HasOperationNeededToPerform() bool {
	if o != nil && !IsNil(o.OperationNeededToPerform) {
		return true
	}

	return false
}

// SetOperationNeededToPerform gets a reference to the given string and assigns it to the OperationNeededToPerform field.
func (o *ServiceInfo) SetOperationNeededToPerform(v string) {
	o.OperationNeededToPerform = &v
}

func (o ServiceInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ServiceId) {
		toSerialize["serviceId"] = o.ServiceId
	}
	if !IsNil(o.ServiceName) {
		toSerialize["serviceName"] = o.ServiceName
	}
	if !IsNil(o.OperationNeededToPerform) {
		toSerialize["operationNeededToPerform"] = o.OperationNeededToPerform
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServiceInfo) UnmarshalJSON(data []byte) (err error) {
	varServiceInfo := _ServiceInfo{}

	err = json.Unmarshal(data, &varServiceInfo)

	if err != nil {
		return err
	}

	*o = ServiceInfo(varServiceInfo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "serviceId")
		delete(additionalProperties, "serviceName")
		delete(additionalProperties, "operationNeededToPerform")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServiceInfo struct {
	value *ServiceInfo
	isSet bool
}

func (v NullableServiceInfo) Get() *ServiceInfo {
	return v.value
}

func (v *NullableServiceInfo) Set(val *ServiceInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceInfo(val *ServiceInfo) *NullableServiceInfo {
	return &NullableServiceInfo{value: val, isSet: true}
}

func (v NullableServiceInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
