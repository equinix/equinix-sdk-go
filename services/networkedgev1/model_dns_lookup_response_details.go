/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the DNSLookupResponseDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DNSLookupResponseDetails{}

// DNSLookupResponseDetails struct for DNSLookupResponseDetails
type DNSLookupResponseDetails struct {
	// True or false
	Cdn *bool `json:"cdn,omitempty"`
	// Domain names
	Ips                  []string `json:"ips,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DNSLookupResponseDetails DNSLookupResponseDetails

// NewDNSLookupResponseDetails instantiates a new DNSLookupResponseDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDNSLookupResponseDetails() *DNSLookupResponseDetails {
	this := DNSLookupResponseDetails{}
	return &this
}

// NewDNSLookupResponseDetailsWithDefaults instantiates a new DNSLookupResponseDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDNSLookupResponseDetailsWithDefaults() *DNSLookupResponseDetails {
	this := DNSLookupResponseDetails{}
	return &this
}

// GetCdn returns the Cdn field value if set, zero value otherwise.
func (o *DNSLookupResponseDetails) GetCdn() bool {
	if o == nil || IsNil(o.Cdn) {
		var ret bool
		return ret
	}
	return *o.Cdn
}

// GetCdnOk returns a tuple with the Cdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSLookupResponseDetails) GetCdnOk() (*bool, bool) {
	if o == nil || IsNil(o.Cdn) {
		return nil, false
	}
	return o.Cdn, true
}

// HasCdn returns a boolean if a field has been set.
func (o *DNSLookupResponseDetails) HasCdn() bool {
	if o != nil && !IsNil(o.Cdn) {
		return true
	}

	return false
}

// SetCdn gets a reference to the given bool and assigns it to the Cdn field.
func (o *DNSLookupResponseDetails) SetCdn(v bool) {
	o.Cdn = &v
}

// GetIps returns the Ips field value if set, zero value otherwise.
func (o *DNSLookupResponseDetails) GetIps() []string {
	if o == nil || IsNil(o.Ips) {
		var ret []string
		return ret
	}
	return o.Ips
}

// GetIpsOk returns a tuple with the Ips field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSLookupResponseDetails) GetIpsOk() ([]string, bool) {
	if o == nil || IsNil(o.Ips) {
		return nil, false
	}
	return o.Ips, true
}

// HasIps returns a boolean if a field has been set.
func (o *DNSLookupResponseDetails) HasIps() bool {
	if o != nil && !IsNil(o.Ips) {
		return true
	}

	return false
}

// SetIps gets a reference to the given []string and assigns it to the Ips field.
func (o *DNSLookupResponseDetails) SetIps(v []string) {
	o.Ips = v
}

func (o DNSLookupResponseDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DNSLookupResponseDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cdn) {
		toSerialize["cdn"] = o.Cdn
	}
	if !IsNil(o.Ips) {
		toSerialize["ips"] = o.Ips
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DNSLookupResponseDetails) UnmarshalJSON(data []byte) (err error) {
	varDNSLookupResponseDetails := _DNSLookupResponseDetails{}

	err = json.Unmarshal(data, &varDNSLookupResponseDetails)

	if err != nil {
		return err
	}

	*o = DNSLookupResponseDetails(varDNSLookupResponseDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cdn")
		delete(additionalProperties, "ips")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDNSLookupResponseDetails struct {
	value *DNSLookupResponseDetails
	isSet bool
}

func (v NullableDNSLookupResponseDetails) Get() *DNSLookupResponseDetails {
	return v.value
}

func (v *NullableDNSLookupResponseDetails) Set(val *DNSLookupResponseDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableDNSLookupResponseDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableDNSLookupResponseDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDNSLookupResponseDetails(val *DNSLookupResponseDetails) *NullableDNSLookupResponseDetails {
	return &NullableDNSLookupResponseDetails{value: val, isSet: true}
}

func (v NullableDNSLookupResponseDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDNSLookupResponseDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
