/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
	"fmt"
)

// checks if the UpdateDeviceACLTemplateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateDeviceACLTemplateRequest{}

// UpdateDeviceACLTemplateRequest struct for UpdateDeviceACLTemplateRequest
type UpdateDeviceACLTemplateRequest struct {
	// An array of ACLs.
	AclDetails           []ACLDetails `json:"aclDetails"`
	AdditionalProperties map[string]interface{}
}

type _UpdateDeviceACLTemplateRequest UpdateDeviceACLTemplateRequest

// NewUpdateDeviceACLTemplateRequest instantiates a new UpdateDeviceACLTemplateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateDeviceACLTemplateRequest(aclDetails []ACLDetails) *UpdateDeviceACLTemplateRequest {
	this := UpdateDeviceACLTemplateRequest{}
	this.AclDetails = aclDetails
	return &this
}

// NewUpdateDeviceACLTemplateRequestWithDefaults instantiates a new UpdateDeviceACLTemplateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateDeviceACLTemplateRequestWithDefaults() *UpdateDeviceACLTemplateRequest {
	this := UpdateDeviceACLTemplateRequest{}
	return &this
}

// GetAclDetails returns the AclDetails field value
func (o *UpdateDeviceACLTemplateRequest) GetAclDetails() []ACLDetails {
	if o == nil {
		var ret []ACLDetails
		return ret
	}

	return o.AclDetails
}

// GetAclDetailsOk returns a tuple with the AclDetails field value
// and a boolean to check if the value has been set.
func (o *UpdateDeviceACLTemplateRequest) GetAclDetailsOk() ([]ACLDetails, bool) {
	if o == nil {
		return nil, false
	}
	return o.AclDetails, true
}

// SetAclDetails sets field value
func (o *UpdateDeviceACLTemplateRequest) SetAclDetails(v []ACLDetails) {
	o.AclDetails = v
}

func (o UpdateDeviceACLTemplateRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateDeviceACLTemplateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["aclDetails"] = o.AclDetails

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateDeviceACLTemplateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"aclDetails",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateDeviceACLTemplateRequest := _UpdateDeviceACLTemplateRequest{}

	err = json.Unmarshal(data, &varUpdateDeviceACLTemplateRequest)

	if err != nil {
		return err
	}

	*o = UpdateDeviceACLTemplateRequest(varUpdateDeviceACLTemplateRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "aclDetails")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateDeviceACLTemplateRequest struct {
	value *UpdateDeviceACLTemplateRequest
	isSet bool
}

func (v NullableUpdateDeviceACLTemplateRequest) Get() *UpdateDeviceACLTemplateRequest {
	return v.value
}

func (v *NullableUpdateDeviceACLTemplateRequest) Set(val *UpdateDeviceACLTemplateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateDeviceACLTemplateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateDeviceACLTemplateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateDeviceACLTemplateRequest(val *UpdateDeviceACLTemplateRequest) *NullableUpdateDeviceACLTemplateRequest {
	return &NullableUpdateDeviceACLTemplateRequest{value: val, isSet: true}
}

func (v NullableUpdateDeviceACLTemplateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateDeviceACLTemplateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
