/*
Network Edge APIs

Testing VirtualDeviceApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package networkedgev1

import (
	"context"
	"testing"

	openapiclient "github.com/equinix/equinix-sdk-go/services/networkedgev1"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_networkedgev1_VirtualDeviceApiService(t *testing.T) {
	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test VirtualDeviceApiService CreateVirtualDeviceUsingPOST", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.VirtualDeviceApi.CreateVirtualDeviceUsingPOST(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test VirtualDeviceApiService DeleteVRouterUsingDELETE", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var uuid string

		httpRes, err := apiClient.VirtualDeviceApi.DeleteVRouterUsingDELETE(context.Background(), uuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test VirtualDeviceApiService GetDeviceReloadUsingGET1", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var virtualDeviceUUID string

		resp, httpRes, err := apiClient.VirtualDeviceApi.GetDeviceReloadUsingGET1(context.Background(), virtualDeviceUUID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test VirtualDeviceApiService GetDeviceUpgradeUsingGET1", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var virtualDeviceUuid string

		resp, httpRes, err := apiClient.VirtualDeviceApi.GetDeviceUpgradeUsingGET1(context.Background(), virtualDeviceUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test VirtualDeviceApiService GetInterfaceStatisticsUsingGET", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var virtualDeviceUuid string
		var interfaceId string

		resp, httpRes, err := apiClient.VirtualDeviceApi.GetInterfaceStatisticsUsingGET(context.Background(), virtualDeviceUuid, interfaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test VirtualDeviceApiService GetVirtualDeviceInterfacesUsingGET", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var uuid string

		resp, httpRes, err := apiClient.VirtualDeviceApi.GetVirtualDeviceInterfacesUsingGET(context.Background(), uuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test VirtualDeviceApiService GetVirtualDeviceUsingGET", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var uuid string

		resp, httpRes, err := apiClient.VirtualDeviceApi.GetVirtualDeviceUsingGET(context.Background(), uuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test VirtualDeviceApiService GetVirtualDevicesUsingGET1", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.VirtualDeviceApi.GetVirtualDevicesUsingGET1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test VirtualDeviceApiService PingDeviceUsingGET", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var uuid string

		httpRes, err := apiClient.VirtualDeviceApi.PingDeviceUsingGET(context.Background(), uuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test VirtualDeviceApiService PostDeviceReloadUsingPOST1", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var virtualDeviceUUID string

		httpRes, err := apiClient.VirtualDeviceApi.PostDeviceReloadUsingPOST1(context.Background(), virtualDeviceUUID).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test VirtualDeviceApiService UpdateAdditionalBandwidth", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var uuid string

		httpRes, err := apiClient.VirtualDeviceApi.UpdateAdditionalBandwidth(context.Background(), uuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test VirtualDeviceApiService UpdateVirtualDeviceUsingPATCH1", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var uuid string

		httpRes, err := apiClient.VirtualDeviceApi.UpdateVirtualDeviceUsingPATCH1(context.Background(), uuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test VirtualDeviceApiService UpdateVirtualDeviceUsingPUT", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var uuid string

		httpRes, err := apiClient.VirtualDeviceApi.UpdateVirtualDeviceUsingPUT(context.Background(), uuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})
}
