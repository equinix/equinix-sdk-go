/*
Network Edge APIs

Testing DeviceBackupRestoreApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package networkedgev1

import (
	"context"
	"testing"

	openapiclient "github.com/equinix/equinix-sdk-go/services/networkedgev1"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_networkedgev1_DeviceBackupRestoreApiService(t *testing.T) {
	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DeviceBackupRestoreApiService CheckDetailsOfBackupsUsingGET", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var uuid string

		resp, httpRes, err := apiClient.DeviceBackupRestoreApi.CheckDetailsOfBackupsUsingGET(context.Background(), uuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test DeviceBackupRestoreApiService CreateDeviceBackupUsingPOST", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DeviceBackupRestoreApi.CreateDeviceBackupUsingPOST(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test DeviceBackupRestoreApiService DeleteDeviceBackupUsingDELETE", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var uuid string

		httpRes, err := apiClient.DeviceBackupRestoreApi.DeleteDeviceBackupUsingDELETE(context.Background(), uuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test DeviceBackupRestoreApiService DownloadDetailsOfBackupsUsingGET", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var uuid string

		resp, httpRes, err := apiClient.DeviceBackupRestoreApi.DownloadDetailsOfBackupsUsingGET(context.Background(), uuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test DeviceBackupRestoreApiService GetDetailsOfBackupsUsingGET", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var uuid string

		resp, httpRes, err := apiClient.DeviceBackupRestoreApi.GetDetailsOfBackupsUsingGET(context.Background(), uuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test DeviceBackupRestoreApiService GetDeviceBackupsUsingGET", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DeviceBackupRestoreApi.GetDeviceBackupsUsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test DeviceBackupRestoreApiService RestoreDeviceBackupUsingPATCH", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var uuid string

		httpRes, err := apiClient.DeviceBackupRestoreApi.RestoreDeviceBackupUsingPATCH(context.Background(), uuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test DeviceBackupRestoreApiService UpdateDeviceBackupUsingPATCH", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var uuid string

		httpRes, err := apiClient.DeviceBackupRestoreApi.UpdateDeviceBackupUsingPATCH(context.Background(), uuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})
}
