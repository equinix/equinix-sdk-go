/*
Network Edge APIs

Testing SetupApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package networkedgev1

import (
	"context"
	"testing"

	openapiclient "github.com/equinix/equinix-sdk-go/services/networkedgev1"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_networkedgev1_SetupApiService(t *testing.T) {
	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SetupApiService GetAccountsWithStatusUsingGET", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var metro string

		resp, httpRes, err := apiClient.SetupApi.GetAccountsWithStatusUsingGET(context.Background(), metro).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SetupApiService GetAgreementStatusUsingGET", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SetupApi.GetAgreementStatusUsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SetupApiService GetAllowedInterfacesUsingGET", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var deviceType string

		resp, httpRes, err := apiClient.SetupApi.GetAllowedInterfacesUsingGET(context.Background(), deviceType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SetupApiService GetMetrosUsingGET", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SetupApi.GetMetrosUsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SetupApiService GetNotificationsUsingGET", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SetupApi.GetNotificationsUsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SetupApiService GetOrderSummaryUsingGET", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.SetupApi.GetOrderSummaryUsingGET(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SetupApiService GetOrderTermsUsingGET", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SetupApi.GetOrderTermsUsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SetupApiService GetPublicKeysUsingGET", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SetupApi.GetPublicKeysUsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SetupApiService GetVendorTermsUsingGET", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SetupApi.GetVendorTermsUsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SetupApiService GetVirtualDevicesUsingGET", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SetupApi.GetVirtualDevicesUsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SetupApiService PostPublicKeyUsingPOST", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.SetupApi.PostPublicKeyUsingPOST(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SetupApiService RetrievePriceUsingGET", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SetupApi.RetrievePriceUsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SetupApiService SendAgreementUsingPOST1", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SetupApi.SendAgreementUsingPOST1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SetupApiService UploadFileUsingPOST", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SetupApi.UploadFileUsingPOST(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})
}
