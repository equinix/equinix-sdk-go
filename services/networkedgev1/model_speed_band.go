/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the SpeedBand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpeedBand{}

// SpeedBand struct for SpeedBand
type SpeedBand struct {
	Speed                *float64 `json:"speed,omitempty"`
	Unit                 *string  `json:"unit,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SpeedBand SpeedBand

// NewSpeedBand instantiates a new SpeedBand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpeedBand() *SpeedBand {
	this := SpeedBand{}
	return &this
}

// NewSpeedBandWithDefaults instantiates a new SpeedBand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpeedBandWithDefaults() *SpeedBand {
	this := SpeedBand{}
	return &this
}

// GetSpeed returns the Speed field value if set, zero value otherwise.
func (o *SpeedBand) GetSpeed() float64 {
	if o == nil || IsNil(o.Speed) {
		var ret float64
		return ret
	}
	return *o.Speed
}

// GetSpeedOk returns a tuple with the Speed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpeedBand) GetSpeedOk() (*float64, bool) {
	if o == nil || IsNil(o.Speed) {
		return nil, false
	}
	return o.Speed, true
}

// HasSpeed returns a boolean if a field has been set.
func (o *SpeedBand) HasSpeed() bool {
	if o != nil && !IsNil(o.Speed) {
		return true
	}

	return false
}

// SetSpeed gets a reference to the given float64 and assigns it to the Speed field.
func (o *SpeedBand) SetSpeed(v float64) {
	o.Speed = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *SpeedBand) GetUnit() string {
	if o == nil || IsNil(o.Unit) {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpeedBand) GetUnitOk() (*string, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *SpeedBand) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *SpeedBand) SetUnit(v string) {
	o.Unit = &v
}

func (o SpeedBand) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpeedBand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Speed) {
		toSerialize["speed"] = o.Speed
	}
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SpeedBand) UnmarshalJSON(data []byte) (err error) {
	varSpeedBand := _SpeedBand{}

	err = json.Unmarshal(data, &varSpeedBand)

	if err != nil {
		return err
	}

	*o = SpeedBand(varSpeedBand)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "speed")
		delete(additionalProperties, "unit")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSpeedBand struct {
	value *SpeedBand
	isSet bool
}

func (v NullableSpeedBand) Get() *SpeedBand {
	return v.value
}

func (v *NullableSpeedBand) Set(val *SpeedBand) {
	v.value = val
	v.isSet = true
}

func (v NullableSpeedBand) IsSet() bool {
	return v.isSet
}

func (v *NullableSpeedBand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpeedBand(val *SpeedBand) *NullableSpeedBand {
	return &NullableSpeedBand{value: val, isSet: true}
}

func (v NullableSpeedBand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpeedBand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
