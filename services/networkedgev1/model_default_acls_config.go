/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the DefaultAclsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DefaultAclsConfig{}

// DefaultAclsConfig struct for DefaultAclsConfig
type DefaultAclsConfig struct {
	DnsServers           []string `json:"dnsServers,omitempty"`
	NtpServers           []string `json:"ntpServers,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DefaultAclsConfig DefaultAclsConfig

// NewDefaultAclsConfig instantiates a new DefaultAclsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDefaultAclsConfig() *DefaultAclsConfig {
	this := DefaultAclsConfig{}
	return &this
}

// NewDefaultAclsConfigWithDefaults instantiates a new DefaultAclsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDefaultAclsConfigWithDefaults() *DefaultAclsConfig {
	this := DefaultAclsConfig{}
	return &this
}

// GetDnsServers returns the DnsServers field value if set, zero value otherwise.
func (o *DefaultAclsConfig) GetDnsServers() []string {
	if o == nil || IsNil(o.DnsServers) {
		var ret []string
		return ret
	}
	return o.DnsServers
}

// GetDnsServersOk returns a tuple with the DnsServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultAclsConfig) GetDnsServersOk() ([]string, bool) {
	if o == nil || IsNil(o.DnsServers) {
		return nil, false
	}
	return o.DnsServers, true
}

// HasDnsServers returns a boolean if a field has been set.
func (o *DefaultAclsConfig) HasDnsServers() bool {
	if o != nil && !IsNil(o.DnsServers) {
		return true
	}

	return false
}

// SetDnsServers gets a reference to the given []string and assigns it to the DnsServers field.
func (o *DefaultAclsConfig) SetDnsServers(v []string) {
	o.DnsServers = v
}

// GetNtpServers returns the NtpServers field value if set, zero value otherwise.
func (o *DefaultAclsConfig) GetNtpServers() []string {
	if o == nil || IsNil(o.NtpServers) {
		var ret []string
		return ret
	}
	return o.NtpServers
}

// GetNtpServersOk returns a tuple with the NtpServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultAclsConfig) GetNtpServersOk() ([]string, bool) {
	if o == nil || IsNil(o.NtpServers) {
		return nil, false
	}
	return o.NtpServers, true
}

// HasNtpServers returns a boolean if a field has been set.
func (o *DefaultAclsConfig) HasNtpServers() bool {
	if o != nil && !IsNil(o.NtpServers) {
		return true
	}

	return false
}

// SetNtpServers gets a reference to the given []string and assigns it to the NtpServers field.
func (o *DefaultAclsConfig) SetNtpServers(v []string) {
	o.NtpServers = v
}

func (o DefaultAclsConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DefaultAclsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DnsServers) {
		toSerialize["dnsServers"] = o.DnsServers
	}
	if !IsNil(o.NtpServers) {
		toSerialize["ntpServers"] = o.NtpServers
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DefaultAclsConfig) UnmarshalJSON(data []byte) (err error) {
	varDefaultAclsConfig := _DefaultAclsConfig{}

	err = json.Unmarshal(data, &varDefaultAclsConfig)

	if err != nil {
		return err
	}

	*o = DefaultAclsConfig(varDefaultAclsConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "dnsServers")
		delete(additionalProperties, "ntpServers")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDefaultAclsConfig struct {
	value *DefaultAclsConfig
	isSet bool
}

func (v NullableDefaultAclsConfig) Get() *DefaultAclsConfig {
	return v.value
}

func (v *NullableDefaultAclsConfig) Set(val *DefaultAclsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableDefaultAclsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableDefaultAclsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefaultAclsConfig(val *DefaultAclsConfig) *NullableDefaultAclsConfig {
	return &NullableDefaultAclsConfig{value: val, isSet: true}
}

func (v NullableDefaultAclsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefaultAclsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
