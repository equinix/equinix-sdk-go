/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the LicenseOptionsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LicenseOptionsConfig{}

// LicenseOptionsConfig struct for LicenseOptionsConfig
type LicenseOptionsConfig struct {
	// The type of the license.
	Type *string `json:"type,omitempty"`
	// The name of the license.
	Name *string `json:"name,omitempty"`
	// Whether you can upload a license file for cluster devices.
	FileUploadSupportedCluster *bool         `json:"fileUploadSupportedCluster,omitempty"`
	Cores                      []CoresConfig `json:"cores,omitempty"`
	AdditionalProperties       map[string]interface{}
}

type _LicenseOptionsConfig LicenseOptionsConfig

// NewLicenseOptionsConfig instantiates a new LicenseOptionsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicenseOptionsConfig() *LicenseOptionsConfig {
	this := LicenseOptionsConfig{}
	return &this
}

// NewLicenseOptionsConfigWithDefaults instantiates a new LicenseOptionsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseOptionsConfigWithDefaults() *LicenseOptionsConfig {
	this := LicenseOptionsConfig{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *LicenseOptionsConfig) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseOptionsConfig) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *LicenseOptionsConfig) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *LicenseOptionsConfig) SetType(v string) {
	o.Type = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *LicenseOptionsConfig) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseOptionsConfig) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *LicenseOptionsConfig) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *LicenseOptionsConfig) SetName(v string) {
	o.Name = &v
}

// GetFileUploadSupportedCluster returns the FileUploadSupportedCluster field value if set, zero value otherwise.
func (o *LicenseOptionsConfig) GetFileUploadSupportedCluster() bool {
	if o == nil || IsNil(o.FileUploadSupportedCluster) {
		var ret bool
		return ret
	}
	return *o.FileUploadSupportedCluster
}

// GetFileUploadSupportedClusterOk returns a tuple with the FileUploadSupportedCluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseOptionsConfig) GetFileUploadSupportedClusterOk() (*bool, bool) {
	if o == nil || IsNil(o.FileUploadSupportedCluster) {
		return nil, false
	}
	return o.FileUploadSupportedCluster, true
}

// HasFileUploadSupportedCluster returns a boolean if a field has been set.
func (o *LicenseOptionsConfig) HasFileUploadSupportedCluster() bool {
	if o != nil && !IsNil(o.FileUploadSupportedCluster) {
		return true
	}

	return false
}

// SetFileUploadSupportedCluster gets a reference to the given bool and assigns it to the FileUploadSupportedCluster field.
func (o *LicenseOptionsConfig) SetFileUploadSupportedCluster(v bool) {
	o.FileUploadSupportedCluster = &v
}

// GetCores returns the Cores field value if set, zero value otherwise.
func (o *LicenseOptionsConfig) GetCores() []CoresConfig {
	if o == nil || IsNil(o.Cores) {
		var ret []CoresConfig
		return ret
	}
	return o.Cores
}

// GetCoresOk returns a tuple with the Cores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseOptionsConfig) GetCoresOk() ([]CoresConfig, bool) {
	if o == nil || IsNil(o.Cores) {
		return nil, false
	}
	return o.Cores, true
}

// HasCores returns a boolean if a field has been set.
func (o *LicenseOptionsConfig) HasCores() bool {
	if o != nil && !IsNil(o.Cores) {
		return true
	}

	return false
}

// SetCores gets a reference to the given []CoresConfig and assigns it to the Cores field.
func (o *LicenseOptionsConfig) SetCores(v []CoresConfig) {
	o.Cores = v
}

func (o LicenseOptionsConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LicenseOptionsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.FileUploadSupportedCluster) {
		toSerialize["fileUploadSupportedCluster"] = o.FileUploadSupportedCluster
	}
	if !IsNil(o.Cores) {
		toSerialize["cores"] = o.Cores
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LicenseOptionsConfig) UnmarshalJSON(data []byte) (err error) {
	varLicenseOptionsConfig := _LicenseOptionsConfig{}

	err = json.Unmarshal(data, &varLicenseOptionsConfig)

	if err != nil {
		return err
	}

	*o = LicenseOptionsConfig(varLicenseOptionsConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "name")
		delete(additionalProperties, "fileUploadSupportedCluster")
		delete(additionalProperties, "cores")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLicenseOptionsConfig struct {
	value *LicenseOptionsConfig
	isSet bool
}

func (v NullableLicenseOptionsConfig) Get() *LicenseOptionsConfig {
	return v.value
}

func (v *NullableLicenseOptionsConfig) Set(val *LicenseOptionsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseOptionsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseOptionsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseOptionsConfig(val *LicenseOptionsConfig) *NullableLicenseOptionsConfig {
	return &NullableLicenseOptionsConfig{value: val, isSet: true}
}

func (v NullableLicenseOptionsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseOptionsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
