/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the JsonNode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JsonNode{}

// JsonNode struct for JsonNode
type JsonNode struct {
	Array                *bool             `json:"array,omitempty"`
	BigDecimal           *bool             `json:"bigDecimal,omitempty"`
	BigInteger           *bool             `json:"bigInteger,omitempty"`
	Binary               *bool             `json:"binary,omitempty"`
	Boolean              *bool             `json:"boolean,omitempty"`
	ContainerNode        *bool             `json:"containerNode,omitempty"`
	Double               *bool             `json:"double,omitempty"`
	Float                *bool             `json:"float,omitempty"`
	FloatingPointNumber  *bool             `json:"floatingPointNumber,omitempty"`
	Int                  *bool             `json:"int,omitempty"`
	IntegralNumber       *bool             `json:"integralNumber,omitempty"`
	Long                 *bool             `json:"long,omitempty"`
	MissingNode          *bool             `json:"missingNode,omitempty"`
	NodeType             *JsonNodeNodeType `json:"nodeType,omitempty"`
	Null                 *bool             `json:"null,omitempty"`
	Number               *bool             `json:"number,omitempty"`
	Object               *bool             `json:"object,omitempty"`
	Pojo                 *bool             `json:"pojo,omitempty"`
	Short                *bool             `json:"short,omitempty"`
	Textual              *bool             `json:"textual,omitempty"`
	ValueNode            *bool             `json:"valueNode,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _JsonNode JsonNode

// NewJsonNode instantiates a new JsonNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJsonNode() *JsonNode {
	this := JsonNode{}
	return &this
}

// NewJsonNodeWithDefaults instantiates a new JsonNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJsonNodeWithDefaults() *JsonNode {
	this := JsonNode{}
	return &this
}

// GetArray returns the Array field value if set, zero value otherwise.
func (o *JsonNode) GetArray() bool {
	if o == nil || IsNil(o.Array) {
		var ret bool
		return ret
	}
	return *o.Array
}

// GetArrayOk returns a tuple with the Array field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonNode) GetArrayOk() (*bool, bool) {
	if o == nil || IsNil(o.Array) {
		return nil, false
	}
	return o.Array, true
}

// HasArray returns a boolean if a field has been set.
func (o *JsonNode) HasArray() bool {
	if o != nil && !IsNil(o.Array) {
		return true
	}

	return false
}

// SetArray gets a reference to the given bool and assigns it to the Array field.
func (o *JsonNode) SetArray(v bool) {
	o.Array = &v
}

// GetBigDecimal returns the BigDecimal field value if set, zero value otherwise.
func (o *JsonNode) GetBigDecimal() bool {
	if o == nil || IsNil(o.BigDecimal) {
		var ret bool
		return ret
	}
	return *o.BigDecimal
}

// GetBigDecimalOk returns a tuple with the BigDecimal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonNode) GetBigDecimalOk() (*bool, bool) {
	if o == nil || IsNil(o.BigDecimal) {
		return nil, false
	}
	return o.BigDecimal, true
}

// HasBigDecimal returns a boolean if a field has been set.
func (o *JsonNode) HasBigDecimal() bool {
	if o != nil && !IsNil(o.BigDecimal) {
		return true
	}

	return false
}

// SetBigDecimal gets a reference to the given bool and assigns it to the BigDecimal field.
func (o *JsonNode) SetBigDecimal(v bool) {
	o.BigDecimal = &v
}

// GetBigInteger returns the BigInteger field value if set, zero value otherwise.
func (o *JsonNode) GetBigInteger() bool {
	if o == nil || IsNil(o.BigInteger) {
		var ret bool
		return ret
	}
	return *o.BigInteger
}

// GetBigIntegerOk returns a tuple with the BigInteger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonNode) GetBigIntegerOk() (*bool, bool) {
	if o == nil || IsNil(o.BigInteger) {
		return nil, false
	}
	return o.BigInteger, true
}

// HasBigInteger returns a boolean if a field has been set.
func (o *JsonNode) HasBigInteger() bool {
	if o != nil && !IsNil(o.BigInteger) {
		return true
	}

	return false
}

// SetBigInteger gets a reference to the given bool and assigns it to the BigInteger field.
func (o *JsonNode) SetBigInteger(v bool) {
	o.BigInteger = &v
}

// GetBinary returns the Binary field value if set, zero value otherwise.
func (o *JsonNode) GetBinary() bool {
	if o == nil || IsNil(o.Binary) {
		var ret bool
		return ret
	}
	return *o.Binary
}

// GetBinaryOk returns a tuple with the Binary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonNode) GetBinaryOk() (*bool, bool) {
	if o == nil || IsNil(o.Binary) {
		return nil, false
	}
	return o.Binary, true
}

// HasBinary returns a boolean if a field has been set.
func (o *JsonNode) HasBinary() bool {
	if o != nil && !IsNil(o.Binary) {
		return true
	}

	return false
}

// SetBinary gets a reference to the given bool and assigns it to the Binary field.
func (o *JsonNode) SetBinary(v bool) {
	o.Binary = &v
}

// GetBoolean returns the Boolean field value if set, zero value otherwise.
func (o *JsonNode) GetBoolean() bool {
	if o == nil || IsNil(o.Boolean) {
		var ret bool
		return ret
	}
	return *o.Boolean
}

// GetBooleanOk returns a tuple with the Boolean field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonNode) GetBooleanOk() (*bool, bool) {
	if o == nil || IsNil(o.Boolean) {
		return nil, false
	}
	return o.Boolean, true
}

// HasBoolean returns a boolean if a field has been set.
func (o *JsonNode) HasBoolean() bool {
	if o != nil && !IsNil(o.Boolean) {
		return true
	}

	return false
}

// SetBoolean gets a reference to the given bool and assigns it to the Boolean field.
func (o *JsonNode) SetBoolean(v bool) {
	o.Boolean = &v
}

// GetContainerNode returns the ContainerNode field value if set, zero value otherwise.
func (o *JsonNode) GetContainerNode() bool {
	if o == nil || IsNil(o.ContainerNode) {
		var ret bool
		return ret
	}
	return *o.ContainerNode
}

// GetContainerNodeOk returns a tuple with the ContainerNode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonNode) GetContainerNodeOk() (*bool, bool) {
	if o == nil || IsNil(o.ContainerNode) {
		return nil, false
	}
	return o.ContainerNode, true
}

// HasContainerNode returns a boolean if a field has been set.
func (o *JsonNode) HasContainerNode() bool {
	if o != nil && !IsNil(o.ContainerNode) {
		return true
	}

	return false
}

// SetContainerNode gets a reference to the given bool and assigns it to the ContainerNode field.
func (o *JsonNode) SetContainerNode(v bool) {
	o.ContainerNode = &v
}

// GetDouble returns the Double field value if set, zero value otherwise.
func (o *JsonNode) GetDouble() bool {
	if o == nil || IsNil(o.Double) {
		var ret bool
		return ret
	}
	return *o.Double
}

// GetDoubleOk returns a tuple with the Double field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonNode) GetDoubleOk() (*bool, bool) {
	if o == nil || IsNil(o.Double) {
		return nil, false
	}
	return o.Double, true
}

// HasDouble returns a boolean if a field has been set.
func (o *JsonNode) HasDouble() bool {
	if o != nil && !IsNil(o.Double) {
		return true
	}

	return false
}

// SetDouble gets a reference to the given bool and assigns it to the Double field.
func (o *JsonNode) SetDouble(v bool) {
	o.Double = &v
}

// GetFloat returns the Float field value if set, zero value otherwise.
func (o *JsonNode) GetFloat() bool {
	if o == nil || IsNil(o.Float) {
		var ret bool
		return ret
	}
	return *o.Float
}

// GetFloatOk returns a tuple with the Float field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonNode) GetFloatOk() (*bool, bool) {
	if o == nil || IsNil(o.Float) {
		return nil, false
	}
	return o.Float, true
}

// HasFloat returns a boolean if a field has been set.
func (o *JsonNode) HasFloat() bool {
	if o != nil && !IsNil(o.Float) {
		return true
	}

	return false
}

// SetFloat gets a reference to the given bool and assigns it to the Float field.
func (o *JsonNode) SetFloat(v bool) {
	o.Float = &v
}

// GetFloatingPointNumber returns the FloatingPointNumber field value if set, zero value otherwise.
func (o *JsonNode) GetFloatingPointNumber() bool {
	if o == nil || IsNil(o.FloatingPointNumber) {
		var ret bool
		return ret
	}
	return *o.FloatingPointNumber
}

// GetFloatingPointNumberOk returns a tuple with the FloatingPointNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonNode) GetFloatingPointNumberOk() (*bool, bool) {
	if o == nil || IsNil(o.FloatingPointNumber) {
		return nil, false
	}
	return o.FloatingPointNumber, true
}

// HasFloatingPointNumber returns a boolean if a field has been set.
func (o *JsonNode) HasFloatingPointNumber() bool {
	if o != nil && !IsNil(o.FloatingPointNumber) {
		return true
	}

	return false
}

// SetFloatingPointNumber gets a reference to the given bool and assigns it to the FloatingPointNumber field.
func (o *JsonNode) SetFloatingPointNumber(v bool) {
	o.FloatingPointNumber = &v
}

// GetInt returns the Int field value if set, zero value otherwise.
func (o *JsonNode) GetInt() bool {
	if o == nil || IsNil(o.Int) {
		var ret bool
		return ret
	}
	return *o.Int
}

// GetIntOk returns a tuple with the Int field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonNode) GetIntOk() (*bool, bool) {
	if o == nil || IsNil(o.Int) {
		return nil, false
	}
	return o.Int, true
}

// HasInt returns a boolean if a field has been set.
func (o *JsonNode) HasInt() bool {
	if o != nil && !IsNil(o.Int) {
		return true
	}

	return false
}

// SetInt gets a reference to the given bool and assigns it to the Int field.
func (o *JsonNode) SetInt(v bool) {
	o.Int = &v
}

// GetIntegralNumber returns the IntegralNumber field value if set, zero value otherwise.
func (o *JsonNode) GetIntegralNumber() bool {
	if o == nil || IsNil(o.IntegralNumber) {
		var ret bool
		return ret
	}
	return *o.IntegralNumber
}

// GetIntegralNumberOk returns a tuple with the IntegralNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonNode) GetIntegralNumberOk() (*bool, bool) {
	if o == nil || IsNil(o.IntegralNumber) {
		return nil, false
	}
	return o.IntegralNumber, true
}

// HasIntegralNumber returns a boolean if a field has been set.
func (o *JsonNode) HasIntegralNumber() bool {
	if o != nil && !IsNil(o.IntegralNumber) {
		return true
	}

	return false
}

// SetIntegralNumber gets a reference to the given bool and assigns it to the IntegralNumber field.
func (o *JsonNode) SetIntegralNumber(v bool) {
	o.IntegralNumber = &v
}

// GetLong returns the Long field value if set, zero value otherwise.
func (o *JsonNode) GetLong() bool {
	if o == nil || IsNil(o.Long) {
		var ret bool
		return ret
	}
	return *o.Long
}

// GetLongOk returns a tuple with the Long field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonNode) GetLongOk() (*bool, bool) {
	if o == nil || IsNil(o.Long) {
		return nil, false
	}
	return o.Long, true
}

// HasLong returns a boolean if a field has been set.
func (o *JsonNode) HasLong() bool {
	if o != nil && !IsNil(o.Long) {
		return true
	}

	return false
}

// SetLong gets a reference to the given bool and assigns it to the Long field.
func (o *JsonNode) SetLong(v bool) {
	o.Long = &v
}

// GetMissingNode returns the MissingNode field value if set, zero value otherwise.
func (o *JsonNode) GetMissingNode() bool {
	if o == nil || IsNil(o.MissingNode) {
		var ret bool
		return ret
	}
	return *o.MissingNode
}

// GetMissingNodeOk returns a tuple with the MissingNode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonNode) GetMissingNodeOk() (*bool, bool) {
	if o == nil || IsNil(o.MissingNode) {
		return nil, false
	}
	return o.MissingNode, true
}

// HasMissingNode returns a boolean if a field has been set.
func (o *JsonNode) HasMissingNode() bool {
	if o != nil && !IsNil(o.MissingNode) {
		return true
	}

	return false
}

// SetMissingNode gets a reference to the given bool and assigns it to the MissingNode field.
func (o *JsonNode) SetMissingNode(v bool) {
	o.MissingNode = &v
}

// GetNodeType returns the NodeType field value if set, zero value otherwise.
func (o *JsonNode) GetNodeType() JsonNodeNodeType {
	if o == nil || IsNil(o.NodeType) {
		var ret JsonNodeNodeType
		return ret
	}
	return *o.NodeType
}

// GetNodeTypeOk returns a tuple with the NodeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonNode) GetNodeTypeOk() (*JsonNodeNodeType, bool) {
	if o == nil || IsNil(o.NodeType) {
		return nil, false
	}
	return o.NodeType, true
}

// HasNodeType returns a boolean if a field has been set.
func (o *JsonNode) HasNodeType() bool {
	if o != nil && !IsNil(o.NodeType) {
		return true
	}

	return false
}

// SetNodeType gets a reference to the given JsonNodeNodeType and assigns it to the NodeType field.
func (o *JsonNode) SetNodeType(v JsonNodeNodeType) {
	o.NodeType = &v
}

// GetNull returns the Null field value if set, zero value otherwise.
func (o *JsonNode) GetNull() bool {
	if o == nil || IsNil(o.Null) {
		var ret bool
		return ret
	}
	return *o.Null
}

// GetNullOk returns a tuple with the Null field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonNode) GetNullOk() (*bool, bool) {
	if o == nil || IsNil(o.Null) {
		return nil, false
	}
	return o.Null, true
}

// HasNull returns a boolean if a field has been set.
func (o *JsonNode) HasNull() bool {
	if o != nil && !IsNil(o.Null) {
		return true
	}

	return false
}

// SetNull gets a reference to the given bool and assigns it to the Null field.
func (o *JsonNode) SetNull(v bool) {
	o.Null = &v
}

// GetNumber returns the Number field value if set, zero value otherwise.
func (o *JsonNode) GetNumber() bool {
	if o == nil || IsNil(o.Number) {
		var ret bool
		return ret
	}
	return *o.Number
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonNode) GetNumberOk() (*bool, bool) {
	if o == nil || IsNil(o.Number) {
		return nil, false
	}
	return o.Number, true
}

// HasNumber returns a boolean if a field has been set.
func (o *JsonNode) HasNumber() bool {
	if o != nil && !IsNil(o.Number) {
		return true
	}

	return false
}

// SetNumber gets a reference to the given bool and assigns it to the Number field.
func (o *JsonNode) SetNumber(v bool) {
	o.Number = &v
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *JsonNode) GetObject() bool {
	if o == nil || IsNil(o.Object) {
		var ret bool
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonNode) GetObjectOk() (*bool, bool) {
	if o == nil || IsNil(o.Object) {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *JsonNode) HasObject() bool {
	if o != nil && !IsNil(o.Object) {
		return true
	}

	return false
}

// SetObject gets a reference to the given bool and assigns it to the Object field.
func (o *JsonNode) SetObject(v bool) {
	o.Object = &v
}

// GetPojo returns the Pojo field value if set, zero value otherwise.
func (o *JsonNode) GetPojo() bool {
	if o == nil || IsNil(o.Pojo) {
		var ret bool
		return ret
	}
	return *o.Pojo
}

// GetPojoOk returns a tuple with the Pojo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonNode) GetPojoOk() (*bool, bool) {
	if o == nil || IsNil(o.Pojo) {
		return nil, false
	}
	return o.Pojo, true
}

// HasPojo returns a boolean if a field has been set.
func (o *JsonNode) HasPojo() bool {
	if o != nil && !IsNil(o.Pojo) {
		return true
	}

	return false
}

// SetPojo gets a reference to the given bool and assigns it to the Pojo field.
func (o *JsonNode) SetPojo(v bool) {
	o.Pojo = &v
}

// GetShort returns the Short field value if set, zero value otherwise.
func (o *JsonNode) GetShort() bool {
	if o == nil || IsNil(o.Short) {
		var ret bool
		return ret
	}
	return *o.Short
}

// GetShortOk returns a tuple with the Short field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonNode) GetShortOk() (*bool, bool) {
	if o == nil || IsNil(o.Short) {
		return nil, false
	}
	return o.Short, true
}

// HasShort returns a boolean if a field has been set.
func (o *JsonNode) HasShort() bool {
	if o != nil && !IsNil(o.Short) {
		return true
	}

	return false
}

// SetShort gets a reference to the given bool and assigns it to the Short field.
func (o *JsonNode) SetShort(v bool) {
	o.Short = &v
}

// GetTextual returns the Textual field value if set, zero value otherwise.
func (o *JsonNode) GetTextual() bool {
	if o == nil || IsNil(o.Textual) {
		var ret bool
		return ret
	}
	return *o.Textual
}

// GetTextualOk returns a tuple with the Textual field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonNode) GetTextualOk() (*bool, bool) {
	if o == nil || IsNil(o.Textual) {
		return nil, false
	}
	return o.Textual, true
}

// HasTextual returns a boolean if a field has been set.
func (o *JsonNode) HasTextual() bool {
	if o != nil && !IsNil(o.Textual) {
		return true
	}

	return false
}

// SetTextual gets a reference to the given bool and assigns it to the Textual field.
func (o *JsonNode) SetTextual(v bool) {
	o.Textual = &v
}

// GetValueNode returns the ValueNode field value if set, zero value otherwise.
func (o *JsonNode) GetValueNode() bool {
	if o == nil || IsNil(o.ValueNode) {
		var ret bool
		return ret
	}
	return *o.ValueNode
}

// GetValueNodeOk returns a tuple with the ValueNode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonNode) GetValueNodeOk() (*bool, bool) {
	if o == nil || IsNil(o.ValueNode) {
		return nil, false
	}
	return o.ValueNode, true
}

// HasValueNode returns a boolean if a field has been set.
func (o *JsonNode) HasValueNode() bool {
	if o != nil && !IsNil(o.ValueNode) {
		return true
	}

	return false
}

// SetValueNode gets a reference to the given bool and assigns it to the ValueNode field.
func (o *JsonNode) SetValueNode(v bool) {
	o.ValueNode = &v
}

func (o JsonNode) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JsonNode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Array) {
		toSerialize["array"] = o.Array
	}
	if !IsNil(o.BigDecimal) {
		toSerialize["bigDecimal"] = o.BigDecimal
	}
	if !IsNil(o.BigInteger) {
		toSerialize["bigInteger"] = o.BigInteger
	}
	if !IsNil(o.Binary) {
		toSerialize["binary"] = o.Binary
	}
	if !IsNil(o.Boolean) {
		toSerialize["boolean"] = o.Boolean
	}
	if !IsNil(o.ContainerNode) {
		toSerialize["containerNode"] = o.ContainerNode
	}
	if !IsNil(o.Double) {
		toSerialize["double"] = o.Double
	}
	if !IsNil(o.Float) {
		toSerialize["float"] = o.Float
	}
	if !IsNil(o.FloatingPointNumber) {
		toSerialize["floatingPointNumber"] = o.FloatingPointNumber
	}
	if !IsNil(o.Int) {
		toSerialize["int"] = o.Int
	}
	if !IsNil(o.IntegralNumber) {
		toSerialize["integralNumber"] = o.IntegralNumber
	}
	if !IsNil(o.Long) {
		toSerialize["long"] = o.Long
	}
	if !IsNil(o.MissingNode) {
		toSerialize["missingNode"] = o.MissingNode
	}
	if !IsNil(o.NodeType) {
		toSerialize["nodeType"] = o.NodeType
	}
	if !IsNil(o.Null) {
		toSerialize["null"] = o.Null
	}
	if !IsNil(o.Number) {
		toSerialize["number"] = o.Number
	}
	if !IsNil(o.Object) {
		toSerialize["object"] = o.Object
	}
	if !IsNil(o.Pojo) {
		toSerialize["pojo"] = o.Pojo
	}
	if !IsNil(o.Short) {
		toSerialize["short"] = o.Short
	}
	if !IsNil(o.Textual) {
		toSerialize["textual"] = o.Textual
	}
	if !IsNil(o.ValueNode) {
		toSerialize["valueNode"] = o.ValueNode
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *JsonNode) UnmarshalJSON(data []byte) (err error) {
	varJsonNode := _JsonNode{}

	err = json.Unmarshal(data, &varJsonNode)

	if err != nil {
		return err
	}

	*o = JsonNode(varJsonNode)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "array")
		delete(additionalProperties, "bigDecimal")
		delete(additionalProperties, "bigInteger")
		delete(additionalProperties, "binary")
		delete(additionalProperties, "boolean")
		delete(additionalProperties, "containerNode")
		delete(additionalProperties, "double")
		delete(additionalProperties, "float")
		delete(additionalProperties, "floatingPointNumber")
		delete(additionalProperties, "int")
		delete(additionalProperties, "integralNumber")
		delete(additionalProperties, "long")
		delete(additionalProperties, "missingNode")
		delete(additionalProperties, "nodeType")
		delete(additionalProperties, "null")
		delete(additionalProperties, "number")
		delete(additionalProperties, "object")
		delete(additionalProperties, "pojo")
		delete(additionalProperties, "short")
		delete(additionalProperties, "textual")
		delete(additionalProperties, "valueNode")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableJsonNode struct {
	value *JsonNode
	isSet bool
}

func (v NullableJsonNode) Get() *JsonNode {
	return v.value
}

func (v *NullableJsonNode) Set(val *JsonNode) {
	v.value = val
	v.isSet = true
}

func (v NullableJsonNode) IsSet() bool {
	return v.isSet
}

func (v *NullableJsonNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJsonNode(val *JsonNode) *NullableJsonNode {
	return &NullableJsonNode{value: val, isSet: true}
}

func (v NullableJsonNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJsonNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
