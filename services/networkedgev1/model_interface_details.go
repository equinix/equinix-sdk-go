/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the InterfaceDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InterfaceDetails{}

// InterfaceDetails struct for InterfaceDetails
type InterfaceDetails struct {
	// Name of the interface
	Name *string `json:"name,omitempty"`
	// Description of the interface
	Description *string `json:"description,omitempty"`
	// Interface Id.
	InterfaceId *string `json:"interfaceId,omitempty"`
	// Status of the interface.
	Status               *string `json:"status,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InterfaceDetails InterfaceDetails

// NewInterfaceDetails instantiates a new InterfaceDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterfaceDetails() *InterfaceDetails {
	this := InterfaceDetails{}
	return &this
}

// NewInterfaceDetailsWithDefaults instantiates a new InterfaceDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterfaceDetailsWithDefaults() *InterfaceDetails {
	this := InterfaceDetails{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *InterfaceDetails) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceDetails) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *InterfaceDetails) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *InterfaceDetails) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *InterfaceDetails) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceDetails) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *InterfaceDetails) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *InterfaceDetails) SetDescription(v string) {
	o.Description = &v
}

// GetInterfaceId returns the InterfaceId field value if set, zero value otherwise.
func (o *InterfaceDetails) GetInterfaceId() string {
	if o == nil || IsNil(o.InterfaceId) {
		var ret string
		return ret
	}
	return *o.InterfaceId
}

// GetInterfaceIdOk returns a tuple with the InterfaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceDetails) GetInterfaceIdOk() (*string, bool) {
	if o == nil || IsNil(o.InterfaceId) {
		return nil, false
	}
	return o.InterfaceId, true
}

// HasInterfaceId returns a boolean if a field has been set.
func (o *InterfaceDetails) HasInterfaceId() bool {
	if o != nil && !IsNil(o.InterfaceId) {
		return true
	}

	return false
}

// SetInterfaceId gets a reference to the given string and assigns it to the InterfaceId field.
func (o *InterfaceDetails) SetInterfaceId(v string) {
	o.InterfaceId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *InterfaceDetails) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceDetails) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *InterfaceDetails) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *InterfaceDetails) SetStatus(v string) {
	o.Status = &v
}

func (o InterfaceDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InterfaceDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.InterfaceId) {
		toSerialize["interfaceId"] = o.InterfaceId
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InterfaceDetails) UnmarshalJSON(data []byte) (err error) {
	varInterfaceDetails := _InterfaceDetails{}

	err = json.Unmarshal(data, &varInterfaceDetails)

	if err != nil {
		return err
	}

	*o = InterfaceDetails(varInterfaceDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "interfaceId")
		delete(additionalProperties, "status")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInterfaceDetails struct {
	value *InterfaceDetails
	isSet bool
}

func (v NullableInterfaceDetails) Get() *InterfaceDetails {
	return v.value
}

func (v *NullableInterfaceDetails) Set(val *InterfaceDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableInterfaceDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableInterfaceDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterfaceDetails(val *InterfaceDetails) *NullableInterfaceDetails {
	return &NullableInterfaceDetails{value: val, isSet: true}
}

func (v NullableInterfaceDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterfaceDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
