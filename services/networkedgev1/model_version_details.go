/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the VersionDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VersionDetails{}

// VersionDetails struct for VersionDetails
type VersionDetails struct {
	Cause     *VersionDetails `json:"cause,omitempty"`
	Version   *string         `json:"version,omitempty"`
	ImageName *string         `json:"imageName,omitempty"`
	// The date the software was released
	VersionDate *string `json:"versionDate,omitempty"`
	// The date the software will no longer be available for new devices. This field will not show if the software does not have a retire date.
	RetireDate                *string  `json:"retireDate,omitempty"`
	Status                    *string  `json:"status,omitempty"`
	StableVersion             *string  `json:"stableVersion,omitempty"`
	AllowedUpgradableVersions []string `json:"allowedUpgradableVersions,omitempty"`
	SupportedLicenseTypes     []string `json:"supportedLicenseTypes,omitempty"`
	AdditionalProperties      map[string]interface{}
}

type _VersionDetails VersionDetails

// NewVersionDetails instantiates a new VersionDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersionDetails() *VersionDetails {
	this := VersionDetails{}
	return &this
}

// NewVersionDetailsWithDefaults instantiates a new VersionDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionDetailsWithDefaults() *VersionDetails {
	this := VersionDetails{}
	return &this
}

// GetCause returns the Cause field value if set, zero value otherwise.
func (o *VersionDetails) GetCause() VersionDetails {
	if o == nil || IsNil(o.Cause) {
		var ret VersionDetails
		return ret
	}
	return *o.Cause
}

// GetCauseOk returns a tuple with the Cause field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionDetails) GetCauseOk() (*VersionDetails, bool) {
	if o == nil || IsNil(o.Cause) {
		return nil, false
	}
	return o.Cause, true
}

// HasCause returns a boolean if a field has been set.
func (o *VersionDetails) HasCause() bool {
	if o != nil && !IsNil(o.Cause) {
		return true
	}

	return false
}

// SetCause gets a reference to the given VersionDetails and assigns it to the Cause field.
func (o *VersionDetails) SetCause(v VersionDetails) {
	o.Cause = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *VersionDetails) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionDetails) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *VersionDetails) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *VersionDetails) SetVersion(v string) {
	o.Version = &v
}

// GetImageName returns the ImageName field value if set, zero value otherwise.
func (o *VersionDetails) GetImageName() string {
	if o == nil || IsNil(o.ImageName) {
		var ret string
		return ret
	}
	return *o.ImageName
}

// GetImageNameOk returns a tuple with the ImageName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionDetails) GetImageNameOk() (*string, bool) {
	if o == nil || IsNil(o.ImageName) {
		return nil, false
	}
	return o.ImageName, true
}

// HasImageName returns a boolean if a field has been set.
func (o *VersionDetails) HasImageName() bool {
	if o != nil && !IsNil(o.ImageName) {
		return true
	}

	return false
}

// SetImageName gets a reference to the given string and assigns it to the ImageName field.
func (o *VersionDetails) SetImageName(v string) {
	o.ImageName = &v
}

// GetVersionDate returns the VersionDate field value if set, zero value otherwise.
func (o *VersionDetails) GetVersionDate() string {
	if o == nil || IsNil(o.VersionDate) {
		var ret string
		return ret
	}
	return *o.VersionDate
}

// GetVersionDateOk returns a tuple with the VersionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionDetails) GetVersionDateOk() (*string, bool) {
	if o == nil || IsNil(o.VersionDate) {
		return nil, false
	}
	return o.VersionDate, true
}

// HasVersionDate returns a boolean if a field has been set.
func (o *VersionDetails) HasVersionDate() bool {
	if o != nil && !IsNil(o.VersionDate) {
		return true
	}

	return false
}

// SetVersionDate gets a reference to the given string and assigns it to the VersionDate field.
func (o *VersionDetails) SetVersionDate(v string) {
	o.VersionDate = &v
}

// GetRetireDate returns the RetireDate field value if set, zero value otherwise.
func (o *VersionDetails) GetRetireDate() string {
	if o == nil || IsNil(o.RetireDate) {
		var ret string
		return ret
	}
	return *o.RetireDate
}

// GetRetireDateOk returns a tuple with the RetireDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionDetails) GetRetireDateOk() (*string, bool) {
	if o == nil || IsNil(o.RetireDate) {
		return nil, false
	}
	return o.RetireDate, true
}

// HasRetireDate returns a boolean if a field has been set.
func (o *VersionDetails) HasRetireDate() bool {
	if o != nil && !IsNil(o.RetireDate) {
		return true
	}

	return false
}

// SetRetireDate gets a reference to the given string and assigns it to the RetireDate field.
func (o *VersionDetails) SetRetireDate(v string) {
	o.RetireDate = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *VersionDetails) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionDetails) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *VersionDetails) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *VersionDetails) SetStatus(v string) {
	o.Status = &v
}

// GetStableVersion returns the StableVersion field value if set, zero value otherwise.
func (o *VersionDetails) GetStableVersion() string {
	if o == nil || IsNil(o.StableVersion) {
		var ret string
		return ret
	}
	return *o.StableVersion
}

// GetStableVersionOk returns a tuple with the StableVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionDetails) GetStableVersionOk() (*string, bool) {
	if o == nil || IsNil(o.StableVersion) {
		return nil, false
	}
	return o.StableVersion, true
}

// HasStableVersion returns a boolean if a field has been set.
func (o *VersionDetails) HasStableVersion() bool {
	if o != nil && !IsNil(o.StableVersion) {
		return true
	}

	return false
}

// SetStableVersion gets a reference to the given string and assigns it to the StableVersion field.
func (o *VersionDetails) SetStableVersion(v string) {
	o.StableVersion = &v
}

// GetAllowedUpgradableVersions returns the AllowedUpgradableVersions field value if set, zero value otherwise.
func (o *VersionDetails) GetAllowedUpgradableVersions() []string {
	if o == nil || IsNil(o.AllowedUpgradableVersions) {
		var ret []string
		return ret
	}
	return o.AllowedUpgradableVersions
}

// GetAllowedUpgradableVersionsOk returns a tuple with the AllowedUpgradableVersions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionDetails) GetAllowedUpgradableVersionsOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedUpgradableVersions) {
		return nil, false
	}
	return o.AllowedUpgradableVersions, true
}

// HasAllowedUpgradableVersions returns a boolean if a field has been set.
func (o *VersionDetails) HasAllowedUpgradableVersions() bool {
	if o != nil && !IsNil(o.AllowedUpgradableVersions) {
		return true
	}

	return false
}

// SetAllowedUpgradableVersions gets a reference to the given []string and assigns it to the AllowedUpgradableVersions field.
func (o *VersionDetails) SetAllowedUpgradableVersions(v []string) {
	o.AllowedUpgradableVersions = v
}

// GetSupportedLicenseTypes returns the SupportedLicenseTypes field value if set, zero value otherwise.
func (o *VersionDetails) GetSupportedLicenseTypes() []string {
	if o == nil || IsNil(o.SupportedLicenseTypes) {
		var ret []string
		return ret
	}
	return o.SupportedLicenseTypes
}

// GetSupportedLicenseTypesOk returns a tuple with the SupportedLicenseTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionDetails) GetSupportedLicenseTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.SupportedLicenseTypes) {
		return nil, false
	}
	return o.SupportedLicenseTypes, true
}

// HasSupportedLicenseTypes returns a boolean if a field has been set.
func (o *VersionDetails) HasSupportedLicenseTypes() bool {
	if o != nil && !IsNil(o.SupportedLicenseTypes) {
		return true
	}

	return false
}

// SetSupportedLicenseTypes gets a reference to the given []string and assigns it to the SupportedLicenseTypes field.
func (o *VersionDetails) SetSupportedLicenseTypes(v []string) {
	o.SupportedLicenseTypes = v
}

func (o VersionDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VersionDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cause) {
		toSerialize["cause"] = o.Cause
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.ImageName) {
		toSerialize["imageName"] = o.ImageName
	}
	if !IsNil(o.VersionDate) {
		toSerialize["versionDate"] = o.VersionDate
	}
	if !IsNil(o.RetireDate) {
		toSerialize["retireDate"] = o.RetireDate
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.StableVersion) {
		toSerialize["stableVersion"] = o.StableVersion
	}
	if !IsNil(o.AllowedUpgradableVersions) {
		toSerialize["allowedUpgradableVersions"] = o.AllowedUpgradableVersions
	}
	if !IsNil(o.SupportedLicenseTypes) {
		toSerialize["supportedLicenseTypes"] = o.SupportedLicenseTypes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VersionDetails) UnmarshalJSON(data []byte) (err error) {
	varVersionDetails := _VersionDetails{}

	err = json.Unmarshal(data, &varVersionDetails)

	if err != nil {
		return err
	}

	*o = VersionDetails(varVersionDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cause")
		delete(additionalProperties, "version")
		delete(additionalProperties, "imageName")
		delete(additionalProperties, "versionDate")
		delete(additionalProperties, "retireDate")
		delete(additionalProperties, "status")
		delete(additionalProperties, "stableVersion")
		delete(additionalProperties, "allowedUpgradableVersions")
		delete(additionalProperties, "supportedLicenseTypes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVersionDetails struct {
	value *VersionDetails
	isSet bool
}

func (v NullableVersionDetails) Get() *VersionDetails {
	return v.value
}

func (v *NullableVersionDetails) Set(val *VersionDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionDetails(val *VersionDetails) *NullableVersionDetails {
	return &NullableVersionDetails{value: val, isSet: true}
}

func (v NullableVersionDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
