/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the InboundRules type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InboundRules{}

// InboundRules struct for InboundRules
type InboundRules struct {
	// Protocol.
	Protocol *string `json:"protocol,omitempty"`
	// Source port.
	SrcPort *string `json:"srcPort,omitempty"`
	// Destination port.
	DstPort *string `json:"dstPort,omitempty"`
	// An array of subnets.
	Subnet *string `json:"subnet,omitempty"`
	// The sequence number of the inbound rule.
	SeqNo *int32 `json:"seqNo,omitempty"`
	// Description of the inboundRule.
	Description          *string `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InboundRules InboundRules

// NewInboundRules instantiates a new InboundRules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInboundRules() *InboundRules {
	this := InboundRules{}
	return &this
}

// NewInboundRulesWithDefaults instantiates a new InboundRules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInboundRulesWithDefaults() *InboundRules {
	this := InboundRules{}
	return &this
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *InboundRules) GetProtocol() string {
	if o == nil || IsNil(o.Protocol) {
		var ret string
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InboundRules) GetProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *InboundRules) HasProtocol() bool {
	if o != nil && !IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given string and assigns it to the Protocol field.
func (o *InboundRules) SetProtocol(v string) {
	o.Protocol = &v
}

// GetSrcPort returns the SrcPort field value if set, zero value otherwise.
func (o *InboundRules) GetSrcPort() string {
	if o == nil || IsNil(o.SrcPort) {
		var ret string
		return ret
	}
	return *o.SrcPort
}

// GetSrcPortOk returns a tuple with the SrcPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InboundRules) GetSrcPortOk() (*string, bool) {
	if o == nil || IsNil(o.SrcPort) {
		return nil, false
	}
	return o.SrcPort, true
}

// HasSrcPort returns a boolean if a field has been set.
func (o *InboundRules) HasSrcPort() bool {
	if o != nil && !IsNil(o.SrcPort) {
		return true
	}

	return false
}

// SetSrcPort gets a reference to the given string and assigns it to the SrcPort field.
func (o *InboundRules) SetSrcPort(v string) {
	o.SrcPort = &v
}

// GetDstPort returns the DstPort field value if set, zero value otherwise.
func (o *InboundRules) GetDstPort() string {
	if o == nil || IsNil(o.DstPort) {
		var ret string
		return ret
	}
	return *o.DstPort
}

// GetDstPortOk returns a tuple with the DstPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InboundRules) GetDstPortOk() (*string, bool) {
	if o == nil || IsNil(o.DstPort) {
		return nil, false
	}
	return o.DstPort, true
}

// HasDstPort returns a boolean if a field has been set.
func (o *InboundRules) HasDstPort() bool {
	if o != nil && !IsNil(o.DstPort) {
		return true
	}

	return false
}

// SetDstPort gets a reference to the given string and assigns it to the DstPort field.
func (o *InboundRules) SetDstPort(v string) {
	o.DstPort = &v
}

// GetSubnet returns the Subnet field value if set, zero value otherwise.
func (o *InboundRules) GetSubnet() string {
	if o == nil || IsNil(o.Subnet) {
		var ret string
		return ret
	}
	return *o.Subnet
}

// GetSubnetOk returns a tuple with the Subnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InboundRules) GetSubnetOk() (*string, bool) {
	if o == nil || IsNil(o.Subnet) {
		return nil, false
	}
	return o.Subnet, true
}

// HasSubnet returns a boolean if a field has been set.
func (o *InboundRules) HasSubnet() bool {
	if o != nil && !IsNil(o.Subnet) {
		return true
	}

	return false
}

// SetSubnet gets a reference to the given string and assigns it to the Subnet field.
func (o *InboundRules) SetSubnet(v string) {
	o.Subnet = &v
}

// GetSeqNo returns the SeqNo field value if set, zero value otherwise.
func (o *InboundRules) GetSeqNo() int32 {
	if o == nil || IsNil(o.SeqNo) {
		var ret int32
		return ret
	}
	return *o.SeqNo
}

// GetSeqNoOk returns a tuple with the SeqNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InboundRules) GetSeqNoOk() (*int32, bool) {
	if o == nil || IsNil(o.SeqNo) {
		return nil, false
	}
	return o.SeqNo, true
}

// HasSeqNo returns a boolean if a field has been set.
func (o *InboundRules) HasSeqNo() bool {
	if o != nil && !IsNil(o.SeqNo) {
		return true
	}

	return false
}

// SetSeqNo gets a reference to the given int32 and assigns it to the SeqNo field.
func (o *InboundRules) SetSeqNo(v int32) {
	o.SeqNo = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *InboundRules) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InboundRules) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *InboundRules) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *InboundRules) SetDescription(v string) {
	o.Description = &v
}

func (o InboundRules) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InboundRules) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	if !IsNil(o.SrcPort) {
		toSerialize["srcPort"] = o.SrcPort
	}
	if !IsNil(o.DstPort) {
		toSerialize["dstPort"] = o.DstPort
	}
	if !IsNil(o.Subnet) {
		toSerialize["subnet"] = o.Subnet
	}
	if !IsNil(o.SeqNo) {
		toSerialize["seqNo"] = o.SeqNo
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InboundRules) UnmarshalJSON(data []byte) (err error) {
	varInboundRules := _InboundRules{}

	err = json.Unmarshal(data, &varInboundRules)

	if err != nil {
		return err
	}

	*o = InboundRules(varInboundRules)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "protocol")
		delete(additionalProperties, "srcPort")
		delete(additionalProperties, "dstPort")
		delete(additionalProperties, "subnet")
		delete(additionalProperties, "seqNo")
		delete(additionalProperties, "description")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInboundRules struct {
	value *InboundRules
	isSet bool
}

func (v NullableInboundRules) Get() *InboundRules {
	return v.value
}

func (v *NullableInboundRules) Set(val *InboundRules) {
	v.value = val
	v.isSet = true
}

func (v NullableInboundRules) IsSet() bool {
	return v.isSet
}

func (v *NullableInboundRules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInboundRules(val *InboundRules) *NullableInboundRules {
	return &NullableInboundRules{value: val, isSet: true}
}

func (v NullableInboundRules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInboundRules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
