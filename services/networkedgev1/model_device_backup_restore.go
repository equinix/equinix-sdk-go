/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the DeviceBackupRestore type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceBackupRestore{}

// DeviceBackupRestore struct for DeviceBackupRestore
type DeviceBackupRestore struct {
	// The unique ID of the backup.
	Uuid *string `json:"uuid,omitempty"`
	// The name of the backup.
	Name *string `json:"name,omitempty"`
	// The status of the backup.
	Status *string `json:"status,omitempty"`
	// Whether you can delete the backup. Only backups in the COMPELTED or FAILED states can be deleted.
	DeleteAllowed        *bool `json:"deleteAllowed,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DeviceBackupRestore DeviceBackupRestore

// NewDeviceBackupRestore instantiates a new DeviceBackupRestore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceBackupRestore() *DeviceBackupRestore {
	this := DeviceBackupRestore{}
	return &this
}

// NewDeviceBackupRestoreWithDefaults instantiates a new DeviceBackupRestore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceBackupRestoreWithDefaults() *DeviceBackupRestore {
	this := DeviceBackupRestore{}
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *DeviceBackupRestore) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceBackupRestore) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *DeviceBackupRestore) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *DeviceBackupRestore) SetUuid(v string) {
	o.Uuid = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DeviceBackupRestore) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceBackupRestore) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DeviceBackupRestore) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DeviceBackupRestore) SetName(v string) {
	o.Name = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DeviceBackupRestore) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceBackupRestore) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DeviceBackupRestore) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DeviceBackupRestore) SetStatus(v string) {
	o.Status = &v
}

// GetDeleteAllowed returns the DeleteAllowed field value if set, zero value otherwise.
func (o *DeviceBackupRestore) GetDeleteAllowed() bool {
	if o == nil || IsNil(o.DeleteAllowed) {
		var ret bool
		return ret
	}
	return *o.DeleteAllowed
}

// GetDeleteAllowedOk returns a tuple with the DeleteAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceBackupRestore) GetDeleteAllowedOk() (*bool, bool) {
	if o == nil || IsNil(o.DeleteAllowed) {
		return nil, false
	}
	return o.DeleteAllowed, true
}

// HasDeleteAllowed returns a boolean if a field has been set.
func (o *DeviceBackupRestore) HasDeleteAllowed() bool {
	if o != nil && !IsNil(o.DeleteAllowed) {
		return true
	}

	return false
}

// SetDeleteAllowed gets a reference to the given bool and assigns it to the DeleteAllowed field.
func (o *DeviceBackupRestore) SetDeleteAllowed(v bool) {
	o.DeleteAllowed = &v
}

func (o DeviceBackupRestore) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceBackupRestore) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.DeleteAllowed) {
		toSerialize["deleteAllowed"] = o.DeleteAllowed
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeviceBackupRestore) UnmarshalJSON(data []byte) (err error) {
	varDeviceBackupRestore := _DeviceBackupRestore{}

	err = json.Unmarshal(data, &varDeviceBackupRestore)

	if err != nil {
		return err
	}

	*o = DeviceBackupRestore(varDeviceBackupRestore)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "name")
		delete(additionalProperties, "status")
		delete(additionalProperties, "deleteAllowed")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeviceBackupRestore struct {
	value *DeviceBackupRestore
	isSet bool
}

func (v NullableDeviceBackupRestore) Get() *DeviceBackupRestore {
	return v.value
}

func (v *NullableDeviceBackupRestore) Set(val *DeviceBackupRestore) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceBackupRestore) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceBackupRestore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceBackupRestore(val *DeviceBackupRestore) *NullableDeviceBackupRestore {
	return &NullableDeviceBackupRestore{value: val, isSet: true}
}

func (v NullableDeviceBackupRestore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceBackupRestore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
