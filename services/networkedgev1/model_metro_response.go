/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the MetroResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetroResponse{}

// MetroResponse struct for MetroResponse
type MetroResponse struct {
	// Metro code
	MetroCode *string `json:"metroCode,omitempty"`
	// Metro description
	MetroDescription *string `json:"metroDescription,omitempty"`
	// Region within which the metro is located
	Region *string `json:"region,omitempty"`
	// Whether this metro supports cluster devices
	ClusterSupported     *bool `json:"clusterSupported,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MetroResponse MetroResponse

// NewMetroResponse instantiates a new MetroResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetroResponse() *MetroResponse {
	this := MetroResponse{}
	return &this
}

// NewMetroResponseWithDefaults instantiates a new MetroResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetroResponseWithDefaults() *MetroResponse {
	this := MetroResponse{}
	return &this
}

// GetMetroCode returns the MetroCode field value if set, zero value otherwise.
func (o *MetroResponse) GetMetroCode() string {
	if o == nil || IsNil(o.MetroCode) {
		var ret string
		return ret
	}
	return *o.MetroCode
}

// GetMetroCodeOk returns a tuple with the MetroCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetroResponse) GetMetroCodeOk() (*string, bool) {
	if o == nil || IsNil(o.MetroCode) {
		return nil, false
	}
	return o.MetroCode, true
}

// HasMetroCode returns a boolean if a field has been set.
func (o *MetroResponse) HasMetroCode() bool {
	if o != nil && !IsNil(o.MetroCode) {
		return true
	}

	return false
}

// SetMetroCode gets a reference to the given string and assigns it to the MetroCode field.
func (o *MetroResponse) SetMetroCode(v string) {
	o.MetroCode = &v
}

// GetMetroDescription returns the MetroDescription field value if set, zero value otherwise.
func (o *MetroResponse) GetMetroDescription() string {
	if o == nil || IsNil(o.MetroDescription) {
		var ret string
		return ret
	}
	return *o.MetroDescription
}

// GetMetroDescriptionOk returns a tuple with the MetroDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetroResponse) GetMetroDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.MetroDescription) {
		return nil, false
	}
	return o.MetroDescription, true
}

// HasMetroDescription returns a boolean if a field has been set.
func (o *MetroResponse) HasMetroDescription() bool {
	if o != nil && !IsNil(o.MetroDescription) {
		return true
	}

	return false
}

// SetMetroDescription gets a reference to the given string and assigns it to the MetroDescription field.
func (o *MetroResponse) SetMetroDescription(v string) {
	o.MetroDescription = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *MetroResponse) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetroResponse) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *MetroResponse) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *MetroResponse) SetRegion(v string) {
	o.Region = &v
}

// GetClusterSupported returns the ClusterSupported field value if set, zero value otherwise.
func (o *MetroResponse) GetClusterSupported() bool {
	if o == nil || IsNil(o.ClusterSupported) {
		var ret bool
		return ret
	}
	return *o.ClusterSupported
}

// GetClusterSupportedOk returns a tuple with the ClusterSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetroResponse) GetClusterSupportedOk() (*bool, bool) {
	if o == nil || IsNil(o.ClusterSupported) {
		return nil, false
	}
	return o.ClusterSupported, true
}

// HasClusterSupported returns a boolean if a field has been set.
func (o *MetroResponse) HasClusterSupported() bool {
	if o != nil && !IsNil(o.ClusterSupported) {
		return true
	}

	return false
}

// SetClusterSupported gets a reference to the given bool and assigns it to the ClusterSupported field.
func (o *MetroResponse) SetClusterSupported(v bool) {
	o.ClusterSupported = &v
}

func (o MetroResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetroResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MetroCode) {
		toSerialize["metroCode"] = o.MetroCode
	}
	if !IsNil(o.MetroDescription) {
		toSerialize["metroDescription"] = o.MetroDescription
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.ClusterSupported) {
		toSerialize["clusterSupported"] = o.ClusterSupported
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MetroResponse) UnmarshalJSON(data []byte) (err error) {
	varMetroResponse := _MetroResponse{}

	err = json.Unmarshal(data, &varMetroResponse)

	if err != nil {
		return err
	}

	*o = MetroResponse(varMetroResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "metroCode")
		delete(additionalProperties, "metroDescription")
		delete(additionalProperties, "region")
		delete(additionalProperties, "clusterSupported")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMetroResponse struct {
	value *MetroResponse
	isSet bool
}

func (v NullableMetroResponse) Get() *MetroResponse {
	return v.value
}

func (v *NullableMetroResponse) Set(val *MetroResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMetroResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMetroResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetroResponse(val *MetroResponse) *NullableMetroResponse {
	return &NullableMetroResponse{value: val, isSet: true}
}

func (v NullableMetroResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetroResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
