/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the AllowedInterfaceProfiles type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AllowedInterfaceProfiles{}

// AllowedInterfaceProfiles struct for AllowedInterfaceProfiles
type AllowedInterfaceProfiles struct {
	// Allowed interface count
	Count      *float32           `json:"count,omitempty"`
	Interfaces []InterfaceDetails `json:"interfaces,omitempty"`
	// Whether this will be the default interface count if you do not provide a number.
	Default              *bool `json:"default,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AllowedInterfaceProfiles AllowedInterfaceProfiles

// NewAllowedInterfaceProfiles instantiates a new AllowedInterfaceProfiles object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllowedInterfaceProfiles() *AllowedInterfaceProfiles {
	this := AllowedInterfaceProfiles{}
	return &this
}

// NewAllowedInterfaceProfilesWithDefaults instantiates a new AllowedInterfaceProfiles object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllowedInterfaceProfilesWithDefaults() *AllowedInterfaceProfiles {
	this := AllowedInterfaceProfiles{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *AllowedInterfaceProfiles) GetCount() float32 {
	if o == nil || IsNil(o.Count) {
		var ret float32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllowedInterfaceProfiles) GetCountOk() (*float32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *AllowedInterfaceProfiles) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given float32 and assigns it to the Count field.
func (o *AllowedInterfaceProfiles) SetCount(v float32) {
	o.Count = &v
}

// GetInterfaces returns the Interfaces field value if set, zero value otherwise.
func (o *AllowedInterfaceProfiles) GetInterfaces() []InterfaceDetails {
	if o == nil || IsNil(o.Interfaces) {
		var ret []InterfaceDetails
		return ret
	}
	return o.Interfaces
}

// GetInterfacesOk returns a tuple with the Interfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllowedInterfaceProfiles) GetInterfacesOk() ([]InterfaceDetails, bool) {
	if o == nil || IsNil(o.Interfaces) {
		return nil, false
	}
	return o.Interfaces, true
}

// HasInterfaces returns a boolean if a field has been set.
func (o *AllowedInterfaceProfiles) HasInterfaces() bool {
	if o != nil && !IsNil(o.Interfaces) {
		return true
	}

	return false
}

// SetInterfaces gets a reference to the given []InterfaceDetails and assigns it to the Interfaces field.
func (o *AllowedInterfaceProfiles) SetInterfaces(v []InterfaceDetails) {
	o.Interfaces = v
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *AllowedInterfaceProfiles) GetDefault() bool {
	if o == nil || IsNil(o.Default) {
		var ret bool
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllowedInterfaceProfiles) GetDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.Default) {
		return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *AllowedInterfaceProfiles) HasDefault() bool {
	if o != nil && !IsNil(o.Default) {
		return true
	}

	return false
}

// SetDefault gets a reference to the given bool and assigns it to the Default field.
func (o *AllowedInterfaceProfiles) SetDefault(v bool) {
	o.Default = &v
}

func (o AllowedInterfaceProfiles) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AllowedInterfaceProfiles) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.Interfaces) {
		toSerialize["interfaces"] = o.Interfaces
	}
	if !IsNil(o.Default) {
		toSerialize["default"] = o.Default
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AllowedInterfaceProfiles) UnmarshalJSON(data []byte) (err error) {
	varAllowedInterfaceProfiles := _AllowedInterfaceProfiles{}

	err = json.Unmarshal(data, &varAllowedInterfaceProfiles)

	if err != nil {
		return err
	}

	*o = AllowedInterfaceProfiles(varAllowedInterfaceProfiles)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "count")
		delete(additionalProperties, "interfaces")
		delete(additionalProperties, "default")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAllowedInterfaceProfiles struct {
	value *AllowedInterfaceProfiles
	isSet bool
}

func (v NullableAllowedInterfaceProfiles) Get() *AllowedInterfaceProfiles {
	return v.value
}

func (v *NullableAllowedInterfaceProfiles) Set(val *AllowedInterfaceProfiles) {
	v.value = val
	v.isSet = true
}

func (v NullableAllowedInterfaceProfiles) IsSet() bool {
	return v.isSet
}

func (v *NullableAllowedInterfaceProfiles) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllowedInterfaceProfiles(val *AllowedInterfaceProfiles) *NullableAllowedInterfaceProfiles {
	return &NullableAllowedInterfaceProfiles{value: val, isSet: true}
}

func (v NullableAllowedInterfaceProfiles) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllowedInterfaceProfiles) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
