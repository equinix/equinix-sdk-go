/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the SshUsers type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SshUsers{}

// SshUsers struct for SshUsers
type SshUsers struct {
	// sshUsername. This should be minimum 3 and maximum 32 characters and include alphanumeric characters, dash, and underscore.
	SshUsername *string `json:"sshUsername,omitempty"`
	// sshPassword
	SshPassword *string `json:"sshPassword,omitempty"`
	// sshUserUuid
	SshUserUuid *string `json:"sshUserUuid,omitempty"`
	// action
	Action               *string `json:"action,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SshUsers SshUsers

// NewSshUsers instantiates a new SshUsers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSshUsers() *SshUsers {
	this := SshUsers{}
	return &this
}

// NewSshUsersWithDefaults instantiates a new SshUsers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSshUsersWithDefaults() *SshUsers {
	this := SshUsers{}
	return &this
}

// GetSshUsername returns the SshUsername field value if set, zero value otherwise.
func (o *SshUsers) GetSshUsername() string {
	if o == nil || IsNil(o.SshUsername) {
		var ret string
		return ret
	}
	return *o.SshUsername
}

// GetSshUsernameOk returns a tuple with the SshUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshUsers) GetSshUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.SshUsername) {
		return nil, false
	}
	return o.SshUsername, true
}

// HasSshUsername returns a boolean if a field has been set.
func (o *SshUsers) HasSshUsername() bool {
	if o != nil && !IsNil(o.SshUsername) {
		return true
	}

	return false
}

// SetSshUsername gets a reference to the given string and assigns it to the SshUsername field.
func (o *SshUsers) SetSshUsername(v string) {
	o.SshUsername = &v
}

// GetSshPassword returns the SshPassword field value if set, zero value otherwise.
func (o *SshUsers) GetSshPassword() string {
	if o == nil || IsNil(o.SshPassword) {
		var ret string
		return ret
	}
	return *o.SshPassword
}

// GetSshPasswordOk returns a tuple with the SshPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshUsers) GetSshPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.SshPassword) {
		return nil, false
	}
	return o.SshPassword, true
}

// HasSshPassword returns a boolean if a field has been set.
func (o *SshUsers) HasSshPassword() bool {
	if o != nil && !IsNil(o.SshPassword) {
		return true
	}

	return false
}

// SetSshPassword gets a reference to the given string and assigns it to the SshPassword field.
func (o *SshUsers) SetSshPassword(v string) {
	o.SshPassword = &v
}

// GetSshUserUuid returns the SshUserUuid field value if set, zero value otherwise.
func (o *SshUsers) GetSshUserUuid() string {
	if o == nil || IsNil(o.SshUserUuid) {
		var ret string
		return ret
	}
	return *o.SshUserUuid
}

// GetSshUserUuidOk returns a tuple with the SshUserUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshUsers) GetSshUserUuidOk() (*string, bool) {
	if o == nil || IsNil(o.SshUserUuid) {
		return nil, false
	}
	return o.SshUserUuid, true
}

// HasSshUserUuid returns a boolean if a field has been set.
func (o *SshUsers) HasSshUserUuid() bool {
	if o != nil && !IsNil(o.SshUserUuid) {
		return true
	}

	return false
}

// SetSshUserUuid gets a reference to the given string and assigns it to the SshUserUuid field.
func (o *SshUsers) SetSshUserUuid(v string) {
	o.SshUserUuid = &v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *SshUsers) GetAction() string {
	if o == nil || IsNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshUsers) GetActionOk() (*string, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *SshUsers) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *SshUsers) SetAction(v string) {
	o.Action = &v
}

func (o SshUsers) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SshUsers) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SshUsername) {
		toSerialize["sshUsername"] = o.SshUsername
	}
	if !IsNil(o.SshPassword) {
		toSerialize["sshPassword"] = o.SshPassword
	}
	if !IsNil(o.SshUserUuid) {
		toSerialize["sshUserUuid"] = o.SshUserUuid
	}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SshUsers) UnmarshalJSON(data []byte) (err error) {
	varSshUsers := _SshUsers{}

	err = json.Unmarshal(data, &varSshUsers)

	if err != nil {
		return err
	}

	*o = SshUsers(varSshUsers)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "sshUsername")
		delete(additionalProperties, "sshPassword")
		delete(additionalProperties, "sshUserUuid")
		delete(additionalProperties, "action")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSshUsers struct {
	value *SshUsers
	isSet bool
}

func (v NullableSshUsers) Get() *SshUsers {
	return v.value
}

func (v *NullableSshUsers) Set(val *SshUsers) {
	v.value = val
	v.isSet = true
}

func (v NullableSshUsers) IsSet() bool {
	return v.isSet
}

func (v *NullableSshUsers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSshUsers(val *SshUsers) *NullableSshUsers {
	return &NullableSshUsers{value: val, isSet: true}
}

func (v NullableSshUsers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSshUsers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
