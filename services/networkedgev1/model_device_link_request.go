/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
	"fmt"
)

// checks if the DeviceLinkRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceLinkRequest{}

// DeviceLinkRequest struct for DeviceLinkRequest
type DeviceLinkRequest struct {
	// Group name.
	GroupName string `json:"groupName"`
	// Subnet of the link group.
	Subnet string `json:"subnet"`
	// Whether the connection should be created through Fabric's primary or secondary port.
	RedundancyType *string `json:"redundancyType,omitempty"`
	// An array of devices to link.
	LinkDevices []LinkDeviceInfo `json:"linkDevices,omitempty"`
	// An array of links.
	MetroLinks           []LinkInfo `json:"metroLinks,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DeviceLinkRequest DeviceLinkRequest

// NewDeviceLinkRequest instantiates a new DeviceLinkRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceLinkRequest(groupName string, subnet string) *DeviceLinkRequest {
	this := DeviceLinkRequest{}
	this.GroupName = groupName
	this.Subnet = subnet
	return &this
}

// NewDeviceLinkRequestWithDefaults instantiates a new DeviceLinkRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceLinkRequestWithDefaults() *DeviceLinkRequest {
	this := DeviceLinkRequest{}
	return &this
}

// GetGroupName returns the GroupName field value
func (o *DeviceLinkRequest) GetGroupName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupName
}

// GetGroupNameOk returns a tuple with the GroupName field value
// and a boolean to check if the value has been set.
func (o *DeviceLinkRequest) GetGroupNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupName, true
}

// SetGroupName sets field value
func (o *DeviceLinkRequest) SetGroupName(v string) {
	o.GroupName = v
}

// GetSubnet returns the Subnet field value
func (o *DeviceLinkRequest) GetSubnet() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subnet
}

// GetSubnetOk returns a tuple with the Subnet field value
// and a boolean to check if the value has been set.
func (o *DeviceLinkRequest) GetSubnetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subnet, true
}

// SetSubnet sets field value
func (o *DeviceLinkRequest) SetSubnet(v string) {
	o.Subnet = v
}

// GetRedundancyType returns the RedundancyType field value if set, zero value otherwise.
func (o *DeviceLinkRequest) GetRedundancyType() string {
	if o == nil || IsNil(o.RedundancyType) {
		var ret string
		return ret
	}
	return *o.RedundancyType
}

// GetRedundancyTypeOk returns a tuple with the RedundancyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceLinkRequest) GetRedundancyTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RedundancyType) {
		return nil, false
	}
	return o.RedundancyType, true
}

// HasRedundancyType returns a boolean if a field has been set.
func (o *DeviceLinkRequest) HasRedundancyType() bool {
	if o != nil && !IsNil(o.RedundancyType) {
		return true
	}

	return false
}

// SetRedundancyType gets a reference to the given string and assigns it to the RedundancyType field.
func (o *DeviceLinkRequest) SetRedundancyType(v string) {
	o.RedundancyType = &v
}

// GetLinkDevices returns the LinkDevices field value if set, zero value otherwise.
func (o *DeviceLinkRequest) GetLinkDevices() []LinkDeviceInfo {
	if o == nil || IsNil(o.LinkDevices) {
		var ret []LinkDeviceInfo
		return ret
	}
	return o.LinkDevices
}

// GetLinkDevicesOk returns a tuple with the LinkDevices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceLinkRequest) GetLinkDevicesOk() ([]LinkDeviceInfo, bool) {
	if o == nil || IsNil(o.LinkDevices) {
		return nil, false
	}
	return o.LinkDevices, true
}

// HasLinkDevices returns a boolean if a field has been set.
func (o *DeviceLinkRequest) HasLinkDevices() bool {
	if o != nil && !IsNil(o.LinkDevices) {
		return true
	}

	return false
}

// SetLinkDevices gets a reference to the given []LinkDeviceInfo and assigns it to the LinkDevices field.
func (o *DeviceLinkRequest) SetLinkDevices(v []LinkDeviceInfo) {
	o.LinkDevices = v
}

// GetMetroLinks returns the MetroLinks field value if set, zero value otherwise.
func (o *DeviceLinkRequest) GetMetroLinks() []LinkInfo {
	if o == nil || IsNil(o.MetroLinks) {
		var ret []LinkInfo
		return ret
	}
	return o.MetroLinks
}

// GetMetroLinksOk returns a tuple with the MetroLinks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceLinkRequest) GetMetroLinksOk() ([]LinkInfo, bool) {
	if o == nil || IsNil(o.MetroLinks) {
		return nil, false
	}
	return o.MetroLinks, true
}

// HasMetroLinks returns a boolean if a field has been set.
func (o *DeviceLinkRequest) HasMetroLinks() bool {
	if o != nil && !IsNil(o.MetroLinks) {
		return true
	}

	return false
}

// SetMetroLinks gets a reference to the given []LinkInfo and assigns it to the MetroLinks field.
func (o *DeviceLinkRequest) SetMetroLinks(v []LinkInfo) {
	o.MetroLinks = v
}

func (o DeviceLinkRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceLinkRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["groupName"] = o.GroupName
	toSerialize["subnet"] = o.Subnet
	if !IsNil(o.RedundancyType) {
		toSerialize["redundancyType"] = o.RedundancyType
	}
	if !IsNil(o.LinkDevices) {
		toSerialize["linkDevices"] = o.LinkDevices
	}
	if !IsNil(o.MetroLinks) {
		toSerialize["metroLinks"] = o.MetroLinks
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeviceLinkRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"groupName",
		"subnet",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeviceLinkRequest := _DeviceLinkRequest{}

	err = json.Unmarshal(data, &varDeviceLinkRequest)

	if err != nil {
		return err
	}

	*o = DeviceLinkRequest(varDeviceLinkRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "groupName")
		delete(additionalProperties, "subnet")
		delete(additionalProperties, "redundancyType")
		delete(additionalProperties, "linkDevices")
		delete(additionalProperties, "metroLinks")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeviceLinkRequest struct {
	value *DeviceLinkRequest
	isSet bool
}

func (v NullableDeviceLinkRequest) Get() *DeviceLinkRequest {
	return v.value
}

func (v *NullableDeviceLinkRequest) Set(val *DeviceLinkRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceLinkRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceLinkRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceLinkRequest(val *DeviceLinkRequest) *NullableDeviceLinkRequest {
	return &NullableDeviceLinkRequest{value: val, isSet: true}
}

func (v NullableDeviceLinkRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceLinkRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
