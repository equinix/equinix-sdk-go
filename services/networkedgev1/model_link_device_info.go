/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
	"fmt"
)

// checks if the LinkDeviceInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LinkDeviceInfo{}

// LinkDeviceInfo Unique Id of a device.
type LinkDeviceInfo struct {
	// The ASN number of the device. The request will fail if you provide a new ASN for a device that already has an ASN.
	Asn *int64 `json:"asn,omitempty"`
	// device
	DeviceUuid string `json:"deviceUuid"`
	// Any available interface of the device.
	InterfaceId          *int32 `json:"interfaceId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LinkDeviceInfo LinkDeviceInfo

// NewLinkDeviceInfo instantiates a new LinkDeviceInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinkDeviceInfo(deviceUuid string) *LinkDeviceInfo {
	this := LinkDeviceInfo{}
	this.DeviceUuid = deviceUuid
	return &this
}

// NewLinkDeviceInfoWithDefaults instantiates a new LinkDeviceInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkDeviceInfoWithDefaults() *LinkDeviceInfo {
	this := LinkDeviceInfo{}
	return &this
}

// GetAsn returns the Asn field value if set, zero value otherwise.
func (o *LinkDeviceInfo) GetAsn() int64 {
	if o == nil || IsNil(o.Asn) {
		var ret int64
		return ret
	}
	return *o.Asn
}

// GetAsnOk returns a tuple with the Asn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDeviceInfo) GetAsnOk() (*int64, bool) {
	if o == nil || IsNil(o.Asn) {
		return nil, false
	}
	return o.Asn, true
}

// HasAsn returns a boolean if a field has been set.
func (o *LinkDeviceInfo) HasAsn() bool {
	if o != nil && !IsNil(o.Asn) {
		return true
	}

	return false
}

// SetAsn gets a reference to the given int64 and assigns it to the Asn field.
func (o *LinkDeviceInfo) SetAsn(v int64) {
	o.Asn = &v
}

// GetDeviceUuid returns the DeviceUuid field value
func (o *LinkDeviceInfo) GetDeviceUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeviceUuid
}

// GetDeviceUuidOk returns a tuple with the DeviceUuid field value
// and a boolean to check if the value has been set.
func (o *LinkDeviceInfo) GetDeviceUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceUuid, true
}

// SetDeviceUuid sets field value
func (o *LinkDeviceInfo) SetDeviceUuid(v string) {
	o.DeviceUuid = v
}

// GetInterfaceId returns the InterfaceId field value if set, zero value otherwise.
func (o *LinkDeviceInfo) GetInterfaceId() int32 {
	if o == nil || IsNil(o.InterfaceId) {
		var ret int32
		return ret
	}
	return *o.InterfaceId
}

// GetInterfaceIdOk returns a tuple with the InterfaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDeviceInfo) GetInterfaceIdOk() (*int32, bool) {
	if o == nil || IsNil(o.InterfaceId) {
		return nil, false
	}
	return o.InterfaceId, true
}

// HasInterfaceId returns a boolean if a field has been set.
func (o *LinkDeviceInfo) HasInterfaceId() bool {
	if o != nil && !IsNil(o.InterfaceId) {
		return true
	}

	return false
}

// SetInterfaceId gets a reference to the given int32 and assigns it to the InterfaceId field.
func (o *LinkDeviceInfo) SetInterfaceId(v int32) {
	o.InterfaceId = &v
}

func (o LinkDeviceInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LinkDeviceInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Asn) {
		toSerialize["asn"] = o.Asn
	}
	toSerialize["deviceUuid"] = o.DeviceUuid
	if !IsNil(o.InterfaceId) {
		toSerialize["interfaceId"] = o.InterfaceId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LinkDeviceInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"deviceUuid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLinkDeviceInfo := _LinkDeviceInfo{}

	err = json.Unmarshal(data, &varLinkDeviceInfo)

	if err != nil {
		return err
	}

	*o = LinkDeviceInfo(varLinkDeviceInfo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "asn")
		delete(additionalProperties, "deviceUuid")
		delete(additionalProperties, "interfaceId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLinkDeviceInfo struct {
	value *LinkDeviceInfo
	isSet bool
}

func (v NullableLinkDeviceInfo) Get() *LinkDeviceInfo {
	return v.value
}

func (v *NullableLinkDeviceInfo) Set(val *LinkDeviceInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkDeviceInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkDeviceInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkDeviceInfo(val *LinkDeviceInfo) *NullableLinkDeviceInfo {
	return &NullableLinkDeviceInfo{value: val, isSet: true}
}

func (v NullableLinkDeviceInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkDeviceInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
