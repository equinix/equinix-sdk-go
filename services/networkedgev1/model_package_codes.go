/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the PackageCodes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PackageCodes{}

// PackageCodes struct for PackageCodes
type PackageCodes struct {
	// The type of package.
	PackageCode             *string            `json:"packageCode,omitempty"`
	ExcludedVersions        []string           `json:"excludedVersions,omitempty"`
	ExcludedClusterVersions []string           `json:"excludedClusterVersions,omitempty"`
	SupportedLicenseTiers   []string           `json:"supportedLicenseTiers,omitempty"`
	Throughputs             []ThroughputConfig `json:"throughputs,omitempty"`
	// Whether this software package is supported or not.
	Supported            *bool `json:"supported,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PackageCodes PackageCodes

// NewPackageCodes instantiates a new PackageCodes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPackageCodes() *PackageCodes {
	this := PackageCodes{}
	return &this
}

// NewPackageCodesWithDefaults instantiates a new PackageCodes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPackageCodesWithDefaults() *PackageCodes {
	this := PackageCodes{}
	return &this
}

// GetPackageCode returns the PackageCode field value if set, zero value otherwise.
func (o *PackageCodes) GetPackageCode() string {
	if o == nil || IsNil(o.PackageCode) {
		var ret string
		return ret
	}
	return *o.PackageCode
}

// GetPackageCodeOk returns a tuple with the PackageCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageCodes) GetPackageCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PackageCode) {
		return nil, false
	}
	return o.PackageCode, true
}

// HasPackageCode returns a boolean if a field has been set.
func (o *PackageCodes) HasPackageCode() bool {
	if o != nil && !IsNil(o.PackageCode) {
		return true
	}

	return false
}

// SetPackageCode gets a reference to the given string and assigns it to the PackageCode field.
func (o *PackageCodes) SetPackageCode(v string) {
	o.PackageCode = &v
}

// GetExcludedVersions returns the ExcludedVersions field value if set, zero value otherwise.
func (o *PackageCodes) GetExcludedVersions() []string {
	if o == nil || IsNil(o.ExcludedVersions) {
		var ret []string
		return ret
	}
	return o.ExcludedVersions
}

// GetExcludedVersionsOk returns a tuple with the ExcludedVersions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageCodes) GetExcludedVersionsOk() ([]string, bool) {
	if o == nil || IsNil(o.ExcludedVersions) {
		return nil, false
	}
	return o.ExcludedVersions, true
}

// HasExcludedVersions returns a boolean if a field has been set.
func (o *PackageCodes) HasExcludedVersions() bool {
	if o != nil && !IsNil(o.ExcludedVersions) {
		return true
	}

	return false
}

// SetExcludedVersions gets a reference to the given []string and assigns it to the ExcludedVersions field.
func (o *PackageCodes) SetExcludedVersions(v []string) {
	o.ExcludedVersions = v
}

// GetExcludedClusterVersions returns the ExcludedClusterVersions field value if set, zero value otherwise.
func (o *PackageCodes) GetExcludedClusterVersions() []string {
	if o == nil || IsNil(o.ExcludedClusterVersions) {
		var ret []string
		return ret
	}
	return o.ExcludedClusterVersions
}

// GetExcludedClusterVersionsOk returns a tuple with the ExcludedClusterVersions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageCodes) GetExcludedClusterVersionsOk() ([]string, bool) {
	if o == nil || IsNil(o.ExcludedClusterVersions) {
		return nil, false
	}
	return o.ExcludedClusterVersions, true
}

// HasExcludedClusterVersions returns a boolean if a field has been set.
func (o *PackageCodes) HasExcludedClusterVersions() bool {
	if o != nil && !IsNil(o.ExcludedClusterVersions) {
		return true
	}

	return false
}

// SetExcludedClusterVersions gets a reference to the given []string and assigns it to the ExcludedClusterVersions field.
func (o *PackageCodes) SetExcludedClusterVersions(v []string) {
	o.ExcludedClusterVersions = v
}

// GetSupportedLicenseTiers returns the SupportedLicenseTiers field value if set, zero value otherwise.
func (o *PackageCodes) GetSupportedLicenseTiers() []string {
	if o == nil || IsNil(o.SupportedLicenseTiers) {
		var ret []string
		return ret
	}
	return o.SupportedLicenseTiers
}

// GetSupportedLicenseTiersOk returns a tuple with the SupportedLicenseTiers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageCodes) GetSupportedLicenseTiersOk() ([]string, bool) {
	if o == nil || IsNil(o.SupportedLicenseTiers) {
		return nil, false
	}
	return o.SupportedLicenseTiers, true
}

// HasSupportedLicenseTiers returns a boolean if a field has been set.
func (o *PackageCodes) HasSupportedLicenseTiers() bool {
	if o != nil && !IsNil(o.SupportedLicenseTiers) {
		return true
	}

	return false
}

// SetSupportedLicenseTiers gets a reference to the given []string and assigns it to the SupportedLicenseTiers field.
func (o *PackageCodes) SetSupportedLicenseTiers(v []string) {
	o.SupportedLicenseTiers = v
}

// GetThroughputs returns the Throughputs field value if set, zero value otherwise.
func (o *PackageCodes) GetThroughputs() []ThroughputConfig {
	if o == nil || IsNil(o.Throughputs) {
		var ret []ThroughputConfig
		return ret
	}
	return o.Throughputs
}

// GetThroughputsOk returns a tuple with the Throughputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageCodes) GetThroughputsOk() ([]ThroughputConfig, bool) {
	if o == nil || IsNil(o.Throughputs) {
		return nil, false
	}
	return o.Throughputs, true
}

// HasThroughputs returns a boolean if a field has been set.
func (o *PackageCodes) HasThroughputs() bool {
	if o != nil && !IsNil(o.Throughputs) {
		return true
	}

	return false
}

// SetThroughputs gets a reference to the given []ThroughputConfig and assigns it to the Throughputs field.
func (o *PackageCodes) SetThroughputs(v []ThroughputConfig) {
	o.Throughputs = v
}

// GetSupported returns the Supported field value if set, zero value otherwise.
func (o *PackageCodes) GetSupported() bool {
	if o == nil || IsNil(o.Supported) {
		var ret bool
		return ret
	}
	return *o.Supported
}

// GetSupportedOk returns a tuple with the Supported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageCodes) GetSupportedOk() (*bool, bool) {
	if o == nil || IsNil(o.Supported) {
		return nil, false
	}
	return o.Supported, true
}

// HasSupported returns a boolean if a field has been set.
func (o *PackageCodes) HasSupported() bool {
	if o != nil && !IsNil(o.Supported) {
		return true
	}

	return false
}

// SetSupported gets a reference to the given bool and assigns it to the Supported field.
func (o *PackageCodes) SetSupported(v bool) {
	o.Supported = &v
}

func (o PackageCodes) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PackageCodes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PackageCode) {
		toSerialize["packageCode"] = o.PackageCode
	}
	if !IsNil(o.ExcludedVersions) {
		toSerialize["excludedVersions"] = o.ExcludedVersions
	}
	if !IsNil(o.ExcludedClusterVersions) {
		toSerialize["excludedClusterVersions"] = o.ExcludedClusterVersions
	}
	if !IsNil(o.SupportedLicenseTiers) {
		toSerialize["supportedLicenseTiers"] = o.SupportedLicenseTiers
	}
	if !IsNil(o.Throughputs) {
		toSerialize["throughputs"] = o.Throughputs
	}
	if !IsNil(o.Supported) {
		toSerialize["supported"] = o.Supported
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PackageCodes) UnmarshalJSON(data []byte) (err error) {
	varPackageCodes := _PackageCodes{}

	err = json.Unmarshal(data, &varPackageCodes)

	if err != nil {
		return err
	}

	*o = PackageCodes(varPackageCodes)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "packageCode")
		delete(additionalProperties, "excludedVersions")
		delete(additionalProperties, "excludedClusterVersions")
		delete(additionalProperties, "supportedLicenseTiers")
		delete(additionalProperties, "throughputs")
		delete(additionalProperties, "supported")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePackageCodes struct {
	value *PackageCodes
	isSet bool
}

func (v NullablePackageCodes) Get() *PackageCodes {
	return v.value
}

func (v *NullablePackageCodes) Set(val *PackageCodes) {
	v.value = val
	v.isSet = true
}

func (v NullablePackageCodes) IsSet() bool {
	return v.isSet
}

func (v *NullablePackageCodes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePackageCodes(val *PackageCodes) *NullablePackageCodes {
	return &NullablePackageCodes{value: val, isSet: true}
}

func (v NullablePackageCodes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePackageCodes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
