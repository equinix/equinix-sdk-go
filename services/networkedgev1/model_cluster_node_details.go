/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the ClusterNodeDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterNodeDetails{}

// ClusterNodeDetails struct for ClusterNodeDetails
type ClusterNodeDetails struct {
	Node0                *Node0Details `json:"node0,omitempty"`
	Node1                *Node1Details `json:"node1,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ClusterNodeDetails ClusterNodeDetails

// NewClusterNodeDetails instantiates a new ClusterNodeDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterNodeDetails() *ClusterNodeDetails {
	this := ClusterNodeDetails{}
	return &this
}

// NewClusterNodeDetailsWithDefaults instantiates a new ClusterNodeDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterNodeDetailsWithDefaults() *ClusterNodeDetails {
	this := ClusterNodeDetails{}
	return &this
}

// GetNode0 returns the Node0 field value if set, zero value otherwise.
func (o *ClusterNodeDetails) GetNode0() Node0Details {
	if o == nil || IsNil(o.Node0) {
		var ret Node0Details
		return ret
	}
	return *o.Node0
}

// GetNode0Ok returns a tuple with the Node0 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterNodeDetails) GetNode0Ok() (*Node0Details, bool) {
	if o == nil || IsNil(o.Node0) {
		return nil, false
	}
	return o.Node0, true
}

// HasNode0 returns a boolean if a field has been set.
func (o *ClusterNodeDetails) HasNode0() bool {
	if o != nil && !IsNil(o.Node0) {
		return true
	}

	return false
}

// SetNode0 gets a reference to the given Node0Details and assigns it to the Node0 field.
func (o *ClusterNodeDetails) SetNode0(v Node0Details) {
	o.Node0 = &v
}

// GetNode1 returns the Node1 field value if set, zero value otherwise.
func (o *ClusterNodeDetails) GetNode1() Node1Details {
	if o == nil || IsNil(o.Node1) {
		var ret Node1Details
		return ret
	}
	return *o.Node1
}

// GetNode1Ok returns a tuple with the Node1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterNodeDetails) GetNode1Ok() (*Node1Details, bool) {
	if o == nil || IsNil(o.Node1) {
		return nil, false
	}
	return o.Node1, true
}

// HasNode1 returns a boolean if a field has been set.
func (o *ClusterNodeDetails) HasNode1() bool {
	if o != nil && !IsNil(o.Node1) {
		return true
	}

	return false
}

// SetNode1 gets a reference to the given Node1Details and assigns it to the Node1 field.
func (o *ClusterNodeDetails) SetNode1(v Node1Details) {
	o.Node1 = &v
}

func (o ClusterNodeDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterNodeDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Node0) {
		toSerialize["node0"] = o.Node0
	}
	if !IsNil(o.Node1) {
		toSerialize["node1"] = o.Node1
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ClusterNodeDetails) UnmarshalJSON(data []byte) (err error) {
	varClusterNodeDetails := _ClusterNodeDetails{}

	err = json.Unmarshal(data, &varClusterNodeDetails)

	if err != nil {
		return err
	}

	*o = ClusterNodeDetails(varClusterNodeDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "node0")
		delete(additionalProperties, "node1")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableClusterNodeDetails struct {
	value *ClusterNodeDetails
	isSet bool
}

func (v NullableClusterNodeDetails) Get() *ClusterNodeDetails {
	return v.value
}

func (v *NullableClusterNodeDetails) Set(val *ClusterNodeDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterNodeDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterNodeDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterNodeDetails(val *ClusterNodeDetails) *NullableClusterNodeDetails {
	return &NullableClusterNodeDetails{value: val, isSet: true}
}

func (v NullableClusterNodeDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterNodeDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
