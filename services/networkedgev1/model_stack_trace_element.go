/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the StackTraceElement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StackTraceElement{}

// StackTraceElement struct for StackTraceElement
type StackTraceElement struct {
	ClassName            *string `json:"className,omitempty"`
	FileName             *string `json:"fileName,omitempty"`
	LineNumber           *int32  `json:"lineNumber,omitempty"`
	MethodName           *string `json:"methodName,omitempty"`
	NativeMethod         *bool   `json:"nativeMethod,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StackTraceElement StackTraceElement

// NewStackTraceElement instantiates a new StackTraceElement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStackTraceElement() *StackTraceElement {
	this := StackTraceElement{}
	return &this
}

// NewStackTraceElementWithDefaults instantiates a new StackTraceElement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStackTraceElementWithDefaults() *StackTraceElement {
	this := StackTraceElement{}
	return &this
}

// GetClassName returns the ClassName field value if set, zero value otherwise.
func (o *StackTraceElement) GetClassName() string {
	if o == nil || IsNil(o.ClassName) {
		var ret string
		return ret
	}
	return *o.ClassName
}

// GetClassNameOk returns a tuple with the ClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackTraceElement) GetClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.ClassName) {
		return nil, false
	}
	return o.ClassName, true
}

// HasClassName returns a boolean if a field has been set.
func (o *StackTraceElement) HasClassName() bool {
	if o != nil && !IsNil(o.ClassName) {
		return true
	}

	return false
}

// SetClassName gets a reference to the given string and assigns it to the ClassName field.
func (o *StackTraceElement) SetClassName(v string) {
	o.ClassName = &v
}

// GetFileName returns the FileName field value if set, zero value otherwise.
func (o *StackTraceElement) GetFileName() string {
	if o == nil || IsNil(o.FileName) {
		var ret string
		return ret
	}
	return *o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackTraceElement) GetFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.FileName) {
		return nil, false
	}
	return o.FileName, true
}

// HasFileName returns a boolean if a field has been set.
func (o *StackTraceElement) HasFileName() bool {
	if o != nil && !IsNil(o.FileName) {
		return true
	}

	return false
}

// SetFileName gets a reference to the given string and assigns it to the FileName field.
func (o *StackTraceElement) SetFileName(v string) {
	o.FileName = &v
}

// GetLineNumber returns the LineNumber field value if set, zero value otherwise.
func (o *StackTraceElement) GetLineNumber() int32 {
	if o == nil || IsNil(o.LineNumber) {
		var ret int32
		return ret
	}
	return *o.LineNumber
}

// GetLineNumberOk returns a tuple with the LineNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackTraceElement) GetLineNumberOk() (*int32, bool) {
	if o == nil || IsNil(o.LineNumber) {
		return nil, false
	}
	return o.LineNumber, true
}

// HasLineNumber returns a boolean if a field has been set.
func (o *StackTraceElement) HasLineNumber() bool {
	if o != nil && !IsNil(o.LineNumber) {
		return true
	}

	return false
}

// SetLineNumber gets a reference to the given int32 and assigns it to the LineNumber field.
func (o *StackTraceElement) SetLineNumber(v int32) {
	o.LineNumber = &v
}

// GetMethodName returns the MethodName field value if set, zero value otherwise.
func (o *StackTraceElement) GetMethodName() string {
	if o == nil || IsNil(o.MethodName) {
		var ret string
		return ret
	}
	return *o.MethodName
}

// GetMethodNameOk returns a tuple with the MethodName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackTraceElement) GetMethodNameOk() (*string, bool) {
	if o == nil || IsNil(o.MethodName) {
		return nil, false
	}
	return o.MethodName, true
}

// HasMethodName returns a boolean if a field has been set.
func (o *StackTraceElement) HasMethodName() bool {
	if o != nil && !IsNil(o.MethodName) {
		return true
	}

	return false
}

// SetMethodName gets a reference to the given string and assigns it to the MethodName field.
func (o *StackTraceElement) SetMethodName(v string) {
	o.MethodName = &v
}

// GetNativeMethod returns the NativeMethod field value if set, zero value otherwise.
func (o *StackTraceElement) GetNativeMethod() bool {
	if o == nil || IsNil(o.NativeMethod) {
		var ret bool
		return ret
	}
	return *o.NativeMethod
}

// GetNativeMethodOk returns a tuple with the NativeMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackTraceElement) GetNativeMethodOk() (*bool, bool) {
	if o == nil || IsNil(o.NativeMethod) {
		return nil, false
	}
	return o.NativeMethod, true
}

// HasNativeMethod returns a boolean if a field has been set.
func (o *StackTraceElement) HasNativeMethod() bool {
	if o != nil && !IsNil(o.NativeMethod) {
		return true
	}

	return false
}

// SetNativeMethod gets a reference to the given bool and assigns it to the NativeMethod field.
func (o *StackTraceElement) SetNativeMethod(v bool) {
	o.NativeMethod = &v
}

func (o StackTraceElement) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StackTraceElement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClassName) {
		toSerialize["className"] = o.ClassName
	}
	if !IsNil(o.FileName) {
		toSerialize["fileName"] = o.FileName
	}
	if !IsNil(o.LineNumber) {
		toSerialize["lineNumber"] = o.LineNumber
	}
	if !IsNil(o.MethodName) {
		toSerialize["methodName"] = o.MethodName
	}
	if !IsNil(o.NativeMethod) {
		toSerialize["nativeMethod"] = o.NativeMethod
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StackTraceElement) UnmarshalJSON(data []byte) (err error) {
	varStackTraceElement := _StackTraceElement{}

	err = json.Unmarshal(data, &varStackTraceElement)

	if err != nil {
		return err
	}

	*o = StackTraceElement(varStackTraceElement)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "className")
		delete(additionalProperties, "fileName")
		delete(additionalProperties, "lineNumber")
		delete(additionalProperties, "methodName")
		delete(additionalProperties, "nativeMethod")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStackTraceElement struct {
	value *StackTraceElement
	isSet bool
}

func (v NullableStackTraceElement) Get() *StackTraceElement {
	return v.value
}

func (v *NullableStackTraceElement) Set(val *StackTraceElement) {
	v.value = val
	v.isSet = true
}

func (v NullableStackTraceElement) IsSet() bool {
	return v.isSet
}

func (v *NullableStackTraceElement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStackTraceElement(val *StackTraceElement) *NullableStackTraceElement {
	return &NullableStackTraceElement{value: val, isSet: true}
}

func (v NullableStackTraceElement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStackTraceElement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
