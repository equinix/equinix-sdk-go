/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the VirtualDeviceACLDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VirtualDeviceACLDetails{}

// VirtualDeviceACLDetails struct for VirtualDeviceACLDetails
type VirtualDeviceACLDetails struct {
	// Name of the virtual device associated with this template.
	Name *string `json:"name,omitempty"`
	// The unique Id of the virtual device associated with this template.
	Uuid *string `json:"uuid,omitempty"`
	// Interface type, WAN or MGMT.
	InterfaceType *string `json:"interfaceType,omitempty"`
	// Device ACL status
	AclStatus            *string `json:"aclStatus,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VirtualDeviceACLDetails VirtualDeviceACLDetails

// NewVirtualDeviceACLDetails instantiates a new VirtualDeviceACLDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualDeviceACLDetails() *VirtualDeviceACLDetails {
	this := VirtualDeviceACLDetails{}
	return &this
}

// NewVirtualDeviceACLDetailsWithDefaults instantiates a new VirtualDeviceACLDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualDeviceACLDetailsWithDefaults() *VirtualDeviceACLDetails {
	this := VirtualDeviceACLDetails{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VirtualDeviceACLDetails) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceACLDetails) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VirtualDeviceACLDetails) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VirtualDeviceACLDetails) SetName(v string) {
	o.Name = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *VirtualDeviceACLDetails) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceACLDetails) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *VirtualDeviceACLDetails) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *VirtualDeviceACLDetails) SetUuid(v string) {
	o.Uuid = &v
}

// GetInterfaceType returns the InterfaceType field value if set, zero value otherwise.
func (o *VirtualDeviceACLDetails) GetInterfaceType() string {
	if o == nil || IsNil(o.InterfaceType) {
		var ret string
		return ret
	}
	return *o.InterfaceType
}

// GetInterfaceTypeOk returns a tuple with the InterfaceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceACLDetails) GetInterfaceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.InterfaceType) {
		return nil, false
	}
	return o.InterfaceType, true
}

// HasInterfaceType returns a boolean if a field has been set.
func (o *VirtualDeviceACLDetails) HasInterfaceType() bool {
	if o != nil && !IsNil(o.InterfaceType) {
		return true
	}

	return false
}

// SetInterfaceType gets a reference to the given string and assigns it to the InterfaceType field.
func (o *VirtualDeviceACLDetails) SetInterfaceType(v string) {
	o.InterfaceType = &v
}

// GetAclStatus returns the AclStatus field value if set, zero value otherwise.
func (o *VirtualDeviceACLDetails) GetAclStatus() string {
	if o == nil || IsNil(o.AclStatus) {
		var ret string
		return ret
	}
	return *o.AclStatus
}

// GetAclStatusOk returns a tuple with the AclStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceACLDetails) GetAclStatusOk() (*string, bool) {
	if o == nil || IsNil(o.AclStatus) {
		return nil, false
	}
	return o.AclStatus, true
}

// HasAclStatus returns a boolean if a field has been set.
func (o *VirtualDeviceACLDetails) HasAclStatus() bool {
	if o != nil && !IsNil(o.AclStatus) {
		return true
	}

	return false
}

// SetAclStatus gets a reference to the given string and assigns it to the AclStatus field.
func (o *VirtualDeviceACLDetails) SetAclStatus(v string) {
	o.AclStatus = &v
}

func (o VirtualDeviceACLDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VirtualDeviceACLDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.InterfaceType) {
		toSerialize["interfaceType"] = o.InterfaceType
	}
	if !IsNil(o.AclStatus) {
		toSerialize["aclStatus"] = o.AclStatus
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VirtualDeviceACLDetails) UnmarshalJSON(data []byte) (err error) {
	varVirtualDeviceACLDetails := _VirtualDeviceACLDetails{}

	err = json.Unmarshal(data, &varVirtualDeviceACLDetails)

	if err != nil {
		return err
	}

	*o = VirtualDeviceACLDetails(varVirtualDeviceACLDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "interfaceType")
		delete(additionalProperties, "aclStatus")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVirtualDeviceACLDetails struct {
	value *VirtualDeviceACLDetails
	isSet bool
}

func (v NullableVirtualDeviceACLDetails) Get() *VirtualDeviceACLDetails {
	return v.value
}

func (v *NullableVirtualDeviceACLDetails) Set(val *VirtualDeviceACLDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualDeviceACLDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualDeviceACLDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualDeviceACLDetails(val *VirtualDeviceACLDetails) *NullableVirtualDeviceACLDetails {
	return &NullableVirtualDeviceACLDetails{value: val, isSet: true}
}

func (v NullableVirtualDeviceACLDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualDeviceACLDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
