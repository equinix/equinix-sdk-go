/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the Charges type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Charges{}

// Charges struct for Charges
type Charges struct {
	// The description of the charge, whether it is for the virtual device, the device license, or the additional bandwidth.
	Description *string `json:"description,omitempty"`
	// The monthly charges.
	MonthlyRecurringCharges *string `json:"monthlyRecurringCharges,omitempty"`
	AdditionalProperties    map[string]interface{}
}

type _Charges Charges

// NewCharges instantiates a new Charges object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCharges() *Charges {
	this := Charges{}
	return &this
}

// NewChargesWithDefaults instantiates a new Charges object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChargesWithDefaults() *Charges {
	this := Charges{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Charges) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Charges) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Charges) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Charges) SetDescription(v string) {
	o.Description = &v
}

// GetMonthlyRecurringCharges returns the MonthlyRecurringCharges field value if set, zero value otherwise.
func (o *Charges) GetMonthlyRecurringCharges() string {
	if o == nil || IsNil(o.MonthlyRecurringCharges) {
		var ret string
		return ret
	}
	return *o.MonthlyRecurringCharges
}

// GetMonthlyRecurringChargesOk returns a tuple with the MonthlyRecurringCharges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Charges) GetMonthlyRecurringChargesOk() (*string, bool) {
	if o == nil || IsNil(o.MonthlyRecurringCharges) {
		return nil, false
	}
	return o.MonthlyRecurringCharges, true
}

// HasMonthlyRecurringCharges returns a boolean if a field has been set.
func (o *Charges) HasMonthlyRecurringCharges() bool {
	if o != nil && !IsNil(o.MonthlyRecurringCharges) {
		return true
	}

	return false
}

// SetMonthlyRecurringCharges gets a reference to the given string and assigns it to the MonthlyRecurringCharges field.
func (o *Charges) SetMonthlyRecurringCharges(v string) {
	o.MonthlyRecurringCharges = &v
}

func (o Charges) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Charges) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.MonthlyRecurringCharges) {
		toSerialize["monthlyRecurringCharges"] = o.MonthlyRecurringCharges
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Charges) UnmarshalJSON(data []byte) (err error) {
	varCharges := _Charges{}

	err = json.Unmarshal(data, &varCharges)

	if err != nil {
		return err
	}

	*o = Charges(varCharges)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "description")
		delete(additionalProperties, "monthlyRecurringCharges")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCharges struct {
	value *Charges
	isSet bool
}

func (v NullableCharges) Get() *Charges {
	return v.value
}

func (v *NullableCharges) Set(val *Charges) {
	v.value = val
	v.isSet = true
}

func (v NullableCharges) IsSet() bool {
	return v.isSet
}

func (v *NullableCharges) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCharges(val *Charges) *NullableCharges {
	return &NullableCharges{value: val, isSet: true}
}

func (v NullableCharges) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCharges) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
