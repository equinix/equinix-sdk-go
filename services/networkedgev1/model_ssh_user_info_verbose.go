/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the SshUserInfoVerbose type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SshUserInfoVerbose{}

// SshUserInfoVerbose struct for SshUserInfoVerbose
type SshUserInfoVerbose struct {
	// The unique Id of the ssh user.
	Uuid *string `json:"uuid,omitempty"`
	// The user name of the ssh user.
	Username *string `json:"username,omitempty"`
	// The devices associated with this ssh user.
	DeviceUuids []string `json:"deviceUuids,omitempty"`
	// Status and error messages corresponding to the metros where the user exists
	MetroStatusMap       *map[string]MetroStatus `json:"metroStatusMap,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SshUserInfoVerbose SshUserInfoVerbose

// NewSshUserInfoVerbose instantiates a new SshUserInfoVerbose object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSshUserInfoVerbose() *SshUserInfoVerbose {
	this := SshUserInfoVerbose{}
	return &this
}

// NewSshUserInfoVerboseWithDefaults instantiates a new SshUserInfoVerbose object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSshUserInfoVerboseWithDefaults() *SshUserInfoVerbose {
	this := SshUserInfoVerbose{}
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *SshUserInfoVerbose) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshUserInfoVerbose) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *SshUserInfoVerbose) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *SshUserInfoVerbose) SetUuid(v string) {
	o.Uuid = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *SshUserInfoVerbose) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshUserInfoVerbose) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *SshUserInfoVerbose) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *SshUserInfoVerbose) SetUsername(v string) {
	o.Username = &v
}

// GetDeviceUuids returns the DeviceUuids field value if set, zero value otherwise.
func (o *SshUserInfoVerbose) GetDeviceUuids() []string {
	if o == nil || IsNil(o.DeviceUuids) {
		var ret []string
		return ret
	}
	return o.DeviceUuids
}

// GetDeviceUuidsOk returns a tuple with the DeviceUuids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshUserInfoVerbose) GetDeviceUuidsOk() ([]string, bool) {
	if o == nil || IsNil(o.DeviceUuids) {
		return nil, false
	}
	return o.DeviceUuids, true
}

// HasDeviceUuids returns a boolean if a field has been set.
func (o *SshUserInfoVerbose) HasDeviceUuids() bool {
	if o != nil && !IsNil(o.DeviceUuids) {
		return true
	}

	return false
}

// SetDeviceUuids gets a reference to the given []string and assigns it to the DeviceUuids field.
func (o *SshUserInfoVerbose) SetDeviceUuids(v []string) {
	o.DeviceUuids = v
}

// GetMetroStatusMap returns the MetroStatusMap field value if set, zero value otherwise.
func (o *SshUserInfoVerbose) GetMetroStatusMap() map[string]MetroStatus {
	if o == nil || IsNil(o.MetroStatusMap) {
		var ret map[string]MetroStatus
		return ret
	}
	return *o.MetroStatusMap
}

// GetMetroStatusMapOk returns a tuple with the MetroStatusMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshUserInfoVerbose) GetMetroStatusMapOk() (*map[string]MetroStatus, bool) {
	if o == nil || IsNil(o.MetroStatusMap) {
		return nil, false
	}
	return o.MetroStatusMap, true
}

// HasMetroStatusMap returns a boolean if a field has been set.
func (o *SshUserInfoVerbose) HasMetroStatusMap() bool {
	if o != nil && !IsNil(o.MetroStatusMap) {
		return true
	}

	return false
}

// SetMetroStatusMap gets a reference to the given map[string]MetroStatus and assigns it to the MetroStatusMap field.
func (o *SshUserInfoVerbose) SetMetroStatusMap(v map[string]MetroStatus) {
	o.MetroStatusMap = &v
}

func (o SshUserInfoVerbose) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SshUserInfoVerbose) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.DeviceUuids) {
		toSerialize["deviceUuids"] = o.DeviceUuids
	}
	if !IsNil(o.MetroStatusMap) {
		toSerialize["metroStatusMap"] = o.MetroStatusMap
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SshUserInfoVerbose) UnmarshalJSON(data []byte) (err error) {
	varSshUserInfoVerbose := _SshUserInfoVerbose{}

	err = json.Unmarshal(data, &varSshUserInfoVerbose)

	if err != nil {
		return err
	}

	*o = SshUserInfoVerbose(varSshUserInfoVerbose)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "username")
		delete(additionalProperties, "deviceUuids")
		delete(additionalProperties, "metroStatusMap")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSshUserInfoVerbose struct {
	value *SshUserInfoVerbose
	isSet bool
}

func (v NullableSshUserInfoVerbose) Get() *SshUserInfoVerbose {
	return v.value
}

func (v *NullableSshUserInfoVerbose) Set(val *SshUserInfoVerbose) {
	v.value = val
	v.isSet = true
}

func (v NullableSshUserInfoVerbose) IsSet() bool {
	return v.isSet
}

func (v *NullableSshUserInfoVerbose) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSshUserInfoVerbose(val *SshUserInfoVerbose) *NullableSshUserInfoVerbose {
	return &NullableSshUserInfoVerbose{value: val, isSet: true}
}

func (v NullableSshUserInfoVerbose) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSshUserInfoVerbose) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
