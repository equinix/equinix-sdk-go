/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
	"fmt"
)

// VirtualDevicHARequestNotificationsInner the model 'VirtualDevicHARequestNotificationsInner'
type VirtualDevicHARequestNotificationsInner string

// List of VirtualDevicHARequest_notifications_inner
const (
	VIRTUALDEVICHAREQUESTNOTIFICATIONSINNER_TEST1EXAMPLE_COM VirtualDevicHARequestNotificationsInner = "test1@example.com"
	VIRTUALDEVICHAREQUESTNOTIFICATIONSINNER_TEST2EXAMPLE_COM VirtualDevicHARequestNotificationsInner = "test2@example.com"
)

// All allowed values of VirtualDevicHARequestNotificationsInner enum
var AllowedVirtualDevicHARequestNotificationsInnerEnumValues = []VirtualDevicHARequestNotificationsInner{
	"test1@example.com",
	"test2@example.com",
}

func (v *VirtualDevicHARequestNotificationsInner) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VirtualDevicHARequestNotificationsInner(value)
	for _, existing := range AllowedVirtualDevicHARequestNotificationsInnerEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VirtualDevicHARequestNotificationsInner", value)
}

// NewVirtualDevicHARequestNotificationsInnerFromValue returns a pointer to a valid VirtualDevicHARequestNotificationsInner
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVirtualDevicHARequestNotificationsInnerFromValue(v string) (*VirtualDevicHARequestNotificationsInner, error) {
	ev := VirtualDevicHARequestNotificationsInner(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VirtualDevicHARequestNotificationsInner: valid values are %v", v, AllowedVirtualDevicHARequestNotificationsInnerEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VirtualDevicHARequestNotificationsInner) IsValid() bool {
	for _, existing := range AllowedVirtualDevicHARequestNotificationsInnerEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VirtualDevicHARequest_notifications_inner value
func (v VirtualDevicHARequestNotificationsInner) Ptr() *VirtualDevicHARequestNotificationsInner {
	return &v
}

type NullableVirtualDevicHARequestNotificationsInner struct {
	value *VirtualDevicHARequestNotificationsInner
	isSet bool
}

func (v NullableVirtualDevicHARequestNotificationsInner) Get() *VirtualDevicHARequestNotificationsInner {
	return v.value
}

func (v *NullableVirtualDevicHARequestNotificationsInner) Set(val *VirtualDevicHARequestNotificationsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualDevicHARequestNotificationsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualDevicHARequestNotificationsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualDevicHARequestNotificationsInner(val *VirtualDevicHARequestNotificationsInner) *NullableVirtualDevicHARequestNotificationsInner {
	return &NullableVirtualDevicHARequestNotificationsInner{value: val, isSet: true}
}

func (v NullableVirtualDevicHARequestNotificationsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualDevicHARequestNotificationsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
