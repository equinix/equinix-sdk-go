/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the LicenseOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LicenseOptions{}

// LicenseOptions struct for LicenseOptions
type LicenseOptions struct {
	// The license name
	Name *string `json:"name,omitempty"`
	// The license type
	Type *string `json:"type,omitempty"`
	// The metros where the license is available
	MetroCodes           []string `json:"metroCodes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LicenseOptions LicenseOptions

// NewLicenseOptions instantiates a new LicenseOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicenseOptions() *LicenseOptions {
	this := LicenseOptions{}
	return &this
}

// NewLicenseOptionsWithDefaults instantiates a new LicenseOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseOptionsWithDefaults() *LicenseOptions {
	this := LicenseOptions{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *LicenseOptions) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseOptions) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *LicenseOptions) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *LicenseOptions) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *LicenseOptions) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseOptions) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *LicenseOptions) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *LicenseOptions) SetType(v string) {
	o.Type = &v
}

// GetMetroCodes returns the MetroCodes field value if set, zero value otherwise.
func (o *LicenseOptions) GetMetroCodes() []string {
	if o == nil || IsNil(o.MetroCodes) {
		var ret []string
		return ret
	}
	return o.MetroCodes
}

// GetMetroCodesOk returns a tuple with the MetroCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseOptions) GetMetroCodesOk() ([]string, bool) {
	if o == nil || IsNil(o.MetroCodes) {
		return nil, false
	}
	return o.MetroCodes, true
}

// HasMetroCodes returns a boolean if a field has been set.
func (o *LicenseOptions) HasMetroCodes() bool {
	if o != nil && !IsNil(o.MetroCodes) {
		return true
	}

	return false
}

// SetMetroCodes gets a reference to the given []string and assigns it to the MetroCodes field.
func (o *LicenseOptions) SetMetroCodes(v []string) {
	o.MetroCodes = v
}

func (o LicenseOptions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LicenseOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.MetroCodes) {
		toSerialize["metroCodes"] = o.MetroCodes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LicenseOptions) UnmarshalJSON(data []byte) (err error) {
	varLicenseOptions := _LicenseOptions{}

	err = json.Unmarshal(data, &varLicenseOptions)

	if err != nil {
		return err
	}

	*o = LicenseOptions(varLicenseOptions)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "type")
		delete(additionalProperties, "metroCodes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLicenseOptions struct {
	value *LicenseOptions
	isSet bool
}

func (v NullableLicenseOptions) Get() *LicenseOptions {
	return v.value
}

func (v *NullableLicenseOptions) Set(val *LicenseOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseOptions(val *LicenseOptions) *NullableLicenseOptions {
	return &NullableLicenseOptions{value: val, isSet: true}
}

func (v NullableLicenseOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
