/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the PageResponsePublicKeys type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PageResponsePublicKeys{}

// PageResponsePublicKeys struct for PageResponsePublicKeys
type PageResponsePublicKeys struct {
	// The unique Id of the keyName and keyValue combination
	Uuid *string `json:"uuid,omitempty"`
	// Key name
	KeyName *string `json:"keyName,omitempty"`
	// Key value
	KeyValue *string `json:"keyValue,omitempty"`
	// Type of key, whether RSA or DSA
	KeyType              *string `json:"keyType,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PageResponsePublicKeys PageResponsePublicKeys

// NewPageResponsePublicKeys instantiates a new PageResponsePublicKeys object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPageResponsePublicKeys() *PageResponsePublicKeys {
	this := PageResponsePublicKeys{}
	return &this
}

// NewPageResponsePublicKeysWithDefaults instantiates a new PageResponsePublicKeys object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPageResponsePublicKeysWithDefaults() *PageResponsePublicKeys {
	this := PageResponsePublicKeys{}
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *PageResponsePublicKeys) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageResponsePublicKeys) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *PageResponsePublicKeys) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *PageResponsePublicKeys) SetUuid(v string) {
	o.Uuid = &v
}

// GetKeyName returns the KeyName field value if set, zero value otherwise.
func (o *PageResponsePublicKeys) GetKeyName() string {
	if o == nil || IsNil(o.KeyName) {
		var ret string
		return ret
	}
	return *o.KeyName
}

// GetKeyNameOk returns a tuple with the KeyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageResponsePublicKeys) GetKeyNameOk() (*string, bool) {
	if o == nil || IsNil(o.KeyName) {
		return nil, false
	}
	return o.KeyName, true
}

// HasKeyName returns a boolean if a field has been set.
func (o *PageResponsePublicKeys) HasKeyName() bool {
	if o != nil && !IsNil(o.KeyName) {
		return true
	}

	return false
}

// SetKeyName gets a reference to the given string and assigns it to the KeyName field.
func (o *PageResponsePublicKeys) SetKeyName(v string) {
	o.KeyName = &v
}

// GetKeyValue returns the KeyValue field value if set, zero value otherwise.
func (o *PageResponsePublicKeys) GetKeyValue() string {
	if o == nil || IsNil(o.KeyValue) {
		var ret string
		return ret
	}
	return *o.KeyValue
}

// GetKeyValueOk returns a tuple with the KeyValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageResponsePublicKeys) GetKeyValueOk() (*string, bool) {
	if o == nil || IsNil(o.KeyValue) {
		return nil, false
	}
	return o.KeyValue, true
}

// HasKeyValue returns a boolean if a field has been set.
func (o *PageResponsePublicKeys) HasKeyValue() bool {
	if o != nil && !IsNil(o.KeyValue) {
		return true
	}

	return false
}

// SetKeyValue gets a reference to the given string and assigns it to the KeyValue field.
func (o *PageResponsePublicKeys) SetKeyValue(v string) {
	o.KeyValue = &v
}

// GetKeyType returns the KeyType field value if set, zero value otherwise.
func (o *PageResponsePublicKeys) GetKeyType() string {
	if o == nil || IsNil(o.KeyType) {
		var ret string
		return ret
	}
	return *o.KeyType
}

// GetKeyTypeOk returns a tuple with the KeyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageResponsePublicKeys) GetKeyTypeOk() (*string, bool) {
	if o == nil || IsNil(o.KeyType) {
		return nil, false
	}
	return o.KeyType, true
}

// HasKeyType returns a boolean if a field has been set.
func (o *PageResponsePublicKeys) HasKeyType() bool {
	if o != nil && !IsNil(o.KeyType) {
		return true
	}

	return false
}

// SetKeyType gets a reference to the given string and assigns it to the KeyType field.
func (o *PageResponsePublicKeys) SetKeyType(v string) {
	o.KeyType = &v
}

func (o PageResponsePublicKeys) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PageResponsePublicKeys) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.KeyName) {
		toSerialize["keyName"] = o.KeyName
	}
	if !IsNil(o.KeyValue) {
		toSerialize["keyValue"] = o.KeyValue
	}
	if !IsNil(o.KeyType) {
		toSerialize["keyType"] = o.KeyType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PageResponsePublicKeys) UnmarshalJSON(data []byte) (err error) {
	varPageResponsePublicKeys := _PageResponsePublicKeys{}

	err = json.Unmarshal(data, &varPageResponsePublicKeys)

	if err != nil {
		return err
	}

	*o = PageResponsePublicKeys(varPageResponsePublicKeys)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "keyName")
		delete(additionalProperties, "keyValue")
		delete(additionalProperties, "keyType")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePageResponsePublicKeys struct {
	value *PageResponsePublicKeys
	isSet bool
}

func (v NullablePageResponsePublicKeys) Get() *PageResponsePublicKeys {
	return v.value
}

func (v *NullablePageResponsePublicKeys) Set(val *PageResponsePublicKeys) {
	v.value = val
	v.isSet = true
}

func (v NullablePageResponsePublicKeys) IsSet() bool {
	return v.isSet
}

func (v *NullablePageResponsePublicKeys) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePageResponsePublicKeys(val *PageResponsePublicKeys) *NullablePageResponsePublicKeys {
	return &NullablePageResponsePublicKeys{value: val, isSet: true}
}

func (v NullablePageResponsePublicKeys) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePageResponsePublicKeys) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
