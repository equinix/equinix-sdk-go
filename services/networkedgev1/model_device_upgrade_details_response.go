/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the DeviceUpgradeDetailsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceUpgradeDetailsResponse{}

// DeviceUpgradeDetailsResponse struct for DeviceUpgradeDetailsResponse
type DeviceUpgradeDetailsResponse struct {
	// Unique Id of the upgrade.
	Uuid *string `json:"uuid,omitempty"`
	// Unique Id of the device.
	VirtualDeviceUuid *string `json:"virtualDeviceUuid,omitempty"`
	// The status of the upgrade. REQUEST_ACCEPTED, IN_PROGRESS, SUCCESS, FAILED, CANCELLED
	Status *string `json:"status,omitempty"`
	// Requested date
	RequestedDate *string `json:"requestedDate,omitempty"`
	// Requested date
	CompletiondDate *string `json:"completiondDate,omitempty"`
	// Requested by.
	RequestedBy          *string `json:"requestedBy,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DeviceUpgradeDetailsResponse DeviceUpgradeDetailsResponse

// NewDeviceUpgradeDetailsResponse instantiates a new DeviceUpgradeDetailsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceUpgradeDetailsResponse() *DeviceUpgradeDetailsResponse {
	this := DeviceUpgradeDetailsResponse{}
	return &this
}

// NewDeviceUpgradeDetailsResponseWithDefaults instantiates a new DeviceUpgradeDetailsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceUpgradeDetailsResponseWithDefaults() *DeviceUpgradeDetailsResponse {
	this := DeviceUpgradeDetailsResponse{}
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *DeviceUpgradeDetailsResponse) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceUpgradeDetailsResponse) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *DeviceUpgradeDetailsResponse) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *DeviceUpgradeDetailsResponse) SetUuid(v string) {
	o.Uuid = &v
}

// GetVirtualDeviceUuid returns the VirtualDeviceUuid field value if set, zero value otherwise.
func (o *DeviceUpgradeDetailsResponse) GetVirtualDeviceUuid() string {
	if o == nil || IsNil(o.VirtualDeviceUuid) {
		var ret string
		return ret
	}
	return *o.VirtualDeviceUuid
}

// GetVirtualDeviceUuidOk returns a tuple with the VirtualDeviceUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceUpgradeDetailsResponse) GetVirtualDeviceUuidOk() (*string, bool) {
	if o == nil || IsNil(o.VirtualDeviceUuid) {
		return nil, false
	}
	return o.VirtualDeviceUuid, true
}

// HasVirtualDeviceUuid returns a boolean if a field has been set.
func (o *DeviceUpgradeDetailsResponse) HasVirtualDeviceUuid() bool {
	if o != nil && !IsNil(o.VirtualDeviceUuid) {
		return true
	}

	return false
}

// SetVirtualDeviceUuid gets a reference to the given string and assigns it to the VirtualDeviceUuid field.
func (o *DeviceUpgradeDetailsResponse) SetVirtualDeviceUuid(v string) {
	o.VirtualDeviceUuid = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DeviceUpgradeDetailsResponse) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceUpgradeDetailsResponse) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DeviceUpgradeDetailsResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DeviceUpgradeDetailsResponse) SetStatus(v string) {
	o.Status = &v
}

// GetRequestedDate returns the RequestedDate field value if set, zero value otherwise.
func (o *DeviceUpgradeDetailsResponse) GetRequestedDate() string {
	if o == nil || IsNil(o.RequestedDate) {
		var ret string
		return ret
	}
	return *o.RequestedDate
}

// GetRequestedDateOk returns a tuple with the RequestedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceUpgradeDetailsResponse) GetRequestedDateOk() (*string, bool) {
	if o == nil || IsNil(o.RequestedDate) {
		return nil, false
	}
	return o.RequestedDate, true
}

// HasRequestedDate returns a boolean if a field has been set.
func (o *DeviceUpgradeDetailsResponse) HasRequestedDate() bool {
	if o != nil && !IsNil(o.RequestedDate) {
		return true
	}

	return false
}

// SetRequestedDate gets a reference to the given string and assigns it to the RequestedDate field.
func (o *DeviceUpgradeDetailsResponse) SetRequestedDate(v string) {
	o.RequestedDate = &v
}

// GetCompletiondDate returns the CompletiondDate field value if set, zero value otherwise.
func (o *DeviceUpgradeDetailsResponse) GetCompletiondDate() string {
	if o == nil || IsNil(o.CompletiondDate) {
		var ret string
		return ret
	}
	return *o.CompletiondDate
}

// GetCompletiondDateOk returns a tuple with the CompletiondDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceUpgradeDetailsResponse) GetCompletiondDateOk() (*string, bool) {
	if o == nil || IsNil(o.CompletiondDate) {
		return nil, false
	}
	return o.CompletiondDate, true
}

// HasCompletiondDate returns a boolean if a field has been set.
func (o *DeviceUpgradeDetailsResponse) HasCompletiondDate() bool {
	if o != nil && !IsNil(o.CompletiondDate) {
		return true
	}

	return false
}

// SetCompletiondDate gets a reference to the given string and assigns it to the CompletiondDate field.
func (o *DeviceUpgradeDetailsResponse) SetCompletiondDate(v string) {
	o.CompletiondDate = &v
}

// GetRequestedBy returns the RequestedBy field value if set, zero value otherwise.
func (o *DeviceUpgradeDetailsResponse) GetRequestedBy() string {
	if o == nil || IsNil(o.RequestedBy) {
		var ret string
		return ret
	}
	return *o.RequestedBy
}

// GetRequestedByOk returns a tuple with the RequestedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceUpgradeDetailsResponse) GetRequestedByOk() (*string, bool) {
	if o == nil || IsNil(o.RequestedBy) {
		return nil, false
	}
	return o.RequestedBy, true
}

// HasRequestedBy returns a boolean if a field has been set.
func (o *DeviceUpgradeDetailsResponse) HasRequestedBy() bool {
	if o != nil && !IsNil(o.RequestedBy) {
		return true
	}

	return false
}

// SetRequestedBy gets a reference to the given string and assigns it to the RequestedBy field.
func (o *DeviceUpgradeDetailsResponse) SetRequestedBy(v string) {
	o.RequestedBy = &v
}

func (o DeviceUpgradeDetailsResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceUpgradeDetailsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.VirtualDeviceUuid) {
		toSerialize["virtualDeviceUuid"] = o.VirtualDeviceUuid
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.RequestedDate) {
		toSerialize["requestedDate"] = o.RequestedDate
	}
	if !IsNil(o.CompletiondDate) {
		toSerialize["completiondDate"] = o.CompletiondDate
	}
	if !IsNil(o.RequestedBy) {
		toSerialize["requestedBy"] = o.RequestedBy
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeviceUpgradeDetailsResponse) UnmarshalJSON(data []byte) (err error) {
	varDeviceUpgradeDetailsResponse := _DeviceUpgradeDetailsResponse{}

	err = json.Unmarshal(data, &varDeviceUpgradeDetailsResponse)

	if err != nil {
		return err
	}

	*o = DeviceUpgradeDetailsResponse(varDeviceUpgradeDetailsResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "virtualDeviceUuid")
		delete(additionalProperties, "status")
		delete(additionalProperties, "requestedDate")
		delete(additionalProperties, "completiondDate")
		delete(additionalProperties, "requestedBy")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeviceUpgradeDetailsResponse struct {
	value *DeviceUpgradeDetailsResponse
	isSet bool
}

func (v NullableDeviceUpgradeDetailsResponse) Get() *DeviceUpgradeDetailsResponse {
	return v.value
}

func (v *NullableDeviceUpgradeDetailsResponse) Set(val *DeviceUpgradeDetailsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceUpgradeDetailsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceUpgradeDetailsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceUpgradeDetailsResponse(val *DeviceUpgradeDetailsResponse) *NullableDeviceUpgradeDetailsResponse {
	return &NullableDeviceUpgradeDetailsResponse{value: val, isSet: true}
}

func (v NullableDeviceUpgradeDetailsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceUpgradeDetailsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
