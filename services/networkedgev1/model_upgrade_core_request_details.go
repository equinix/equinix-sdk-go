/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the UpgradeCoreRequestDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpgradeCoreRequestDetails{}

// UpgradeCoreRequestDetails struct for UpgradeCoreRequestDetails
type UpgradeCoreRequestDetails struct {
	// Core requested for the device
	Core *float32 `json:"core,omitempty"`
	// Whether the peer device should be upgraded or not.
	UpgradePeerDevice    *bool `json:"upgradePeerDevice,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpgradeCoreRequestDetails UpgradeCoreRequestDetails

// NewUpgradeCoreRequestDetails instantiates a new UpgradeCoreRequestDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpgradeCoreRequestDetails() *UpgradeCoreRequestDetails {
	this := UpgradeCoreRequestDetails{}
	return &this
}

// NewUpgradeCoreRequestDetailsWithDefaults instantiates a new UpgradeCoreRequestDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpgradeCoreRequestDetailsWithDefaults() *UpgradeCoreRequestDetails {
	this := UpgradeCoreRequestDetails{}
	return &this
}

// GetCore returns the Core field value if set, zero value otherwise.
func (o *UpgradeCoreRequestDetails) GetCore() float32 {
	if o == nil || IsNil(o.Core) {
		var ret float32
		return ret
	}
	return *o.Core
}

// GetCoreOk returns a tuple with the Core field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpgradeCoreRequestDetails) GetCoreOk() (*float32, bool) {
	if o == nil || IsNil(o.Core) {
		return nil, false
	}
	return o.Core, true
}

// HasCore returns a boolean if a field has been set.
func (o *UpgradeCoreRequestDetails) HasCore() bool {
	if o != nil && !IsNil(o.Core) {
		return true
	}

	return false
}

// SetCore gets a reference to the given float32 and assigns it to the Core field.
func (o *UpgradeCoreRequestDetails) SetCore(v float32) {
	o.Core = &v
}

// GetUpgradePeerDevice returns the UpgradePeerDevice field value if set, zero value otherwise.
func (o *UpgradeCoreRequestDetails) GetUpgradePeerDevice() bool {
	if o == nil || IsNil(o.UpgradePeerDevice) {
		var ret bool
		return ret
	}
	return *o.UpgradePeerDevice
}

// GetUpgradePeerDeviceOk returns a tuple with the UpgradePeerDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpgradeCoreRequestDetails) GetUpgradePeerDeviceOk() (*bool, bool) {
	if o == nil || IsNil(o.UpgradePeerDevice) {
		return nil, false
	}
	return o.UpgradePeerDevice, true
}

// HasUpgradePeerDevice returns a boolean if a field has been set.
func (o *UpgradeCoreRequestDetails) HasUpgradePeerDevice() bool {
	if o != nil && !IsNil(o.UpgradePeerDevice) {
		return true
	}

	return false
}

// SetUpgradePeerDevice gets a reference to the given bool and assigns it to the UpgradePeerDevice field.
func (o *UpgradeCoreRequestDetails) SetUpgradePeerDevice(v bool) {
	o.UpgradePeerDevice = &v
}

func (o UpgradeCoreRequestDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpgradeCoreRequestDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Core) {
		toSerialize["core"] = o.Core
	}
	if !IsNil(o.UpgradePeerDevice) {
		toSerialize["upgradePeerDevice"] = o.UpgradePeerDevice
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpgradeCoreRequestDetails) UnmarshalJSON(data []byte) (err error) {
	varUpgradeCoreRequestDetails := _UpgradeCoreRequestDetails{}

	err = json.Unmarshal(data, &varUpgradeCoreRequestDetails)

	if err != nil {
		return err
	}

	*o = UpgradeCoreRequestDetails(varUpgradeCoreRequestDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "core")
		delete(additionalProperties, "upgradePeerDevice")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpgradeCoreRequestDetails struct {
	value *UpgradeCoreRequestDetails
	isSet bool
}

func (v NullableUpgradeCoreRequestDetails) Get() *UpgradeCoreRequestDetails {
	return v.value
}

func (v *NullableUpgradeCoreRequestDetails) Set(val *UpgradeCoreRequestDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableUpgradeCoreRequestDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableUpgradeCoreRequestDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpgradeCoreRequestDetails(val *UpgradeCoreRequestDetails) *NullableUpgradeCoreRequestDetails {
	return &NullableUpgradeCoreRequestDetails{value: val, isSet: true}
}

func (v NullableUpgradeCoreRequestDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpgradeCoreRequestDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
