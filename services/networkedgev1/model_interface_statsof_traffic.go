/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the InterfaceStatsofTraffic type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InterfaceStatsofTraffic{}

// InterfaceStatsofTraffic struct for InterfaceStatsofTraffic
type InterfaceStatsofTraffic struct {
	// Max throughput during the time interval.
	Max *float32 `json:"max,omitempty"`
	// Mean throughput during the time interval.
	Mean *float32 `json:"mean,omitempty"`
	// The throughput of the last polled data.
	LastPolled           *float32                  `json:"lastPolled,omitempty"`
	Metrics              []PolledThroughputMetrics `json:"metrics,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InterfaceStatsofTraffic InterfaceStatsofTraffic

// NewInterfaceStatsofTraffic instantiates a new InterfaceStatsofTraffic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterfaceStatsofTraffic() *InterfaceStatsofTraffic {
	this := InterfaceStatsofTraffic{}
	return &this
}

// NewInterfaceStatsofTrafficWithDefaults instantiates a new InterfaceStatsofTraffic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterfaceStatsofTrafficWithDefaults() *InterfaceStatsofTraffic {
	this := InterfaceStatsofTraffic{}
	return &this
}

// GetMax returns the Max field value if set, zero value otherwise.
func (o *InterfaceStatsofTraffic) GetMax() float32 {
	if o == nil || IsNil(o.Max) {
		var ret float32
		return ret
	}
	return *o.Max
}

// GetMaxOk returns a tuple with the Max field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceStatsofTraffic) GetMaxOk() (*float32, bool) {
	if o == nil || IsNil(o.Max) {
		return nil, false
	}
	return o.Max, true
}

// HasMax returns a boolean if a field has been set.
func (o *InterfaceStatsofTraffic) HasMax() bool {
	if o != nil && !IsNil(o.Max) {
		return true
	}

	return false
}

// SetMax gets a reference to the given float32 and assigns it to the Max field.
func (o *InterfaceStatsofTraffic) SetMax(v float32) {
	o.Max = &v
}

// GetMean returns the Mean field value if set, zero value otherwise.
func (o *InterfaceStatsofTraffic) GetMean() float32 {
	if o == nil || IsNil(o.Mean) {
		var ret float32
		return ret
	}
	return *o.Mean
}

// GetMeanOk returns a tuple with the Mean field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceStatsofTraffic) GetMeanOk() (*float32, bool) {
	if o == nil || IsNil(o.Mean) {
		return nil, false
	}
	return o.Mean, true
}

// HasMean returns a boolean if a field has been set.
func (o *InterfaceStatsofTraffic) HasMean() bool {
	if o != nil && !IsNil(o.Mean) {
		return true
	}

	return false
}

// SetMean gets a reference to the given float32 and assigns it to the Mean field.
func (o *InterfaceStatsofTraffic) SetMean(v float32) {
	o.Mean = &v
}

// GetLastPolled returns the LastPolled field value if set, zero value otherwise.
func (o *InterfaceStatsofTraffic) GetLastPolled() float32 {
	if o == nil || IsNil(o.LastPolled) {
		var ret float32
		return ret
	}
	return *o.LastPolled
}

// GetLastPolledOk returns a tuple with the LastPolled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceStatsofTraffic) GetLastPolledOk() (*float32, bool) {
	if o == nil || IsNil(o.LastPolled) {
		return nil, false
	}
	return o.LastPolled, true
}

// HasLastPolled returns a boolean if a field has been set.
func (o *InterfaceStatsofTraffic) HasLastPolled() bool {
	if o != nil && !IsNil(o.LastPolled) {
		return true
	}

	return false
}

// SetLastPolled gets a reference to the given float32 and assigns it to the LastPolled field.
func (o *InterfaceStatsofTraffic) SetLastPolled(v float32) {
	o.LastPolled = &v
}

// GetMetrics returns the Metrics field value if set, zero value otherwise.
func (o *InterfaceStatsofTraffic) GetMetrics() []PolledThroughputMetrics {
	if o == nil || IsNil(o.Metrics) {
		var ret []PolledThroughputMetrics
		return ret
	}
	return o.Metrics
}

// GetMetricsOk returns a tuple with the Metrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceStatsofTraffic) GetMetricsOk() ([]PolledThroughputMetrics, bool) {
	if o == nil || IsNil(o.Metrics) {
		return nil, false
	}
	return o.Metrics, true
}

// HasMetrics returns a boolean if a field has been set.
func (o *InterfaceStatsofTraffic) HasMetrics() bool {
	if o != nil && !IsNil(o.Metrics) {
		return true
	}

	return false
}

// SetMetrics gets a reference to the given []PolledThroughputMetrics and assigns it to the Metrics field.
func (o *InterfaceStatsofTraffic) SetMetrics(v []PolledThroughputMetrics) {
	o.Metrics = v
}

func (o InterfaceStatsofTraffic) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InterfaceStatsofTraffic) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Max) {
		toSerialize["max"] = o.Max
	}
	if !IsNil(o.Mean) {
		toSerialize["mean"] = o.Mean
	}
	if !IsNil(o.LastPolled) {
		toSerialize["lastPolled"] = o.LastPolled
	}
	if !IsNil(o.Metrics) {
		toSerialize["metrics"] = o.Metrics
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InterfaceStatsofTraffic) UnmarshalJSON(data []byte) (err error) {
	varInterfaceStatsofTraffic := _InterfaceStatsofTraffic{}

	err = json.Unmarshal(data, &varInterfaceStatsofTraffic)

	if err != nil {
		return err
	}

	*o = InterfaceStatsofTraffic(varInterfaceStatsofTraffic)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "max")
		delete(additionalProperties, "mean")
		delete(additionalProperties, "lastPolled")
		delete(additionalProperties, "metrics")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInterfaceStatsofTraffic struct {
	value *InterfaceStatsofTraffic
	isSet bool
}

func (v NullableInterfaceStatsofTraffic) Get() *InterfaceStatsofTraffic {
	return v.value
}

func (v *NullableInterfaceStatsofTraffic) Set(val *InterfaceStatsofTraffic) {
	v.value = val
	v.isSet = true
}

func (v NullableInterfaceStatsofTraffic) IsSet() bool {
	return v.isSet
}

func (v *NullableInterfaceStatsofTraffic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterfaceStatsofTraffic(val *InterfaceStatsofTraffic) *NullableInterfaceStatsofTraffic {
	return &NullableInterfaceStatsofTraffic{value: val, isSet: true}
}

func (v NullableInterfaceStatsofTraffic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterfaceStatsofTraffic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
