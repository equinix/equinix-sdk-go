/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the EquinixConfiguredConfigLicenseOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EquinixConfiguredConfigLicenseOptions{}

// EquinixConfiguredConfigLicenseOptions struct for EquinixConfiguredConfigLicenseOptions
type EquinixConfiguredConfigLicenseOptions struct {
	SUB                  *LicenseOptionsConfig `json:"SUB,omitempty"`
	BYOL                 *LicenseOptionsConfig `json:"BYOL,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EquinixConfiguredConfigLicenseOptions EquinixConfiguredConfigLicenseOptions

// NewEquinixConfiguredConfigLicenseOptions instantiates a new EquinixConfiguredConfigLicenseOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEquinixConfiguredConfigLicenseOptions() *EquinixConfiguredConfigLicenseOptions {
	this := EquinixConfiguredConfigLicenseOptions{}
	return &this
}

// NewEquinixConfiguredConfigLicenseOptionsWithDefaults instantiates a new EquinixConfiguredConfigLicenseOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEquinixConfiguredConfigLicenseOptionsWithDefaults() *EquinixConfiguredConfigLicenseOptions {
	this := EquinixConfiguredConfigLicenseOptions{}
	return &this
}

// GetSUB returns the SUB field value if set, zero value otherwise.
func (o *EquinixConfiguredConfigLicenseOptions) GetSUB() LicenseOptionsConfig {
	if o == nil || IsNil(o.SUB) {
		var ret LicenseOptionsConfig
		return ret
	}
	return *o.SUB
}

// GetSUBOk returns a tuple with the SUB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquinixConfiguredConfigLicenseOptions) GetSUBOk() (*LicenseOptionsConfig, bool) {
	if o == nil || IsNil(o.SUB) {
		return nil, false
	}
	return o.SUB, true
}

// HasSUB returns a boolean if a field has been set.
func (o *EquinixConfiguredConfigLicenseOptions) HasSUB() bool {
	if o != nil && !IsNil(o.SUB) {
		return true
	}

	return false
}

// SetSUB gets a reference to the given LicenseOptionsConfig and assigns it to the SUB field.
func (o *EquinixConfiguredConfigLicenseOptions) SetSUB(v LicenseOptionsConfig) {
	o.SUB = &v
}

// GetBYOL returns the BYOL field value if set, zero value otherwise.
func (o *EquinixConfiguredConfigLicenseOptions) GetBYOL() LicenseOptionsConfig {
	if o == nil || IsNil(o.BYOL) {
		var ret LicenseOptionsConfig
		return ret
	}
	return *o.BYOL
}

// GetBYOLOk returns a tuple with the BYOL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquinixConfiguredConfigLicenseOptions) GetBYOLOk() (*LicenseOptionsConfig, bool) {
	if o == nil || IsNil(o.BYOL) {
		return nil, false
	}
	return o.BYOL, true
}

// HasBYOL returns a boolean if a field has been set.
func (o *EquinixConfiguredConfigLicenseOptions) HasBYOL() bool {
	if o != nil && !IsNil(o.BYOL) {
		return true
	}

	return false
}

// SetBYOL gets a reference to the given LicenseOptionsConfig and assigns it to the BYOL field.
func (o *EquinixConfiguredConfigLicenseOptions) SetBYOL(v LicenseOptionsConfig) {
	o.BYOL = &v
}

func (o EquinixConfiguredConfigLicenseOptions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EquinixConfiguredConfigLicenseOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SUB) {
		toSerialize["SUB"] = o.SUB
	}
	if !IsNil(o.BYOL) {
		toSerialize["BYOL"] = o.BYOL
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EquinixConfiguredConfigLicenseOptions) UnmarshalJSON(data []byte) (err error) {
	varEquinixConfiguredConfigLicenseOptions := _EquinixConfiguredConfigLicenseOptions{}

	err = json.Unmarshal(data, &varEquinixConfiguredConfigLicenseOptions)

	if err != nil {
		return err
	}

	*o = EquinixConfiguredConfigLicenseOptions(varEquinixConfiguredConfigLicenseOptions)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "SUB")
		delete(additionalProperties, "BYOL")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEquinixConfiguredConfigLicenseOptions struct {
	value *EquinixConfiguredConfigLicenseOptions
	isSet bool
}

func (v NullableEquinixConfiguredConfigLicenseOptions) Get() *EquinixConfiguredConfigLicenseOptions {
	return v.value
}

func (v *NullableEquinixConfiguredConfigLicenseOptions) Set(val *EquinixConfiguredConfigLicenseOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableEquinixConfiguredConfigLicenseOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableEquinixConfiguredConfigLicenseOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEquinixConfiguredConfigLicenseOptions(val *EquinixConfiguredConfigLicenseOptions) *NullableEquinixConfiguredConfigLicenseOptions {
	return &NullableEquinixConfiguredConfigLicenseOptions{value: val, isSet: true}
}

func (v NullableEquinixConfiguredConfigLicenseOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEquinixConfiguredConfigLicenseOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
