/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
	"fmt"
)

// checks if the VirtualDevicHARequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VirtualDevicHARequest{}

// VirtualDevicHARequest struct for VirtualDevicHARequest
type VirtualDevicHARequest struct {
	AccountNumber      *string `json:"accountNumber,omitempty"`
	AccountReferenceId *string `json:"accountReferenceId,omitempty"`
	// You can only choose a version for the secondary device when adding a secondary device to an existing device.
	Version *string `json:"version,omitempty"`
	// Secondary additional bandwidth to be configured (in Mbps for HA). Default bandwidth provided is 15 Mbps.
	AdditionalBandwidth *int32                                    `json:"additionalBandwidth,omitempty"`
	LicenseFileId       *string                                   `json:"licenseFileId,omitempty"`
	LicenseToken        *string                                   `json:"licenseToken,omitempty"`
	MetroCode           string                                    `json:"metroCode"`
	Notifications       []VirtualDevicHARequestNotificationsInner `json:"notifications"`
	// An array of ACLs
	AclDetails []ACLDetails              `json:"aclDetails,omitempty"`
	SshUsers   []SshUserOperationRequest `json:"sshUsers,omitempty"`
	// Virtual Device Name
	VirtualDeviceName string `json:"virtualDeviceName"`
	// Host name prefix for identification. Only a-z, A-Z, 0-9, and hyphen(-) are allowed. It should start with a letter and end with a letter or digit. The length should be between 2-30 characters. Exceptions - FTDv 2-14 characters; Aruba 2-24 characters.
	HostNamePrefix  *string       `json:"hostNamePrefix,omitempty"`
	SiteId          *string       `json:"siteId,omitempty"`
	SystemIpAddress *string       `json:"systemIpAddress,omitempty"`
	VendorConfig    *VendorConfig `json:"vendorConfig,omitempty"`
	// You may specify any available interface on the device as the sshInterfaceId. This field is only applicable to self-configured devices.
	SshInterfaceId *string `json:"sshInterfaceId,omitempty"`
	// License URL. This field is only relevant for Ciso ASAv devices.
	SmartLicenseUrl *string `json:"smartLicenseUrl,omitempty"`
	// The Id of a previously uploaded license or cloud_init file.
	CloudInitFileId      *string `json:"cloudInitFileId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VirtualDevicHARequest VirtualDevicHARequest

// NewVirtualDevicHARequest instantiates a new VirtualDevicHARequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualDevicHARequest(metroCode string, notifications []VirtualDevicHARequestNotificationsInner, virtualDeviceName string) *VirtualDevicHARequest {
	this := VirtualDevicHARequest{}
	this.MetroCode = metroCode
	this.Notifications = notifications
	this.VirtualDeviceName = virtualDeviceName
	return &this
}

// NewVirtualDevicHARequestWithDefaults instantiates a new VirtualDevicHARequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualDevicHARequestWithDefaults() *VirtualDevicHARequest {
	this := VirtualDevicHARequest{}
	return &this
}

// GetAccountNumber returns the AccountNumber field value if set, zero value otherwise.
func (o *VirtualDevicHARequest) GetAccountNumber() string {
	if o == nil || IsNil(o.AccountNumber) {
		var ret string
		return ret
	}
	return *o.AccountNumber
}

// GetAccountNumberOk returns a tuple with the AccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDevicHARequest) GetAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.AccountNumber) {
		return nil, false
	}
	return o.AccountNumber, true
}

// HasAccountNumber returns a boolean if a field has been set.
func (o *VirtualDevicHARequest) HasAccountNumber() bool {
	if o != nil && !IsNil(o.AccountNumber) {
		return true
	}

	return false
}

// SetAccountNumber gets a reference to the given string and assigns it to the AccountNumber field.
func (o *VirtualDevicHARequest) SetAccountNumber(v string) {
	o.AccountNumber = &v
}

// GetAccountReferenceId returns the AccountReferenceId field value if set, zero value otherwise.
func (o *VirtualDevicHARequest) GetAccountReferenceId() string {
	if o == nil || IsNil(o.AccountReferenceId) {
		var ret string
		return ret
	}
	return *o.AccountReferenceId
}

// GetAccountReferenceIdOk returns a tuple with the AccountReferenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDevicHARequest) GetAccountReferenceIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountReferenceId) {
		return nil, false
	}
	return o.AccountReferenceId, true
}

// HasAccountReferenceId returns a boolean if a field has been set.
func (o *VirtualDevicHARequest) HasAccountReferenceId() bool {
	if o != nil && !IsNil(o.AccountReferenceId) {
		return true
	}

	return false
}

// SetAccountReferenceId gets a reference to the given string and assigns it to the AccountReferenceId field.
func (o *VirtualDevicHARequest) SetAccountReferenceId(v string) {
	o.AccountReferenceId = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *VirtualDevicHARequest) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDevicHARequest) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *VirtualDevicHARequest) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *VirtualDevicHARequest) SetVersion(v string) {
	o.Version = &v
}

// GetAdditionalBandwidth returns the AdditionalBandwidth field value if set, zero value otherwise.
func (o *VirtualDevicHARequest) GetAdditionalBandwidth() int32 {
	if o == nil || IsNil(o.AdditionalBandwidth) {
		var ret int32
		return ret
	}
	return *o.AdditionalBandwidth
}

// GetAdditionalBandwidthOk returns a tuple with the AdditionalBandwidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDevicHARequest) GetAdditionalBandwidthOk() (*int32, bool) {
	if o == nil || IsNil(o.AdditionalBandwidth) {
		return nil, false
	}
	return o.AdditionalBandwidth, true
}

// HasAdditionalBandwidth returns a boolean if a field has been set.
func (o *VirtualDevicHARequest) HasAdditionalBandwidth() bool {
	if o != nil && !IsNil(o.AdditionalBandwidth) {
		return true
	}

	return false
}

// SetAdditionalBandwidth gets a reference to the given int32 and assigns it to the AdditionalBandwidth field.
func (o *VirtualDevicHARequest) SetAdditionalBandwidth(v int32) {
	o.AdditionalBandwidth = &v
}

// GetLicenseFileId returns the LicenseFileId field value if set, zero value otherwise.
func (o *VirtualDevicHARequest) GetLicenseFileId() string {
	if o == nil || IsNil(o.LicenseFileId) {
		var ret string
		return ret
	}
	return *o.LicenseFileId
}

// GetLicenseFileIdOk returns a tuple with the LicenseFileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDevicHARequest) GetLicenseFileIdOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseFileId) {
		return nil, false
	}
	return o.LicenseFileId, true
}

// HasLicenseFileId returns a boolean if a field has been set.
func (o *VirtualDevicHARequest) HasLicenseFileId() bool {
	if o != nil && !IsNil(o.LicenseFileId) {
		return true
	}

	return false
}

// SetLicenseFileId gets a reference to the given string and assigns it to the LicenseFileId field.
func (o *VirtualDevicHARequest) SetLicenseFileId(v string) {
	o.LicenseFileId = &v
}

// GetLicenseToken returns the LicenseToken field value if set, zero value otherwise.
func (o *VirtualDevicHARequest) GetLicenseToken() string {
	if o == nil || IsNil(o.LicenseToken) {
		var ret string
		return ret
	}
	return *o.LicenseToken
}

// GetLicenseTokenOk returns a tuple with the LicenseToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDevicHARequest) GetLicenseTokenOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseToken) {
		return nil, false
	}
	return o.LicenseToken, true
}

// HasLicenseToken returns a boolean if a field has been set.
func (o *VirtualDevicHARequest) HasLicenseToken() bool {
	if o != nil && !IsNil(o.LicenseToken) {
		return true
	}

	return false
}

// SetLicenseToken gets a reference to the given string and assigns it to the LicenseToken field.
func (o *VirtualDevicHARequest) SetLicenseToken(v string) {
	o.LicenseToken = &v
}

// GetMetroCode returns the MetroCode field value
func (o *VirtualDevicHARequest) GetMetroCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetroCode
}

// GetMetroCodeOk returns a tuple with the MetroCode field value
// and a boolean to check if the value has been set.
func (o *VirtualDevicHARequest) GetMetroCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetroCode, true
}

// SetMetroCode sets field value
func (o *VirtualDevicHARequest) SetMetroCode(v string) {
	o.MetroCode = v
}

// GetNotifications returns the Notifications field value
func (o *VirtualDevicHARequest) GetNotifications() []VirtualDevicHARequestNotificationsInner {
	if o == nil {
		var ret []VirtualDevicHARequestNotificationsInner
		return ret
	}

	return o.Notifications
}

// GetNotificationsOk returns a tuple with the Notifications field value
// and a boolean to check if the value has been set.
func (o *VirtualDevicHARequest) GetNotificationsOk() ([]VirtualDevicHARequestNotificationsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Notifications, true
}

// SetNotifications sets field value
func (o *VirtualDevicHARequest) SetNotifications(v []VirtualDevicHARequestNotificationsInner) {
	o.Notifications = v
}

// GetAclDetails returns the AclDetails field value if set, zero value otherwise.
func (o *VirtualDevicHARequest) GetAclDetails() []ACLDetails {
	if o == nil || IsNil(o.AclDetails) {
		var ret []ACLDetails
		return ret
	}
	return o.AclDetails
}

// GetAclDetailsOk returns a tuple with the AclDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDevicHARequest) GetAclDetailsOk() ([]ACLDetails, bool) {
	if o == nil || IsNil(o.AclDetails) {
		return nil, false
	}
	return o.AclDetails, true
}

// HasAclDetails returns a boolean if a field has been set.
func (o *VirtualDevicHARequest) HasAclDetails() bool {
	if o != nil && !IsNil(o.AclDetails) {
		return true
	}

	return false
}

// SetAclDetails gets a reference to the given []ACLDetails and assigns it to the AclDetails field.
func (o *VirtualDevicHARequest) SetAclDetails(v []ACLDetails) {
	o.AclDetails = v
}

// GetSshUsers returns the SshUsers field value if set, zero value otherwise.
func (o *VirtualDevicHARequest) GetSshUsers() []SshUserOperationRequest {
	if o == nil || IsNil(o.SshUsers) {
		var ret []SshUserOperationRequest
		return ret
	}
	return o.SshUsers
}

// GetSshUsersOk returns a tuple with the SshUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDevicHARequest) GetSshUsersOk() ([]SshUserOperationRequest, bool) {
	if o == nil || IsNil(o.SshUsers) {
		return nil, false
	}
	return o.SshUsers, true
}

// HasSshUsers returns a boolean if a field has been set.
func (o *VirtualDevicHARequest) HasSshUsers() bool {
	if o != nil && !IsNil(o.SshUsers) {
		return true
	}

	return false
}

// SetSshUsers gets a reference to the given []SshUserOperationRequest and assigns it to the SshUsers field.
func (o *VirtualDevicHARequest) SetSshUsers(v []SshUserOperationRequest) {
	o.SshUsers = v
}

// GetVirtualDeviceName returns the VirtualDeviceName field value
func (o *VirtualDevicHARequest) GetVirtualDeviceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VirtualDeviceName
}

// GetVirtualDeviceNameOk returns a tuple with the VirtualDeviceName field value
// and a boolean to check if the value has been set.
func (o *VirtualDevicHARequest) GetVirtualDeviceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VirtualDeviceName, true
}

// SetVirtualDeviceName sets field value
func (o *VirtualDevicHARequest) SetVirtualDeviceName(v string) {
	o.VirtualDeviceName = v
}

// GetHostNamePrefix returns the HostNamePrefix field value if set, zero value otherwise.
func (o *VirtualDevicHARequest) GetHostNamePrefix() string {
	if o == nil || IsNil(o.HostNamePrefix) {
		var ret string
		return ret
	}
	return *o.HostNamePrefix
}

// GetHostNamePrefixOk returns a tuple with the HostNamePrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDevicHARequest) GetHostNamePrefixOk() (*string, bool) {
	if o == nil || IsNil(o.HostNamePrefix) {
		return nil, false
	}
	return o.HostNamePrefix, true
}

// HasHostNamePrefix returns a boolean if a field has been set.
func (o *VirtualDevicHARequest) HasHostNamePrefix() bool {
	if o != nil && !IsNil(o.HostNamePrefix) {
		return true
	}

	return false
}

// SetHostNamePrefix gets a reference to the given string and assigns it to the HostNamePrefix field.
func (o *VirtualDevicHARequest) SetHostNamePrefix(v string) {
	o.HostNamePrefix = &v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *VirtualDevicHARequest) GetSiteId() string {
	if o == nil || IsNil(o.SiteId) {
		var ret string
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDevicHARequest) GetSiteIdOk() (*string, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *VirtualDevicHARequest) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given string and assigns it to the SiteId field.
func (o *VirtualDevicHARequest) SetSiteId(v string) {
	o.SiteId = &v
}

// GetSystemIpAddress returns the SystemIpAddress field value if set, zero value otherwise.
func (o *VirtualDevicHARequest) GetSystemIpAddress() string {
	if o == nil || IsNil(o.SystemIpAddress) {
		var ret string
		return ret
	}
	return *o.SystemIpAddress
}

// GetSystemIpAddressOk returns a tuple with the SystemIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDevicHARequest) GetSystemIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.SystemIpAddress) {
		return nil, false
	}
	return o.SystemIpAddress, true
}

// HasSystemIpAddress returns a boolean if a field has been set.
func (o *VirtualDevicHARequest) HasSystemIpAddress() bool {
	if o != nil && !IsNil(o.SystemIpAddress) {
		return true
	}

	return false
}

// SetSystemIpAddress gets a reference to the given string and assigns it to the SystemIpAddress field.
func (o *VirtualDevicHARequest) SetSystemIpAddress(v string) {
	o.SystemIpAddress = &v
}

// GetVendorConfig returns the VendorConfig field value if set, zero value otherwise.
func (o *VirtualDevicHARequest) GetVendorConfig() VendorConfig {
	if o == nil || IsNil(o.VendorConfig) {
		var ret VendorConfig
		return ret
	}
	return *o.VendorConfig
}

// GetVendorConfigOk returns a tuple with the VendorConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDevicHARequest) GetVendorConfigOk() (*VendorConfig, bool) {
	if o == nil || IsNil(o.VendorConfig) {
		return nil, false
	}
	return o.VendorConfig, true
}

// HasVendorConfig returns a boolean if a field has been set.
func (o *VirtualDevicHARequest) HasVendorConfig() bool {
	if o != nil && !IsNil(o.VendorConfig) {
		return true
	}

	return false
}

// SetVendorConfig gets a reference to the given VendorConfig and assigns it to the VendorConfig field.
func (o *VirtualDevicHARequest) SetVendorConfig(v VendorConfig) {
	o.VendorConfig = &v
}

// GetSshInterfaceId returns the SshInterfaceId field value if set, zero value otherwise.
func (o *VirtualDevicHARequest) GetSshInterfaceId() string {
	if o == nil || IsNil(o.SshInterfaceId) {
		var ret string
		return ret
	}
	return *o.SshInterfaceId
}

// GetSshInterfaceIdOk returns a tuple with the SshInterfaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDevicHARequest) GetSshInterfaceIdOk() (*string, bool) {
	if o == nil || IsNil(o.SshInterfaceId) {
		return nil, false
	}
	return o.SshInterfaceId, true
}

// HasSshInterfaceId returns a boolean if a field has been set.
func (o *VirtualDevicHARequest) HasSshInterfaceId() bool {
	if o != nil && !IsNil(o.SshInterfaceId) {
		return true
	}

	return false
}

// SetSshInterfaceId gets a reference to the given string and assigns it to the SshInterfaceId field.
func (o *VirtualDevicHARequest) SetSshInterfaceId(v string) {
	o.SshInterfaceId = &v
}

// GetSmartLicenseUrl returns the SmartLicenseUrl field value if set, zero value otherwise.
func (o *VirtualDevicHARequest) GetSmartLicenseUrl() string {
	if o == nil || IsNil(o.SmartLicenseUrl) {
		var ret string
		return ret
	}
	return *o.SmartLicenseUrl
}

// GetSmartLicenseUrlOk returns a tuple with the SmartLicenseUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDevicHARequest) GetSmartLicenseUrlOk() (*string, bool) {
	if o == nil || IsNil(o.SmartLicenseUrl) {
		return nil, false
	}
	return o.SmartLicenseUrl, true
}

// HasSmartLicenseUrl returns a boolean if a field has been set.
func (o *VirtualDevicHARequest) HasSmartLicenseUrl() bool {
	if o != nil && !IsNil(o.SmartLicenseUrl) {
		return true
	}

	return false
}

// SetSmartLicenseUrl gets a reference to the given string and assigns it to the SmartLicenseUrl field.
func (o *VirtualDevicHARequest) SetSmartLicenseUrl(v string) {
	o.SmartLicenseUrl = &v
}

// GetCloudInitFileId returns the CloudInitFileId field value if set, zero value otherwise.
func (o *VirtualDevicHARequest) GetCloudInitFileId() string {
	if o == nil || IsNil(o.CloudInitFileId) {
		var ret string
		return ret
	}
	return *o.CloudInitFileId
}

// GetCloudInitFileIdOk returns a tuple with the CloudInitFileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDevicHARequest) GetCloudInitFileIdOk() (*string, bool) {
	if o == nil || IsNil(o.CloudInitFileId) {
		return nil, false
	}
	return o.CloudInitFileId, true
}

// HasCloudInitFileId returns a boolean if a field has been set.
func (o *VirtualDevicHARequest) HasCloudInitFileId() bool {
	if o != nil && !IsNil(o.CloudInitFileId) {
		return true
	}

	return false
}

// SetCloudInitFileId gets a reference to the given string and assigns it to the CloudInitFileId field.
func (o *VirtualDevicHARequest) SetCloudInitFileId(v string) {
	o.CloudInitFileId = &v
}

func (o VirtualDevicHARequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VirtualDevicHARequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountNumber) {
		toSerialize["accountNumber"] = o.AccountNumber
	}
	if !IsNil(o.AccountReferenceId) {
		toSerialize["accountReferenceId"] = o.AccountReferenceId
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.AdditionalBandwidth) {
		toSerialize["additionalBandwidth"] = o.AdditionalBandwidth
	}
	if !IsNil(o.LicenseFileId) {
		toSerialize["licenseFileId"] = o.LicenseFileId
	}
	if !IsNil(o.LicenseToken) {
		toSerialize["licenseToken"] = o.LicenseToken
	}
	toSerialize["metroCode"] = o.MetroCode
	toSerialize["notifications"] = o.Notifications
	if !IsNil(o.AclDetails) {
		toSerialize["aclDetails"] = o.AclDetails
	}
	if !IsNil(o.SshUsers) {
		toSerialize["sshUsers"] = o.SshUsers
	}
	toSerialize["virtualDeviceName"] = o.VirtualDeviceName
	if !IsNil(o.HostNamePrefix) {
		toSerialize["hostNamePrefix"] = o.HostNamePrefix
	}
	if !IsNil(o.SiteId) {
		toSerialize["siteId"] = o.SiteId
	}
	if !IsNil(o.SystemIpAddress) {
		toSerialize["systemIpAddress"] = o.SystemIpAddress
	}
	if !IsNil(o.VendorConfig) {
		toSerialize["vendorConfig"] = o.VendorConfig
	}
	if !IsNil(o.SshInterfaceId) {
		toSerialize["sshInterfaceId"] = o.SshInterfaceId
	}
	if !IsNil(o.SmartLicenseUrl) {
		toSerialize["smartLicenseUrl"] = o.SmartLicenseUrl
	}
	if !IsNil(o.CloudInitFileId) {
		toSerialize["cloudInitFileId"] = o.CloudInitFileId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VirtualDevicHARequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"metroCode",
		"notifications",
		"virtualDeviceName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVirtualDevicHARequest := _VirtualDevicHARequest{}

	err = json.Unmarshal(data, &varVirtualDevicHARequest)

	if err != nil {
		return err
	}

	*o = VirtualDevicHARequest(varVirtualDevicHARequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "accountNumber")
		delete(additionalProperties, "accountReferenceId")
		delete(additionalProperties, "version")
		delete(additionalProperties, "additionalBandwidth")
		delete(additionalProperties, "licenseFileId")
		delete(additionalProperties, "licenseToken")
		delete(additionalProperties, "metroCode")
		delete(additionalProperties, "notifications")
		delete(additionalProperties, "aclDetails")
		delete(additionalProperties, "sshUsers")
		delete(additionalProperties, "virtualDeviceName")
		delete(additionalProperties, "hostNamePrefix")
		delete(additionalProperties, "siteId")
		delete(additionalProperties, "systemIpAddress")
		delete(additionalProperties, "vendorConfig")
		delete(additionalProperties, "sshInterfaceId")
		delete(additionalProperties, "smartLicenseUrl")
		delete(additionalProperties, "cloudInitFileId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVirtualDevicHARequest struct {
	value *VirtualDevicHARequest
	isSet bool
}

func (v NullableVirtualDevicHARequest) Get() *VirtualDevicHARequest {
	return v.value
}

func (v *NullableVirtualDevicHARequest) Set(val *VirtualDevicHARequest) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualDevicHARequest) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualDevicHARequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualDevicHARequest(val *VirtualDevicHARequest) *NullableVirtualDevicHARequest {
	return &NullableVirtualDevicHARequest{value: val, isSet: true}
}

func (v NullableVirtualDevicHARequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualDevicHARequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
