/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the SshUserPageResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SshUserPageResponse{}

// SshUserPageResponse struct for SshUserPageResponse
type SshUserPageResponse struct {
	Pagination           *PaginationResponseDto `json:"pagination,omitempty"`
	Data                 []SshUserInfoVerbose   `json:"data,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SshUserPageResponse SshUserPageResponse

// NewSshUserPageResponse instantiates a new SshUserPageResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSshUserPageResponse() *SshUserPageResponse {
	this := SshUserPageResponse{}
	return &this
}

// NewSshUserPageResponseWithDefaults instantiates a new SshUserPageResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSshUserPageResponseWithDefaults() *SshUserPageResponse {
	this := SshUserPageResponse{}
	return &this
}

// GetPagination returns the Pagination field value if set, zero value otherwise.
func (o *SshUserPageResponse) GetPagination() PaginationResponseDto {
	if o == nil || IsNil(o.Pagination) {
		var ret PaginationResponseDto
		return ret
	}
	return *o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshUserPageResponse) GetPaginationOk() (*PaginationResponseDto, bool) {
	if o == nil || IsNil(o.Pagination) {
		return nil, false
	}
	return o.Pagination, true
}

// HasPagination returns a boolean if a field has been set.
func (o *SshUserPageResponse) HasPagination() bool {
	if o != nil && !IsNil(o.Pagination) {
		return true
	}

	return false
}

// SetPagination gets a reference to the given PaginationResponseDto and assigns it to the Pagination field.
func (o *SshUserPageResponse) SetPagination(v PaginationResponseDto) {
	o.Pagination = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *SshUserPageResponse) GetData() []SshUserInfoVerbose {
	if o == nil || IsNil(o.Data) {
		var ret []SshUserInfoVerbose
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshUserPageResponse) GetDataOk() ([]SshUserInfoVerbose, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *SshUserPageResponse) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []SshUserInfoVerbose and assigns it to the Data field.
func (o *SshUserPageResponse) SetData(v []SshUserInfoVerbose) {
	o.Data = v
}

func (o SshUserPageResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SshUserPageResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Pagination) {
		toSerialize["pagination"] = o.Pagination
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SshUserPageResponse) UnmarshalJSON(data []byte) (err error) {
	varSshUserPageResponse := _SshUserPageResponse{}

	err = json.Unmarshal(data, &varSshUserPageResponse)

	if err != nil {
		return err
	}

	*o = SshUserPageResponse(varSshUserPageResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "pagination")
		delete(additionalProperties, "data")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSshUserPageResponse struct {
	value *SshUserPageResponse
	isSet bool
}

func (v NullableSshUserPageResponse) Get() *SshUserPageResponse {
	return v.value
}

func (v *NullableSshUserPageResponse) Set(val *SshUserPageResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSshUserPageResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSshUserPageResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSshUserPageResponse(val *SshUserPageResponse) *NullableSshUserPageResponse {
	return &NullableSshUserPageResponse{value: val, isSet: true}
}

func (v NullableSshUserPageResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSshUserPageResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
