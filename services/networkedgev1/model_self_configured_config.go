/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the SelfConfiguredConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SelfConfiguredConfig{}

// SelfConfiguredConfig struct for SelfConfiguredConfig
type SelfConfiguredConfig struct {
	// Whether the device is EQUINIX-CONFIGURED or SELF-MANAGED.
	Type                 *string                             `json:"type,omitempty"`
	LicenseOptions       *SelfConfiguredConfigLicenseOptions `json:"licenseOptions,omitempty"`
	SupportedServices    []SupportedServicesConfig           `json:"supportedServices,omitempty"`
	AdditionalFields     []AdditionalFieldsConfig            `json:"additionalFields,omitempty"`
	DefaultAcls          *DefaultAclsConfig                  `json:"defaultAcls,omitempty"`
	ClusteringDetails    *ClusteringDetails                  `json:"clusteringDetails,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SelfConfiguredConfig SelfConfiguredConfig

// NewSelfConfiguredConfig instantiates a new SelfConfiguredConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSelfConfiguredConfig() *SelfConfiguredConfig {
	this := SelfConfiguredConfig{}
	return &this
}

// NewSelfConfiguredConfigWithDefaults instantiates a new SelfConfiguredConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSelfConfiguredConfigWithDefaults() *SelfConfiguredConfig {
	this := SelfConfiguredConfig{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SelfConfiguredConfig) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelfConfiguredConfig) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SelfConfiguredConfig) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SelfConfiguredConfig) SetType(v string) {
	o.Type = &v
}

// GetLicenseOptions returns the LicenseOptions field value if set, zero value otherwise.
func (o *SelfConfiguredConfig) GetLicenseOptions() SelfConfiguredConfigLicenseOptions {
	if o == nil || IsNil(o.LicenseOptions) {
		var ret SelfConfiguredConfigLicenseOptions
		return ret
	}
	return *o.LicenseOptions
}

// GetLicenseOptionsOk returns a tuple with the LicenseOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelfConfiguredConfig) GetLicenseOptionsOk() (*SelfConfiguredConfigLicenseOptions, bool) {
	if o == nil || IsNil(o.LicenseOptions) {
		return nil, false
	}
	return o.LicenseOptions, true
}

// HasLicenseOptions returns a boolean if a field has been set.
func (o *SelfConfiguredConfig) HasLicenseOptions() bool {
	if o != nil && !IsNil(o.LicenseOptions) {
		return true
	}

	return false
}

// SetLicenseOptions gets a reference to the given SelfConfiguredConfigLicenseOptions and assigns it to the LicenseOptions field.
func (o *SelfConfiguredConfig) SetLicenseOptions(v SelfConfiguredConfigLicenseOptions) {
	o.LicenseOptions = &v
}

// GetSupportedServices returns the SupportedServices field value if set, zero value otherwise.
func (o *SelfConfiguredConfig) GetSupportedServices() []SupportedServicesConfig {
	if o == nil || IsNil(o.SupportedServices) {
		var ret []SupportedServicesConfig
		return ret
	}
	return o.SupportedServices
}

// GetSupportedServicesOk returns a tuple with the SupportedServices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelfConfiguredConfig) GetSupportedServicesOk() ([]SupportedServicesConfig, bool) {
	if o == nil || IsNil(o.SupportedServices) {
		return nil, false
	}
	return o.SupportedServices, true
}

// HasSupportedServices returns a boolean if a field has been set.
func (o *SelfConfiguredConfig) HasSupportedServices() bool {
	if o != nil && !IsNil(o.SupportedServices) {
		return true
	}

	return false
}

// SetSupportedServices gets a reference to the given []SupportedServicesConfig and assigns it to the SupportedServices field.
func (o *SelfConfiguredConfig) SetSupportedServices(v []SupportedServicesConfig) {
	o.SupportedServices = v
}

// GetAdditionalFields returns the AdditionalFields field value if set, zero value otherwise.
func (o *SelfConfiguredConfig) GetAdditionalFields() []AdditionalFieldsConfig {
	if o == nil || IsNil(o.AdditionalFields) {
		var ret []AdditionalFieldsConfig
		return ret
	}
	return o.AdditionalFields
}

// GetAdditionalFieldsOk returns a tuple with the AdditionalFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelfConfiguredConfig) GetAdditionalFieldsOk() ([]AdditionalFieldsConfig, bool) {
	if o == nil || IsNil(o.AdditionalFields) {
		return nil, false
	}
	return o.AdditionalFields, true
}

// HasAdditionalFields returns a boolean if a field has been set.
func (o *SelfConfiguredConfig) HasAdditionalFields() bool {
	if o != nil && !IsNil(o.AdditionalFields) {
		return true
	}

	return false
}

// SetAdditionalFields gets a reference to the given []AdditionalFieldsConfig and assigns it to the AdditionalFields field.
func (o *SelfConfiguredConfig) SetAdditionalFields(v []AdditionalFieldsConfig) {
	o.AdditionalFields = v
}

// GetDefaultAcls returns the DefaultAcls field value if set, zero value otherwise.
func (o *SelfConfiguredConfig) GetDefaultAcls() DefaultAclsConfig {
	if o == nil || IsNil(o.DefaultAcls) {
		var ret DefaultAclsConfig
		return ret
	}
	return *o.DefaultAcls
}

// GetDefaultAclsOk returns a tuple with the DefaultAcls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelfConfiguredConfig) GetDefaultAclsOk() (*DefaultAclsConfig, bool) {
	if o == nil || IsNil(o.DefaultAcls) {
		return nil, false
	}
	return o.DefaultAcls, true
}

// HasDefaultAcls returns a boolean if a field has been set.
func (o *SelfConfiguredConfig) HasDefaultAcls() bool {
	if o != nil && !IsNil(o.DefaultAcls) {
		return true
	}

	return false
}

// SetDefaultAcls gets a reference to the given DefaultAclsConfig and assigns it to the DefaultAcls field.
func (o *SelfConfiguredConfig) SetDefaultAcls(v DefaultAclsConfig) {
	o.DefaultAcls = &v
}

// GetClusteringDetails returns the ClusteringDetails field value if set, zero value otherwise.
func (o *SelfConfiguredConfig) GetClusteringDetails() ClusteringDetails {
	if o == nil || IsNil(o.ClusteringDetails) {
		var ret ClusteringDetails
		return ret
	}
	return *o.ClusteringDetails
}

// GetClusteringDetailsOk returns a tuple with the ClusteringDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelfConfiguredConfig) GetClusteringDetailsOk() (*ClusteringDetails, bool) {
	if o == nil || IsNil(o.ClusteringDetails) {
		return nil, false
	}
	return o.ClusteringDetails, true
}

// HasClusteringDetails returns a boolean if a field has been set.
func (o *SelfConfiguredConfig) HasClusteringDetails() bool {
	if o != nil && !IsNil(o.ClusteringDetails) {
		return true
	}

	return false
}

// SetClusteringDetails gets a reference to the given ClusteringDetails and assigns it to the ClusteringDetails field.
func (o *SelfConfiguredConfig) SetClusteringDetails(v ClusteringDetails) {
	o.ClusteringDetails = &v
}

func (o SelfConfiguredConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SelfConfiguredConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.LicenseOptions) {
		toSerialize["licenseOptions"] = o.LicenseOptions
	}
	if !IsNil(o.SupportedServices) {
		toSerialize["supportedServices"] = o.SupportedServices
	}
	if !IsNil(o.AdditionalFields) {
		toSerialize["additionalFields"] = o.AdditionalFields
	}
	if !IsNil(o.DefaultAcls) {
		toSerialize["defaultAcls"] = o.DefaultAcls
	}
	if !IsNil(o.ClusteringDetails) {
		toSerialize["clusteringDetails"] = o.ClusteringDetails
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SelfConfiguredConfig) UnmarshalJSON(data []byte) (err error) {
	varSelfConfiguredConfig := _SelfConfiguredConfig{}

	err = json.Unmarshal(data, &varSelfConfiguredConfig)

	if err != nil {
		return err
	}

	*o = SelfConfiguredConfig(varSelfConfiguredConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "licenseOptions")
		delete(additionalProperties, "supportedServices")
		delete(additionalProperties, "additionalFields")
		delete(additionalProperties, "defaultAcls")
		delete(additionalProperties, "clusteringDetails")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSelfConfiguredConfig struct {
	value *SelfConfiguredConfig
	isSet bool
}

func (v NullableSelfConfiguredConfig) Get() *SelfConfiguredConfig {
	return v.value
}

func (v *NullableSelfConfiguredConfig) Set(val *SelfConfiguredConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSelfConfiguredConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSelfConfiguredConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSelfConfiguredConfig(val *SelfConfiguredConfig) *NullableSelfConfiguredConfig {
	return &NullableSelfConfiguredConfig{value: val, isSet: true}
}

func (v NullableSelfConfiguredConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSelfConfiguredConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
