/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the UserPublicKeyConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserPublicKeyConfig{}

// UserPublicKeyConfig An object with public key details.
type UserPublicKeyConfig struct {
	// Username.
	Username *string `json:"username,omitempty"`
	// Key name.
	PublicKeyName *string `json:"publicKeyName,omitempty"`
	// The public key.
	PublicKey            *string `json:"publicKey,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UserPublicKeyConfig UserPublicKeyConfig

// NewUserPublicKeyConfig instantiates a new UserPublicKeyConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserPublicKeyConfig() *UserPublicKeyConfig {
	this := UserPublicKeyConfig{}
	return &this
}

// NewUserPublicKeyConfigWithDefaults instantiates a new UserPublicKeyConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserPublicKeyConfigWithDefaults() *UserPublicKeyConfig {
	this := UserPublicKeyConfig{}
	return &this
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *UserPublicKeyConfig) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPublicKeyConfig) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *UserPublicKeyConfig) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *UserPublicKeyConfig) SetUsername(v string) {
	o.Username = &v
}

// GetPublicKeyName returns the PublicKeyName field value if set, zero value otherwise.
func (o *UserPublicKeyConfig) GetPublicKeyName() string {
	if o == nil || IsNil(o.PublicKeyName) {
		var ret string
		return ret
	}
	return *o.PublicKeyName
}

// GetPublicKeyNameOk returns a tuple with the PublicKeyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPublicKeyConfig) GetPublicKeyNameOk() (*string, bool) {
	if o == nil || IsNil(o.PublicKeyName) {
		return nil, false
	}
	return o.PublicKeyName, true
}

// HasPublicKeyName returns a boolean if a field has been set.
func (o *UserPublicKeyConfig) HasPublicKeyName() bool {
	if o != nil && !IsNil(o.PublicKeyName) {
		return true
	}

	return false
}

// SetPublicKeyName gets a reference to the given string and assigns it to the PublicKeyName field.
func (o *UserPublicKeyConfig) SetPublicKeyName(v string) {
	o.PublicKeyName = &v
}

// GetPublicKey returns the PublicKey field value if set, zero value otherwise.
func (o *UserPublicKeyConfig) GetPublicKey() string {
	if o == nil || IsNil(o.PublicKey) {
		var ret string
		return ret
	}
	return *o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPublicKeyConfig) GetPublicKeyOk() (*string, bool) {
	if o == nil || IsNil(o.PublicKey) {
		return nil, false
	}
	return o.PublicKey, true
}

// HasPublicKey returns a boolean if a field has been set.
func (o *UserPublicKeyConfig) HasPublicKey() bool {
	if o != nil && !IsNil(o.PublicKey) {
		return true
	}

	return false
}

// SetPublicKey gets a reference to the given string and assigns it to the PublicKey field.
func (o *UserPublicKeyConfig) SetPublicKey(v string) {
	o.PublicKey = &v
}

func (o UserPublicKeyConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserPublicKeyConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.PublicKeyName) {
		toSerialize["publicKeyName"] = o.PublicKeyName
	}
	if !IsNil(o.PublicKey) {
		toSerialize["publicKey"] = o.PublicKey
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UserPublicKeyConfig) UnmarshalJSON(data []byte) (err error) {
	varUserPublicKeyConfig := _UserPublicKeyConfig{}

	err = json.Unmarshal(data, &varUserPublicKeyConfig)

	if err != nil {
		return err
	}

	*o = UserPublicKeyConfig(varUserPublicKeyConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "username")
		delete(additionalProperties, "publicKeyName")
		delete(additionalProperties, "publicKey")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserPublicKeyConfig struct {
	value *UserPublicKeyConfig
	isSet bool
}

func (v NullableUserPublicKeyConfig) Get() *UserPublicKeyConfig {
	return v.value
}

func (v *NullableUserPublicKeyConfig) Set(val *UserPublicKeyConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableUserPublicKeyConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableUserPublicKeyConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserPublicKeyConfig(val *UserPublicKeyConfig) *NullableUserPublicKeyConfig {
	return &NullableUserPublicKeyConfig{value: val, isSet: true}
}

func (v NullableUserPublicKeyConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserPublicKeyConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
