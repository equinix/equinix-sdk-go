/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the GetValidateAuthKeyRes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetValidateAuthKeyRes{}

// GetValidateAuthKeyRes struct for GetValidateAuthKeyRes
type GetValidateAuthKeyRes struct {
	Message              *string                         `json:"message,omitempty"`
	Status               *string                         `json:"status,omitempty"`
	Primary              *GetValidateAuthkeyresPrimary   `json:"primary,omitempty"`
	Secondary            *GetValidateAuthkeyresSecondary `json:"secondary,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GetValidateAuthKeyRes GetValidateAuthKeyRes

// NewGetValidateAuthKeyRes instantiates a new GetValidateAuthKeyRes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetValidateAuthKeyRes() *GetValidateAuthKeyRes {
	this := GetValidateAuthKeyRes{}
	return &this
}

// NewGetValidateAuthKeyResWithDefaults instantiates a new GetValidateAuthKeyRes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetValidateAuthKeyResWithDefaults() *GetValidateAuthKeyRes {
	this := GetValidateAuthKeyRes{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *GetValidateAuthKeyRes) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetValidateAuthKeyRes) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *GetValidateAuthKeyRes) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *GetValidateAuthKeyRes) SetMessage(v string) {
	o.Message = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *GetValidateAuthKeyRes) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetValidateAuthKeyRes) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *GetValidateAuthKeyRes) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *GetValidateAuthKeyRes) SetStatus(v string) {
	o.Status = &v
}

// GetPrimary returns the Primary field value if set, zero value otherwise.
func (o *GetValidateAuthKeyRes) GetPrimary() GetValidateAuthkeyresPrimary {
	if o == nil || IsNil(o.Primary) {
		var ret GetValidateAuthkeyresPrimary
		return ret
	}
	return *o.Primary
}

// GetPrimaryOk returns a tuple with the Primary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetValidateAuthKeyRes) GetPrimaryOk() (*GetValidateAuthkeyresPrimary, bool) {
	if o == nil || IsNil(o.Primary) {
		return nil, false
	}
	return o.Primary, true
}

// HasPrimary returns a boolean if a field has been set.
func (o *GetValidateAuthKeyRes) HasPrimary() bool {
	if o != nil && !IsNil(o.Primary) {
		return true
	}

	return false
}

// SetPrimary gets a reference to the given GetValidateAuthkeyresPrimary and assigns it to the Primary field.
func (o *GetValidateAuthKeyRes) SetPrimary(v GetValidateAuthkeyresPrimary) {
	o.Primary = &v
}

// GetSecondary returns the Secondary field value if set, zero value otherwise.
func (o *GetValidateAuthKeyRes) GetSecondary() GetValidateAuthkeyresSecondary {
	if o == nil || IsNil(o.Secondary) {
		var ret GetValidateAuthkeyresSecondary
		return ret
	}
	return *o.Secondary
}

// GetSecondaryOk returns a tuple with the Secondary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetValidateAuthKeyRes) GetSecondaryOk() (*GetValidateAuthkeyresSecondary, bool) {
	if o == nil || IsNil(o.Secondary) {
		return nil, false
	}
	return o.Secondary, true
}

// HasSecondary returns a boolean if a field has been set.
func (o *GetValidateAuthKeyRes) HasSecondary() bool {
	if o != nil && !IsNil(o.Secondary) {
		return true
	}

	return false
}

// SetSecondary gets a reference to the given GetValidateAuthkeyresSecondary and assigns it to the Secondary field.
func (o *GetValidateAuthKeyRes) SetSecondary(v GetValidateAuthkeyresSecondary) {
	o.Secondary = &v
}

func (o GetValidateAuthKeyRes) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetValidateAuthKeyRes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Primary) {
		toSerialize["primary"] = o.Primary
	}
	if !IsNil(o.Secondary) {
		toSerialize["secondary"] = o.Secondary
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GetValidateAuthKeyRes) UnmarshalJSON(data []byte) (err error) {
	varGetValidateAuthKeyRes := _GetValidateAuthKeyRes{}

	err = json.Unmarshal(data, &varGetValidateAuthKeyRes)

	if err != nil {
		return err
	}

	*o = GetValidateAuthKeyRes(varGetValidateAuthKeyRes)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "message")
		delete(additionalProperties, "status")
		delete(additionalProperties, "primary")
		delete(additionalProperties, "secondary")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetValidateAuthKeyRes struct {
	value *GetValidateAuthKeyRes
	isSet bool
}

func (v NullableGetValidateAuthKeyRes) Get() *GetValidateAuthKeyRes {
	return v.value
}

func (v *NullableGetValidateAuthKeyRes) Set(val *GetValidateAuthKeyRes) {
	v.value = val
	v.isSet = true
}

func (v NullableGetValidateAuthKeyRes) IsSet() bool {
	return v.isSet
}

func (v *NullableGetValidateAuthKeyRes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetValidateAuthKeyRes(val *GetValidateAuthKeyRes) *NullableGetValidateAuthKeyRes {
	return &NullableGetValidateAuthKeyRes{value: val, isSet: true}
}

func (v NullableGetValidateAuthKeyRes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetValidateAuthKeyRes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
