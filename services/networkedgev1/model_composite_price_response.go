/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the CompositePriceResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompositePriceResponse{}

// CompositePriceResponse struct for CompositePriceResponse
type CompositePriceResponse struct {
	Primary              *PriceResponse `json:"primary,omitempty"`
	Secondary            *PriceResponse `json:"secondary,omitempty"`
	TermLength           *string        `json:"termLength,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CompositePriceResponse CompositePriceResponse

// NewCompositePriceResponse instantiates a new CompositePriceResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompositePriceResponse() *CompositePriceResponse {
	this := CompositePriceResponse{}
	return &this
}

// NewCompositePriceResponseWithDefaults instantiates a new CompositePriceResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompositePriceResponseWithDefaults() *CompositePriceResponse {
	this := CompositePriceResponse{}
	return &this
}

// GetPrimary returns the Primary field value if set, zero value otherwise.
func (o *CompositePriceResponse) GetPrimary() PriceResponse {
	if o == nil || IsNil(o.Primary) {
		var ret PriceResponse
		return ret
	}
	return *o.Primary
}

// GetPrimaryOk returns a tuple with the Primary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompositePriceResponse) GetPrimaryOk() (*PriceResponse, bool) {
	if o == nil || IsNil(o.Primary) {
		return nil, false
	}
	return o.Primary, true
}

// HasPrimary returns a boolean if a field has been set.
func (o *CompositePriceResponse) HasPrimary() bool {
	if o != nil && !IsNil(o.Primary) {
		return true
	}

	return false
}

// SetPrimary gets a reference to the given PriceResponse and assigns it to the Primary field.
func (o *CompositePriceResponse) SetPrimary(v PriceResponse) {
	o.Primary = &v
}

// GetSecondary returns the Secondary field value if set, zero value otherwise.
func (o *CompositePriceResponse) GetSecondary() PriceResponse {
	if o == nil || IsNil(o.Secondary) {
		var ret PriceResponse
		return ret
	}
	return *o.Secondary
}

// GetSecondaryOk returns a tuple with the Secondary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompositePriceResponse) GetSecondaryOk() (*PriceResponse, bool) {
	if o == nil || IsNil(o.Secondary) {
		return nil, false
	}
	return o.Secondary, true
}

// HasSecondary returns a boolean if a field has been set.
func (o *CompositePriceResponse) HasSecondary() bool {
	if o != nil && !IsNil(o.Secondary) {
		return true
	}

	return false
}

// SetSecondary gets a reference to the given PriceResponse and assigns it to the Secondary field.
func (o *CompositePriceResponse) SetSecondary(v PriceResponse) {
	o.Secondary = &v
}

// GetTermLength returns the TermLength field value if set, zero value otherwise.
func (o *CompositePriceResponse) GetTermLength() string {
	if o == nil || IsNil(o.TermLength) {
		var ret string
		return ret
	}
	return *o.TermLength
}

// GetTermLengthOk returns a tuple with the TermLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompositePriceResponse) GetTermLengthOk() (*string, bool) {
	if o == nil || IsNil(o.TermLength) {
		return nil, false
	}
	return o.TermLength, true
}

// HasTermLength returns a boolean if a field has been set.
func (o *CompositePriceResponse) HasTermLength() bool {
	if o != nil && !IsNil(o.TermLength) {
		return true
	}

	return false
}

// SetTermLength gets a reference to the given string and assigns it to the TermLength field.
func (o *CompositePriceResponse) SetTermLength(v string) {
	o.TermLength = &v
}

func (o CompositePriceResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompositePriceResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Primary) {
		toSerialize["primary"] = o.Primary
	}
	if !IsNil(o.Secondary) {
		toSerialize["secondary"] = o.Secondary
	}
	if !IsNil(o.TermLength) {
		toSerialize["termLength"] = o.TermLength
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CompositePriceResponse) UnmarshalJSON(data []byte) (err error) {
	varCompositePriceResponse := _CompositePriceResponse{}

	err = json.Unmarshal(data, &varCompositePriceResponse)

	if err != nil {
		return err
	}

	*o = CompositePriceResponse(varCompositePriceResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "primary")
		delete(additionalProperties, "secondary")
		delete(additionalProperties, "termLength")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCompositePriceResponse struct {
	value *CompositePriceResponse
	isSet bool
}

func (v NullableCompositePriceResponse) Get() *CompositePriceResponse {
	return v.value
}

func (v *NullableCompositePriceResponse) Set(val *CompositePriceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCompositePriceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCompositePriceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompositePriceResponse(val *CompositePriceResponse) *NullableCompositePriceResponse {
	return &NullableCompositePriceResponse{value: val, isSet: true}
}

func (v NullableCompositePriceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompositePriceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
