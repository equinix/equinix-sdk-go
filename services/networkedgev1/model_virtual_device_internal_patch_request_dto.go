/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the VirtualDeviceInternalPatchRequestDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VirtualDeviceInternalPatchRequestDto{}

// VirtualDeviceInternalPatchRequestDto struct for VirtualDeviceInternalPatchRequestDto
type VirtualDeviceInternalPatchRequestDto struct {
	// Use this field to resize your device. When you call this API for device resizing, you cannot change other fields simultaneously.
	Core          *int32   `json:"core,omitempty"`
	Notifications []string `json:"notifications,omitempty"`
	// Term length in months. Please keep in mind that you cannot downgrade the term length.
	TermLength *string `json:"termLength,omitempty"`
	// Virtual device name. This should be a minimum of 3 and a maximum of 50 characters.
	VirtualDeviceName *string `json:"virtualDeviceName,omitempty"`
	// Cluster name. This should be a minimum of 3 and a maximum of 50 characters.
	ClusterName *string `json:"clusterName,omitempty"`
	// Status of the device. Use this field to update the license status of a device.
	Status               *string                                           `json:"status,omitempty"`
	VendorConfig         *VirtualDeviceInternalPatchRequestDtoVendorConfig `json:"vendorConfig,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VirtualDeviceInternalPatchRequestDto VirtualDeviceInternalPatchRequestDto

// NewVirtualDeviceInternalPatchRequestDto instantiates a new VirtualDeviceInternalPatchRequestDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualDeviceInternalPatchRequestDto() *VirtualDeviceInternalPatchRequestDto {
	this := VirtualDeviceInternalPatchRequestDto{}
	return &this
}

// NewVirtualDeviceInternalPatchRequestDtoWithDefaults instantiates a new VirtualDeviceInternalPatchRequestDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualDeviceInternalPatchRequestDtoWithDefaults() *VirtualDeviceInternalPatchRequestDto {
	this := VirtualDeviceInternalPatchRequestDto{}
	return &this
}

// GetCore returns the Core field value if set, zero value otherwise.
func (o *VirtualDeviceInternalPatchRequestDto) GetCore() int32 {
	if o == nil || IsNil(o.Core) {
		var ret int32
		return ret
	}
	return *o.Core
}

// GetCoreOk returns a tuple with the Core field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceInternalPatchRequestDto) GetCoreOk() (*int32, bool) {
	if o == nil || IsNil(o.Core) {
		return nil, false
	}
	return o.Core, true
}

// HasCore returns a boolean if a field has been set.
func (o *VirtualDeviceInternalPatchRequestDto) HasCore() bool {
	if o != nil && !IsNil(o.Core) {
		return true
	}

	return false
}

// SetCore gets a reference to the given int32 and assigns it to the Core field.
func (o *VirtualDeviceInternalPatchRequestDto) SetCore(v int32) {
	o.Core = &v
}

// GetNotifications returns the Notifications field value if set, zero value otherwise.
func (o *VirtualDeviceInternalPatchRequestDto) GetNotifications() []string {
	if o == nil || IsNil(o.Notifications) {
		var ret []string
		return ret
	}
	return o.Notifications
}

// GetNotificationsOk returns a tuple with the Notifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceInternalPatchRequestDto) GetNotificationsOk() ([]string, bool) {
	if o == nil || IsNil(o.Notifications) {
		return nil, false
	}
	return o.Notifications, true
}

// HasNotifications returns a boolean if a field has been set.
func (o *VirtualDeviceInternalPatchRequestDto) HasNotifications() bool {
	if o != nil && !IsNil(o.Notifications) {
		return true
	}

	return false
}

// SetNotifications gets a reference to the given []string and assigns it to the Notifications field.
func (o *VirtualDeviceInternalPatchRequestDto) SetNotifications(v []string) {
	o.Notifications = v
}

// GetTermLength returns the TermLength field value if set, zero value otherwise.
func (o *VirtualDeviceInternalPatchRequestDto) GetTermLength() string {
	if o == nil || IsNil(o.TermLength) {
		var ret string
		return ret
	}
	return *o.TermLength
}

// GetTermLengthOk returns a tuple with the TermLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceInternalPatchRequestDto) GetTermLengthOk() (*string, bool) {
	if o == nil || IsNil(o.TermLength) {
		return nil, false
	}
	return o.TermLength, true
}

// HasTermLength returns a boolean if a field has been set.
func (o *VirtualDeviceInternalPatchRequestDto) HasTermLength() bool {
	if o != nil && !IsNil(o.TermLength) {
		return true
	}

	return false
}

// SetTermLength gets a reference to the given string and assigns it to the TermLength field.
func (o *VirtualDeviceInternalPatchRequestDto) SetTermLength(v string) {
	o.TermLength = &v
}

// GetVirtualDeviceName returns the VirtualDeviceName field value if set, zero value otherwise.
func (o *VirtualDeviceInternalPatchRequestDto) GetVirtualDeviceName() string {
	if o == nil || IsNil(o.VirtualDeviceName) {
		var ret string
		return ret
	}
	return *o.VirtualDeviceName
}

// GetVirtualDeviceNameOk returns a tuple with the VirtualDeviceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceInternalPatchRequestDto) GetVirtualDeviceNameOk() (*string, bool) {
	if o == nil || IsNil(o.VirtualDeviceName) {
		return nil, false
	}
	return o.VirtualDeviceName, true
}

// HasVirtualDeviceName returns a boolean if a field has been set.
func (o *VirtualDeviceInternalPatchRequestDto) HasVirtualDeviceName() bool {
	if o != nil && !IsNil(o.VirtualDeviceName) {
		return true
	}

	return false
}

// SetVirtualDeviceName gets a reference to the given string and assigns it to the VirtualDeviceName field.
func (o *VirtualDeviceInternalPatchRequestDto) SetVirtualDeviceName(v string) {
	o.VirtualDeviceName = &v
}

// GetClusterName returns the ClusterName field value if set, zero value otherwise.
func (o *VirtualDeviceInternalPatchRequestDto) GetClusterName() string {
	if o == nil || IsNil(o.ClusterName) {
		var ret string
		return ret
	}
	return *o.ClusterName
}

// GetClusterNameOk returns a tuple with the ClusterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceInternalPatchRequestDto) GetClusterNameOk() (*string, bool) {
	if o == nil || IsNil(o.ClusterName) {
		return nil, false
	}
	return o.ClusterName, true
}

// HasClusterName returns a boolean if a field has been set.
func (o *VirtualDeviceInternalPatchRequestDto) HasClusterName() bool {
	if o != nil && !IsNil(o.ClusterName) {
		return true
	}

	return false
}

// SetClusterName gets a reference to the given string and assigns it to the ClusterName field.
func (o *VirtualDeviceInternalPatchRequestDto) SetClusterName(v string) {
	o.ClusterName = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *VirtualDeviceInternalPatchRequestDto) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceInternalPatchRequestDto) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *VirtualDeviceInternalPatchRequestDto) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *VirtualDeviceInternalPatchRequestDto) SetStatus(v string) {
	o.Status = &v
}

// GetVendorConfig returns the VendorConfig field value if set, zero value otherwise.
func (o *VirtualDeviceInternalPatchRequestDto) GetVendorConfig() VirtualDeviceInternalPatchRequestDtoVendorConfig {
	if o == nil || IsNil(o.VendorConfig) {
		var ret VirtualDeviceInternalPatchRequestDtoVendorConfig
		return ret
	}
	return *o.VendorConfig
}

// GetVendorConfigOk returns a tuple with the VendorConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDeviceInternalPatchRequestDto) GetVendorConfigOk() (*VirtualDeviceInternalPatchRequestDtoVendorConfig, bool) {
	if o == nil || IsNil(o.VendorConfig) {
		return nil, false
	}
	return o.VendorConfig, true
}

// HasVendorConfig returns a boolean if a field has been set.
func (o *VirtualDeviceInternalPatchRequestDto) HasVendorConfig() bool {
	if o != nil && !IsNil(o.VendorConfig) {
		return true
	}

	return false
}

// SetVendorConfig gets a reference to the given VirtualDeviceInternalPatchRequestDtoVendorConfig and assigns it to the VendorConfig field.
func (o *VirtualDeviceInternalPatchRequestDto) SetVendorConfig(v VirtualDeviceInternalPatchRequestDtoVendorConfig) {
	o.VendorConfig = &v
}

func (o VirtualDeviceInternalPatchRequestDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VirtualDeviceInternalPatchRequestDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Core) {
		toSerialize["core"] = o.Core
	}
	if !IsNil(o.Notifications) {
		toSerialize["notifications"] = o.Notifications
	}
	if !IsNil(o.TermLength) {
		toSerialize["termLength"] = o.TermLength
	}
	if !IsNil(o.VirtualDeviceName) {
		toSerialize["virtualDeviceName"] = o.VirtualDeviceName
	}
	if !IsNil(o.ClusterName) {
		toSerialize["clusterName"] = o.ClusterName
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.VendorConfig) {
		toSerialize["vendorConfig"] = o.VendorConfig
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VirtualDeviceInternalPatchRequestDto) UnmarshalJSON(data []byte) (err error) {
	varVirtualDeviceInternalPatchRequestDto := _VirtualDeviceInternalPatchRequestDto{}

	err = json.Unmarshal(data, &varVirtualDeviceInternalPatchRequestDto)

	if err != nil {
		return err
	}

	*o = VirtualDeviceInternalPatchRequestDto(varVirtualDeviceInternalPatchRequestDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "core")
		delete(additionalProperties, "notifications")
		delete(additionalProperties, "termLength")
		delete(additionalProperties, "virtualDeviceName")
		delete(additionalProperties, "clusterName")
		delete(additionalProperties, "status")
		delete(additionalProperties, "vendorConfig")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVirtualDeviceInternalPatchRequestDto struct {
	value *VirtualDeviceInternalPatchRequestDto
	isSet bool
}

func (v NullableVirtualDeviceInternalPatchRequestDto) Get() *VirtualDeviceInternalPatchRequestDto {
	return v.value
}

func (v *NullableVirtualDeviceInternalPatchRequestDto) Set(val *VirtualDeviceInternalPatchRequestDto) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualDeviceInternalPatchRequestDto) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualDeviceInternalPatchRequestDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualDeviceInternalPatchRequestDto(val *VirtualDeviceInternalPatchRequestDto) *NullableVirtualDeviceInternalPatchRequestDto {
	return &NullableVirtualDeviceInternalPatchRequestDto{value: val, isSet: true}
}

func (v NullableVirtualDeviceInternalPatchRequestDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualDeviceInternalPatchRequestDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
