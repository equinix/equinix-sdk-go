/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the ImpactedServices type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImpactedServices{}

// ImpactedServices struct for ImpactedServices
type ImpactedServices struct {
	// The name of the impacted service.
	ServiceName *string `json:"serviceName,omitempty"`
	// The type of impact, whether the impacted service is down or delayed.
	Impact *string `json:"impact,omitempty"`
	// Start of the downtime of the service.
	ServiceStartTime *string `json:"serviceStartTime,omitempty"`
	// End of the downtime of the service.
	ServiceEndTime *string `json:"serviceEndTime,omitempty"`
	// Downtime message of the service.
	ErrorMessage         *string `json:"errorMessage,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ImpactedServices ImpactedServices

// NewImpactedServices instantiates a new ImpactedServices object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImpactedServices() *ImpactedServices {
	this := ImpactedServices{}
	return &this
}

// NewImpactedServicesWithDefaults instantiates a new ImpactedServices object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImpactedServicesWithDefaults() *ImpactedServices {
	this := ImpactedServices{}
	return &this
}

// GetServiceName returns the ServiceName field value if set, zero value otherwise.
func (o *ImpactedServices) GetServiceName() string {
	if o == nil || IsNil(o.ServiceName) {
		var ret string
		return ret
	}
	return *o.ServiceName
}

// GetServiceNameOk returns a tuple with the ServiceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImpactedServices) GetServiceNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceName) {
		return nil, false
	}
	return o.ServiceName, true
}

// HasServiceName returns a boolean if a field has been set.
func (o *ImpactedServices) HasServiceName() bool {
	if o != nil && !IsNil(o.ServiceName) {
		return true
	}

	return false
}

// SetServiceName gets a reference to the given string and assigns it to the ServiceName field.
func (o *ImpactedServices) SetServiceName(v string) {
	o.ServiceName = &v
}

// GetImpact returns the Impact field value if set, zero value otherwise.
func (o *ImpactedServices) GetImpact() string {
	if o == nil || IsNil(o.Impact) {
		var ret string
		return ret
	}
	return *o.Impact
}

// GetImpactOk returns a tuple with the Impact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImpactedServices) GetImpactOk() (*string, bool) {
	if o == nil || IsNil(o.Impact) {
		return nil, false
	}
	return o.Impact, true
}

// HasImpact returns a boolean if a field has been set.
func (o *ImpactedServices) HasImpact() bool {
	if o != nil && !IsNil(o.Impact) {
		return true
	}

	return false
}

// SetImpact gets a reference to the given string and assigns it to the Impact field.
func (o *ImpactedServices) SetImpact(v string) {
	o.Impact = &v
}

// GetServiceStartTime returns the ServiceStartTime field value if set, zero value otherwise.
func (o *ImpactedServices) GetServiceStartTime() string {
	if o == nil || IsNil(o.ServiceStartTime) {
		var ret string
		return ret
	}
	return *o.ServiceStartTime
}

// GetServiceStartTimeOk returns a tuple with the ServiceStartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImpactedServices) GetServiceStartTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceStartTime) {
		return nil, false
	}
	return o.ServiceStartTime, true
}

// HasServiceStartTime returns a boolean if a field has been set.
func (o *ImpactedServices) HasServiceStartTime() bool {
	if o != nil && !IsNil(o.ServiceStartTime) {
		return true
	}

	return false
}

// SetServiceStartTime gets a reference to the given string and assigns it to the ServiceStartTime field.
func (o *ImpactedServices) SetServiceStartTime(v string) {
	o.ServiceStartTime = &v
}

// GetServiceEndTime returns the ServiceEndTime field value if set, zero value otherwise.
func (o *ImpactedServices) GetServiceEndTime() string {
	if o == nil || IsNil(o.ServiceEndTime) {
		var ret string
		return ret
	}
	return *o.ServiceEndTime
}

// GetServiceEndTimeOk returns a tuple with the ServiceEndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImpactedServices) GetServiceEndTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceEndTime) {
		return nil, false
	}
	return o.ServiceEndTime, true
}

// HasServiceEndTime returns a boolean if a field has been set.
func (o *ImpactedServices) HasServiceEndTime() bool {
	if o != nil && !IsNil(o.ServiceEndTime) {
		return true
	}

	return false
}

// SetServiceEndTime gets a reference to the given string and assigns it to the ServiceEndTime field.
func (o *ImpactedServices) SetServiceEndTime(v string) {
	o.ServiceEndTime = &v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *ImpactedServices) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage) {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImpactedServices) GetErrorMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorMessage) {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *ImpactedServices) HasErrorMessage() bool {
	if o != nil && !IsNil(o.ErrorMessage) {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *ImpactedServices) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

func (o ImpactedServices) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImpactedServices) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ServiceName) {
		toSerialize["serviceName"] = o.ServiceName
	}
	if !IsNil(o.Impact) {
		toSerialize["impact"] = o.Impact
	}
	if !IsNil(o.ServiceStartTime) {
		toSerialize["serviceStartTime"] = o.ServiceStartTime
	}
	if !IsNil(o.ServiceEndTime) {
		toSerialize["serviceEndTime"] = o.ServiceEndTime
	}
	if !IsNil(o.ErrorMessage) {
		toSerialize["errorMessage"] = o.ErrorMessage
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ImpactedServices) UnmarshalJSON(data []byte) (err error) {
	varImpactedServices := _ImpactedServices{}

	err = json.Unmarshal(data, &varImpactedServices)

	if err != nil {
		return err
	}

	*o = ImpactedServices(varImpactedServices)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "serviceName")
		delete(additionalProperties, "impact")
		delete(additionalProperties, "serviceStartTime")
		delete(additionalProperties, "serviceEndTime")
		delete(additionalProperties, "errorMessage")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableImpactedServices struct {
	value *ImpactedServices
	isSet bool
}

func (v NullableImpactedServices) Get() *ImpactedServices {
	return v.value
}

func (v *NullableImpactedServices) Set(val *ImpactedServices) {
	v.value = val
	v.isSet = true
}

func (v NullableImpactedServices) IsSet() bool {
	return v.isSet
}

func (v *NullableImpactedServices) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImpactedServices(val *ImpactedServices) *NullableImpactedServices {
	return &NullableImpactedServices{value: val, isSet: true}
}

func (v NullableImpactedServices) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImpactedServices) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
