/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
	"fmt"
)

// checks if the SshUserOperationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SshUserOperationRequest{}

// SshUserOperationRequest struct for SshUserOperationRequest
type SshUserOperationRequest struct {
	// Required for DELETE operation.
	SshUserUuid *string                       `json:"sshUserUuid,omitempty"`
	Action      SshUserOperationRequestAction `json:"action"`
	// SSH User name
	SshUsername *string `json:"sshUsername,omitempty"`
	// SSH Password
	SshPassword          *string `json:"sshPassword,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SshUserOperationRequest SshUserOperationRequest

// NewSshUserOperationRequest instantiates a new SshUserOperationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSshUserOperationRequest(action SshUserOperationRequestAction) *SshUserOperationRequest {
	this := SshUserOperationRequest{}
	this.Action = action
	return &this
}

// NewSshUserOperationRequestWithDefaults instantiates a new SshUserOperationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSshUserOperationRequestWithDefaults() *SshUserOperationRequest {
	this := SshUserOperationRequest{}
	return &this
}

// GetSshUserUuid returns the SshUserUuid field value if set, zero value otherwise.
func (o *SshUserOperationRequest) GetSshUserUuid() string {
	if o == nil || IsNil(o.SshUserUuid) {
		var ret string
		return ret
	}
	return *o.SshUserUuid
}

// GetSshUserUuidOk returns a tuple with the SshUserUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshUserOperationRequest) GetSshUserUuidOk() (*string, bool) {
	if o == nil || IsNil(o.SshUserUuid) {
		return nil, false
	}
	return o.SshUserUuid, true
}

// HasSshUserUuid returns a boolean if a field has been set.
func (o *SshUserOperationRequest) HasSshUserUuid() bool {
	if o != nil && !IsNil(o.SshUserUuid) {
		return true
	}

	return false
}

// SetSshUserUuid gets a reference to the given string and assigns it to the SshUserUuid field.
func (o *SshUserOperationRequest) SetSshUserUuid(v string) {
	o.SshUserUuid = &v
}

// GetAction returns the Action field value
func (o *SshUserOperationRequest) GetAction() SshUserOperationRequestAction {
	if o == nil {
		var ret SshUserOperationRequestAction
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *SshUserOperationRequest) GetActionOk() (*SshUserOperationRequestAction, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *SshUserOperationRequest) SetAction(v SshUserOperationRequestAction) {
	o.Action = v
}

// GetSshUsername returns the SshUsername field value if set, zero value otherwise.
func (o *SshUserOperationRequest) GetSshUsername() string {
	if o == nil || IsNil(o.SshUsername) {
		var ret string
		return ret
	}
	return *o.SshUsername
}

// GetSshUsernameOk returns a tuple with the SshUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshUserOperationRequest) GetSshUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.SshUsername) {
		return nil, false
	}
	return o.SshUsername, true
}

// HasSshUsername returns a boolean if a field has been set.
func (o *SshUserOperationRequest) HasSshUsername() bool {
	if o != nil && !IsNil(o.SshUsername) {
		return true
	}

	return false
}

// SetSshUsername gets a reference to the given string and assigns it to the SshUsername field.
func (o *SshUserOperationRequest) SetSshUsername(v string) {
	o.SshUsername = &v
}

// GetSshPassword returns the SshPassword field value if set, zero value otherwise.
func (o *SshUserOperationRequest) GetSshPassword() string {
	if o == nil || IsNil(o.SshPassword) {
		var ret string
		return ret
	}
	return *o.SshPassword
}

// GetSshPasswordOk returns a tuple with the SshPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshUserOperationRequest) GetSshPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.SshPassword) {
		return nil, false
	}
	return o.SshPassword, true
}

// HasSshPassword returns a boolean if a field has been set.
func (o *SshUserOperationRequest) HasSshPassword() bool {
	if o != nil && !IsNil(o.SshPassword) {
		return true
	}

	return false
}

// SetSshPassword gets a reference to the given string and assigns it to the SshPassword field.
func (o *SshUserOperationRequest) SetSshPassword(v string) {
	o.SshPassword = &v
}

func (o SshUserOperationRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SshUserOperationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SshUserUuid) {
		toSerialize["sshUserUuid"] = o.SshUserUuid
	}
	toSerialize["action"] = o.Action
	if !IsNil(o.SshUsername) {
		toSerialize["sshUsername"] = o.SshUsername
	}
	if !IsNil(o.SshPassword) {
		toSerialize["sshPassword"] = o.SshPassword
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SshUserOperationRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"action",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSshUserOperationRequest := _SshUserOperationRequest{}

	err = json.Unmarshal(data, &varSshUserOperationRequest)

	if err != nil {
		return err
	}

	*o = SshUserOperationRequest(varSshUserOperationRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "sshUserUuid")
		delete(additionalProperties, "action")
		delete(additionalProperties, "sshUsername")
		delete(additionalProperties, "sshPassword")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSshUserOperationRequest struct {
	value *SshUserOperationRequest
	isSet bool
}

func (v NullableSshUserOperationRequest) Get() *SshUserOperationRequest {
	return v.value
}

func (v *NullableSshUserOperationRequest) Set(val *SshUserOperationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSshUserOperationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSshUserOperationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSshUserOperationRequest(val *SshUserOperationRequest) *NullableSshUserOperationRequest {
	return &NullableSshUserOperationRequest{value: val, isSet: true}
}

func (v NullableSshUserOperationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSshUserOperationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
