/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the DeviceBackupInfoVerbose type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceBackupInfoVerbose{}

// DeviceBackupInfoVerbose struct for DeviceBackupInfoVerbose
type DeviceBackupInfoVerbose struct {
	// The unique Id of the device backup.
	Uuid *string `json:"uuid,omitempty"`
	// The name of the backup.
	Name *string `json:"name,omitempty"`
	// Version of the device
	Version *string `json:"version,omitempty"`
	// The type of backup.
	Type *string `json:"type,omitempty"`
	// The status of the backup.
	Status *string `json:"status,omitempty"`
	// Created by.
	CreatedBy *string `json:"createdBy,omitempty"`
	// Last updated date.
	LastUpdatedDate *string `json:"lastUpdatedDate,omitempty"`
	// URL where you can download the backup.
	DownloadUrl *string `json:"downloadUrl,omitempty"`
	// Whether or not you can delete the backup.
	DeleteAllowed *bool             `json:"deleteAllowed,omitempty"`
	Restores      []PreviousBackups `json:"restores,omitempty"`
	// Unique Id of the device
	DeviceUuid           *string `json:"deviceUuid,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DeviceBackupInfoVerbose DeviceBackupInfoVerbose

// NewDeviceBackupInfoVerbose instantiates a new DeviceBackupInfoVerbose object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceBackupInfoVerbose() *DeviceBackupInfoVerbose {
	this := DeviceBackupInfoVerbose{}
	return &this
}

// NewDeviceBackupInfoVerboseWithDefaults instantiates a new DeviceBackupInfoVerbose object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceBackupInfoVerboseWithDefaults() *DeviceBackupInfoVerbose {
	this := DeviceBackupInfoVerbose{}
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *DeviceBackupInfoVerbose) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceBackupInfoVerbose) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *DeviceBackupInfoVerbose) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *DeviceBackupInfoVerbose) SetUuid(v string) {
	o.Uuid = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DeviceBackupInfoVerbose) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceBackupInfoVerbose) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DeviceBackupInfoVerbose) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DeviceBackupInfoVerbose) SetName(v string) {
	o.Name = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *DeviceBackupInfoVerbose) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceBackupInfoVerbose) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *DeviceBackupInfoVerbose) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *DeviceBackupInfoVerbose) SetVersion(v string) {
	o.Version = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DeviceBackupInfoVerbose) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceBackupInfoVerbose) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DeviceBackupInfoVerbose) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DeviceBackupInfoVerbose) SetType(v string) {
	o.Type = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DeviceBackupInfoVerbose) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceBackupInfoVerbose) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DeviceBackupInfoVerbose) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DeviceBackupInfoVerbose) SetStatus(v string) {
	o.Status = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *DeviceBackupInfoVerbose) GetCreatedBy() string {
	if o == nil || IsNil(o.CreatedBy) {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceBackupInfoVerbose) GetCreatedByOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *DeviceBackupInfoVerbose) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *DeviceBackupInfoVerbose) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

// GetLastUpdatedDate returns the LastUpdatedDate field value if set, zero value otherwise.
func (o *DeviceBackupInfoVerbose) GetLastUpdatedDate() string {
	if o == nil || IsNil(o.LastUpdatedDate) {
		var ret string
		return ret
	}
	return *o.LastUpdatedDate
}

// GetLastUpdatedDateOk returns a tuple with the LastUpdatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceBackupInfoVerbose) GetLastUpdatedDateOk() (*string, bool) {
	if o == nil || IsNil(o.LastUpdatedDate) {
		return nil, false
	}
	return o.LastUpdatedDate, true
}

// HasLastUpdatedDate returns a boolean if a field has been set.
func (o *DeviceBackupInfoVerbose) HasLastUpdatedDate() bool {
	if o != nil && !IsNil(o.LastUpdatedDate) {
		return true
	}

	return false
}

// SetLastUpdatedDate gets a reference to the given string and assigns it to the LastUpdatedDate field.
func (o *DeviceBackupInfoVerbose) SetLastUpdatedDate(v string) {
	o.LastUpdatedDate = &v
}

// GetDownloadUrl returns the DownloadUrl field value if set, zero value otherwise.
func (o *DeviceBackupInfoVerbose) GetDownloadUrl() string {
	if o == nil || IsNil(o.DownloadUrl) {
		var ret string
		return ret
	}
	return *o.DownloadUrl
}

// GetDownloadUrlOk returns a tuple with the DownloadUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceBackupInfoVerbose) GetDownloadUrlOk() (*string, bool) {
	if o == nil || IsNil(o.DownloadUrl) {
		return nil, false
	}
	return o.DownloadUrl, true
}

// HasDownloadUrl returns a boolean if a field has been set.
func (o *DeviceBackupInfoVerbose) HasDownloadUrl() bool {
	if o != nil && !IsNil(o.DownloadUrl) {
		return true
	}

	return false
}

// SetDownloadUrl gets a reference to the given string and assigns it to the DownloadUrl field.
func (o *DeviceBackupInfoVerbose) SetDownloadUrl(v string) {
	o.DownloadUrl = &v
}

// GetDeleteAllowed returns the DeleteAllowed field value if set, zero value otherwise.
func (o *DeviceBackupInfoVerbose) GetDeleteAllowed() bool {
	if o == nil || IsNil(o.DeleteAllowed) {
		var ret bool
		return ret
	}
	return *o.DeleteAllowed
}

// GetDeleteAllowedOk returns a tuple with the DeleteAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceBackupInfoVerbose) GetDeleteAllowedOk() (*bool, bool) {
	if o == nil || IsNil(o.DeleteAllowed) {
		return nil, false
	}
	return o.DeleteAllowed, true
}

// HasDeleteAllowed returns a boolean if a field has been set.
func (o *DeviceBackupInfoVerbose) HasDeleteAllowed() bool {
	if o != nil && !IsNil(o.DeleteAllowed) {
		return true
	}

	return false
}

// SetDeleteAllowed gets a reference to the given bool and assigns it to the DeleteAllowed field.
func (o *DeviceBackupInfoVerbose) SetDeleteAllowed(v bool) {
	o.DeleteAllowed = &v
}

// GetRestores returns the Restores field value if set, zero value otherwise.
func (o *DeviceBackupInfoVerbose) GetRestores() []PreviousBackups {
	if o == nil || IsNil(o.Restores) {
		var ret []PreviousBackups
		return ret
	}
	return o.Restores
}

// GetRestoresOk returns a tuple with the Restores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceBackupInfoVerbose) GetRestoresOk() ([]PreviousBackups, bool) {
	if o == nil || IsNil(o.Restores) {
		return nil, false
	}
	return o.Restores, true
}

// HasRestores returns a boolean if a field has been set.
func (o *DeviceBackupInfoVerbose) HasRestores() bool {
	if o != nil && !IsNil(o.Restores) {
		return true
	}

	return false
}

// SetRestores gets a reference to the given []PreviousBackups and assigns it to the Restores field.
func (o *DeviceBackupInfoVerbose) SetRestores(v []PreviousBackups) {
	o.Restores = v
}

// GetDeviceUuid returns the DeviceUuid field value if set, zero value otherwise.
func (o *DeviceBackupInfoVerbose) GetDeviceUuid() string {
	if o == nil || IsNil(o.DeviceUuid) {
		var ret string
		return ret
	}
	return *o.DeviceUuid
}

// GetDeviceUuidOk returns a tuple with the DeviceUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceBackupInfoVerbose) GetDeviceUuidOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceUuid) {
		return nil, false
	}
	return o.DeviceUuid, true
}

// HasDeviceUuid returns a boolean if a field has been set.
func (o *DeviceBackupInfoVerbose) HasDeviceUuid() bool {
	if o != nil && !IsNil(o.DeviceUuid) {
		return true
	}

	return false
}

// SetDeviceUuid gets a reference to the given string and assigns it to the DeviceUuid field.
func (o *DeviceBackupInfoVerbose) SetDeviceUuid(v string) {
	o.DeviceUuid = &v
}

func (o DeviceBackupInfoVerbose) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceBackupInfoVerbose) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.LastUpdatedDate) {
		toSerialize["lastUpdatedDate"] = o.LastUpdatedDate
	}
	if !IsNil(o.DownloadUrl) {
		toSerialize["downloadUrl"] = o.DownloadUrl
	}
	if !IsNil(o.DeleteAllowed) {
		toSerialize["deleteAllowed"] = o.DeleteAllowed
	}
	if !IsNil(o.Restores) {
		toSerialize["restores"] = o.Restores
	}
	if !IsNil(o.DeviceUuid) {
		toSerialize["deviceUuid"] = o.DeviceUuid
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeviceBackupInfoVerbose) UnmarshalJSON(data []byte) (err error) {
	varDeviceBackupInfoVerbose := _DeviceBackupInfoVerbose{}

	err = json.Unmarshal(data, &varDeviceBackupInfoVerbose)

	if err != nil {
		return err
	}

	*o = DeviceBackupInfoVerbose(varDeviceBackupInfoVerbose)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "name")
		delete(additionalProperties, "version")
		delete(additionalProperties, "type")
		delete(additionalProperties, "status")
		delete(additionalProperties, "createdBy")
		delete(additionalProperties, "lastUpdatedDate")
		delete(additionalProperties, "downloadUrl")
		delete(additionalProperties, "deleteAllowed")
		delete(additionalProperties, "restores")
		delete(additionalProperties, "deviceUuid")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeviceBackupInfoVerbose struct {
	value *DeviceBackupInfoVerbose
	isSet bool
}

func (v NullableDeviceBackupInfoVerbose) Get() *DeviceBackupInfoVerbose {
	return v.value
}

func (v *NullableDeviceBackupInfoVerbose) Set(val *DeviceBackupInfoVerbose) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceBackupInfoVerbose) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceBackupInfoVerbose) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceBackupInfoVerbose(val *DeviceBackupInfoVerbose) *NullableDeviceBackupInfoVerbose {
	return &NullableDeviceBackupInfoVerbose{value: val, isSet: true}
}

func (v NullableDeviceBackupInfoVerbose) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceBackupInfoVerbose) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
