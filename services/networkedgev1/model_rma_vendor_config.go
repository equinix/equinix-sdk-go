/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the RMAVendorConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RMAVendorConfig{}

// RMAVendorConfig struct for RMAVendorConfig
type RMAVendorConfig struct {
	// Physical location within the Viptela overlay network, such as a branch office, or a campus (relevant only for Cisco SD-WANs)
	SiteId *string `json:"siteId,omitempty"`
	// IP assigned to CSRSDWAN router and vSmart controller (relevant only for Cisco SD-WANs)
	SystemIpAddress *string `json:"systemIpAddress,omitempty"`
	// License key. Mandatory for some devices.
	LicenseKey *string `json:"licenseKey,omitempty"`
	// License secret (Secret key). Mandatory for some devices.
	LicenseSecret *string `json:"licenseSecret,omitempty"`
	// For Fortinet devices, this is the System IP address.
	Controller1 *string `json:"controller1,omitempty"`
	// The administrative password of the device. You can use it to log in to the console. This field is not available for all device types. Should be at least 6 characters long and must include an uppercase letter and a number. This field may be required for some vendors.
	AdminPassword *string `json:"adminPassword,omitempty"`
	// Available on VMware Orchestration Portal
	ActivationKey *string `json:"activationKey,omitempty"`
	// Mandatory for Zscaler devices
	ProvisioningKey      *string `json:"provisioningKey,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RMAVendorConfig RMAVendorConfig

// NewRMAVendorConfig instantiates a new RMAVendorConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRMAVendorConfig() *RMAVendorConfig {
	this := RMAVendorConfig{}
	return &this
}

// NewRMAVendorConfigWithDefaults instantiates a new RMAVendorConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRMAVendorConfigWithDefaults() *RMAVendorConfig {
	this := RMAVendorConfig{}
	return &this
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *RMAVendorConfig) GetSiteId() string {
	if o == nil || IsNil(o.SiteId) {
		var ret string
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RMAVendorConfig) GetSiteIdOk() (*string, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *RMAVendorConfig) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given string and assigns it to the SiteId field.
func (o *RMAVendorConfig) SetSiteId(v string) {
	o.SiteId = &v
}

// GetSystemIpAddress returns the SystemIpAddress field value if set, zero value otherwise.
func (o *RMAVendorConfig) GetSystemIpAddress() string {
	if o == nil || IsNil(o.SystemIpAddress) {
		var ret string
		return ret
	}
	return *o.SystemIpAddress
}

// GetSystemIpAddressOk returns a tuple with the SystemIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RMAVendorConfig) GetSystemIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.SystemIpAddress) {
		return nil, false
	}
	return o.SystemIpAddress, true
}

// HasSystemIpAddress returns a boolean if a field has been set.
func (o *RMAVendorConfig) HasSystemIpAddress() bool {
	if o != nil && !IsNil(o.SystemIpAddress) {
		return true
	}

	return false
}

// SetSystemIpAddress gets a reference to the given string and assigns it to the SystemIpAddress field.
func (o *RMAVendorConfig) SetSystemIpAddress(v string) {
	o.SystemIpAddress = &v
}

// GetLicenseKey returns the LicenseKey field value if set, zero value otherwise.
func (o *RMAVendorConfig) GetLicenseKey() string {
	if o == nil || IsNil(o.LicenseKey) {
		var ret string
		return ret
	}
	return *o.LicenseKey
}

// GetLicenseKeyOk returns a tuple with the LicenseKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RMAVendorConfig) GetLicenseKeyOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseKey) {
		return nil, false
	}
	return o.LicenseKey, true
}

// HasLicenseKey returns a boolean if a field has been set.
func (o *RMAVendorConfig) HasLicenseKey() bool {
	if o != nil && !IsNil(o.LicenseKey) {
		return true
	}

	return false
}

// SetLicenseKey gets a reference to the given string and assigns it to the LicenseKey field.
func (o *RMAVendorConfig) SetLicenseKey(v string) {
	o.LicenseKey = &v
}

// GetLicenseSecret returns the LicenseSecret field value if set, zero value otherwise.
func (o *RMAVendorConfig) GetLicenseSecret() string {
	if o == nil || IsNil(o.LicenseSecret) {
		var ret string
		return ret
	}
	return *o.LicenseSecret
}

// GetLicenseSecretOk returns a tuple with the LicenseSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RMAVendorConfig) GetLicenseSecretOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseSecret) {
		return nil, false
	}
	return o.LicenseSecret, true
}

// HasLicenseSecret returns a boolean if a field has been set.
func (o *RMAVendorConfig) HasLicenseSecret() bool {
	if o != nil && !IsNil(o.LicenseSecret) {
		return true
	}

	return false
}

// SetLicenseSecret gets a reference to the given string and assigns it to the LicenseSecret field.
func (o *RMAVendorConfig) SetLicenseSecret(v string) {
	o.LicenseSecret = &v
}

// GetController1 returns the Controller1 field value if set, zero value otherwise.
func (o *RMAVendorConfig) GetController1() string {
	if o == nil || IsNil(o.Controller1) {
		var ret string
		return ret
	}
	return *o.Controller1
}

// GetController1Ok returns a tuple with the Controller1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RMAVendorConfig) GetController1Ok() (*string, bool) {
	if o == nil || IsNil(o.Controller1) {
		return nil, false
	}
	return o.Controller1, true
}

// HasController1 returns a boolean if a field has been set.
func (o *RMAVendorConfig) HasController1() bool {
	if o != nil && !IsNil(o.Controller1) {
		return true
	}

	return false
}

// SetController1 gets a reference to the given string and assigns it to the Controller1 field.
func (o *RMAVendorConfig) SetController1(v string) {
	o.Controller1 = &v
}

// GetAdminPassword returns the AdminPassword field value if set, zero value otherwise.
func (o *RMAVendorConfig) GetAdminPassword() string {
	if o == nil || IsNil(o.AdminPassword) {
		var ret string
		return ret
	}
	return *o.AdminPassword
}

// GetAdminPasswordOk returns a tuple with the AdminPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RMAVendorConfig) GetAdminPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.AdminPassword) {
		return nil, false
	}
	return o.AdminPassword, true
}

// HasAdminPassword returns a boolean if a field has been set.
func (o *RMAVendorConfig) HasAdminPassword() bool {
	if o != nil && !IsNil(o.AdminPassword) {
		return true
	}

	return false
}

// SetAdminPassword gets a reference to the given string and assigns it to the AdminPassword field.
func (o *RMAVendorConfig) SetAdminPassword(v string) {
	o.AdminPassword = &v
}

// GetActivationKey returns the ActivationKey field value if set, zero value otherwise.
func (o *RMAVendorConfig) GetActivationKey() string {
	if o == nil || IsNil(o.ActivationKey) {
		var ret string
		return ret
	}
	return *o.ActivationKey
}

// GetActivationKeyOk returns a tuple with the ActivationKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RMAVendorConfig) GetActivationKeyOk() (*string, bool) {
	if o == nil || IsNil(o.ActivationKey) {
		return nil, false
	}
	return o.ActivationKey, true
}

// HasActivationKey returns a boolean if a field has been set.
func (o *RMAVendorConfig) HasActivationKey() bool {
	if o != nil && !IsNil(o.ActivationKey) {
		return true
	}

	return false
}

// SetActivationKey gets a reference to the given string and assigns it to the ActivationKey field.
func (o *RMAVendorConfig) SetActivationKey(v string) {
	o.ActivationKey = &v
}

// GetProvisioningKey returns the ProvisioningKey field value if set, zero value otherwise.
func (o *RMAVendorConfig) GetProvisioningKey() string {
	if o == nil || IsNil(o.ProvisioningKey) {
		var ret string
		return ret
	}
	return *o.ProvisioningKey
}

// GetProvisioningKeyOk returns a tuple with the ProvisioningKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RMAVendorConfig) GetProvisioningKeyOk() (*string, bool) {
	if o == nil || IsNil(o.ProvisioningKey) {
		return nil, false
	}
	return o.ProvisioningKey, true
}

// HasProvisioningKey returns a boolean if a field has been set.
func (o *RMAVendorConfig) HasProvisioningKey() bool {
	if o != nil && !IsNil(o.ProvisioningKey) {
		return true
	}

	return false
}

// SetProvisioningKey gets a reference to the given string and assigns it to the ProvisioningKey field.
func (o *RMAVendorConfig) SetProvisioningKey(v string) {
	o.ProvisioningKey = &v
}

func (o RMAVendorConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RMAVendorConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SiteId) {
		toSerialize["siteId"] = o.SiteId
	}
	if !IsNil(o.SystemIpAddress) {
		toSerialize["systemIpAddress"] = o.SystemIpAddress
	}
	if !IsNil(o.LicenseKey) {
		toSerialize["licenseKey"] = o.LicenseKey
	}
	if !IsNil(o.LicenseSecret) {
		toSerialize["licenseSecret"] = o.LicenseSecret
	}
	if !IsNil(o.Controller1) {
		toSerialize["controller1"] = o.Controller1
	}
	if !IsNil(o.AdminPassword) {
		toSerialize["adminPassword"] = o.AdminPassword
	}
	if !IsNil(o.ActivationKey) {
		toSerialize["activationKey"] = o.ActivationKey
	}
	if !IsNil(o.ProvisioningKey) {
		toSerialize["provisioningKey"] = o.ProvisioningKey
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RMAVendorConfig) UnmarshalJSON(data []byte) (err error) {
	varRMAVendorConfig := _RMAVendorConfig{}

	err = json.Unmarshal(data, &varRMAVendorConfig)

	if err != nil {
		return err
	}

	*o = RMAVendorConfig(varRMAVendorConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "siteId")
		delete(additionalProperties, "systemIpAddress")
		delete(additionalProperties, "licenseKey")
		delete(additionalProperties, "licenseSecret")
		delete(additionalProperties, "controller1")
		delete(additionalProperties, "adminPassword")
		delete(additionalProperties, "activationKey")
		delete(additionalProperties, "provisioningKey")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRMAVendorConfig struct {
	value *RMAVendorConfig
	isSet bool
}

func (v NullableRMAVendorConfig) Get() *RMAVendorConfig {
	return v.value
}

func (v *NullableRMAVendorConfig) Set(val *RMAVendorConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRMAVendorConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRMAVendorConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRMAVendorConfig(val *RMAVendorConfig) *NullableRMAVendorConfig {
	return &NullableRMAVendorConfig{value: val, isSet: true}
}

func (v NullableRMAVendorConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRMAVendorConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
