/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the SupportedServicesConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SupportedServicesConfig{}

// SupportedServicesConfig struct for SupportedServicesConfig
type SupportedServicesConfig struct {
	// The name of supported service.
	Name *string `json:"name,omitempty"`
	// Whether or not this supported service is a required input at the time of device creation.
	Required     *bool    `json:"required,omitempty"`
	PackageCodes []string `json:"packageCodes,omitempty"`
	// Whether the service is available for cluster devices.
	SupportedForClustering *bool `json:"supportedForClustering,omitempty"`
	AdditionalProperties   map[string]interface{}
}

type _SupportedServicesConfig SupportedServicesConfig

// NewSupportedServicesConfig instantiates a new SupportedServicesConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupportedServicesConfig() *SupportedServicesConfig {
	this := SupportedServicesConfig{}
	return &this
}

// NewSupportedServicesConfigWithDefaults instantiates a new SupportedServicesConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupportedServicesConfigWithDefaults() *SupportedServicesConfig {
	this := SupportedServicesConfig{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SupportedServicesConfig) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportedServicesConfig) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SupportedServicesConfig) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SupportedServicesConfig) SetName(v string) {
	o.Name = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *SupportedServicesConfig) GetRequired() bool {
	if o == nil || IsNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportedServicesConfig) GetRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *SupportedServicesConfig) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *SupportedServicesConfig) SetRequired(v bool) {
	o.Required = &v
}

// GetPackageCodes returns the PackageCodes field value if set, zero value otherwise.
func (o *SupportedServicesConfig) GetPackageCodes() []string {
	if o == nil || IsNil(o.PackageCodes) {
		var ret []string
		return ret
	}
	return o.PackageCodes
}

// GetPackageCodesOk returns a tuple with the PackageCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportedServicesConfig) GetPackageCodesOk() ([]string, bool) {
	if o == nil || IsNil(o.PackageCodes) {
		return nil, false
	}
	return o.PackageCodes, true
}

// HasPackageCodes returns a boolean if a field has been set.
func (o *SupportedServicesConfig) HasPackageCodes() bool {
	if o != nil && !IsNil(o.PackageCodes) {
		return true
	}

	return false
}

// SetPackageCodes gets a reference to the given []string and assigns it to the PackageCodes field.
func (o *SupportedServicesConfig) SetPackageCodes(v []string) {
	o.PackageCodes = v
}

// GetSupportedForClustering returns the SupportedForClustering field value if set, zero value otherwise.
func (o *SupportedServicesConfig) GetSupportedForClustering() bool {
	if o == nil || IsNil(o.SupportedForClustering) {
		var ret bool
		return ret
	}
	return *o.SupportedForClustering
}

// GetSupportedForClusteringOk returns a tuple with the SupportedForClustering field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportedServicesConfig) GetSupportedForClusteringOk() (*bool, bool) {
	if o == nil || IsNil(o.SupportedForClustering) {
		return nil, false
	}
	return o.SupportedForClustering, true
}

// HasSupportedForClustering returns a boolean if a field has been set.
func (o *SupportedServicesConfig) HasSupportedForClustering() bool {
	if o != nil && !IsNil(o.SupportedForClustering) {
		return true
	}

	return false
}

// SetSupportedForClustering gets a reference to the given bool and assigns it to the SupportedForClustering field.
func (o *SupportedServicesConfig) SetSupportedForClustering(v bool) {
	o.SupportedForClustering = &v
}

func (o SupportedServicesConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SupportedServicesConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	if !IsNil(o.PackageCodes) {
		toSerialize["packageCodes"] = o.PackageCodes
	}
	if !IsNil(o.SupportedForClustering) {
		toSerialize["supportedForClustering"] = o.SupportedForClustering
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SupportedServicesConfig) UnmarshalJSON(data []byte) (err error) {
	varSupportedServicesConfig := _SupportedServicesConfig{}

	err = json.Unmarshal(data, &varSupportedServicesConfig)

	if err != nil {
		return err
	}

	*o = SupportedServicesConfig(varSupportedServicesConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "required")
		delete(additionalProperties, "packageCodes")
		delete(additionalProperties, "supportedForClustering")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSupportedServicesConfig struct {
	value *SupportedServicesConfig
	isSet bool
}

func (v NullableSupportedServicesConfig) Get() *SupportedServicesConfig {
	return v.value
}

func (v *NullableSupportedServicesConfig) Set(val *SupportedServicesConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSupportedServicesConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSupportedServicesConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupportedServicesConfig(val *SupportedServicesConfig) *NullableSupportedServicesConfig {
	return &NullableSupportedServicesConfig{value: val, isSet: true}
}

func (v NullableSupportedServicesConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupportedServicesConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
