/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the DeleteConnectionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteConnectionResponse{}

// DeleteConnectionResponse struct for DeleteConnectionResponse
type DeleteConnectionResponse struct {
	Message              *string `json:"message,omitempty"`
	PrimaryConnectionId  *string `json:"primaryConnectionId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DeleteConnectionResponse DeleteConnectionResponse

// NewDeleteConnectionResponse instantiates a new DeleteConnectionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteConnectionResponse() *DeleteConnectionResponse {
	this := DeleteConnectionResponse{}
	return &this
}

// NewDeleteConnectionResponseWithDefaults instantiates a new DeleteConnectionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteConnectionResponseWithDefaults() *DeleteConnectionResponse {
	this := DeleteConnectionResponse{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *DeleteConnectionResponse) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteConnectionResponse) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *DeleteConnectionResponse) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *DeleteConnectionResponse) SetMessage(v string) {
	o.Message = &v
}

// GetPrimaryConnectionId returns the PrimaryConnectionId field value if set, zero value otherwise.
func (o *DeleteConnectionResponse) GetPrimaryConnectionId() string {
	if o == nil || IsNil(o.PrimaryConnectionId) {
		var ret string
		return ret
	}
	return *o.PrimaryConnectionId
}

// GetPrimaryConnectionIdOk returns a tuple with the PrimaryConnectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteConnectionResponse) GetPrimaryConnectionIdOk() (*string, bool) {
	if o == nil || IsNil(o.PrimaryConnectionId) {
		return nil, false
	}
	return o.PrimaryConnectionId, true
}

// HasPrimaryConnectionId returns a boolean if a field has been set.
func (o *DeleteConnectionResponse) HasPrimaryConnectionId() bool {
	if o != nil && !IsNil(o.PrimaryConnectionId) {
		return true
	}

	return false
}

// SetPrimaryConnectionId gets a reference to the given string and assigns it to the PrimaryConnectionId field.
func (o *DeleteConnectionResponse) SetPrimaryConnectionId(v string) {
	o.PrimaryConnectionId = &v
}

func (o DeleteConnectionResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteConnectionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.PrimaryConnectionId) {
		toSerialize["primaryConnectionId"] = o.PrimaryConnectionId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeleteConnectionResponse) UnmarshalJSON(data []byte) (err error) {
	varDeleteConnectionResponse := _DeleteConnectionResponse{}

	err = json.Unmarshal(data, &varDeleteConnectionResponse)

	if err != nil {
		return err
	}

	*o = DeleteConnectionResponse(varDeleteConnectionResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "message")
		delete(additionalProperties, "primaryConnectionId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeleteConnectionResponse struct {
	value *DeleteConnectionResponse
	isSet bool
}

func (v NullableDeleteConnectionResponse) Get() *DeleteConnectionResponse {
	return v.value
}

func (v *NullableDeleteConnectionResponse) Set(val *DeleteConnectionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteConnectionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteConnectionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteConnectionResponse(val *DeleteConnectionResponse) *NullableDeleteConnectionResponse {
	return &NullableDeleteConnectionResponse{value: val, isSet: true}
}

func (v NullableDeleteConnectionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteConnectionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
