/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the DeviceRebootResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceRebootResponse{}

// DeviceRebootResponse struct for DeviceRebootResponse
type DeviceRebootResponse struct {
	// Unique Id of the device.
	DeviceUUID *string `json:"deviceUUID,omitempty"`
	// The status of the reboot.
	Status *string `json:"status,omitempty"`
	// Requested by
	RequestedBy *string `json:"requestedBy,omitempty"`
	// Requested date
	RequestedDate *string `json:"requestedDate,omitempty"`
	// Requested date
	CompletiondDate      *string `json:"completiondDate,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DeviceRebootResponse DeviceRebootResponse

// NewDeviceRebootResponse instantiates a new DeviceRebootResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceRebootResponse() *DeviceRebootResponse {
	this := DeviceRebootResponse{}
	return &this
}

// NewDeviceRebootResponseWithDefaults instantiates a new DeviceRebootResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceRebootResponseWithDefaults() *DeviceRebootResponse {
	this := DeviceRebootResponse{}
	return &this
}

// GetDeviceUUID returns the DeviceUUID field value if set, zero value otherwise.
func (o *DeviceRebootResponse) GetDeviceUUID() string {
	if o == nil || IsNil(o.DeviceUUID) {
		var ret string
		return ret
	}
	return *o.DeviceUUID
}

// GetDeviceUUIDOk returns a tuple with the DeviceUUID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRebootResponse) GetDeviceUUIDOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceUUID) {
		return nil, false
	}
	return o.DeviceUUID, true
}

// HasDeviceUUID returns a boolean if a field has been set.
func (o *DeviceRebootResponse) HasDeviceUUID() bool {
	if o != nil && !IsNil(o.DeviceUUID) {
		return true
	}

	return false
}

// SetDeviceUUID gets a reference to the given string and assigns it to the DeviceUUID field.
func (o *DeviceRebootResponse) SetDeviceUUID(v string) {
	o.DeviceUUID = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DeviceRebootResponse) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRebootResponse) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DeviceRebootResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DeviceRebootResponse) SetStatus(v string) {
	o.Status = &v
}

// GetRequestedBy returns the RequestedBy field value if set, zero value otherwise.
func (o *DeviceRebootResponse) GetRequestedBy() string {
	if o == nil || IsNil(o.RequestedBy) {
		var ret string
		return ret
	}
	return *o.RequestedBy
}

// GetRequestedByOk returns a tuple with the RequestedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRebootResponse) GetRequestedByOk() (*string, bool) {
	if o == nil || IsNil(o.RequestedBy) {
		return nil, false
	}
	return o.RequestedBy, true
}

// HasRequestedBy returns a boolean if a field has been set.
func (o *DeviceRebootResponse) HasRequestedBy() bool {
	if o != nil && !IsNil(o.RequestedBy) {
		return true
	}

	return false
}

// SetRequestedBy gets a reference to the given string and assigns it to the RequestedBy field.
func (o *DeviceRebootResponse) SetRequestedBy(v string) {
	o.RequestedBy = &v
}

// GetRequestedDate returns the RequestedDate field value if set, zero value otherwise.
func (o *DeviceRebootResponse) GetRequestedDate() string {
	if o == nil || IsNil(o.RequestedDate) {
		var ret string
		return ret
	}
	return *o.RequestedDate
}

// GetRequestedDateOk returns a tuple with the RequestedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRebootResponse) GetRequestedDateOk() (*string, bool) {
	if o == nil || IsNil(o.RequestedDate) {
		return nil, false
	}
	return o.RequestedDate, true
}

// HasRequestedDate returns a boolean if a field has been set.
func (o *DeviceRebootResponse) HasRequestedDate() bool {
	if o != nil && !IsNil(o.RequestedDate) {
		return true
	}

	return false
}

// SetRequestedDate gets a reference to the given string and assigns it to the RequestedDate field.
func (o *DeviceRebootResponse) SetRequestedDate(v string) {
	o.RequestedDate = &v
}

// GetCompletiondDate returns the CompletiondDate field value if set, zero value otherwise.
func (o *DeviceRebootResponse) GetCompletiondDate() string {
	if o == nil || IsNil(o.CompletiondDate) {
		var ret string
		return ret
	}
	return *o.CompletiondDate
}

// GetCompletiondDateOk returns a tuple with the CompletiondDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRebootResponse) GetCompletiondDateOk() (*string, bool) {
	if o == nil || IsNil(o.CompletiondDate) {
		return nil, false
	}
	return o.CompletiondDate, true
}

// HasCompletiondDate returns a boolean if a field has been set.
func (o *DeviceRebootResponse) HasCompletiondDate() bool {
	if o != nil && !IsNil(o.CompletiondDate) {
		return true
	}

	return false
}

// SetCompletiondDate gets a reference to the given string and assigns it to the CompletiondDate field.
func (o *DeviceRebootResponse) SetCompletiondDate(v string) {
	o.CompletiondDate = &v
}

func (o DeviceRebootResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceRebootResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeviceUUID) {
		toSerialize["deviceUUID"] = o.DeviceUUID
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.RequestedBy) {
		toSerialize["requestedBy"] = o.RequestedBy
	}
	if !IsNil(o.RequestedDate) {
		toSerialize["requestedDate"] = o.RequestedDate
	}
	if !IsNil(o.CompletiondDate) {
		toSerialize["completiondDate"] = o.CompletiondDate
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeviceRebootResponse) UnmarshalJSON(data []byte) (err error) {
	varDeviceRebootResponse := _DeviceRebootResponse{}

	err = json.Unmarshal(data, &varDeviceRebootResponse)

	if err != nil {
		return err
	}

	*o = DeviceRebootResponse(varDeviceRebootResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "deviceUUID")
		delete(additionalProperties, "status")
		delete(additionalProperties, "requestedBy")
		delete(additionalProperties, "requestedDate")
		delete(additionalProperties, "completiondDate")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeviceRebootResponse struct {
	value *DeviceRebootResponse
	isSet bool
}

func (v NullableDeviceRebootResponse) Get() *DeviceRebootResponse {
	return v.value
}

func (v *NullableDeviceRebootResponse) Set(val *DeviceRebootResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceRebootResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceRebootResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceRebootResponse(val *DeviceRebootResponse) *NullableDeviceRebootResponse {
	return &NullableDeviceRebootResponse{value: val, isSet: true}
}

func (v NullableDeviceRebootResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceRebootResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
