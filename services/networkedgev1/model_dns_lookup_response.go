/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the DNSLookupResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DNSLookupResponse{}

// DNSLookupResponse struct for DNSLookupResponse
type DNSLookupResponse struct {
	AdditionalProp       *DNSLookupResponseDetails `json:"additionalProp,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DNSLookupResponse DNSLookupResponse

// NewDNSLookupResponse instantiates a new DNSLookupResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDNSLookupResponse() *DNSLookupResponse {
	this := DNSLookupResponse{}
	return &this
}

// NewDNSLookupResponseWithDefaults instantiates a new DNSLookupResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDNSLookupResponseWithDefaults() *DNSLookupResponse {
	this := DNSLookupResponse{}
	return &this
}

// GetAdditionalProp returns the AdditionalProp field value if set, zero value otherwise.
func (o *DNSLookupResponse) GetAdditionalProp() DNSLookupResponseDetails {
	if o == nil || IsNil(o.AdditionalProp) {
		var ret DNSLookupResponseDetails
		return ret
	}
	return *o.AdditionalProp
}

// GetAdditionalPropOk returns a tuple with the AdditionalProp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSLookupResponse) GetAdditionalPropOk() (*DNSLookupResponseDetails, bool) {
	if o == nil || IsNil(o.AdditionalProp) {
		return nil, false
	}
	return o.AdditionalProp, true
}

// HasAdditionalProp returns a boolean if a field has been set.
func (o *DNSLookupResponse) HasAdditionalProp() bool {
	if o != nil && !IsNil(o.AdditionalProp) {
		return true
	}

	return false
}

// SetAdditionalProp gets a reference to the given DNSLookupResponseDetails and assigns it to the AdditionalProp field.
func (o *DNSLookupResponse) SetAdditionalProp(v DNSLookupResponseDetails) {
	o.AdditionalProp = &v
}

func (o DNSLookupResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DNSLookupResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdditionalProp) {
		toSerialize["additionalProp"] = o.AdditionalProp
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DNSLookupResponse) UnmarshalJSON(data []byte) (err error) {
	varDNSLookupResponse := _DNSLookupResponse{}

	err = json.Unmarshal(data, &varDNSLookupResponse)

	if err != nil {
		return err
	}

	*o = DNSLookupResponse(varDNSLookupResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "additionalProp")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDNSLookupResponse struct {
	value *DNSLookupResponse
	isSet bool
}

func (v NullableDNSLookupResponse) Get() *DNSLookupResponse {
	return v.value
}

func (v *NullableDNSLookupResponse) Set(val *DNSLookupResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDNSLookupResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDNSLookupResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDNSLookupResponse(val *DNSLookupResponse) *NullableDNSLookupResponse {
	return &NullableDNSLookupResponse{value: val, isSet: true}
}

func (v NullableDNSLookupResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDNSLookupResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
