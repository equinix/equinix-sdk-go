/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the LinkInfoResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LinkInfoResponse{}

// LinkInfoResponse struct for LinkInfoResponse
type LinkInfoResponse struct {
	// Account name
	AccountName *string `json:"accountName,omitempty"`
	// Linked metro code
	MetroCode *string `json:"metroCode,omitempty"`
	// Linked metro name
	MetroName *string `json:"metroName,omitempty"`
	// Metro Throughput.
	Throughput *string `json:"throughput,omitempty"`
	// Throughput unit.
	ThroughputUnit       *string `json:"throughputUnit,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LinkInfoResponse LinkInfoResponse

// NewLinkInfoResponse instantiates a new LinkInfoResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinkInfoResponse() *LinkInfoResponse {
	this := LinkInfoResponse{}
	return &this
}

// NewLinkInfoResponseWithDefaults instantiates a new LinkInfoResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkInfoResponseWithDefaults() *LinkInfoResponse {
	this := LinkInfoResponse{}
	return &this
}

// GetAccountName returns the AccountName field value if set, zero value otherwise.
func (o *LinkInfoResponse) GetAccountName() string {
	if o == nil || IsNil(o.AccountName) {
		var ret string
		return ret
	}
	return *o.AccountName
}

// GetAccountNameOk returns a tuple with the AccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkInfoResponse) GetAccountNameOk() (*string, bool) {
	if o == nil || IsNil(o.AccountName) {
		return nil, false
	}
	return o.AccountName, true
}

// HasAccountName returns a boolean if a field has been set.
func (o *LinkInfoResponse) HasAccountName() bool {
	if o != nil && !IsNil(o.AccountName) {
		return true
	}

	return false
}

// SetAccountName gets a reference to the given string and assigns it to the AccountName field.
func (o *LinkInfoResponse) SetAccountName(v string) {
	o.AccountName = &v
}

// GetMetroCode returns the MetroCode field value if set, zero value otherwise.
func (o *LinkInfoResponse) GetMetroCode() string {
	if o == nil || IsNil(o.MetroCode) {
		var ret string
		return ret
	}
	return *o.MetroCode
}

// GetMetroCodeOk returns a tuple with the MetroCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkInfoResponse) GetMetroCodeOk() (*string, bool) {
	if o == nil || IsNil(o.MetroCode) {
		return nil, false
	}
	return o.MetroCode, true
}

// HasMetroCode returns a boolean if a field has been set.
func (o *LinkInfoResponse) HasMetroCode() bool {
	if o != nil && !IsNil(o.MetroCode) {
		return true
	}

	return false
}

// SetMetroCode gets a reference to the given string and assigns it to the MetroCode field.
func (o *LinkInfoResponse) SetMetroCode(v string) {
	o.MetroCode = &v
}

// GetMetroName returns the MetroName field value if set, zero value otherwise.
func (o *LinkInfoResponse) GetMetroName() string {
	if o == nil || IsNil(o.MetroName) {
		var ret string
		return ret
	}
	return *o.MetroName
}

// GetMetroNameOk returns a tuple with the MetroName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkInfoResponse) GetMetroNameOk() (*string, bool) {
	if o == nil || IsNil(o.MetroName) {
		return nil, false
	}
	return o.MetroName, true
}

// HasMetroName returns a boolean if a field has been set.
func (o *LinkInfoResponse) HasMetroName() bool {
	if o != nil && !IsNil(o.MetroName) {
		return true
	}

	return false
}

// SetMetroName gets a reference to the given string and assigns it to the MetroName field.
func (o *LinkInfoResponse) SetMetroName(v string) {
	o.MetroName = &v
}

// GetThroughput returns the Throughput field value if set, zero value otherwise.
func (o *LinkInfoResponse) GetThroughput() string {
	if o == nil || IsNil(o.Throughput) {
		var ret string
		return ret
	}
	return *o.Throughput
}

// GetThroughputOk returns a tuple with the Throughput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkInfoResponse) GetThroughputOk() (*string, bool) {
	if o == nil || IsNil(o.Throughput) {
		return nil, false
	}
	return o.Throughput, true
}

// HasThroughput returns a boolean if a field has been set.
func (o *LinkInfoResponse) HasThroughput() bool {
	if o != nil && !IsNil(o.Throughput) {
		return true
	}

	return false
}

// SetThroughput gets a reference to the given string and assigns it to the Throughput field.
func (o *LinkInfoResponse) SetThroughput(v string) {
	o.Throughput = &v
}

// GetThroughputUnit returns the ThroughputUnit field value if set, zero value otherwise.
func (o *LinkInfoResponse) GetThroughputUnit() string {
	if o == nil || IsNil(o.ThroughputUnit) {
		var ret string
		return ret
	}
	return *o.ThroughputUnit
}

// GetThroughputUnitOk returns a tuple with the ThroughputUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkInfoResponse) GetThroughputUnitOk() (*string, bool) {
	if o == nil || IsNil(o.ThroughputUnit) {
		return nil, false
	}
	return o.ThroughputUnit, true
}

// HasThroughputUnit returns a boolean if a field has been set.
func (o *LinkInfoResponse) HasThroughputUnit() bool {
	if o != nil && !IsNil(o.ThroughputUnit) {
		return true
	}

	return false
}

// SetThroughputUnit gets a reference to the given string and assigns it to the ThroughputUnit field.
func (o *LinkInfoResponse) SetThroughputUnit(v string) {
	o.ThroughputUnit = &v
}

func (o LinkInfoResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LinkInfoResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountName) {
		toSerialize["accountName"] = o.AccountName
	}
	if !IsNil(o.MetroCode) {
		toSerialize["metroCode"] = o.MetroCode
	}
	if !IsNil(o.MetroName) {
		toSerialize["metroName"] = o.MetroName
	}
	if !IsNil(o.Throughput) {
		toSerialize["throughput"] = o.Throughput
	}
	if !IsNil(o.ThroughputUnit) {
		toSerialize["throughputUnit"] = o.ThroughputUnit
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LinkInfoResponse) UnmarshalJSON(data []byte) (err error) {
	varLinkInfoResponse := _LinkInfoResponse{}

	err = json.Unmarshal(data, &varLinkInfoResponse)

	if err != nil {
		return err
	}

	*o = LinkInfoResponse(varLinkInfoResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "accountName")
		delete(additionalProperties, "metroCode")
		delete(additionalProperties, "metroName")
		delete(additionalProperties, "throughput")
		delete(additionalProperties, "throughputUnit")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLinkInfoResponse struct {
	value *LinkInfoResponse
	isSet bool
}

func (v NullableLinkInfoResponse) Get() *LinkInfoResponse {
	return v.value
}

func (v *NullableLinkInfoResponse) Set(val *LinkInfoResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkInfoResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkInfoResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkInfoResponse(val *LinkInfoResponse) *NullableLinkInfoResponse {
	return &NullableLinkInfoResponse{value: val, isSet: true}
}

func (v NullableLinkInfoResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkInfoResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
