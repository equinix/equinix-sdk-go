/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the ListOfDownloadableImages type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListOfDownloadableImages{}

// ListOfDownloadableImages struct for ListOfDownloadableImages
type ListOfDownloadableImages struct {
	// The unique Id of the downloadable link.
	Uuid *string `json:"uuid,omitempty"`
	// Device type. As of now, we only support C8000V.
	DeviceType *string `json:"deviceType,omitempty"`
	// Device type. As of now, we only support C8000V.
	ImageName *string `json:"imageName,omitempty"`
	// Device version
	Version              *string `json:"version,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ListOfDownloadableImages ListOfDownloadableImages

// NewListOfDownloadableImages instantiates a new ListOfDownloadableImages object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListOfDownloadableImages() *ListOfDownloadableImages {
	this := ListOfDownloadableImages{}
	return &this
}

// NewListOfDownloadableImagesWithDefaults instantiates a new ListOfDownloadableImages object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListOfDownloadableImagesWithDefaults() *ListOfDownloadableImages {
	this := ListOfDownloadableImages{}
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *ListOfDownloadableImages) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListOfDownloadableImages) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *ListOfDownloadableImages) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *ListOfDownloadableImages) SetUuid(v string) {
	o.Uuid = &v
}

// GetDeviceType returns the DeviceType field value if set, zero value otherwise.
func (o *ListOfDownloadableImages) GetDeviceType() string {
	if o == nil || IsNil(o.DeviceType) {
		var ret string
		return ret
	}
	return *o.DeviceType
}

// GetDeviceTypeOk returns a tuple with the DeviceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListOfDownloadableImages) GetDeviceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceType) {
		return nil, false
	}
	return o.DeviceType, true
}

// HasDeviceType returns a boolean if a field has been set.
func (o *ListOfDownloadableImages) HasDeviceType() bool {
	if o != nil && !IsNil(o.DeviceType) {
		return true
	}

	return false
}

// SetDeviceType gets a reference to the given string and assigns it to the DeviceType field.
func (o *ListOfDownloadableImages) SetDeviceType(v string) {
	o.DeviceType = &v
}

// GetImageName returns the ImageName field value if set, zero value otherwise.
func (o *ListOfDownloadableImages) GetImageName() string {
	if o == nil || IsNil(o.ImageName) {
		var ret string
		return ret
	}
	return *o.ImageName
}

// GetImageNameOk returns a tuple with the ImageName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListOfDownloadableImages) GetImageNameOk() (*string, bool) {
	if o == nil || IsNil(o.ImageName) {
		return nil, false
	}
	return o.ImageName, true
}

// HasImageName returns a boolean if a field has been set.
func (o *ListOfDownloadableImages) HasImageName() bool {
	if o != nil && !IsNil(o.ImageName) {
		return true
	}

	return false
}

// SetImageName gets a reference to the given string and assigns it to the ImageName field.
func (o *ListOfDownloadableImages) SetImageName(v string) {
	o.ImageName = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ListOfDownloadableImages) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListOfDownloadableImages) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ListOfDownloadableImages) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ListOfDownloadableImages) SetVersion(v string) {
	o.Version = &v
}

func (o ListOfDownloadableImages) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListOfDownloadableImages) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.DeviceType) {
		toSerialize["deviceType"] = o.DeviceType
	}
	if !IsNil(o.ImageName) {
		toSerialize["imageName"] = o.ImageName
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ListOfDownloadableImages) UnmarshalJSON(data []byte) (err error) {
	varListOfDownloadableImages := _ListOfDownloadableImages{}

	err = json.Unmarshal(data, &varListOfDownloadableImages)

	if err != nil {
		return err
	}

	*o = ListOfDownloadableImages(varListOfDownloadableImages)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "deviceType")
		delete(additionalProperties, "imageName")
		delete(additionalProperties, "version")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableListOfDownloadableImages struct {
	value *ListOfDownloadableImages
	isSet bool
}

func (v NullableListOfDownloadableImages) Get() *ListOfDownloadableImages {
	return v.value
}

func (v *NullableListOfDownloadableImages) Set(val *ListOfDownloadableImages) {
	v.value = val
	v.isSet = true
}

func (v NullableListOfDownloadableImages) IsSet() bool {
	return v.isSet
}

func (v *NullableListOfDownloadableImages) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListOfDownloadableImages(val *ListOfDownloadableImages) *NullableListOfDownloadableImages {
	return &NullableListOfDownloadableImages{value: val, isSet: true}
}

func (v NullableListOfDownloadableImages) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListOfDownloadableImages) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
