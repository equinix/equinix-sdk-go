/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the VendorConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VendorConfig{}

// VendorConfig struct for VendorConfig
type VendorConfig struct {
	// Physical location within the Viptela overlay network, such as a branch office, or a campus (relevant only for Cisco SD-WANs)
	SiteId *string `json:"siteId,omitempty"`
	// IP assigned to the router and vSmart controller (relevant only for Cisco SD-WANs)
	SystemIpAddress *string `json:"systemIpAddress,omitempty"`
	LicenseKey      *string `json:"licenseKey,omitempty"`
	LicenseSecret   *string `json:"licenseSecret,omitempty"`
	LocalId         *string `json:"localId,omitempty"`
	RemoteId        *string `json:"remoteId,omitempty"`
	// This is required for Cisco FTD Firewall devices. If you choose \"FMC,\" you must also provide the controller IP and the activation key.
	ManagementType *string `json:"managementType,omitempty"`
	// For Fortinet devices, this is the System IP address.
	Controller1  *string `json:"controller1,omitempty"`
	Controller2  *string `json:"controller2,omitempty"`
	SerialNumber *string `json:"serialNumber,omitempty"`
	// The administrative password of the device. You can use it to log in to the console. This field is not available for all device types. Should be at least 6 characters long and must include an uppercase letter and a number. This field may be required for some vendors.
	AdminPassword  *string `json:"adminPassword,omitempty"`
	ActivationKey  *string `json:"activationKey,omitempty"`
	ControllerFqdn *string `json:"controllerFqdn,omitempty"`
	RootPassword   *string `json:"rootPassword,omitempty"`
	// The name of account.
	AccountName *string `json:"accountName,omitempty"`
	// The host name.
	Hostname *string `json:"hostname,omitempty"`
	// The account key.
	AccountKey *string `json:"accountKey,omitempty"`
	// The appliance tag.
	ApplianceTag *string `json:"applianceTag,omitempty"`
	// This field is rel
	UserName *string `json:"userName,omitempty"`
	// Whether you want your Arista device to connect to Cloud Vision. Only relevant for Arista devices.
	ConnectToCloudVision *bool `json:"connectToCloudVision,omitempty"`
	// Either As-a-Service or On-Premise. Only relevant for Arista devices.
	CvpType *string `json:"cvpType,omitempty"`
	// Fully qualified domain name for Cloud Vision As-a-Service. Only relevant for Arista devices.
	CvpFqdn *string `json:"cvpFqdn,omitempty"`
	// Only relevant for Arista devices. CvpIpAddress is required if connectToCloudVision=true and cvpType=On-Premise.
	CvpIpAddress *string `json:"cvpIpAddress,omitempty"`
	// Only relevant for Arista devices. CvaasPort is required if connectToCloudVision=true and cvpType=As-a-Service.
	CvaasPort *string `json:"cvaasPort,omitempty"`
	// Only relevant for Arista devices. CvpPort is required if connectToCloudVision=true and cvpType=On-Premise.
	CvpPort *string `json:"cvpPort,omitempty"`
	// Only relevant for Arista devices. CvpToken is required if connectToCloudVision=true and (cvpType=On-Premise or cvpType=As-a-Service).
	CvpToken *string `json:"cvpToken,omitempty"`
	// Only relevant for Zscaler devices
	ProvisioningKey *string `json:"provisioningKey,omitempty"`
	// Private address. Only relevant for BlueCat devices.
	PrivateAddress *string `json:"privateAddress,omitempty"`
	// Private CIDR mask. Only relevant for BlueCat devices.
	PrivateCidrMask *string `json:"privateCidrMask,omitempty"`
	// Private gateway. Only relevant for BlueCat devices.
	PrivateGateway *string `json:"privateGateway,omitempty"`
	// License Id. Only relevant for BlueCat devices.
	LicenseId *string `json:"licenseId,omitempty"`
	// Provide this field to have Panorama integration. Relevant for Palo Alto Self-Configured devices with Internet Access
	PanoramaIpAddress *string `json:"panoramaIpAddress,omitempty"`
	// Provide this field to have Panorama integration. Relevant for Palo Alto Self-Configured devices with Internet Access
	PanoramaAuthKey      *string `json:"panoramaAuthKey,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VendorConfig VendorConfig

// NewVendorConfig instantiates a new VendorConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVendorConfig() *VendorConfig {
	this := VendorConfig{}
	return &this
}

// NewVendorConfigWithDefaults instantiates a new VendorConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVendorConfigWithDefaults() *VendorConfig {
	this := VendorConfig{}
	return &this
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *VendorConfig) GetSiteId() string {
	if o == nil || IsNil(o.SiteId) {
		var ret string
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VendorConfig) GetSiteIdOk() (*string, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *VendorConfig) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given string and assigns it to the SiteId field.
func (o *VendorConfig) SetSiteId(v string) {
	o.SiteId = &v
}

// GetSystemIpAddress returns the SystemIpAddress field value if set, zero value otherwise.
func (o *VendorConfig) GetSystemIpAddress() string {
	if o == nil || IsNil(o.SystemIpAddress) {
		var ret string
		return ret
	}
	return *o.SystemIpAddress
}

// GetSystemIpAddressOk returns a tuple with the SystemIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VendorConfig) GetSystemIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.SystemIpAddress) {
		return nil, false
	}
	return o.SystemIpAddress, true
}

// HasSystemIpAddress returns a boolean if a field has been set.
func (o *VendorConfig) HasSystemIpAddress() bool {
	if o != nil && !IsNil(o.SystemIpAddress) {
		return true
	}

	return false
}

// SetSystemIpAddress gets a reference to the given string and assigns it to the SystemIpAddress field.
func (o *VendorConfig) SetSystemIpAddress(v string) {
	o.SystemIpAddress = &v
}

// GetLicenseKey returns the LicenseKey field value if set, zero value otherwise.
func (o *VendorConfig) GetLicenseKey() string {
	if o == nil || IsNil(o.LicenseKey) {
		var ret string
		return ret
	}
	return *o.LicenseKey
}

// GetLicenseKeyOk returns a tuple with the LicenseKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VendorConfig) GetLicenseKeyOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseKey) {
		return nil, false
	}
	return o.LicenseKey, true
}

// HasLicenseKey returns a boolean if a field has been set.
func (o *VendorConfig) HasLicenseKey() bool {
	if o != nil && !IsNil(o.LicenseKey) {
		return true
	}

	return false
}

// SetLicenseKey gets a reference to the given string and assigns it to the LicenseKey field.
func (o *VendorConfig) SetLicenseKey(v string) {
	o.LicenseKey = &v
}

// GetLicenseSecret returns the LicenseSecret field value if set, zero value otherwise.
func (o *VendorConfig) GetLicenseSecret() string {
	if o == nil || IsNil(o.LicenseSecret) {
		var ret string
		return ret
	}
	return *o.LicenseSecret
}

// GetLicenseSecretOk returns a tuple with the LicenseSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VendorConfig) GetLicenseSecretOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseSecret) {
		return nil, false
	}
	return o.LicenseSecret, true
}

// HasLicenseSecret returns a boolean if a field has been set.
func (o *VendorConfig) HasLicenseSecret() bool {
	if o != nil && !IsNil(o.LicenseSecret) {
		return true
	}

	return false
}

// SetLicenseSecret gets a reference to the given string and assigns it to the LicenseSecret field.
func (o *VendorConfig) SetLicenseSecret(v string) {
	o.LicenseSecret = &v
}

// GetLocalId returns the LocalId field value if set, zero value otherwise.
func (o *VendorConfig) GetLocalId() string {
	if o == nil || IsNil(o.LocalId) {
		var ret string
		return ret
	}
	return *o.LocalId
}

// GetLocalIdOk returns a tuple with the LocalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VendorConfig) GetLocalIdOk() (*string, bool) {
	if o == nil || IsNil(o.LocalId) {
		return nil, false
	}
	return o.LocalId, true
}

// HasLocalId returns a boolean if a field has been set.
func (o *VendorConfig) HasLocalId() bool {
	if o != nil && !IsNil(o.LocalId) {
		return true
	}

	return false
}

// SetLocalId gets a reference to the given string and assigns it to the LocalId field.
func (o *VendorConfig) SetLocalId(v string) {
	o.LocalId = &v
}

// GetRemoteId returns the RemoteId field value if set, zero value otherwise.
func (o *VendorConfig) GetRemoteId() string {
	if o == nil || IsNil(o.RemoteId) {
		var ret string
		return ret
	}
	return *o.RemoteId
}

// GetRemoteIdOk returns a tuple with the RemoteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VendorConfig) GetRemoteIdOk() (*string, bool) {
	if o == nil || IsNil(o.RemoteId) {
		return nil, false
	}
	return o.RemoteId, true
}

// HasRemoteId returns a boolean if a field has been set.
func (o *VendorConfig) HasRemoteId() bool {
	if o != nil && !IsNil(o.RemoteId) {
		return true
	}

	return false
}

// SetRemoteId gets a reference to the given string and assigns it to the RemoteId field.
func (o *VendorConfig) SetRemoteId(v string) {
	o.RemoteId = &v
}

// GetManagementType returns the ManagementType field value if set, zero value otherwise.
func (o *VendorConfig) GetManagementType() string {
	if o == nil || IsNil(o.ManagementType) {
		var ret string
		return ret
	}
	return *o.ManagementType
}

// GetManagementTypeOk returns a tuple with the ManagementType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VendorConfig) GetManagementTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ManagementType) {
		return nil, false
	}
	return o.ManagementType, true
}

// HasManagementType returns a boolean if a field has been set.
func (o *VendorConfig) HasManagementType() bool {
	if o != nil && !IsNil(o.ManagementType) {
		return true
	}

	return false
}

// SetManagementType gets a reference to the given string and assigns it to the ManagementType field.
func (o *VendorConfig) SetManagementType(v string) {
	o.ManagementType = &v
}

// GetController1 returns the Controller1 field value if set, zero value otherwise.
func (o *VendorConfig) GetController1() string {
	if o == nil || IsNil(o.Controller1) {
		var ret string
		return ret
	}
	return *o.Controller1
}

// GetController1Ok returns a tuple with the Controller1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VendorConfig) GetController1Ok() (*string, bool) {
	if o == nil || IsNil(o.Controller1) {
		return nil, false
	}
	return o.Controller1, true
}

// HasController1 returns a boolean if a field has been set.
func (o *VendorConfig) HasController1() bool {
	if o != nil && !IsNil(o.Controller1) {
		return true
	}

	return false
}

// SetController1 gets a reference to the given string and assigns it to the Controller1 field.
func (o *VendorConfig) SetController1(v string) {
	o.Controller1 = &v
}

// GetController2 returns the Controller2 field value if set, zero value otherwise.
func (o *VendorConfig) GetController2() string {
	if o == nil || IsNil(o.Controller2) {
		var ret string
		return ret
	}
	return *o.Controller2
}

// GetController2Ok returns a tuple with the Controller2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VendorConfig) GetController2Ok() (*string, bool) {
	if o == nil || IsNil(o.Controller2) {
		return nil, false
	}
	return o.Controller2, true
}

// HasController2 returns a boolean if a field has been set.
func (o *VendorConfig) HasController2() bool {
	if o != nil && !IsNil(o.Controller2) {
		return true
	}

	return false
}

// SetController2 gets a reference to the given string and assigns it to the Controller2 field.
func (o *VendorConfig) SetController2(v string) {
	o.Controller2 = &v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *VendorConfig) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VendorConfig) GetSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *VendorConfig) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *VendorConfig) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetAdminPassword returns the AdminPassword field value if set, zero value otherwise.
func (o *VendorConfig) GetAdminPassword() string {
	if o == nil || IsNil(o.AdminPassword) {
		var ret string
		return ret
	}
	return *o.AdminPassword
}

// GetAdminPasswordOk returns a tuple with the AdminPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VendorConfig) GetAdminPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.AdminPassword) {
		return nil, false
	}
	return o.AdminPassword, true
}

// HasAdminPassword returns a boolean if a field has been set.
func (o *VendorConfig) HasAdminPassword() bool {
	if o != nil && !IsNil(o.AdminPassword) {
		return true
	}

	return false
}

// SetAdminPassword gets a reference to the given string and assigns it to the AdminPassword field.
func (o *VendorConfig) SetAdminPassword(v string) {
	o.AdminPassword = &v
}

// GetActivationKey returns the ActivationKey field value if set, zero value otherwise.
func (o *VendorConfig) GetActivationKey() string {
	if o == nil || IsNil(o.ActivationKey) {
		var ret string
		return ret
	}
	return *o.ActivationKey
}

// GetActivationKeyOk returns a tuple with the ActivationKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VendorConfig) GetActivationKeyOk() (*string, bool) {
	if o == nil || IsNil(o.ActivationKey) {
		return nil, false
	}
	return o.ActivationKey, true
}

// HasActivationKey returns a boolean if a field has been set.
func (o *VendorConfig) HasActivationKey() bool {
	if o != nil && !IsNil(o.ActivationKey) {
		return true
	}

	return false
}

// SetActivationKey gets a reference to the given string and assigns it to the ActivationKey field.
func (o *VendorConfig) SetActivationKey(v string) {
	o.ActivationKey = &v
}

// GetControllerFqdn returns the ControllerFqdn field value if set, zero value otherwise.
func (o *VendorConfig) GetControllerFqdn() string {
	if o == nil || IsNil(o.ControllerFqdn) {
		var ret string
		return ret
	}
	return *o.ControllerFqdn
}

// GetControllerFqdnOk returns a tuple with the ControllerFqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VendorConfig) GetControllerFqdnOk() (*string, bool) {
	if o == nil || IsNil(o.ControllerFqdn) {
		return nil, false
	}
	return o.ControllerFqdn, true
}

// HasControllerFqdn returns a boolean if a field has been set.
func (o *VendorConfig) HasControllerFqdn() bool {
	if o != nil && !IsNil(o.ControllerFqdn) {
		return true
	}

	return false
}

// SetControllerFqdn gets a reference to the given string and assigns it to the ControllerFqdn field.
func (o *VendorConfig) SetControllerFqdn(v string) {
	o.ControllerFqdn = &v
}

// GetRootPassword returns the RootPassword field value if set, zero value otherwise.
func (o *VendorConfig) GetRootPassword() string {
	if o == nil || IsNil(o.RootPassword) {
		var ret string
		return ret
	}
	return *o.RootPassword
}

// GetRootPasswordOk returns a tuple with the RootPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VendorConfig) GetRootPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.RootPassword) {
		return nil, false
	}
	return o.RootPassword, true
}

// HasRootPassword returns a boolean if a field has been set.
func (o *VendorConfig) HasRootPassword() bool {
	if o != nil && !IsNil(o.RootPassword) {
		return true
	}

	return false
}

// SetRootPassword gets a reference to the given string and assigns it to the RootPassword field.
func (o *VendorConfig) SetRootPassword(v string) {
	o.RootPassword = &v
}

// GetAccountName returns the AccountName field value if set, zero value otherwise.
func (o *VendorConfig) GetAccountName() string {
	if o == nil || IsNil(o.AccountName) {
		var ret string
		return ret
	}
	return *o.AccountName
}

// GetAccountNameOk returns a tuple with the AccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VendorConfig) GetAccountNameOk() (*string, bool) {
	if o == nil || IsNil(o.AccountName) {
		return nil, false
	}
	return o.AccountName, true
}

// HasAccountName returns a boolean if a field has been set.
func (o *VendorConfig) HasAccountName() bool {
	if o != nil && !IsNil(o.AccountName) {
		return true
	}

	return false
}

// SetAccountName gets a reference to the given string and assigns it to the AccountName field.
func (o *VendorConfig) SetAccountName(v string) {
	o.AccountName = &v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *VendorConfig) GetHostname() string {
	if o == nil || IsNil(o.Hostname) {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VendorConfig) GetHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *VendorConfig) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *VendorConfig) SetHostname(v string) {
	o.Hostname = &v
}

// GetAccountKey returns the AccountKey field value if set, zero value otherwise.
func (o *VendorConfig) GetAccountKey() string {
	if o == nil || IsNil(o.AccountKey) {
		var ret string
		return ret
	}
	return *o.AccountKey
}

// GetAccountKeyOk returns a tuple with the AccountKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VendorConfig) GetAccountKeyOk() (*string, bool) {
	if o == nil || IsNil(o.AccountKey) {
		return nil, false
	}
	return o.AccountKey, true
}

// HasAccountKey returns a boolean if a field has been set.
func (o *VendorConfig) HasAccountKey() bool {
	if o != nil && !IsNil(o.AccountKey) {
		return true
	}

	return false
}

// SetAccountKey gets a reference to the given string and assigns it to the AccountKey field.
func (o *VendorConfig) SetAccountKey(v string) {
	o.AccountKey = &v
}

// GetApplianceTag returns the ApplianceTag field value if set, zero value otherwise.
func (o *VendorConfig) GetApplianceTag() string {
	if o == nil || IsNil(o.ApplianceTag) {
		var ret string
		return ret
	}
	return *o.ApplianceTag
}

// GetApplianceTagOk returns a tuple with the ApplianceTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VendorConfig) GetApplianceTagOk() (*string, bool) {
	if o == nil || IsNil(o.ApplianceTag) {
		return nil, false
	}
	return o.ApplianceTag, true
}

// HasApplianceTag returns a boolean if a field has been set.
func (o *VendorConfig) HasApplianceTag() bool {
	if o != nil && !IsNil(o.ApplianceTag) {
		return true
	}

	return false
}

// SetApplianceTag gets a reference to the given string and assigns it to the ApplianceTag field.
func (o *VendorConfig) SetApplianceTag(v string) {
	o.ApplianceTag = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *VendorConfig) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VendorConfig) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *VendorConfig) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *VendorConfig) SetUserName(v string) {
	o.UserName = &v
}

// GetConnectToCloudVision returns the ConnectToCloudVision field value if set, zero value otherwise.
func (o *VendorConfig) GetConnectToCloudVision() bool {
	if o == nil || IsNil(o.ConnectToCloudVision) {
		var ret bool
		return ret
	}
	return *o.ConnectToCloudVision
}

// GetConnectToCloudVisionOk returns a tuple with the ConnectToCloudVision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VendorConfig) GetConnectToCloudVisionOk() (*bool, bool) {
	if o == nil || IsNil(o.ConnectToCloudVision) {
		return nil, false
	}
	return o.ConnectToCloudVision, true
}

// HasConnectToCloudVision returns a boolean if a field has been set.
func (o *VendorConfig) HasConnectToCloudVision() bool {
	if o != nil && !IsNil(o.ConnectToCloudVision) {
		return true
	}

	return false
}

// SetConnectToCloudVision gets a reference to the given bool and assigns it to the ConnectToCloudVision field.
func (o *VendorConfig) SetConnectToCloudVision(v bool) {
	o.ConnectToCloudVision = &v
}

// GetCvpType returns the CvpType field value if set, zero value otherwise.
func (o *VendorConfig) GetCvpType() string {
	if o == nil || IsNil(o.CvpType) {
		var ret string
		return ret
	}
	return *o.CvpType
}

// GetCvpTypeOk returns a tuple with the CvpType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VendorConfig) GetCvpTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CvpType) {
		return nil, false
	}
	return o.CvpType, true
}

// HasCvpType returns a boolean if a field has been set.
func (o *VendorConfig) HasCvpType() bool {
	if o != nil && !IsNil(o.CvpType) {
		return true
	}

	return false
}

// SetCvpType gets a reference to the given string and assigns it to the CvpType field.
func (o *VendorConfig) SetCvpType(v string) {
	o.CvpType = &v
}

// GetCvpFqdn returns the CvpFqdn field value if set, zero value otherwise.
func (o *VendorConfig) GetCvpFqdn() string {
	if o == nil || IsNil(o.CvpFqdn) {
		var ret string
		return ret
	}
	return *o.CvpFqdn
}

// GetCvpFqdnOk returns a tuple with the CvpFqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VendorConfig) GetCvpFqdnOk() (*string, bool) {
	if o == nil || IsNil(o.CvpFqdn) {
		return nil, false
	}
	return o.CvpFqdn, true
}

// HasCvpFqdn returns a boolean if a field has been set.
func (o *VendorConfig) HasCvpFqdn() bool {
	if o != nil && !IsNil(o.CvpFqdn) {
		return true
	}

	return false
}

// SetCvpFqdn gets a reference to the given string and assigns it to the CvpFqdn field.
func (o *VendorConfig) SetCvpFqdn(v string) {
	o.CvpFqdn = &v
}

// GetCvpIpAddress returns the CvpIpAddress field value if set, zero value otherwise.
func (o *VendorConfig) GetCvpIpAddress() string {
	if o == nil || IsNil(o.CvpIpAddress) {
		var ret string
		return ret
	}
	return *o.CvpIpAddress
}

// GetCvpIpAddressOk returns a tuple with the CvpIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VendorConfig) GetCvpIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.CvpIpAddress) {
		return nil, false
	}
	return o.CvpIpAddress, true
}

// HasCvpIpAddress returns a boolean if a field has been set.
func (o *VendorConfig) HasCvpIpAddress() bool {
	if o != nil && !IsNil(o.CvpIpAddress) {
		return true
	}

	return false
}

// SetCvpIpAddress gets a reference to the given string and assigns it to the CvpIpAddress field.
func (o *VendorConfig) SetCvpIpAddress(v string) {
	o.CvpIpAddress = &v
}

// GetCvaasPort returns the CvaasPort field value if set, zero value otherwise.
func (o *VendorConfig) GetCvaasPort() string {
	if o == nil || IsNil(o.CvaasPort) {
		var ret string
		return ret
	}
	return *o.CvaasPort
}

// GetCvaasPortOk returns a tuple with the CvaasPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VendorConfig) GetCvaasPortOk() (*string, bool) {
	if o == nil || IsNil(o.CvaasPort) {
		return nil, false
	}
	return o.CvaasPort, true
}

// HasCvaasPort returns a boolean if a field has been set.
func (o *VendorConfig) HasCvaasPort() bool {
	if o != nil && !IsNil(o.CvaasPort) {
		return true
	}

	return false
}

// SetCvaasPort gets a reference to the given string and assigns it to the CvaasPort field.
func (o *VendorConfig) SetCvaasPort(v string) {
	o.CvaasPort = &v
}

// GetCvpPort returns the CvpPort field value if set, zero value otherwise.
func (o *VendorConfig) GetCvpPort() string {
	if o == nil || IsNil(o.CvpPort) {
		var ret string
		return ret
	}
	return *o.CvpPort
}

// GetCvpPortOk returns a tuple with the CvpPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VendorConfig) GetCvpPortOk() (*string, bool) {
	if o == nil || IsNil(o.CvpPort) {
		return nil, false
	}
	return o.CvpPort, true
}

// HasCvpPort returns a boolean if a field has been set.
func (o *VendorConfig) HasCvpPort() bool {
	if o != nil && !IsNil(o.CvpPort) {
		return true
	}

	return false
}

// SetCvpPort gets a reference to the given string and assigns it to the CvpPort field.
func (o *VendorConfig) SetCvpPort(v string) {
	o.CvpPort = &v
}

// GetCvpToken returns the CvpToken field value if set, zero value otherwise.
func (o *VendorConfig) GetCvpToken() string {
	if o == nil || IsNil(o.CvpToken) {
		var ret string
		return ret
	}
	return *o.CvpToken
}

// GetCvpTokenOk returns a tuple with the CvpToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VendorConfig) GetCvpTokenOk() (*string, bool) {
	if o == nil || IsNil(o.CvpToken) {
		return nil, false
	}
	return o.CvpToken, true
}

// HasCvpToken returns a boolean if a field has been set.
func (o *VendorConfig) HasCvpToken() bool {
	if o != nil && !IsNil(o.CvpToken) {
		return true
	}

	return false
}

// SetCvpToken gets a reference to the given string and assigns it to the CvpToken field.
func (o *VendorConfig) SetCvpToken(v string) {
	o.CvpToken = &v
}

// GetProvisioningKey returns the ProvisioningKey field value if set, zero value otherwise.
func (o *VendorConfig) GetProvisioningKey() string {
	if o == nil || IsNil(o.ProvisioningKey) {
		var ret string
		return ret
	}
	return *o.ProvisioningKey
}

// GetProvisioningKeyOk returns a tuple with the ProvisioningKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VendorConfig) GetProvisioningKeyOk() (*string, bool) {
	if o == nil || IsNil(o.ProvisioningKey) {
		return nil, false
	}
	return o.ProvisioningKey, true
}

// HasProvisioningKey returns a boolean if a field has been set.
func (o *VendorConfig) HasProvisioningKey() bool {
	if o != nil && !IsNil(o.ProvisioningKey) {
		return true
	}

	return false
}

// SetProvisioningKey gets a reference to the given string and assigns it to the ProvisioningKey field.
func (o *VendorConfig) SetProvisioningKey(v string) {
	o.ProvisioningKey = &v
}

// GetPrivateAddress returns the PrivateAddress field value if set, zero value otherwise.
func (o *VendorConfig) GetPrivateAddress() string {
	if o == nil || IsNil(o.PrivateAddress) {
		var ret string
		return ret
	}
	return *o.PrivateAddress
}

// GetPrivateAddressOk returns a tuple with the PrivateAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VendorConfig) GetPrivateAddressOk() (*string, bool) {
	if o == nil || IsNil(o.PrivateAddress) {
		return nil, false
	}
	return o.PrivateAddress, true
}

// HasPrivateAddress returns a boolean if a field has been set.
func (o *VendorConfig) HasPrivateAddress() bool {
	if o != nil && !IsNil(o.PrivateAddress) {
		return true
	}

	return false
}

// SetPrivateAddress gets a reference to the given string and assigns it to the PrivateAddress field.
func (o *VendorConfig) SetPrivateAddress(v string) {
	o.PrivateAddress = &v
}

// GetPrivateCidrMask returns the PrivateCidrMask field value if set, zero value otherwise.
func (o *VendorConfig) GetPrivateCidrMask() string {
	if o == nil || IsNil(o.PrivateCidrMask) {
		var ret string
		return ret
	}
	return *o.PrivateCidrMask
}

// GetPrivateCidrMaskOk returns a tuple with the PrivateCidrMask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VendorConfig) GetPrivateCidrMaskOk() (*string, bool) {
	if o == nil || IsNil(o.PrivateCidrMask) {
		return nil, false
	}
	return o.PrivateCidrMask, true
}

// HasPrivateCidrMask returns a boolean if a field has been set.
func (o *VendorConfig) HasPrivateCidrMask() bool {
	if o != nil && !IsNil(o.PrivateCidrMask) {
		return true
	}

	return false
}

// SetPrivateCidrMask gets a reference to the given string and assigns it to the PrivateCidrMask field.
func (o *VendorConfig) SetPrivateCidrMask(v string) {
	o.PrivateCidrMask = &v
}

// GetPrivateGateway returns the PrivateGateway field value if set, zero value otherwise.
func (o *VendorConfig) GetPrivateGateway() string {
	if o == nil || IsNil(o.PrivateGateway) {
		var ret string
		return ret
	}
	return *o.PrivateGateway
}

// GetPrivateGatewayOk returns a tuple with the PrivateGateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VendorConfig) GetPrivateGatewayOk() (*string, bool) {
	if o == nil || IsNil(o.PrivateGateway) {
		return nil, false
	}
	return o.PrivateGateway, true
}

// HasPrivateGateway returns a boolean if a field has been set.
func (o *VendorConfig) HasPrivateGateway() bool {
	if o != nil && !IsNil(o.PrivateGateway) {
		return true
	}

	return false
}

// SetPrivateGateway gets a reference to the given string and assigns it to the PrivateGateway field.
func (o *VendorConfig) SetPrivateGateway(v string) {
	o.PrivateGateway = &v
}

// GetLicenseId returns the LicenseId field value if set, zero value otherwise.
func (o *VendorConfig) GetLicenseId() string {
	if o == nil || IsNil(o.LicenseId) {
		var ret string
		return ret
	}
	return *o.LicenseId
}

// GetLicenseIdOk returns a tuple with the LicenseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VendorConfig) GetLicenseIdOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseId) {
		return nil, false
	}
	return o.LicenseId, true
}

// HasLicenseId returns a boolean if a field has been set.
func (o *VendorConfig) HasLicenseId() bool {
	if o != nil && !IsNil(o.LicenseId) {
		return true
	}

	return false
}

// SetLicenseId gets a reference to the given string and assigns it to the LicenseId field.
func (o *VendorConfig) SetLicenseId(v string) {
	o.LicenseId = &v
}

// GetPanoramaIpAddress returns the PanoramaIpAddress field value if set, zero value otherwise.
func (o *VendorConfig) GetPanoramaIpAddress() string {
	if o == nil || IsNil(o.PanoramaIpAddress) {
		var ret string
		return ret
	}
	return *o.PanoramaIpAddress
}

// GetPanoramaIpAddressOk returns a tuple with the PanoramaIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VendorConfig) GetPanoramaIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.PanoramaIpAddress) {
		return nil, false
	}
	return o.PanoramaIpAddress, true
}

// HasPanoramaIpAddress returns a boolean if a field has been set.
func (o *VendorConfig) HasPanoramaIpAddress() bool {
	if o != nil && !IsNil(o.PanoramaIpAddress) {
		return true
	}

	return false
}

// SetPanoramaIpAddress gets a reference to the given string and assigns it to the PanoramaIpAddress field.
func (o *VendorConfig) SetPanoramaIpAddress(v string) {
	o.PanoramaIpAddress = &v
}

// GetPanoramaAuthKey returns the PanoramaAuthKey field value if set, zero value otherwise.
func (o *VendorConfig) GetPanoramaAuthKey() string {
	if o == nil || IsNil(o.PanoramaAuthKey) {
		var ret string
		return ret
	}
	return *o.PanoramaAuthKey
}

// GetPanoramaAuthKeyOk returns a tuple with the PanoramaAuthKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VendorConfig) GetPanoramaAuthKeyOk() (*string, bool) {
	if o == nil || IsNil(o.PanoramaAuthKey) {
		return nil, false
	}
	return o.PanoramaAuthKey, true
}

// HasPanoramaAuthKey returns a boolean if a field has been set.
func (o *VendorConfig) HasPanoramaAuthKey() bool {
	if o != nil && !IsNil(o.PanoramaAuthKey) {
		return true
	}

	return false
}

// SetPanoramaAuthKey gets a reference to the given string and assigns it to the PanoramaAuthKey field.
func (o *VendorConfig) SetPanoramaAuthKey(v string) {
	o.PanoramaAuthKey = &v
}

func (o VendorConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VendorConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SiteId) {
		toSerialize["siteId"] = o.SiteId
	}
	if !IsNil(o.SystemIpAddress) {
		toSerialize["systemIpAddress"] = o.SystemIpAddress
	}
	if !IsNil(o.LicenseKey) {
		toSerialize["licenseKey"] = o.LicenseKey
	}
	if !IsNil(o.LicenseSecret) {
		toSerialize["licenseSecret"] = o.LicenseSecret
	}
	if !IsNil(o.LocalId) {
		toSerialize["localId"] = o.LocalId
	}
	if !IsNil(o.RemoteId) {
		toSerialize["remoteId"] = o.RemoteId
	}
	if !IsNil(o.ManagementType) {
		toSerialize["managementType"] = o.ManagementType
	}
	if !IsNil(o.Controller1) {
		toSerialize["controller1"] = o.Controller1
	}
	if !IsNil(o.Controller2) {
		toSerialize["controller2"] = o.Controller2
	}
	if !IsNil(o.SerialNumber) {
		toSerialize["serialNumber"] = o.SerialNumber
	}
	if !IsNil(o.AdminPassword) {
		toSerialize["adminPassword"] = o.AdminPassword
	}
	if !IsNil(o.ActivationKey) {
		toSerialize["activationKey"] = o.ActivationKey
	}
	if !IsNil(o.ControllerFqdn) {
		toSerialize["controllerFqdn"] = o.ControllerFqdn
	}
	if !IsNil(o.RootPassword) {
		toSerialize["rootPassword"] = o.RootPassword
	}
	if !IsNil(o.AccountName) {
		toSerialize["accountName"] = o.AccountName
	}
	if !IsNil(o.Hostname) {
		toSerialize["hostname"] = o.Hostname
	}
	if !IsNil(o.AccountKey) {
		toSerialize["accountKey"] = o.AccountKey
	}
	if !IsNil(o.ApplianceTag) {
		toSerialize["applianceTag"] = o.ApplianceTag
	}
	if !IsNil(o.UserName) {
		toSerialize["userName"] = o.UserName
	}
	if !IsNil(o.ConnectToCloudVision) {
		toSerialize["connectToCloudVision"] = o.ConnectToCloudVision
	}
	if !IsNil(o.CvpType) {
		toSerialize["cvpType"] = o.CvpType
	}
	if !IsNil(o.CvpFqdn) {
		toSerialize["cvpFqdn"] = o.CvpFqdn
	}
	if !IsNil(o.CvpIpAddress) {
		toSerialize["cvpIpAddress"] = o.CvpIpAddress
	}
	if !IsNil(o.CvaasPort) {
		toSerialize["cvaasPort"] = o.CvaasPort
	}
	if !IsNil(o.CvpPort) {
		toSerialize["cvpPort"] = o.CvpPort
	}
	if !IsNil(o.CvpToken) {
		toSerialize["cvpToken"] = o.CvpToken
	}
	if !IsNil(o.ProvisioningKey) {
		toSerialize["provisioningKey"] = o.ProvisioningKey
	}
	if !IsNil(o.PrivateAddress) {
		toSerialize["privateAddress"] = o.PrivateAddress
	}
	if !IsNil(o.PrivateCidrMask) {
		toSerialize["privateCidrMask"] = o.PrivateCidrMask
	}
	if !IsNil(o.PrivateGateway) {
		toSerialize["privateGateway"] = o.PrivateGateway
	}
	if !IsNil(o.LicenseId) {
		toSerialize["licenseId"] = o.LicenseId
	}
	if !IsNil(o.PanoramaIpAddress) {
		toSerialize["panoramaIpAddress"] = o.PanoramaIpAddress
	}
	if !IsNil(o.PanoramaAuthKey) {
		toSerialize["panoramaAuthKey"] = o.PanoramaAuthKey
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VendorConfig) UnmarshalJSON(data []byte) (err error) {
	varVendorConfig := _VendorConfig{}

	err = json.Unmarshal(data, &varVendorConfig)

	if err != nil {
		return err
	}

	*o = VendorConfig(varVendorConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "siteId")
		delete(additionalProperties, "systemIpAddress")
		delete(additionalProperties, "licenseKey")
		delete(additionalProperties, "licenseSecret")
		delete(additionalProperties, "localId")
		delete(additionalProperties, "remoteId")
		delete(additionalProperties, "managementType")
		delete(additionalProperties, "controller1")
		delete(additionalProperties, "controller2")
		delete(additionalProperties, "serialNumber")
		delete(additionalProperties, "adminPassword")
		delete(additionalProperties, "activationKey")
		delete(additionalProperties, "controllerFqdn")
		delete(additionalProperties, "rootPassword")
		delete(additionalProperties, "accountName")
		delete(additionalProperties, "hostname")
		delete(additionalProperties, "accountKey")
		delete(additionalProperties, "applianceTag")
		delete(additionalProperties, "userName")
		delete(additionalProperties, "connectToCloudVision")
		delete(additionalProperties, "cvpType")
		delete(additionalProperties, "cvpFqdn")
		delete(additionalProperties, "cvpIpAddress")
		delete(additionalProperties, "cvaasPort")
		delete(additionalProperties, "cvpPort")
		delete(additionalProperties, "cvpToken")
		delete(additionalProperties, "provisioningKey")
		delete(additionalProperties, "privateAddress")
		delete(additionalProperties, "privateCidrMask")
		delete(additionalProperties, "privateGateway")
		delete(additionalProperties, "licenseId")
		delete(additionalProperties, "panoramaIpAddress")
		delete(additionalProperties, "panoramaAuthKey")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVendorConfig struct {
	value *VendorConfig
	isSet bool
}

func (v NullableVendorConfig) Get() *VendorConfig {
	return v.value
}

func (v *NullableVendorConfig) Set(val *VendorConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableVendorConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableVendorConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVendorConfig(val *VendorConfig) *NullableVendorConfig {
	return &NullableVendorConfig{value: val, isSet: true}
}

func (v NullableVendorConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVendorConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
