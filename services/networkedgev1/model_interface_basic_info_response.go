/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the InterfaceBasicInfoResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InterfaceBasicInfoResponse{}

// InterfaceBasicInfoResponse struct for InterfaceBasicInfoResponse
type InterfaceBasicInfoResponse struct {
	Id              *float32 `json:"id,omitempty"`
	Name            *string  `json:"name,omitempty"`
	Status          *string  `json:"status,omitempty"`
	OperationStatus *string  `json:"operationStatus,omitempty"`
	MacAddress      *string  `json:"macAddress,omitempty"`
	IpAddress       *string  `json:"ipAddress,omitempty"`
	AssignedType    *string  `json:"assignedType,omitempty"`
	// The type of interface.
	Type                 *string `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InterfaceBasicInfoResponse InterfaceBasicInfoResponse

// NewInterfaceBasicInfoResponse instantiates a new InterfaceBasicInfoResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterfaceBasicInfoResponse() *InterfaceBasicInfoResponse {
	this := InterfaceBasicInfoResponse{}
	return &this
}

// NewInterfaceBasicInfoResponseWithDefaults instantiates a new InterfaceBasicInfoResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterfaceBasicInfoResponseWithDefaults() *InterfaceBasicInfoResponse {
	this := InterfaceBasicInfoResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InterfaceBasicInfoResponse) GetId() float32 {
	if o == nil || IsNil(o.Id) {
		var ret float32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceBasicInfoResponse) GetIdOk() (*float32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InterfaceBasicInfoResponse) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given float32 and assigns it to the Id field.
func (o *InterfaceBasicInfoResponse) SetId(v float32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *InterfaceBasicInfoResponse) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceBasicInfoResponse) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *InterfaceBasicInfoResponse) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *InterfaceBasicInfoResponse) SetName(v string) {
	o.Name = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *InterfaceBasicInfoResponse) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceBasicInfoResponse) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *InterfaceBasicInfoResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *InterfaceBasicInfoResponse) SetStatus(v string) {
	o.Status = &v
}

// GetOperationStatus returns the OperationStatus field value if set, zero value otherwise.
func (o *InterfaceBasicInfoResponse) GetOperationStatus() string {
	if o == nil || IsNil(o.OperationStatus) {
		var ret string
		return ret
	}
	return *o.OperationStatus
}

// GetOperationStatusOk returns a tuple with the OperationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceBasicInfoResponse) GetOperationStatusOk() (*string, bool) {
	if o == nil || IsNil(o.OperationStatus) {
		return nil, false
	}
	return o.OperationStatus, true
}

// HasOperationStatus returns a boolean if a field has been set.
func (o *InterfaceBasicInfoResponse) HasOperationStatus() bool {
	if o != nil && !IsNil(o.OperationStatus) {
		return true
	}

	return false
}

// SetOperationStatus gets a reference to the given string and assigns it to the OperationStatus field.
func (o *InterfaceBasicInfoResponse) SetOperationStatus(v string) {
	o.OperationStatus = &v
}

// GetMacAddress returns the MacAddress field value if set, zero value otherwise.
func (o *InterfaceBasicInfoResponse) GetMacAddress() string {
	if o == nil || IsNil(o.MacAddress) {
		var ret string
		return ret
	}
	return *o.MacAddress
}

// GetMacAddressOk returns a tuple with the MacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceBasicInfoResponse) GetMacAddressOk() (*string, bool) {
	if o == nil || IsNil(o.MacAddress) {
		return nil, false
	}
	return o.MacAddress, true
}

// HasMacAddress returns a boolean if a field has been set.
func (o *InterfaceBasicInfoResponse) HasMacAddress() bool {
	if o != nil && !IsNil(o.MacAddress) {
		return true
	}

	return false
}

// SetMacAddress gets a reference to the given string and assigns it to the MacAddress field.
func (o *InterfaceBasicInfoResponse) SetMacAddress(v string) {
	o.MacAddress = &v
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *InterfaceBasicInfoResponse) GetIpAddress() string {
	if o == nil || IsNil(o.IpAddress) {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceBasicInfoResponse) GetIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.IpAddress) {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *InterfaceBasicInfoResponse) HasIpAddress() bool {
	if o != nil && !IsNil(o.IpAddress) {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *InterfaceBasicInfoResponse) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetAssignedType returns the AssignedType field value if set, zero value otherwise.
func (o *InterfaceBasicInfoResponse) GetAssignedType() string {
	if o == nil || IsNil(o.AssignedType) {
		var ret string
		return ret
	}
	return *o.AssignedType
}

// GetAssignedTypeOk returns a tuple with the AssignedType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceBasicInfoResponse) GetAssignedTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AssignedType) {
		return nil, false
	}
	return o.AssignedType, true
}

// HasAssignedType returns a boolean if a field has been set.
func (o *InterfaceBasicInfoResponse) HasAssignedType() bool {
	if o != nil && !IsNil(o.AssignedType) {
		return true
	}

	return false
}

// SetAssignedType gets a reference to the given string and assigns it to the AssignedType field.
func (o *InterfaceBasicInfoResponse) SetAssignedType(v string) {
	o.AssignedType = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *InterfaceBasicInfoResponse) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceBasicInfoResponse) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *InterfaceBasicInfoResponse) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *InterfaceBasicInfoResponse) SetType(v string) {
	o.Type = &v
}

func (o InterfaceBasicInfoResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InterfaceBasicInfoResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.OperationStatus) {
		toSerialize["operationStatus"] = o.OperationStatus
	}
	if !IsNil(o.MacAddress) {
		toSerialize["macAddress"] = o.MacAddress
	}
	if !IsNil(o.IpAddress) {
		toSerialize["ipAddress"] = o.IpAddress
	}
	if !IsNil(o.AssignedType) {
		toSerialize["assignedType"] = o.AssignedType
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InterfaceBasicInfoResponse) UnmarshalJSON(data []byte) (err error) {
	varInterfaceBasicInfoResponse := _InterfaceBasicInfoResponse{}

	err = json.Unmarshal(data, &varInterfaceBasicInfoResponse)

	if err != nil {
		return err
	}

	*o = InterfaceBasicInfoResponse(varInterfaceBasicInfoResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "status")
		delete(additionalProperties, "operationStatus")
		delete(additionalProperties, "macAddress")
		delete(additionalProperties, "ipAddress")
		delete(additionalProperties, "assignedType")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInterfaceBasicInfoResponse struct {
	value *InterfaceBasicInfoResponse
	isSet bool
}

func (v NullableInterfaceBasicInfoResponse) Get() *InterfaceBasicInfoResponse {
	return v.value
}

func (v *NullableInterfaceBasicInfoResponse) Set(val *InterfaceBasicInfoResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableInterfaceBasicInfoResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableInterfaceBasicInfoResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterfaceBasicInfoResponse(val *InterfaceBasicInfoResponse) *NullableInterfaceBasicInfoResponse {
	return &NullableInterfaceBasicInfoResponse{value: val, isSet: true}
}

func (v NullableInterfaceBasicInfoResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterfaceBasicInfoResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
