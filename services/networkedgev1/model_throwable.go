/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the Throwable type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Throwable{}

// Throwable struct for Throwable
type Throwable struct {
	Cause                *Throwable          `json:"cause,omitempty"`
	LocalizedMessage     *string             `json:"localizedMessage,omitempty"`
	Message              *string             `json:"message,omitempty"`
	StackTrace           []StackTraceElement `json:"stackTrace,omitempty"`
	Suppressed           []Throwable         `json:"suppressed,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Throwable Throwable

// NewThrowable instantiates a new Throwable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThrowable() *Throwable {
	this := Throwable{}
	return &this
}

// NewThrowableWithDefaults instantiates a new Throwable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThrowableWithDefaults() *Throwable {
	this := Throwable{}
	return &this
}

// GetCause returns the Cause field value if set, zero value otherwise.
func (o *Throwable) GetCause() Throwable {
	if o == nil || IsNil(o.Cause) {
		var ret Throwable
		return ret
	}
	return *o.Cause
}

// GetCauseOk returns a tuple with the Cause field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Throwable) GetCauseOk() (*Throwable, bool) {
	if o == nil || IsNil(o.Cause) {
		return nil, false
	}
	return o.Cause, true
}

// HasCause returns a boolean if a field has been set.
func (o *Throwable) HasCause() bool {
	if o != nil && !IsNil(o.Cause) {
		return true
	}

	return false
}

// SetCause gets a reference to the given Throwable and assigns it to the Cause field.
func (o *Throwable) SetCause(v Throwable) {
	o.Cause = &v
}

// GetLocalizedMessage returns the LocalizedMessage field value if set, zero value otherwise.
func (o *Throwable) GetLocalizedMessage() string {
	if o == nil || IsNil(o.LocalizedMessage) {
		var ret string
		return ret
	}
	return *o.LocalizedMessage
}

// GetLocalizedMessageOk returns a tuple with the LocalizedMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Throwable) GetLocalizedMessageOk() (*string, bool) {
	if o == nil || IsNil(o.LocalizedMessage) {
		return nil, false
	}
	return o.LocalizedMessage, true
}

// HasLocalizedMessage returns a boolean if a field has been set.
func (o *Throwable) HasLocalizedMessage() bool {
	if o != nil && !IsNil(o.LocalizedMessage) {
		return true
	}

	return false
}

// SetLocalizedMessage gets a reference to the given string and assigns it to the LocalizedMessage field.
func (o *Throwable) SetLocalizedMessage(v string) {
	o.LocalizedMessage = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *Throwable) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Throwable) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *Throwable) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *Throwable) SetMessage(v string) {
	o.Message = &v
}

// GetStackTrace returns the StackTrace field value if set, zero value otherwise.
func (o *Throwable) GetStackTrace() []StackTraceElement {
	if o == nil || IsNil(o.StackTrace) {
		var ret []StackTraceElement
		return ret
	}
	return o.StackTrace
}

// GetStackTraceOk returns a tuple with the StackTrace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Throwable) GetStackTraceOk() ([]StackTraceElement, bool) {
	if o == nil || IsNil(o.StackTrace) {
		return nil, false
	}
	return o.StackTrace, true
}

// HasStackTrace returns a boolean if a field has been set.
func (o *Throwable) HasStackTrace() bool {
	if o != nil && !IsNil(o.StackTrace) {
		return true
	}

	return false
}

// SetStackTrace gets a reference to the given []StackTraceElement and assigns it to the StackTrace field.
func (o *Throwable) SetStackTrace(v []StackTraceElement) {
	o.StackTrace = v
}

// GetSuppressed returns the Suppressed field value if set, zero value otherwise.
func (o *Throwable) GetSuppressed() []Throwable {
	if o == nil || IsNil(o.Suppressed) {
		var ret []Throwable
		return ret
	}
	return o.Suppressed
}

// GetSuppressedOk returns a tuple with the Suppressed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Throwable) GetSuppressedOk() ([]Throwable, bool) {
	if o == nil || IsNil(o.Suppressed) {
		return nil, false
	}
	return o.Suppressed, true
}

// HasSuppressed returns a boolean if a field has been set.
func (o *Throwable) HasSuppressed() bool {
	if o != nil && !IsNil(o.Suppressed) {
		return true
	}

	return false
}

// SetSuppressed gets a reference to the given []Throwable and assigns it to the Suppressed field.
func (o *Throwable) SetSuppressed(v []Throwable) {
	o.Suppressed = v
}

func (o Throwable) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Throwable) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cause) {
		toSerialize["cause"] = o.Cause
	}
	if !IsNil(o.LocalizedMessage) {
		toSerialize["localizedMessage"] = o.LocalizedMessage
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.StackTrace) {
		toSerialize["stackTrace"] = o.StackTrace
	}
	if !IsNil(o.Suppressed) {
		toSerialize["suppressed"] = o.Suppressed
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Throwable) UnmarshalJSON(data []byte) (err error) {
	varThrowable := _Throwable{}

	err = json.Unmarshal(data, &varThrowable)

	if err != nil {
		return err
	}

	*o = Throwable(varThrowable)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cause")
		delete(additionalProperties, "localizedMessage")
		delete(additionalProperties, "message")
		delete(additionalProperties, "stackTrace")
		delete(additionalProperties, "suppressed")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableThrowable struct {
	value *Throwable
	isSet bool
}

func (v NullableThrowable) Get() *Throwable {
	return v.value
}

func (v *NullableThrowable) Set(val *Throwable) {
	v.value = val
	v.isSet = true
}

func (v NullableThrowable) IsSet() bool {
	return v.isSet
}

func (v *NullableThrowable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThrowable(val *Throwable) *NullableThrowable {
	return &NullableThrowable{value: val, isSet: true}
}

func (v NullableThrowable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThrowable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
