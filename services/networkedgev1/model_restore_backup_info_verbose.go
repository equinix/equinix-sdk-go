/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the RestoreBackupInfoVerbose type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestoreBackupInfoVerbose{}

// RestoreBackupInfoVerbose struct for RestoreBackupInfoVerbose
type RestoreBackupInfoVerbose struct {
	DeviceBackup *RestoreBackupInfoVerboseDeviceBackup `json:"deviceBackup,omitempty"`
	Services     *RestoreBackupInfoVerboseServices     `json:"services,omitempty"`
	// If True, the backup is restorable once you perform the recommended opertions. If False, the backup is not restorable.
	RestoreAllowedAfterDeleteOrEdit *bool `json:"restoreAllowedAfterDeleteOrEdit,omitempty"`
	AdditionalProperties            map[string]interface{}
}

type _RestoreBackupInfoVerbose RestoreBackupInfoVerbose

// NewRestoreBackupInfoVerbose instantiates a new RestoreBackupInfoVerbose object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestoreBackupInfoVerbose() *RestoreBackupInfoVerbose {
	this := RestoreBackupInfoVerbose{}
	return &this
}

// NewRestoreBackupInfoVerboseWithDefaults instantiates a new RestoreBackupInfoVerbose object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestoreBackupInfoVerboseWithDefaults() *RestoreBackupInfoVerbose {
	this := RestoreBackupInfoVerbose{}
	return &this
}

// GetDeviceBackup returns the DeviceBackup field value if set, zero value otherwise.
func (o *RestoreBackupInfoVerbose) GetDeviceBackup() RestoreBackupInfoVerboseDeviceBackup {
	if o == nil || IsNil(o.DeviceBackup) {
		var ret RestoreBackupInfoVerboseDeviceBackup
		return ret
	}
	return *o.DeviceBackup
}

// GetDeviceBackupOk returns a tuple with the DeviceBackup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreBackupInfoVerbose) GetDeviceBackupOk() (*RestoreBackupInfoVerboseDeviceBackup, bool) {
	if o == nil || IsNil(o.DeviceBackup) {
		return nil, false
	}
	return o.DeviceBackup, true
}

// HasDeviceBackup returns a boolean if a field has been set.
func (o *RestoreBackupInfoVerbose) HasDeviceBackup() bool {
	if o != nil && !IsNil(o.DeviceBackup) {
		return true
	}

	return false
}

// SetDeviceBackup gets a reference to the given RestoreBackupInfoVerboseDeviceBackup and assigns it to the DeviceBackup field.
func (o *RestoreBackupInfoVerbose) SetDeviceBackup(v RestoreBackupInfoVerboseDeviceBackup) {
	o.DeviceBackup = &v
}

// GetServices returns the Services field value if set, zero value otherwise.
func (o *RestoreBackupInfoVerbose) GetServices() RestoreBackupInfoVerboseServices {
	if o == nil || IsNil(o.Services) {
		var ret RestoreBackupInfoVerboseServices
		return ret
	}
	return *o.Services
}

// GetServicesOk returns a tuple with the Services field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreBackupInfoVerbose) GetServicesOk() (*RestoreBackupInfoVerboseServices, bool) {
	if o == nil || IsNil(o.Services) {
		return nil, false
	}
	return o.Services, true
}

// HasServices returns a boolean if a field has been set.
func (o *RestoreBackupInfoVerbose) HasServices() bool {
	if o != nil && !IsNil(o.Services) {
		return true
	}

	return false
}

// SetServices gets a reference to the given RestoreBackupInfoVerboseServices and assigns it to the Services field.
func (o *RestoreBackupInfoVerbose) SetServices(v RestoreBackupInfoVerboseServices) {
	o.Services = &v
}

// GetRestoreAllowedAfterDeleteOrEdit returns the RestoreAllowedAfterDeleteOrEdit field value if set, zero value otherwise.
func (o *RestoreBackupInfoVerbose) GetRestoreAllowedAfterDeleteOrEdit() bool {
	if o == nil || IsNil(o.RestoreAllowedAfterDeleteOrEdit) {
		var ret bool
		return ret
	}
	return *o.RestoreAllowedAfterDeleteOrEdit
}

// GetRestoreAllowedAfterDeleteOrEditOk returns a tuple with the RestoreAllowedAfterDeleteOrEdit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreBackupInfoVerbose) GetRestoreAllowedAfterDeleteOrEditOk() (*bool, bool) {
	if o == nil || IsNil(o.RestoreAllowedAfterDeleteOrEdit) {
		return nil, false
	}
	return o.RestoreAllowedAfterDeleteOrEdit, true
}

// HasRestoreAllowedAfterDeleteOrEdit returns a boolean if a field has been set.
func (o *RestoreBackupInfoVerbose) HasRestoreAllowedAfterDeleteOrEdit() bool {
	if o != nil && !IsNil(o.RestoreAllowedAfterDeleteOrEdit) {
		return true
	}

	return false
}

// SetRestoreAllowedAfterDeleteOrEdit gets a reference to the given bool and assigns it to the RestoreAllowedAfterDeleteOrEdit field.
func (o *RestoreBackupInfoVerbose) SetRestoreAllowedAfterDeleteOrEdit(v bool) {
	o.RestoreAllowedAfterDeleteOrEdit = &v
}

func (o RestoreBackupInfoVerbose) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestoreBackupInfoVerbose) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeviceBackup) {
		toSerialize["deviceBackup"] = o.DeviceBackup
	}
	if !IsNil(o.Services) {
		toSerialize["services"] = o.Services
	}
	if !IsNil(o.RestoreAllowedAfterDeleteOrEdit) {
		toSerialize["restoreAllowedAfterDeleteOrEdit"] = o.RestoreAllowedAfterDeleteOrEdit
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RestoreBackupInfoVerbose) UnmarshalJSON(data []byte) (err error) {
	varRestoreBackupInfoVerbose := _RestoreBackupInfoVerbose{}

	err = json.Unmarshal(data, &varRestoreBackupInfoVerbose)

	if err != nil {
		return err
	}

	*o = RestoreBackupInfoVerbose(varRestoreBackupInfoVerbose)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "deviceBackup")
		delete(additionalProperties, "services")
		delete(additionalProperties, "restoreAllowedAfterDeleteOrEdit")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRestoreBackupInfoVerbose struct {
	value *RestoreBackupInfoVerbose
	isSet bool
}

func (v NullableRestoreBackupInfoVerbose) Get() *RestoreBackupInfoVerbose {
	return v.value
}

func (v *NullableRestoreBackupInfoVerbose) Set(val *RestoreBackupInfoVerbose) {
	v.value = val
	v.isSet = true
}

func (v NullableRestoreBackupInfoVerbose) IsSet() bool {
	return v.isSet
}

func (v *NullableRestoreBackupInfoVerbose) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestoreBackupInfoVerbose(val *RestoreBackupInfoVerbose) *NullableRestoreBackupInfoVerbose {
	return &NullableRestoreBackupInfoVerbose{value: val, isSet: true}
}

func (v NullableRestoreBackupInfoVerbose) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestoreBackupInfoVerbose) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
