/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the DeviceElement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceElement{}

// DeviceElement struct for DeviceElement
type DeviceElement struct {
	Description             *string  `json:"description,omitempty"`
	MonthlyRecurringCharges *float64 `json:"monthlyRecurringCharges,omitempty"`
	NonRecurringCharges     *float64 `json:"nonRecurringCharges,omitempty"`
	ProductCode             *string  `json:"productCode,omitempty"`
	AdditionalProperties    map[string]interface{}
}

type _DeviceElement DeviceElement

// NewDeviceElement instantiates a new DeviceElement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceElement() *DeviceElement {
	this := DeviceElement{}
	return &this
}

// NewDeviceElementWithDefaults instantiates a new DeviceElement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceElementWithDefaults() *DeviceElement {
	this := DeviceElement{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DeviceElement) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceElement) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DeviceElement) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DeviceElement) SetDescription(v string) {
	o.Description = &v
}

// GetMonthlyRecurringCharges returns the MonthlyRecurringCharges field value if set, zero value otherwise.
func (o *DeviceElement) GetMonthlyRecurringCharges() float64 {
	if o == nil || IsNil(o.MonthlyRecurringCharges) {
		var ret float64
		return ret
	}
	return *o.MonthlyRecurringCharges
}

// GetMonthlyRecurringChargesOk returns a tuple with the MonthlyRecurringCharges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceElement) GetMonthlyRecurringChargesOk() (*float64, bool) {
	if o == nil || IsNil(o.MonthlyRecurringCharges) {
		return nil, false
	}
	return o.MonthlyRecurringCharges, true
}

// HasMonthlyRecurringCharges returns a boolean if a field has been set.
func (o *DeviceElement) HasMonthlyRecurringCharges() bool {
	if o != nil && !IsNil(o.MonthlyRecurringCharges) {
		return true
	}

	return false
}

// SetMonthlyRecurringCharges gets a reference to the given float64 and assigns it to the MonthlyRecurringCharges field.
func (o *DeviceElement) SetMonthlyRecurringCharges(v float64) {
	o.MonthlyRecurringCharges = &v
}

// GetNonRecurringCharges returns the NonRecurringCharges field value if set, zero value otherwise.
func (o *DeviceElement) GetNonRecurringCharges() float64 {
	if o == nil || IsNil(o.NonRecurringCharges) {
		var ret float64
		return ret
	}
	return *o.NonRecurringCharges
}

// GetNonRecurringChargesOk returns a tuple with the NonRecurringCharges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceElement) GetNonRecurringChargesOk() (*float64, bool) {
	if o == nil || IsNil(o.NonRecurringCharges) {
		return nil, false
	}
	return o.NonRecurringCharges, true
}

// HasNonRecurringCharges returns a boolean if a field has been set.
func (o *DeviceElement) HasNonRecurringCharges() bool {
	if o != nil && !IsNil(o.NonRecurringCharges) {
		return true
	}

	return false
}

// SetNonRecurringCharges gets a reference to the given float64 and assigns it to the NonRecurringCharges field.
func (o *DeviceElement) SetNonRecurringCharges(v float64) {
	o.NonRecurringCharges = &v
}

// GetProductCode returns the ProductCode field value if set, zero value otherwise.
func (o *DeviceElement) GetProductCode() string {
	if o == nil || IsNil(o.ProductCode) {
		var ret string
		return ret
	}
	return *o.ProductCode
}

// GetProductCodeOk returns a tuple with the ProductCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceElement) GetProductCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ProductCode) {
		return nil, false
	}
	return o.ProductCode, true
}

// HasProductCode returns a boolean if a field has been set.
func (o *DeviceElement) HasProductCode() bool {
	if o != nil && !IsNil(o.ProductCode) {
		return true
	}

	return false
}

// SetProductCode gets a reference to the given string and assigns it to the ProductCode field.
func (o *DeviceElement) SetProductCode(v string) {
	o.ProductCode = &v
}

func (o DeviceElement) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceElement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.MonthlyRecurringCharges) {
		toSerialize["monthlyRecurringCharges"] = o.MonthlyRecurringCharges
	}
	if !IsNil(o.NonRecurringCharges) {
		toSerialize["nonRecurringCharges"] = o.NonRecurringCharges
	}
	if !IsNil(o.ProductCode) {
		toSerialize["productCode"] = o.ProductCode
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeviceElement) UnmarshalJSON(data []byte) (err error) {
	varDeviceElement := _DeviceElement{}

	err = json.Unmarshal(data, &varDeviceElement)

	if err != nil {
		return err
	}

	*o = DeviceElement(varDeviceElement)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "description")
		delete(additionalProperties, "monthlyRecurringCharges")
		delete(additionalProperties, "nonRecurringCharges")
		delete(additionalProperties, "productCode")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeviceElement struct {
	value *DeviceElement
	isSet bool
}

func (v NullableDeviceElement) Get() *DeviceElement {
	return v.value
}

func (v *NullableDeviceElement) Set(val *DeviceElement) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceElement) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceElement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceElement(val *DeviceElement) *NullableDeviceElement {
	return &NullableDeviceElement{value: val, isSet: true}
}

func (v NullableDeviceElement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceElement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
