/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
	"fmt"
)

// SshUserOperationRequestAction SSH operation to be performed
type SshUserOperationRequestAction string

// List of SshUserOperationRequest_action
const (
	SSHUSEROPERATIONREQUESTACTION_CREATE SshUserOperationRequestAction = "CREATE"
	SSHUSEROPERATIONREQUESTACTION_DELETE SshUserOperationRequestAction = "DELETE"
	SSHUSEROPERATIONREQUESTACTION_REUSE  SshUserOperationRequestAction = "REUSE"
)

// All allowed values of SshUserOperationRequestAction enum
var AllowedSshUserOperationRequestActionEnumValues = []SshUserOperationRequestAction{
	"CREATE",
	"DELETE",
	"REUSE",
}

func (v *SshUserOperationRequestAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SshUserOperationRequestAction(value)
	for _, existing := range AllowedSshUserOperationRequestActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SshUserOperationRequestAction", value)
}

// NewSshUserOperationRequestActionFromValue returns a pointer to a valid SshUserOperationRequestAction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSshUserOperationRequestActionFromValue(v string) (*SshUserOperationRequestAction, error) {
	ev := SshUserOperationRequestAction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SshUserOperationRequestAction: valid values are %v", v, AllowedSshUserOperationRequestActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SshUserOperationRequestAction) IsValid() bool {
	for _, existing := range AllowedSshUserOperationRequestActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SshUserOperationRequest_action value
func (v SshUserOperationRequestAction) Ptr() *SshUserOperationRequestAction {
	return &v
}

type NullableSshUserOperationRequestAction struct {
	value *SshUserOperationRequestAction
	isSet bool
}

func (v NullableSshUserOperationRequestAction) Get() *SshUserOperationRequestAction {
	return v.value
}

func (v *NullableSshUserOperationRequestAction) Set(val *SshUserOperationRequestAction) {
	v.value = val
	v.isSet = true
}

func (v NullableSshUserOperationRequestAction) IsSet() bool {
	return v.isSet
}

func (v *NullableSshUserOperationRequestAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSshUserOperationRequestAction(val *SshUserOperationRequestAction) *NullableSshUserOperationRequestAction {
	return &NullableSshUserOperationRequestAction{value: val, isSet: true}
}

func (v NullableSshUserOperationRequestAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSshUserOperationRequestAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
