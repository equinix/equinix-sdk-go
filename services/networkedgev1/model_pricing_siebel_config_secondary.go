/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the PricingSiebelConfigSecondary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PricingSiebelConfigSecondary{}

// PricingSiebelConfigSecondary An object that has the charges associated with the secondary device.
type PricingSiebelConfigSecondary struct {
	// The currency of the charges.
	Currency             *string   `json:"currency,omitempty"`
	Charges              []Charges `json:"charges,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PricingSiebelConfigSecondary PricingSiebelConfigSecondary

// NewPricingSiebelConfigSecondary instantiates a new PricingSiebelConfigSecondary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPricingSiebelConfigSecondary() *PricingSiebelConfigSecondary {
	this := PricingSiebelConfigSecondary{}
	return &this
}

// NewPricingSiebelConfigSecondaryWithDefaults instantiates a new PricingSiebelConfigSecondary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPricingSiebelConfigSecondaryWithDefaults() *PricingSiebelConfigSecondary {
	this := PricingSiebelConfigSecondary{}
	return &this
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *PricingSiebelConfigSecondary) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PricingSiebelConfigSecondary) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *PricingSiebelConfigSecondary) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *PricingSiebelConfigSecondary) SetCurrency(v string) {
	o.Currency = &v
}

// GetCharges returns the Charges field value if set, zero value otherwise.
func (o *PricingSiebelConfigSecondary) GetCharges() []Charges {
	if o == nil || IsNil(o.Charges) {
		var ret []Charges
		return ret
	}
	return o.Charges
}

// GetChargesOk returns a tuple with the Charges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PricingSiebelConfigSecondary) GetChargesOk() ([]Charges, bool) {
	if o == nil || IsNil(o.Charges) {
		return nil, false
	}
	return o.Charges, true
}

// HasCharges returns a boolean if a field has been set.
func (o *PricingSiebelConfigSecondary) HasCharges() bool {
	if o != nil && !IsNil(o.Charges) {
		return true
	}

	return false
}

// SetCharges gets a reference to the given []Charges and assigns it to the Charges field.
func (o *PricingSiebelConfigSecondary) SetCharges(v []Charges) {
	o.Charges = v
}

func (o PricingSiebelConfigSecondary) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PricingSiebelConfigSecondary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Charges) {
		toSerialize["charges"] = o.Charges
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PricingSiebelConfigSecondary) UnmarshalJSON(data []byte) (err error) {
	varPricingSiebelConfigSecondary := _PricingSiebelConfigSecondary{}

	err = json.Unmarshal(data, &varPricingSiebelConfigSecondary)

	if err != nil {
		return err
	}

	*o = PricingSiebelConfigSecondary(varPricingSiebelConfigSecondary)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "currency")
		delete(additionalProperties, "charges")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePricingSiebelConfigSecondary struct {
	value *PricingSiebelConfigSecondary
	isSet bool
}

func (v NullablePricingSiebelConfigSecondary) Get() *PricingSiebelConfigSecondary {
	return v.value
}

func (v *NullablePricingSiebelConfigSecondary) Set(val *PricingSiebelConfigSecondary) {
	v.value = val
	v.isSet = true
}

func (v NullablePricingSiebelConfigSecondary) IsSet() bool {
	return v.isSet
}

func (v *NullablePricingSiebelConfigSecondary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePricingSiebelConfigSecondary(val *PricingSiebelConfigSecondary) *NullablePricingSiebelConfigSecondary {
	return &NullablePricingSiebelConfigSecondary{value: val, isSet: true}
}

func (v NullablePricingSiebelConfigSecondary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePricingSiebelConfigSecondary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
