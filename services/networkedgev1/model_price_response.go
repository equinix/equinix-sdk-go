/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the PriceResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PriceResponse{}

// PriceResponse struct for PriceResponse
type PriceResponse struct {
	BillingCommencementDate *string `json:"billingCommencementDate,omitempty"`
	BillingEnabled          *bool   `json:"billingEnabled,omitempty"`
	// An array of the monthly recurring charges.
	Charges              []Charges `json:"charges,omitempty"`
	Currency             *string   `json:"currency,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PriceResponse PriceResponse

// NewPriceResponse instantiates a new PriceResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPriceResponse() *PriceResponse {
	this := PriceResponse{}
	return &this
}

// NewPriceResponseWithDefaults instantiates a new PriceResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPriceResponseWithDefaults() *PriceResponse {
	this := PriceResponse{}
	return &this
}

// GetBillingCommencementDate returns the BillingCommencementDate field value if set, zero value otherwise.
func (o *PriceResponse) GetBillingCommencementDate() string {
	if o == nil || IsNil(o.BillingCommencementDate) {
		var ret string
		return ret
	}
	return *o.BillingCommencementDate
}

// GetBillingCommencementDateOk returns a tuple with the BillingCommencementDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceResponse) GetBillingCommencementDateOk() (*string, bool) {
	if o == nil || IsNil(o.BillingCommencementDate) {
		return nil, false
	}
	return o.BillingCommencementDate, true
}

// HasBillingCommencementDate returns a boolean if a field has been set.
func (o *PriceResponse) HasBillingCommencementDate() bool {
	if o != nil && !IsNil(o.BillingCommencementDate) {
		return true
	}

	return false
}

// SetBillingCommencementDate gets a reference to the given string and assigns it to the BillingCommencementDate field.
func (o *PriceResponse) SetBillingCommencementDate(v string) {
	o.BillingCommencementDate = &v
}

// GetBillingEnabled returns the BillingEnabled field value if set, zero value otherwise.
func (o *PriceResponse) GetBillingEnabled() bool {
	if o == nil || IsNil(o.BillingEnabled) {
		var ret bool
		return ret
	}
	return *o.BillingEnabled
}

// GetBillingEnabledOk returns a tuple with the BillingEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceResponse) GetBillingEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.BillingEnabled) {
		return nil, false
	}
	return o.BillingEnabled, true
}

// HasBillingEnabled returns a boolean if a field has been set.
func (o *PriceResponse) HasBillingEnabled() bool {
	if o != nil && !IsNil(o.BillingEnabled) {
		return true
	}

	return false
}

// SetBillingEnabled gets a reference to the given bool and assigns it to the BillingEnabled field.
func (o *PriceResponse) SetBillingEnabled(v bool) {
	o.BillingEnabled = &v
}

// GetCharges returns the Charges field value if set, zero value otherwise.
func (o *PriceResponse) GetCharges() []Charges {
	if o == nil || IsNil(o.Charges) {
		var ret []Charges
		return ret
	}
	return o.Charges
}

// GetChargesOk returns a tuple with the Charges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceResponse) GetChargesOk() ([]Charges, bool) {
	if o == nil || IsNil(o.Charges) {
		return nil, false
	}
	return o.Charges, true
}

// HasCharges returns a boolean if a field has been set.
func (o *PriceResponse) HasCharges() bool {
	if o != nil && !IsNil(o.Charges) {
		return true
	}

	return false
}

// SetCharges gets a reference to the given []Charges and assigns it to the Charges field.
func (o *PriceResponse) SetCharges(v []Charges) {
	o.Charges = v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *PriceResponse) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceResponse) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *PriceResponse) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *PriceResponse) SetCurrency(v string) {
	o.Currency = &v
}

func (o PriceResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PriceResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BillingCommencementDate) {
		toSerialize["billingCommencementDate"] = o.BillingCommencementDate
	}
	if !IsNil(o.BillingEnabled) {
		toSerialize["billingEnabled"] = o.BillingEnabled
	}
	if !IsNil(o.Charges) {
		toSerialize["charges"] = o.Charges
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PriceResponse) UnmarshalJSON(data []byte) (err error) {
	varPriceResponse := _PriceResponse{}

	err = json.Unmarshal(data, &varPriceResponse)

	if err != nil {
		return err
	}

	*o = PriceResponse(varPriceResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "billingCommencementDate")
		delete(additionalProperties, "billingEnabled")
		delete(additionalProperties, "charges")
		delete(additionalProperties, "currency")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePriceResponse struct {
	value *PriceResponse
	isSet bool
}

func (v NullablePriceResponse) Get() *PriceResponse {
	return v.value
}

func (v *NullablePriceResponse) Set(val *PriceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceResponse(val *PriceResponse) *NullablePriceResponse {
	return &NullablePriceResponse{value: val, isSet: true}
}

func (v NullablePriceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
