/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the SoftwarePackage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SoftwarePackage{}

// SoftwarePackage struct for SoftwarePackage
type SoftwarePackage struct {
	// Software package name
	Name *string `json:"name,omitempty"`
	// Software package code
	PackageCode *string `json:"packageCode,omitempty"`
	// Software package license type
	LicenseType          *string          `json:"licenseType,omitempty"`
	VersionDetails       []VersionDetails `json:"versionDetails,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SoftwarePackage SoftwarePackage

// NewSoftwarePackage instantiates a new SoftwarePackage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSoftwarePackage() *SoftwarePackage {
	this := SoftwarePackage{}
	return &this
}

// NewSoftwarePackageWithDefaults instantiates a new SoftwarePackage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSoftwarePackageWithDefaults() *SoftwarePackage {
	this := SoftwarePackage{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SoftwarePackage) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwarePackage) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SoftwarePackage) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SoftwarePackage) SetName(v string) {
	o.Name = &v
}

// GetPackageCode returns the PackageCode field value if set, zero value otherwise.
func (o *SoftwarePackage) GetPackageCode() string {
	if o == nil || IsNil(o.PackageCode) {
		var ret string
		return ret
	}
	return *o.PackageCode
}

// GetPackageCodeOk returns a tuple with the PackageCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwarePackage) GetPackageCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PackageCode) {
		return nil, false
	}
	return o.PackageCode, true
}

// HasPackageCode returns a boolean if a field has been set.
func (o *SoftwarePackage) HasPackageCode() bool {
	if o != nil && !IsNil(o.PackageCode) {
		return true
	}

	return false
}

// SetPackageCode gets a reference to the given string and assigns it to the PackageCode field.
func (o *SoftwarePackage) SetPackageCode(v string) {
	o.PackageCode = &v
}

// GetLicenseType returns the LicenseType field value if set, zero value otherwise.
func (o *SoftwarePackage) GetLicenseType() string {
	if o == nil || IsNil(o.LicenseType) {
		var ret string
		return ret
	}
	return *o.LicenseType
}

// GetLicenseTypeOk returns a tuple with the LicenseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwarePackage) GetLicenseTypeOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseType) {
		return nil, false
	}
	return o.LicenseType, true
}

// HasLicenseType returns a boolean if a field has been set.
func (o *SoftwarePackage) HasLicenseType() bool {
	if o != nil && !IsNil(o.LicenseType) {
		return true
	}

	return false
}

// SetLicenseType gets a reference to the given string and assigns it to the LicenseType field.
func (o *SoftwarePackage) SetLicenseType(v string) {
	o.LicenseType = &v
}

// GetVersionDetails returns the VersionDetails field value if set, zero value otherwise.
func (o *SoftwarePackage) GetVersionDetails() []VersionDetails {
	if o == nil || IsNil(o.VersionDetails) {
		var ret []VersionDetails
		return ret
	}
	return o.VersionDetails
}

// GetVersionDetailsOk returns a tuple with the VersionDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwarePackage) GetVersionDetailsOk() ([]VersionDetails, bool) {
	if o == nil || IsNil(o.VersionDetails) {
		return nil, false
	}
	return o.VersionDetails, true
}

// HasVersionDetails returns a boolean if a field has been set.
func (o *SoftwarePackage) HasVersionDetails() bool {
	if o != nil && !IsNil(o.VersionDetails) {
		return true
	}

	return false
}

// SetVersionDetails gets a reference to the given []VersionDetails and assigns it to the VersionDetails field.
func (o *SoftwarePackage) SetVersionDetails(v []VersionDetails) {
	o.VersionDetails = v
}

func (o SoftwarePackage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SoftwarePackage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.PackageCode) {
		toSerialize["packageCode"] = o.PackageCode
	}
	if !IsNil(o.LicenseType) {
		toSerialize["licenseType"] = o.LicenseType
	}
	if !IsNil(o.VersionDetails) {
		toSerialize["versionDetails"] = o.VersionDetails
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SoftwarePackage) UnmarshalJSON(data []byte) (err error) {
	varSoftwarePackage := _SoftwarePackage{}

	err = json.Unmarshal(data, &varSoftwarePackage)

	if err != nil {
		return err
	}

	*o = SoftwarePackage(varSoftwarePackage)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "packageCode")
		delete(additionalProperties, "licenseType")
		delete(additionalProperties, "versionDetails")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSoftwarePackage struct {
	value *SoftwarePackage
	isSet bool
}

func (v NullableSoftwarePackage) Get() *SoftwarePackage {
	return v.value
}

func (v *NullableSoftwarePackage) Set(val *SoftwarePackage) {
	v.value = val
	v.isSet = true
}

func (v NullableSoftwarePackage) IsSet() bool {
	return v.isSet
}

func (v *NullableSoftwarePackage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSoftwarePackage(val *SoftwarePackage) *NullableSoftwarePackage {
	return &NullableSoftwarePackage{value: val, isSet: true}
}

func (v NullableSoftwarePackage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSoftwarePackage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
