/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the AdditionalFieldsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdditionalFieldsConfig{}

// AdditionalFieldsConfig struct for AdditionalFieldsConfig
type AdditionalFieldsConfig struct {
	// The name of field.
	Name *string `json:"name,omitempty"`
	// Whether or not the field is required at the time of device creation.
	Required *bool `json:"required,omitempty"`
	// Whether or not you need two distinct values for primary and secondary devices at the time of device creation. This field is only useful for HA devices.
	IsSameValueAllowedForPrimaryAndSecondary *bool `json:"isSameValueAllowedForPrimaryAndSecondary,omitempty"`
	AdditionalProperties                     map[string]interface{}
}

type _AdditionalFieldsConfig AdditionalFieldsConfig

// NewAdditionalFieldsConfig instantiates a new AdditionalFieldsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdditionalFieldsConfig() *AdditionalFieldsConfig {
	this := AdditionalFieldsConfig{}
	return &this
}

// NewAdditionalFieldsConfigWithDefaults instantiates a new AdditionalFieldsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdditionalFieldsConfigWithDefaults() *AdditionalFieldsConfig {
	this := AdditionalFieldsConfig{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AdditionalFieldsConfig) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalFieldsConfig) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AdditionalFieldsConfig) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AdditionalFieldsConfig) SetName(v string) {
	o.Name = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *AdditionalFieldsConfig) GetRequired() bool {
	if o == nil || IsNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalFieldsConfig) GetRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *AdditionalFieldsConfig) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *AdditionalFieldsConfig) SetRequired(v bool) {
	o.Required = &v
}

// GetIsSameValueAllowedForPrimaryAndSecondary returns the IsSameValueAllowedForPrimaryAndSecondary field value if set, zero value otherwise.
func (o *AdditionalFieldsConfig) GetIsSameValueAllowedForPrimaryAndSecondary() bool {
	if o == nil || IsNil(o.IsSameValueAllowedForPrimaryAndSecondary) {
		var ret bool
		return ret
	}
	return *o.IsSameValueAllowedForPrimaryAndSecondary
}

// GetIsSameValueAllowedForPrimaryAndSecondaryOk returns a tuple with the IsSameValueAllowedForPrimaryAndSecondary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalFieldsConfig) GetIsSameValueAllowedForPrimaryAndSecondaryOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSameValueAllowedForPrimaryAndSecondary) {
		return nil, false
	}
	return o.IsSameValueAllowedForPrimaryAndSecondary, true
}

// HasIsSameValueAllowedForPrimaryAndSecondary returns a boolean if a field has been set.
func (o *AdditionalFieldsConfig) HasIsSameValueAllowedForPrimaryAndSecondary() bool {
	if o != nil && !IsNil(o.IsSameValueAllowedForPrimaryAndSecondary) {
		return true
	}

	return false
}

// SetIsSameValueAllowedForPrimaryAndSecondary gets a reference to the given bool and assigns it to the IsSameValueAllowedForPrimaryAndSecondary field.
func (o *AdditionalFieldsConfig) SetIsSameValueAllowedForPrimaryAndSecondary(v bool) {
	o.IsSameValueAllowedForPrimaryAndSecondary = &v
}

func (o AdditionalFieldsConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdditionalFieldsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	if !IsNil(o.IsSameValueAllowedForPrimaryAndSecondary) {
		toSerialize["isSameValueAllowedForPrimaryAndSecondary"] = o.IsSameValueAllowedForPrimaryAndSecondary
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AdditionalFieldsConfig) UnmarshalJSON(data []byte) (err error) {
	varAdditionalFieldsConfig := _AdditionalFieldsConfig{}

	err = json.Unmarshal(data, &varAdditionalFieldsConfig)

	if err != nil {
		return err
	}

	*o = AdditionalFieldsConfig(varAdditionalFieldsConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "required")
		delete(additionalProperties, "isSameValueAllowedForPrimaryAndSecondary")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAdditionalFieldsConfig struct {
	value *AdditionalFieldsConfig
	isSet bool
}

func (v NullableAdditionalFieldsConfig) Get() *AdditionalFieldsConfig {
	return v.value
}

func (v *NullableAdditionalFieldsConfig) Set(val *AdditionalFieldsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableAdditionalFieldsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableAdditionalFieldsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdditionalFieldsConfig(val *AdditionalFieldsConfig) *NullableAdditionalFieldsConfig {
	return &NullableAdditionalFieldsConfig{value: val, isSet: true}
}

func (v NullableAdditionalFieldsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdditionalFieldsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
