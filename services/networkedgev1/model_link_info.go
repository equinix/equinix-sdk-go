/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the LinkInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LinkInfo{}

// LinkInfo struct for LinkInfo
type LinkInfo struct {
	// Account number. Either an account number or an accountreferenceId is required to create a link group.
	AccountNumber *string `json:"accountNumber,omitempty"`
	// Metro Throughput.
	Throughput *string `json:"throughput,omitempty"`
	// Throughput unit.
	ThroughputUnit *string `json:"throughputUnit,omitempty"`
	// Metro you want to link.
	MetroCode            *string `json:"metroCode,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LinkInfo LinkInfo

// NewLinkInfo instantiates a new LinkInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinkInfo() *LinkInfo {
	this := LinkInfo{}
	return &this
}

// NewLinkInfoWithDefaults instantiates a new LinkInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkInfoWithDefaults() *LinkInfo {
	this := LinkInfo{}
	return &this
}

// GetAccountNumber returns the AccountNumber field value if set, zero value otherwise.
func (o *LinkInfo) GetAccountNumber() string {
	if o == nil || IsNil(o.AccountNumber) {
		var ret string
		return ret
	}
	return *o.AccountNumber
}

// GetAccountNumberOk returns a tuple with the AccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkInfo) GetAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.AccountNumber) {
		return nil, false
	}
	return o.AccountNumber, true
}

// HasAccountNumber returns a boolean if a field has been set.
func (o *LinkInfo) HasAccountNumber() bool {
	if o != nil && !IsNil(o.AccountNumber) {
		return true
	}

	return false
}

// SetAccountNumber gets a reference to the given string and assigns it to the AccountNumber field.
func (o *LinkInfo) SetAccountNumber(v string) {
	o.AccountNumber = &v
}

// GetThroughput returns the Throughput field value if set, zero value otherwise.
func (o *LinkInfo) GetThroughput() string {
	if o == nil || IsNil(o.Throughput) {
		var ret string
		return ret
	}
	return *o.Throughput
}

// GetThroughputOk returns a tuple with the Throughput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkInfo) GetThroughputOk() (*string, bool) {
	if o == nil || IsNil(o.Throughput) {
		return nil, false
	}
	return o.Throughput, true
}

// HasThroughput returns a boolean if a field has been set.
func (o *LinkInfo) HasThroughput() bool {
	if o != nil && !IsNil(o.Throughput) {
		return true
	}

	return false
}

// SetThroughput gets a reference to the given string and assigns it to the Throughput field.
func (o *LinkInfo) SetThroughput(v string) {
	o.Throughput = &v
}

// GetThroughputUnit returns the ThroughputUnit field value if set, zero value otherwise.
func (o *LinkInfo) GetThroughputUnit() string {
	if o == nil || IsNil(o.ThroughputUnit) {
		var ret string
		return ret
	}
	return *o.ThroughputUnit
}

// GetThroughputUnitOk returns a tuple with the ThroughputUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkInfo) GetThroughputUnitOk() (*string, bool) {
	if o == nil || IsNil(o.ThroughputUnit) {
		return nil, false
	}
	return o.ThroughputUnit, true
}

// HasThroughputUnit returns a boolean if a field has been set.
func (o *LinkInfo) HasThroughputUnit() bool {
	if o != nil && !IsNil(o.ThroughputUnit) {
		return true
	}

	return false
}

// SetThroughputUnit gets a reference to the given string and assigns it to the ThroughputUnit field.
func (o *LinkInfo) SetThroughputUnit(v string) {
	o.ThroughputUnit = &v
}

// GetMetroCode returns the MetroCode field value if set, zero value otherwise.
func (o *LinkInfo) GetMetroCode() string {
	if o == nil || IsNil(o.MetroCode) {
		var ret string
		return ret
	}
	return *o.MetroCode
}

// GetMetroCodeOk returns a tuple with the MetroCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkInfo) GetMetroCodeOk() (*string, bool) {
	if o == nil || IsNil(o.MetroCode) {
		return nil, false
	}
	return o.MetroCode, true
}

// HasMetroCode returns a boolean if a field has been set.
func (o *LinkInfo) HasMetroCode() bool {
	if o != nil && !IsNil(o.MetroCode) {
		return true
	}

	return false
}

// SetMetroCode gets a reference to the given string and assigns it to the MetroCode field.
func (o *LinkInfo) SetMetroCode(v string) {
	o.MetroCode = &v
}

func (o LinkInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LinkInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountNumber) {
		toSerialize["accountNumber"] = o.AccountNumber
	}
	if !IsNil(o.Throughput) {
		toSerialize["throughput"] = o.Throughput
	}
	if !IsNil(o.ThroughputUnit) {
		toSerialize["throughputUnit"] = o.ThroughputUnit
	}
	if !IsNil(o.MetroCode) {
		toSerialize["metroCode"] = o.MetroCode
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LinkInfo) UnmarshalJSON(data []byte) (err error) {
	varLinkInfo := _LinkInfo{}

	err = json.Unmarshal(data, &varLinkInfo)

	if err != nil {
		return err
	}

	*o = LinkInfo(varLinkInfo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "accountNumber")
		delete(additionalProperties, "throughput")
		delete(additionalProperties, "throughputUnit")
		delete(additionalProperties, "metroCode")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLinkInfo struct {
	value *LinkInfo
	isSet bool
}

func (v NullableLinkInfo) Get() *LinkInfo {
	return v.value
}

func (v *NullableLinkInfo) Set(val *LinkInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkInfo(val *LinkInfo) *NullableLinkInfo {
	return &NullableLinkInfo{value: val, isSet: true}
}

func (v NullableLinkInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
