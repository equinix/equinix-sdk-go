/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
	"fmt"
)

// checks if the VpnRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VpnRequest{}

// VpnRequest struct for VpnRequest
type VpnRequest struct {
	ConfigName    *string `json:"configName,omitempty"`
	PeerIp        string  `json:"peerIp"`
	PeerSharedKey string  `json:"peerSharedKey"`
	// Remote Customer ASN - Customer side
	RemoteAsn int64 `json:"remoteAsn"`
	// Remote Customer IP Address - Customer side
	RemoteIpAddress string `json:"remoteIpAddress"`
	// BGP Password
	Password string `json:"password"`
	// Local ASN - Equinix side
	LocalAsn *int64 `json:"localAsn,omitempty"`
	// Local Tunnel IP Address in CIDR format
	TunnelIp             string `json:"tunnelIp"`
	AdditionalProperties map[string]interface{}
}

type _VpnRequest VpnRequest

// NewVpnRequest instantiates a new VpnRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVpnRequest(peerIp string, peerSharedKey string, remoteAsn int64, remoteIpAddress string, password string, tunnelIp string) *VpnRequest {
	this := VpnRequest{}
	this.PeerIp = peerIp
	this.PeerSharedKey = peerSharedKey
	this.RemoteAsn = remoteAsn
	this.RemoteIpAddress = remoteIpAddress
	this.Password = password
	this.TunnelIp = tunnelIp
	return &this
}

// NewVpnRequestWithDefaults instantiates a new VpnRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVpnRequestWithDefaults() *VpnRequest {
	this := VpnRequest{}
	return &this
}

// GetConfigName returns the ConfigName field value if set, zero value otherwise.
func (o *VpnRequest) GetConfigName() string {
	if o == nil || IsNil(o.ConfigName) {
		var ret string
		return ret
	}
	return *o.ConfigName
}

// GetConfigNameOk returns a tuple with the ConfigName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VpnRequest) GetConfigNameOk() (*string, bool) {
	if o == nil || IsNil(o.ConfigName) {
		return nil, false
	}
	return o.ConfigName, true
}

// HasConfigName returns a boolean if a field has been set.
func (o *VpnRequest) HasConfigName() bool {
	if o != nil && !IsNil(o.ConfigName) {
		return true
	}

	return false
}

// SetConfigName gets a reference to the given string and assigns it to the ConfigName field.
func (o *VpnRequest) SetConfigName(v string) {
	o.ConfigName = &v
}

// GetPeerIp returns the PeerIp field value
func (o *VpnRequest) GetPeerIp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PeerIp
}

// GetPeerIpOk returns a tuple with the PeerIp field value
// and a boolean to check if the value has been set.
func (o *VpnRequest) GetPeerIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PeerIp, true
}

// SetPeerIp sets field value
func (o *VpnRequest) SetPeerIp(v string) {
	o.PeerIp = v
}

// GetPeerSharedKey returns the PeerSharedKey field value
func (o *VpnRequest) GetPeerSharedKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PeerSharedKey
}

// GetPeerSharedKeyOk returns a tuple with the PeerSharedKey field value
// and a boolean to check if the value has been set.
func (o *VpnRequest) GetPeerSharedKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PeerSharedKey, true
}

// SetPeerSharedKey sets field value
func (o *VpnRequest) SetPeerSharedKey(v string) {
	o.PeerSharedKey = v
}

// GetRemoteAsn returns the RemoteAsn field value
func (o *VpnRequest) GetRemoteAsn() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.RemoteAsn
}

// GetRemoteAsnOk returns a tuple with the RemoteAsn field value
// and a boolean to check if the value has been set.
func (o *VpnRequest) GetRemoteAsnOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemoteAsn, true
}

// SetRemoteAsn sets field value
func (o *VpnRequest) SetRemoteAsn(v int64) {
	o.RemoteAsn = v
}

// GetRemoteIpAddress returns the RemoteIpAddress field value
func (o *VpnRequest) GetRemoteIpAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RemoteIpAddress
}

// GetRemoteIpAddressOk returns a tuple with the RemoteIpAddress field value
// and a boolean to check if the value has been set.
func (o *VpnRequest) GetRemoteIpAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemoteIpAddress, true
}

// SetRemoteIpAddress sets field value
func (o *VpnRequest) SetRemoteIpAddress(v string) {
	o.RemoteIpAddress = v
}

// GetPassword returns the Password field value
func (o *VpnRequest) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *VpnRequest) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *VpnRequest) SetPassword(v string) {
	o.Password = v
}

// GetLocalAsn returns the LocalAsn field value if set, zero value otherwise.
func (o *VpnRequest) GetLocalAsn() int64 {
	if o == nil || IsNil(o.LocalAsn) {
		var ret int64
		return ret
	}
	return *o.LocalAsn
}

// GetLocalAsnOk returns a tuple with the LocalAsn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VpnRequest) GetLocalAsnOk() (*int64, bool) {
	if o == nil || IsNil(o.LocalAsn) {
		return nil, false
	}
	return o.LocalAsn, true
}

// HasLocalAsn returns a boolean if a field has been set.
func (o *VpnRequest) HasLocalAsn() bool {
	if o != nil && !IsNil(o.LocalAsn) {
		return true
	}

	return false
}

// SetLocalAsn gets a reference to the given int64 and assigns it to the LocalAsn field.
func (o *VpnRequest) SetLocalAsn(v int64) {
	o.LocalAsn = &v
}

// GetTunnelIp returns the TunnelIp field value
func (o *VpnRequest) GetTunnelIp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TunnelIp
}

// GetTunnelIpOk returns a tuple with the TunnelIp field value
// and a boolean to check if the value has been set.
func (o *VpnRequest) GetTunnelIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TunnelIp, true
}

// SetTunnelIp sets field value
func (o *VpnRequest) SetTunnelIp(v string) {
	o.TunnelIp = v
}

func (o VpnRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VpnRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConfigName) {
		toSerialize["configName"] = o.ConfigName
	}
	toSerialize["peerIp"] = o.PeerIp
	toSerialize["peerSharedKey"] = o.PeerSharedKey
	toSerialize["remoteAsn"] = o.RemoteAsn
	toSerialize["remoteIpAddress"] = o.RemoteIpAddress
	toSerialize["password"] = o.Password
	if !IsNil(o.LocalAsn) {
		toSerialize["localAsn"] = o.LocalAsn
	}
	toSerialize["tunnelIp"] = o.TunnelIp

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VpnRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"peerIp",
		"peerSharedKey",
		"remoteAsn",
		"remoteIpAddress",
		"password",
		"tunnelIp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVpnRequest := _VpnRequest{}

	err = json.Unmarshal(data, &varVpnRequest)

	if err != nil {
		return err
	}

	*o = VpnRequest(varVpnRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "configName")
		delete(additionalProperties, "peerIp")
		delete(additionalProperties, "peerSharedKey")
		delete(additionalProperties, "remoteAsn")
		delete(additionalProperties, "remoteIpAddress")
		delete(additionalProperties, "password")
		delete(additionalProperties, "localAsn")
		delete(additionalProperties, "tunnelIp")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVpnRequest struct {
	value *VpnRequest
	isSet bool
}

func (v NullableVpnRequest) Get() *VpnRequest {
	return v.value
}

func (v *NullableVpnRequest) Set(val *VpnRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableVpnRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableVpnRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVpnRequest(val *VpnRequest) *NullableVpnRequest {
	return &NullableVpnRequest{value: val, isSet: true}
}

func (v NullableVpnRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVpnRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
