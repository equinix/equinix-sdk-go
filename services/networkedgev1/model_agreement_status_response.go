/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the AgreementStatusResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AgreementStatusResponse{}

// AgreementStatusResponse struct for AgreementStatusResponse
type AgreementStatusResponse struct {
	ErrorMessage         *string `json:"errorMessage,omitempty"`
	IsValid              *string `json:"isValid,omitempty"`
	Terms                *string `json:"terms,omitempty"`
	TermsVersionID       *string `json:"termsVersionID,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AgreementStatusResponse AgreementStatusResponse

// NewAgreementStatusResponse instantiates a new AgreementStatusResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAgreementStatusResponse() *AgreementStatusResponse {
	this := AgreementStatusResponse{}
	return &this
}

// NewAgreementStatusResponseWithDefaults instantiates a new AgreementStatusResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAgreementStatusResponseWithDefaults() *AgreementStatusResponse {
	this := AgreementStatusResponse{}
	return &this
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *AgreementStatusResponse) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage) {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementStatusResponse) GetErrorMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorMessage) {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *AgreementStatusResponse) HasErrorMessage() bool {
	if o != nil && !IsNil(o.ErrorMessage) {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *AgreementStatusResponse) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

// GetIsValid returns the IsValid field value if set, zero value otherwise.
func (o *AgreementStatusResponse) GetIsValid() string {
	if o == nil || IsNil(o.IsValid) {
		var ret string
		return ret
	}
	return *o.IsValid
}

// GetIsValidOk returns a tuple with the IsValid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementStatusResponse) GetIsValidOk() (*string, bool) {
	if o == nil || IsNil(o.IsValid) {
		return nil, false
	}
	return o.IsValid, true
}

// HasIsValid returns a boolean if a field has been set.
func (o *AgreementStatusResponse) HasIsValid() bool {
	if o != nil && !IsNil(o.IsValid) {
		return true
	}

	return false
}

// SetIsValid gets a reference to the given string and assigns it to the IsValid field.
func (o *AgreementStatusResponse) SetIsValid(v string) {
	o.IsValid = &v
}

// GetTerms returns the Terms field value if set, zero value otherwise.
func (o *AgreementStatusResponse) GetTerms() string {
	if o == nil || IsNil(o.Terms) {
		var ret string
		return ret
	}
	return *o.Terms
}

// GetTermsOk returns a tuple with the Terms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementStatusResponse) GetTermsOk() (*string, bool) {
	if o == nil || IsNil(o.Terms) {
		return nil, false
	}
	return o.Terms, true
}

// HasTerms returns a boolean if a field has been set.
func (o *AgreementStatusResponse) HasTerms() bool {
	if o != nil && !IsNil(o.Terms) {
		return true
	}

	return false
}

// SetTerms gets a reference to the given string and assigns it to the Terms field.
func (o *AgreementStatusResponse) SetTerms(v string) {
	o.Terms = &v
}

// GetTermsVersionID returns the TermsVersionID field value if set, zero value otherwise.
func (o *AgreementStatusResponse) GetTermsVersionID() string {
	if o == nil || IsNil(o.TermsVersionID) {
		var ret string
		return ret
	}
	return *o.TermsVersionID
}

// GetTermsVersionIDOk returns a tuple with the TermsVersionID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementStatusResponse) GetTermsVersionIDOk() (*string, bool) {
	if o == nil || IsNil(o.TermsVersionID) {
		return nil, false
	}
	return o.TermsVersionID, true
}

// HasTermsVersionID returns a boolean if a field has been set.
func (o *AgreementStatusResponse) HasTermsVersionID() bool {
	if o != nil && !IsNil(o.TermsVersionID) {
		return true
	}

	return false
}

// SetTermsVersionID gets a reference to the given string and assigns it to the TermsVersionID field.
func (o *AgreementStatusResponse) SetTermsVersionID(v string) {
	o.TermsVersionID = &v
}

func (o AgreementStatusResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AgreementStatusResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ErrorMessage) {
		toSerialize["errorMessage"] = o.ErrorMessage
	}
	if !IsNil(o.IsValid) {
		toSerialize["isValid"] = o.IsValid
	}
	if !IsNil(o.Terms) {
		toSerialize["terms"] = o.Terms
	}
	if !IsNil(o.TermsVersionID) {
		toSerialize["termsVersionID"] = o.TermsVersionID
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AgreementStatusResponse) UnmarshalJSON(data []byte) (err error) {
	varAgreementStatusResponse := _AgreementStatusResponse{}

	err = json.Unmarshal(data, &varAgreementStatusResponse)

	if err != nil {
		return err
	}

	*o = AgreementStatusResponse(varAgreementStatusResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "errorMessage")
		delete(additionalProperties, "isValid")
		delete(additionalProperties, "terms")
		delete(additionalProperties, "termsVersionID")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAgreementStatusResponse struct {
	value *AgreementStatusResponse
	isSet bool
}

func (v NullableAgreementStatusResponse) Get() *AgreementStatusResponse {
	return v.value
}

func (v *NullableAgreementStatusResponse) Set(val *AgreementStatusResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAgreementStatusResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAgreementStatusResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAgreementStatusResponse(val *AgreementStatusResponse) *NullableAgreementStatusResponse {
	return &NullableAgreementStatusResponse{value: val, isSet: true}
}

func (v NullableAgreementStatusResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAgreementStatusResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
