/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
	"fmt"
)

// checks if the SshUserCreateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SshUserCreateRequest{}

// SshUserCreateRequest struct for SshUserCreateRequest
type SshUserCreateRequest struct {
	// At least 3 and upto a maximum of 32 alphanumeric characters. The only special characters allowed are - _
	Username string `json:"username"`
	// At least 6 and upto a maximum of 12 alphanumeric characters. The only special characters allowed are - _ $ @
	Password string `json:"password"`
	// The unique Id of a virtual device.
	DeviceUuid           string `json:"deviceUuid"`
	AdditionalProperties map[string]interface{}
}

type _SshUserCreateRequest SshUserCreateRequest

// NewSshUserCreateRequest instantiates a new SshUserCreateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSshUserCreateRequest(username string, password string, deviceUuid string) *SshUserCreateRequest {
	this := SshUserCreateRequest{}
	this.Username = username
	this.Password = password
	this.DeviceUuid = deviceUuid
	return &this
}

// NewSshUserCreateRequestWithDefaults instantiates a new SshUserCreateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSshUserCreateRequestWithDefaults() *SshUserCreateRequest {
	this := SshUserCreateRequest{}
	return &this
}

// GetUsername returns the Username field value
func (o *SshUserCreateRequest) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *SshUserCreateRequest) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *SshUserCreateRequest) SetUsername(v string) {
	o.Username = v
}

// GetPassword returns the Password field value
func (o *SshUserCreateRequest) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *SshUserCreateRequest) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *SshUserCreateRequest) SetPassword(v string) {
	o.Password = v
}

// GetDeviceUuid returns the DeviceUuid field value
func (o *SshUserCreateRequest) GetDeviceUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeviceUuid
}

// GetDeviceUuidOk returns a tuple with the DeviceUuid field value
// and a boolean to check if the value has been set.
func (o *SshUserCreateRequest) GetDeviceUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceUuid, true
}

// SetDeviceUuid sets field value
func (o *SshUserCreateRequest) SetDeviceUuid(v string) {
	o.DeviceUuid = v
}

func (o SshUserCreateRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SshUserCreateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["username"] = o.Username
	toSerialize["password"] = o.Password
	toSerialize["deviceUuid"] = o.DeviceUuid

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SshUserCreateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"username",
		"password",
		"deviceUuid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSshUserCreateRequest := _SshUserCreateRequest{}

	err = json.Unmarshal(data, &varSshUserCreateRequest)

	if err != nil {
		return err
	}

	*o = SshUserCreateRequest(varSshUserCreateRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "username")
		delete(additionalProperties, "password")
		delete(additionalProperties, "deviceUuid")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSshUserCreateRequest struct {
	value *SshUserCreateRequest
	isSet bool
}

func (v NullableSshUserCreateRequest) Get() *SshUserCreateRequest {
	return v.value
}

func (v *NullableSshUserCreateRequest) Set(val *SshUserCreateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSshUserCreateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSshUserCreateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSshUserCreateRequest(val *SshUserCreateRequest) *NullableSshUserCreateRequest {
	return &NullableSshUserCreateRequest{value: val, isSet: true}
}

func (v NullableSshUserCreateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSshUserCreateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
