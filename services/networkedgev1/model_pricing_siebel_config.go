/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the PricingSiebelConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PricingSiebelConfig{}

// PricingSiebelConfig An object that has the pricing and other details of a Siebel order.
type PricingSiebelConfig struct {
	// The termlength of the Siebel order.
	TermLength *string `json:"termLength,omitempty"`
	// The order number.
	OrderNumber *string `json:"orderNumber,omitempty"`
	// The core selection on Siebel.
	Core *int32 `json:"core,omitempty"`
	// Throughput.
	Throughput *string `json:"throughput,omitempty"`
	// The throughput unit.
	ThroughputUnit *string `json:"ThroughputUnit,omitempty"`
	// The software package code.
	PackageCode *string `json:"packageCode,omitempty"`
	// The additional bandwidth selection on Siebel.
	AdditionalBandwidth  *string                       `json:"additionalBandwidth,omitempty"`
	Primary              *PricingSiebelConfigPrimary   `json:"primary,omitempty"`
	Secondary            *PricingSiebelConfigSecondary `json:"secondary,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PricingSiebelConfig PricingSiebelConfig

// NewPricingSiebelConfig instantiates a new PricingSiebelConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPricingSiebelConfig() *PricingSiebelConfig {
	this := PricingSiebelConfig{}
	return &this
}

// NewPricingSiebelConfigWithDefaults instantiates a new PricingSiebelConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPricingSiebelConfigWithDefaults() *PricingSiebelConfig {
	this := PricingSiebelConfig{}
	return &this
}

// GetTermLength returns the TermLength field value if set, zero value otherwise.
func (o *PricingSiebelConfig) GetTermLength() string {
	if o == nil || IsNil(o.TermLength) {
		var ret string
		return ret
	}
	return *o.TermLength
}

// GetTermLengthOk returns a tuple with the TermLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PricingSiebelConfig) GetTermLengthOk() (*string, bool) {
	if o == nil || IsNil(o.TermLength) {
		return nil, false
	}
	return o.TermLength, true
}

// HasTermLength returns a boolean if a field has been set.
func (o *PricingSiebelConfig) HasTermLength() bool {
	if o != nil && !IsNil(o.TermLength) {
		return true
	}

	return false
}

// SetTermLength gets a reference to the given string and assigns it to the TermLength field.
func (o *PricingSiebelConfig) SetTermLength(v string) {
	o.TermLength = &v
}

// GetOrderNumber returns the OrderNumber field value if set, zero value otherwise.
func (o *PricingSiebelConfig) GetOrderNumber() string {
	if o == nil || IsNil(o.OrderNumber) {
		var ret string
		return ret
	}
	return *o.OrderNumber
}

// GetOrderNumberOk returns a tuple with the OrderNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PricingSiebelConfig) GetOrderNumberOk() (*string, bool) {
	if o == nil || IsNil(o.OrderNumber) {
		return nil, false
	}
	return o.OrderNumber, true
}

// HasOrderNumber returns a boolean if a field has been set.
func (o *PricingSiebelConfig) HasOrderNumber() bool {
	if o != nil && !IsNil(o.OrderNumber) {
		return true
	}

	return false
}

// SetOrderNumber gets a reference to the given string and assigns it to the OrderNumber field.
func (o *PricingSiebelConfig) SetOrderNumber(v string) {
	o.OrderNumber = &v
}

// GetCore returns the Core field value if set, zero value otherwise.
func (o *PricingSiebelConfig) GetCore() int32 {
	if o == nil || IsNil(o.Core) {
		var ret int32
		return ret
	}
	return *o.Core
}

// GetCoreOk returns a tuple with the Core field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PricingSiebelConfig) GetCoreOk() (*int32, bool) {
	if o == nil || IsNil(o.Core) {
		return nil, false
	}
	return o.Core, true
}

// HasCore returns a boolean if a field has been set.
func (o *PricingSiebelConfig) HasCore() bool {
	if o != nil && !IsNil(o.Core) {
		return true
	}

	return false
}

// SetCore gets a reference to the given int32 and assigns it to the Core field.
func (o *PricingSiebelConfig) SetCore(v int32) {
	o.Core = &v
}

// GetThroughput returns the Throughput field value if set, zero value otherwise.
func (o *PricingSiebelConfig) GetThroughput() string {
	if o == nil || IsNil(o.Throughput) {
		var ret string
		return ret
	}
	return *o.Throughput
}

// GetThroughputOk returns a tuple with the Throughput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PricingSiebelConfig) GetThroughputOk() (*string, bool) {
	if o == nil || IsNil(o.Throughput) {
		return nil, false
	}
	return o.Throughput, true
}

// HasThroughput returns a boolean if a field has been set.
func (o *PricingSiebelConfig) HasThroughput() bool {
	if o != nil && !IsNil(o.Throughput) {
		return true
	}

	return false
}

// SetThroughput gets a reference to the given string and assigns it to the Throughput field.
func (o *PricingSiebelConfig) SetThroughput(v string) {
	o.Throughput = &v
}

// GetThroughputUnit returns the ThroughputUnit field value if set, zero value otherwise.
func (o *PricingSiebelConfig) GetThroughputUnit() string {
	if o == nil || IsNil(o.ThroughputUnit) {
		var ret string
		return ret
	}
	return *o.ThroughputUnit
}

// GetThroughputUnitOk returns a tuple with the ThroughputUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PricingSiebelConfig) GetThroughputUnitOk() (*string, bool) {
	if o == nil || IsNil(o.ThroughputUnit) {
		return nil, false
	}
	return o.ThroughputUnit, true
}

// HasThroughputUnit returns a boolean if a field has been set.
func (o *PricingSiebelConfig) HasThroughputUnit() bool {
	if o != nil && !IsNil(o.ThroughputUnit) {
		return true
	}

	return false
}

// SetThroughputUnit gets a reference to the given string and assigns it to the ThroughputUnit field.
func (o *PricingSiebelConfig) SetThroughputUnit(v string) {
	o.ThroughputUnit = &v
}

// GetPackageCode returns the PackageCode field value if set, zero value otherwise.
func (o *PricingSiebelConfig) GetPackageCode() string {
	if o == nil || IsNil(o.PackageCode) {
		var ret string
		return ret
	}
	return *o.PackageCode
}

// GetPackageCodeOk returns a tuple with the PackageCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PricingSiebelConfig) GetPackageCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PackageCode) {
		return nil, false
	}
	return o.PackageCode, true
}

// HasPackageCode returns a boolean if a field has been set.
func (o *PricingSiebelConfig) HasPackageCode() bool {
	if o != nil && !IsNil(o.PackageCode) {
		return true
	}

	return false
}

// SetPackageCode gets a reference to the given string and assigns it to the PackageCode field.
func (o *PricingSiebelConfig) SetPackageCode(v string) {
	o.PackageCode = &v
}

// GetAdditionalBandwidth returns the AdditionalBandwidth field value if set, zero value otherwise.
func (o *PricingSiebelConfig) GetAdditionalBandwidth() string {
	if o == nil || IsNil(o.AdditionalBandwidth) {
		var ret string
		return ret
	}
	return *o.AdditionalBandwidth
}

// GetAdditionalBandwidthOk returns a tuple with the AdditionalBandwidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PricingSiebelConfig) GetAdditionalBandwidthOk() (*string, bool) {
	if o == nil || IsNil(o.AdditionalBandwidth) {
		return nil, false
	}
	return o.AdditionalBandwidth, true
}

// HasAdditionalBandwidth returns a boolean if a field has been set.
func (o *PricingSiebelConfig) HasAdditionalBandwidth() bool {
	if o != nil && !IsNil(o.AdditionalBandwidth) {
		return true
	}

	return false
}

// SetAdditionalBandwidth gets a reference to the given string and assigns it to the AdditionalBandwidth field.
func (o *PricingSiebelConfig) SetAdditionalBandwidth(v string) {
	o.AdditionalBandwidth = &v
}

// GetPrimary returns the Primary field value if set, zero value otherwise.
func (o *PricingSiebelConfig) GetPrimary() PricingSiebelConfigPrimary {
	if o == nil || IsNil(o.Primary) {
		var ret PricingSiebelConfigPrimary
		return ret
	}
	return *o.Primary
}

// GetPrimaryOk returns a tuple with the Primary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PricingSiebelConfig) GetPrimaryOk() (*PricingSiebelConfigPrimary, bool) {
	if o == nil || IsNil(o.Primary) {
		return nil, false
	}
	return o.Primary, true
}

// HasPrimary returns a boolean if a field has been set.
func (o *PricingSiebelConfig) HasPrimary() bool {
	if o != nil && !IsNil(o.Primary) {
		return true
	}

	return false
}

// SetPrimary gets a reference to the given PricingSiebelConfigPrimary and assigns it to the Primary field.
func (o *PricingSiebelConfig) SetPrimary(v PricingSiebelConfigPrimary) {
	o.Primary = &v
}

// GetSecondary returns the Secondary field value if set, zero value otherwise.
func (o *PricingSiebelConfig) GetSecondary() PricingSiebelConfigSecondary {
	if o == nil || IsNil(o.Secondary) {
		var ret PricingSiebelConfigSecondary
		return ret
	}
	return *o.Secondary
}

// GetSecondaryOk returns a tuple with the Secondary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PricingSiebelConfig) GetSecondaryOk() (*PricingSiebelConfigSecondary, bool) {
	if o == nil || IsNil(o.Secondary) {
		return nil, false
	}
	return o.Secondary, true
}

// HasSecondary returns a boolean if a field has been set.
func (o *PricingSiebelConfig) HasSecondary() bool {
	if o != nil && !IsNil(o.Secondary) {
		return true
	}

	return false
}

// SetSecondary gets a reference to the given PricingSiebelConfigSecondary and assigns it to the Secondary field.
func (o *PricingSiebelConfig) SetSecondary(v PricingSiebelConfigSecondary) {
	o.Secondary = &v
}

func (o PricingSiebelConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PricingSiebelConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TermLength) {
		toSerialize["termLength"] = o.TermLength
	}
	if !IsNil(o.OrderNumber) {
		toSerialize["orderNumber"] = o.OrderNumber
	}
	if !IsNil(o.Core) {
		toSerialize["core"] = o.Core
	}
	if !IsNil(o.Throughput) {
		toSerialize["throughput"] = o.Throughput
	}
	if !IsNil(o.ThroughputUnit) {
		toSerialize["ThroughputUnit"] = o.ThroughputUnit
	}
	if !IsNil(o.PackageCode) {
		toSerialize["packageCode"] = o.PackageCode
	}
	if !IsNil(o.AdditionalBandwidth) {
		toSerialize["additionalBandwidth"] = o.AdditionalBandwidth
	}
	if !IsNil(o.Primary) {
		toSerialize["primary"] = o.Primary
	}
	if !IsNil(o.Secondary) {
		toSerialize["secondary"] = o.Secondary
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PricingSiebelConfig) UnmarshalJSON(data []byte) (err error) {
	varPricingSiebelConfig := _PricingSiebelConfig{}

	err = json.Unmarshal(data, &varPricingSiebelConfig)

	if err != nil {
		return err
	}

	*o = PricingSiebelConfig(varPricingSiebelConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "termLength")
		delete(additionalProperties, "orderNumber")
		delete(additionalProperties, "core")
		delete(additionalProperties, "throughput")
		delete(additionalProperties, "ThroughputUnit")
		delete(additionalProperties, "packageCode")
		delete(additionalProperties, "additionalBandwidth")
		delete(additionalProperties, "primary")
		delete(additionalProperties, "secondary")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePricingSiebelConfig struct {
	value *PricingSiebelConfig
	isSet bool
}

func (v NullablePricingSiebelConfig) Get() *PricingSiebelConfig {
	return v.value
}

func (v *NullablePricingSiebelConfig) Set(val *PricingSiebelConfig) {
	v.value = val
	v.isSet = true
}

func (v NullablePricingSiebelConfig) IsSet() bool {
	return v.isSet
}

func (v *NullablePricingSiebelConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePricingSiebelConfig(val *PricingSiebelConfig) *NullablePricingSiebelConfig {
	return &NullablePricingSiebelConfig{value: val, isSet: true}
}

func (v NullablePricingSiebelConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePricingSiebelConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
