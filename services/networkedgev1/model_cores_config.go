/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the CoresConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoresConfig{}

// CoresConfig struct for CoresConfig
type CoresConfig struct {
	// The number of cores.
	Core *int32 `json:"core,omitempty"`
	// The amount of memory.
	Memory *int32 `json:"memory,omitempty"`
	// The unit of memory.
	Unit *string `json:"unit,omitempty"`
	// Small, medium or large.
	Flavor *string `json:"flavor,omitempty"`
	// An array that has all the software packages and throughput options.
	PackageCodes []PackageCodes `json:"packageCodes,omitempty"`
	// Whether or not this core is supported.
	Supported *bool `json:"supported,omitempty"`
	// Tier is relevant only for Cisco 8000V devices
	Tier                 *int32 `json:"tier,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CoresConfig CoresConfig

// NewCoresConfig instantiates a new CoresConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoresConfig() *CoresConfig {
	this := CoresConfig{}
	return &this
}

// NewCoresConfigWithDefaults instantiates a new CoresConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoresConfigWithDefaults() *CoresConfig {
	this := CoresConfig{}
	return &this
}

// GetCore returns the Core field value if set, zero value otherwise.
func (o *CoresConfig) GetCore() int32 {
	if o == nil || IsNil(o.Core) {
		var ret int32
		return ret
	}
	return *o.Core
}

// GetCoreOk returns a tuple with the Core field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoresConfig) GetCoreOk() (*int32, bool) {
	if o == nil || IsNil(o.Core) {
		return nil, false
	}
	return o.Core, true
}

// HasCore returns a boolean if a field has been set.
func (o *CoresConfig) HasCore() bool {
	if o != nil && !IsNil(o.Core) {
		return true
	}

	return false
}

// SetCore gets a reference to the given int32 and assigns it to the Core field.
func (o *CoresConfig) SetCore(v int32) {
	o.Core = &v
}

// GetMemory returns the Memory field value if set, zero value otherwise.
func (o *CoresConfig) GetMemory() int32 {
	if o == nil || IsNil(o.Memory) {
		var ret int32
		return ret
	}
	return *o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoresConfig) GetMemoryOk() (*int32, bool) {
	if o == nil || IsNil(o.Memory) {
		return nil, false
	}
	return o.Memory, true
}

// HasMemory returns a boolean if a field has been set.
func (o *CoresConfig) HasMemory() bool {
	if o != nil && !IsNil(o.Memory) {
		return true
	}

	return false
}

// SetMemory gets a reference to the given int32 and assigns it to the Memory field.
func (o *CoresConfig) SetMemory(v int32) {
	o.Memory = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *CoresConfig) GetUnit() string {
	if o == nil || IsNil(o.Unit) {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoresConfig) GetUnitOk() (*string, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *CoresConfig) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *CoresConfig) SetUnit(v string) {
	o.Unit = &v
}

// GetFlavor returns the Flavor field value if set, zero value otherwise.
func (o *CoresConfig) GetFlavor() string {
	if o == nil || IsNil(o.Flavor) {
		var ret string
		return ret
	}
	return *o.Flavor
}

// GetFlavorOk returns a tuple with the Flavor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoresConfig) GetFlavorOk() (*string, bool) {
	if o == nil || IsNil(o.Flavor) {
		return nil, false
	}
	return o.Flavor, true
}

// HasFlavor returns a boolean if a field has been set.
func (o *CoresConfig) HasFlavor() bool {
	if o != nil && !IsNil(o.Flavor) {
		return true
	}

	return false
}

// SetFlavor gets a reference to the given string and assigns it to the Flavor field.
func (o *CoresConfig) SetFlavor(v string) {
	o.Flavor = &v
}

// GetPackageCodes returns the PackageCodes field value if set, zero value otherwise.
func (o *CoresConfig) GetPackageCodes() []PackageCodes {
	if o == nil || IsNil(o.PackageCodes) {
		var ret []PackageCodes
		return ret
	}
	return o.PackageCodes
}

// GetPackageCodesOk returns a tuple with the PackageCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoresConfig) GetPackageCodesOk() ([]PackageCodes, bool) {
	if o == nil || IsNil(o.PackageCodes) {
		return nil, false
	}
	return o.PackageCodes, true
}

// HasPackageCodes returns a boolean if a field has been set.
func (o *CoresConfig) HasPackageCodes() bool {
	if o != nil && !IsNil(o.PackageCodes) {
		return true
	}

	return false
}

// SetPackageCodes gets a reference to the given []PackageCodes and assigns it to the PackageCodes field.
func (o *CoresConfig) SetPackageCodes(v []PackageCodes) {
	o.PackageCodes = v
}

// GetSupported returns the Supported field value if set, zero value otherwise.
func (o *CoresConfig) GetSupported() bool {
	if o == nil || IsNil(o.Supported) {
		var ret bool
		return ret
	}
	return *o.Supported
}

// GetSupportedOk returns a tuple with the Supported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoresConfig) GetSupportedOk() (*bool, bool) {
	if o == nil || IsNil(o.Supported) {
		return nil, false
	}
	return o.Supported, true
}

// HasSupported returns a boolean if a field has been set.
func (o *CoresConfig) HasSupported() bool {
	if o != nil && !IsNil(o.Supported) {
		return true
	}

	return false
}

// SetSupported gets a reference to the given bool and assigns it to the Supported field.
func (o *CoresConfig) SetSupported(v bool) {
	o.Supported = &v
}

// GetTier returns the Tier field value if set, zero value otherwise.
func (o *CoresConfig) GetTier() int32 {
	if o == nil || IsNil(o.Tier) {
		var ret int32
		return ret
	}
	return *o.Tier
}

// GetTierOk returns a tuple with the Tier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoresConfig) GetTierOk() (*int32, bool) {
	if o == nil || IsNil(o.Tier) {
		return nil, false
	}
	return o.Tier, true
}

// HasTier returns a boolean if a field has been set.
func (o *CoresConfig) HasTier() bool {
	if o != nil && !IsNil(o.Tier) {
		return true
	}

	return false
}

// SetTier gets a reference to the given int32 and assigns it to the Tier field.
func (o *CoresConfig) SetTier(v int32) {
	o.Tier = &v
}

func (o CoresConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoresConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Core) {
		toSerialize["core"] = o.Core
	}
	if !IsNil(o.Memory) {
		toSerialize["memory"] = o.Memory
	}
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	if !IsNil(o.Flavor) {
		toSerialize["flavor"] = o.Flavor
	}
	if !IsNil(o.PackageCodes) {
		toSerialize["packageCodes"] = o.PackageCodes
	}
	if !IsNil(o.Supported) {
		toSerialize["supported"] = o.Supported
	}
	if !IsNil(o.Tier) {
		toSerialize["tier"] = o.Tier
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CoresConfig) UnmarshalJSON(data []byte) (err error) {
	varCoresConfig := _CoresConfig{}

	err = json.Unmarshal(data, &varCoresConfig)

	if err != nil {
		return err
	}

	*o = CoresConfig(varCoresConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "core")
		delete(additionalProperties, "memory")
		delete(additionalProperties, "unit")
		delete(additionalProperties, "flavor")
		delete(additionalProperties, "packageCodes")
		delete(additionalProperties, "supported")
		delete(additionalProperties, "tier")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCoresConfig struct {
	value *CoresConfig
	isSet bool
}

func (v NullableCoresConfig) Get() *CoresConfig {
	return v.value
}

func (v *NullableCoresConfig) Set(val *CoresConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableCoresConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableCoresConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoresConfig(val *CoresConfig) *NullableCoresConfig {
	return &NullableCoresConfig{value: val, isSet: true}
}

func (v NullableCoresConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoresConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
