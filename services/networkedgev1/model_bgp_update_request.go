/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the BgpUpdateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BgpUpdateRequest{}

// BgpUpdateRequest struct for BgpUpdateRequest
type BgpUpdateRequest struct {
	// Authentication Key
	AuthenticationKey *string `json:"authenticationKey,omitempty"`
	// Local ASN
	LocalAsn *int64 `json:"localAsn,omitempty"`
	// Local IP Address with subnet
	LocalIpAddress *string `json:"localIpAddress,omitempty"`
	// Remote ASN
	RemoteAsn *int64 `json:"remoteAsn,omitempty"`
	// Remote IP Address
	RemoteIpAddress      *string `json:"remoteIpAddress,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _BgpUpdateRequest BgpUpdateRequest

// NewBgpUpdateRequest instantiates a new BgpUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBgpUpdateRequest() *BgpUpdateRequest {
	this := BgpUpdateRequest{}
	return &this
}

// NewBgpUpdateRequestWithDefaults instantiates a new BgpUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBgpUpdateRequestWithDefaults() *BgpUpdateRequest {
	this := BgpUpdateRequest{}
	return &this
}

// GetAuthenticationKey returns the AuthenticationKey field value if set, zero value otherwise.
func (o *BgpUpdateRequest) GetAuthenticationKey() string {
	if o == nil || IsNil(o.AuthenticationKey) {
		var ret string
		return ret
	}
	return *o.AuthenticationKey
}

// GetAuthenticationKeyOk returns a tuple with the AuthenticationKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpUpdateRequest) GetAuthenticationKeyOk() (*string, bool) {
	if o == nil || IsNil(o.AuthenticationKey) {
		return nil, false
	}
	return o.AuthenticationKey, true
}

// HasAuthenticationKey returns a boolean if a field has been set.
func (o *BgpUpdateRequest) HasAuthenticationKey() bool {
	if o != nil && !IsNil(o.AuthenticationKey) {
		return true
	}

	return false
}

// SetAuthenticationKey gets a reference to the given string and assigns it to the AuthenticationKey field.
func (o *BgpUpdateRequest) SetAuthenticationKey(v string) {
	o.AuthenticationKey = &v
}

// GetLocalAsn returns the LocalAsn field value if set, zero value otherwise.
func (o *BgpUpdateRequest) GetLocalAsn() int64 {
	if o == nil || IsNil(o.LocalAsn) {
		var ret int64
		return ret
	}
	return *o.LocalAsn
}

// GetLocalAsnOk returns a tuple with the LocalAsn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpUpdateRequest) GetLocalAsnOk() (*int64, bool) {
	if o == nil || IsNil(o.LocalAsn) {
		return nil, false
	}
	return o.LocalAsn, true
}

// HasLocalAsn returns a boolean if a field has been set.
func (o *BgpUpdateRequest) HasLocalAsn() bool {
	if o != nil && !IsNil(o.LocalAsn) {
		return true
	}

	return false
}

// SetLocalAsn gets a reference to the given int64 and assigns it to the LocalAsn field.
func (o *BgpUpdateRequest) SetLocalAsn(v int64) {
	o.LocalAsn = &v
}

// GetLocalIpAddress returns the LocalIpAddress field value if set, zero value otherwise.
func (o *BgpUpdateRequest) GetLocalIpAddress() string {
	if o == nil || IsNil(o.LocalIpAddress) {
		var ret string
		return ret
	}
	return *o.LocalIpAddress
}

// GetLocalIpAddressOk returns a tuple with the LocalIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpUpdateRequest) GetLocalIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.LocalIpAddress) {
		return nil, false
	}
	return o.LocalIpAddress, true
}

// HasLocalIpAddress returns a boolean if a field has been set.
func (o *BgpUpdateRequest) HasLocalIpAddress() bool {
	if o != nil && !IsNil(o.LocalIpAddress) {
		return true
	}

	return false
}

// SetLocalIpAddress gets a reference to the given string and assigns it to the LocalIpAddress field.
func (o *BgpUpdateRequest) SetLocalIpAddress(v string) {
	o.LocalIpAddress = &v
}

// GetRemoteAsn returns the RemoteAsn field value if set, zero value otherwise.
func (o *BgpUpdateRequest) GetRemoteAsn() int64 {
	if o == nil || IsNil(o.RemoteAsn) {
		var ret int64
		return ret
	}
	return *o.RemoteAsn
}

// GetRemoteAsnOk returns a tuple with the RemoteAsn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpUpdateRequest) GetRemoteAsnOk() (*int64, bool) {
	if o == nil || IsNil(o.RemoteAsn) {
		return nil, false
	}
	return o.RemoteAsn, true
}

// HasRemoteAsn returns a boolean if a field has been set.
func (o *BgpUpdateRequest) HasRemoteAsn() bool {
	if o != nil && !IsNil(o.RemoteAsn) {
		return true
	}

	return false
}

// SetRemoteAsn gets a reference to the given int64 and assigns it to the RemoteAsn field.
func (o *BgpUpdateRequest) SetRemoteAsn(v int64) {
	o.RemoteAsn = &v
}

// GetRemoteIpAddress returns the RemoteIpAddress field value if set, zero value otherwise.
func (o *BgpUpdateRequest) GetRemoteIpAddress() string {
	if o == nil || IsNil(o.RemoteIpAddress) {
		var ret string
		return ret
	}
	return *o.RemoteIpAddress
}

// GetRemoteIpAddressOk returns a tuple with the RemoteIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpUpdateRequest) GetRemoteIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.RemoteIpAddress) {
		return nil, false
	}
	return o.RemoteIpAddress, true
}

// HasRemoteIpAddress returns a boolean if a field has been set.
func (o *BgpUpdateRequest) HasRemoteIpAddress() bool {
	if o != nil && !IsNil(o.RemoteIpAddress) {
		return true
	}

	return false
}

// SetRemoteIpAddress gets a reference to the given string and assigns it to the RemoteIpAddress field.
func (o *BgpUpdateRequest) SetRemoteIpAddress(v string) {
	o.RemoteIpAddress = &v
}

func (o BgpUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BgpUpdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuthenticationKey) {
		toSerialize["authenticationKey"] = o.AuthenticationKey
	}
	if !IsNil(o.LocalAsn) {
		toSerialize["localAsn"] = o.LocalAsn
	}
	if !IsNil(o.LocalIpAddress) {
		toSerialize["localIpAddress"] = o.LocalIpAddress
	}
	if !IsNil(o.RemoteAsn) {
		toSerialize["remoteAsn"] = o.RemoteAsn
	}
	if !IsNil(o.RemoteIpAddress) {
		toSerialize["remoteIpAddress"] = o.RemoteIpAddress
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BgpUpdateRequest) UnmarshalJSON(data []byte) (err error) {
	varBgpUpdateRequest := _BgpUpdateRequest{}

	err = json.Unmarshal(data, &varBgpUpdateRequest)

	if err != nil {
		return err
	}

	*o = BgpUpdateRequest(varBgpUpdateRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "authenticationKey")
		delete(additionalProperties, "localAsn")
		delete(additionalProperties, "localIpAddress")
		delete(additionalProperties, "remoteAsn")
		delete(additionalProperties, "remoteIpAddress")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBgpUpdateRequest struct {
	value *BgpUpdateRequest
	isSet bool
}

func (v NullableBgpUpdateRequest) Get() *BgpUpdateRequest {
	return v.value
}

func (v *NullableBgpUpdateRequest) Set(val *BgpUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableBgpUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableBgpUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBgpUpdateRequest(val *BgpUpdateRequest) *NullableBgpUpdateRequest {
	return &NullableBgpUpdateRequest{value: val, isSet: true}
}

func (v NullableBgpUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBgpUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
