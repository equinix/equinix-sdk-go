/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
	"fmt"
)

// JsonNodeNodeType the model 'JsonNodeNodeType'
type JsonNodeNodeType string

// List of JsonNode_nodeType
const (
	JSONNODENODETYPE_ARRAY   JsonNodeNodeType = "ARRAY"
	JSONNODENODETYPE_BINARY  JsonNodeNodeType = "BINARY"
	JSONNODENODETYPE_BOOLEAN JsonNodeNodeType = "BOOLEAN"
	JSONNODENODETYPE_MISSING JsonNodeNodeType = "MISSING"
	JSONNODENODETYPE_NULL    JsonNodeNodeType = "NULL"
	JSONNODENODETYPE_NUMBER  JsonNodeNodeType = "NUMBER"
	JSONNODENODETYPE_OBJECT  JsonNodeNodeType = "OBJECT"
	JSONNODENODETYPE_POJO    JsonNodeNodeType = "POJO"
	JSONNODENODETYPE_STRING  JsonNodeNodeType = "STRING"
)

// All allowed values of JsonNodeNodeType enum
var AllowedJsonNodeNodeTypeEnumValues = []JsonNodeNodeType{
	"ARRAY",
	"BINARY",
	"BOOLEAN",
	"MISSING",
	"NULL",
	"NUMBER",
	"OBJECT",
	"POJO",
	"STRING",
}

func (v *JsonNodeNodeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JsonNodeNodeType(value)
	for _, existing := range AllowedJsonNodeNodeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JsonNodeNodeType", value)
}

// NewJsonNodeNodeTypeFromValue returns a pointer to a valid JsonNodeNodeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJsonNodeNodeTypeFromValue(v string) (*JsonNodeNodeType, error) {
	ev := JsonNodeNodeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JsonNodeNodeType: valid values are %v", v, AllowedJsonNodeNodeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JsonNodeNodeType) IsValid() bool {
	for _, existing := range AllowedJsonNodeNodeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to JsonNode_nodeType value
func (v JsonNodeNodeType) Ptr() *JsonNodeNodeType {
	return &v
}

type NullableJsonNodeNodeType struct {
	value *JsonNodeNodeType
	isSet bool
}

func (v NullableJsonNodeNodeType) Get() *JsonNodeNodeType {
	return v.value
}

func (v *NullableJsonNodeNodeType) Set(val *JsonNodeNodeType) {
	v.value = val
	v.isSet = true
}

func (v NullableJsonNodeNodeType) IsSet() bool {
	return v.isSet
}

func (v *NullableJsonNodeNodeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJsonNodeNodeType(val *JsonNodeNodeType) *NullableJsonNodeNodeType {
	return &NullableJsonNodeNodeType{value: val, isSet: true}
}

func (v NullableJsonNodeNodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJsonNodeNodeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
