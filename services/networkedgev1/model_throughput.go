/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the Throughput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Throughput{}

// Throughput struct for Throughput
type Throughput struct {
	Throughput     *int32  `json:"throughput,omitempty"`
	ThroughputUnit *string `json:"throughputUnit,omitempty"`
	// Metros where the license is available
	MetroCodes           []string `json:"metroCodes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Throughput Throughput

// NewThroughput instantiates a new Throughput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThroughput() *Throughput {
	this := Throughput{}
	return &this
}

// NewThroughputWithDefaults instantiates a new Throughput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThroughputWithDefaults() *Throughput {
	this := Throughput{}
	return &this
}

// GetThroughput returns the Throughput field value if set, zero value otherwise.
func (o *Throughput) GetThroughput() int32 {
	if o == nil || IsNil(o.Throughput) {
		var ret int32
		return ret
	}
	return *o.Throughput
}

// GetThroughputOk returns a tuple with the Throughput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Throughput) GetThroughputOk() (*int32, bool) {
	if o == nil || IsNil(o.Throughput) {
		return nil, false
	}
	return o.Throughput, true
}

// HasThroughput returns a boolean if a field has been set.
func (o *Throughput) HasThroughput() bool {
	if o != nil && !IsNil(o.Throughput) {
		return true
	}

	return false
}

// SetThroughput gets a reference to the given int32 and assigns it to the Throughput field.
func (o *Throughput) SetThroughput(v int32) {
	o.Throughput = &v
}

// GetThroughputUnit returns the ThroughputUnit field value if set, zero value otherwise.
func (o *Throughput) GetThroughputUnit() string {
	if o == nil || IsNil(o.ThroughputUnit) {
		var ret string
		return ret
	}
	return *o.ThroughputUnit
}

// GetThroughputUnitOk returns a tuple with the ThroughputUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Throughput) GetThroughputUnitOk() (*string, bool) {
	if o == nil || IsNil(o.ThroughputUnit) {
		return nil, false
	}
	return o.ThroughputUnit, true
}

// HasThroughputUnit returns a boolean if a field has been set.
func (o *Throughput) HasThroughputUnit() bool {
	if o != nil && !IsNil(o.ThroughputUnit) {
		return true
	}

	return false
}

// SetThroughputUnit gets a reference to the given string and assigns it to the ThroughputUnit field.
func (o *Throughput) SetThroughputUnit(v string) {
	o.ThroughputUnit = &v
}

// GetMetroCodes returns the MetroCodes field value if set, zero value otherwise.
func (o *Throughput) GetMetroCodes() []string {
	if o == nil || IsNil(o.MetroCodes) {
		var ret []string
		return ret
	}
	return o.MetroCodes
}

// GetMetroCodesOk returns a tuple with the MetroCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Throughput) GetMetroCodesOk() ([]string, bool) {
	if o == nil || IsNil(o.MetroCodes) {
		return nil, false
	}
	return o.MetroCodes, true
}

// HasMetroCodes returns a boolean if a field has been set.
func (o *Throughput) HasMetroCodes() bool {
	if o != nil && !IsNil(o.MetroCodes) {
		return true
	}

	return false
}

// SetMetroCodes gets a reference to the given []string and assigns it to the MetroCodes field.
func (o *Throughput) SetMetroCodes(v []string) {
	o.MetroCodes = v
}

func (o Throughput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Throughput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Throughput) {
		toSerialize["throughput"] = o.Throughput
	}
	if !IsNil(o.ThroughputUnit) {
		toSerialize["throughputUnit"] = o.ThroughputUnit
	}
	if !IsNil(o.MetroCodes) {
		toSerialize["metroCodes"] = o.MetroCodes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Throughput) UnmarshalJSON(data []byte) (err error) {
	varThroughput := _Throughput{}

	err = json.Unmarshal(data, &varThroughput)

	if err != nil {
		return err
	}

	*o = Throughput(varThroughput)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "throughput")
		delete(additionalProperties, "throughputUnit")
		delete(additionalProperties, "metroCodes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableThroughput struct {
	value *Throughput
	isSet bool
}

func (v NullableThroughput) Get() *Throughput {
	return v.value
}

func (v *NullableThroughput) Set(val *Throughput) {
	v.value = val
	v.isSet = true
}

func (v NullableThroughput) IsSet() bool {
	return v.isSet
}

func (v *NullableThroughput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThroughput(val *Throughput) *NullableThroughput {
	return &NullableThroughput{value: val, isSet: true}
}

func (v NullableThroughput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThroughput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
