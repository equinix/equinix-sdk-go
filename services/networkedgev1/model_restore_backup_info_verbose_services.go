/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the RestoreBackupInfoVerboseServices type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestoreBackupInfoVerboseServices{}

// RestoreBackupInfoVerboseServices An object that has the analysis of services associated with the backup or services added to the device since the backup.
type RestoreBackupInfoVerboseServices struct {
	ServiceName          *ServiceInfo `json:"service_name,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RestoreBackupInfoVerboseServices RestoreBackupInfoVerboseServices

// NewRestoreBackupInfoVerboseServices instantiates a new RestoreBackupInfoVerboseServices object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestoreBackupInfoVerboseServices() *RestoreBackupInfoVerboseServices {
	this := RestoreBackupInfoVerboseServices{}
	return &this
}

// NewRestoreBackupInfoVerboseServicesWithDefaults instantiates a new RestoreBackupInfoVerboseServices object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestoreBackupInfoVerboseServicesWithDefaults() *RestoreBackupInfoVerboseServices {
	this := RestoreBackupInfoVerboseServices{}
	return &this
}

// GetServiceName returns the ServiceName field value if set, zero value otherwise.
func (o *RestoreBackupInfoVerboseServices) GetServiceName() ServiceInfo {
	if o == nil || IsNil(o.ServiceName) {
		var ret ServiceInfo
		return ret
	}
	return *o.ServiceName
}

// GetServiceNameOk returns a tuple with the ServiceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreBackupInfoVerboseServices) GetServiceNameOk() (*ServiceInfo, bool) {
	if o == nil || IsNil(o.ServiceName) {
		return nil, false
	}
	return o.ServiceName, true
}

// HasServiceName returns a boolean if a field has been set.
func (o *RestoreBackupInfoVerboseServices) HasServiceName() bool {
	if o != nil && !IsNil(o.ServiceName) {
		return true
	}

	return false
}

// SetServiceName gets a reference to the given ServiceInfo and assigns it to the ServiceName field.
func (o *RestoreBackupInfoVerboseServices) SetServiceName(v ServiceInfo) {
	o.ServiceName = &v
}

func (o RestoreBackupInfoVerboseServices) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestoreBackupInfoVerboseServices) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ServiceName) {
		toSerialize["service_name"] = o.ServiceName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RestoreBackupInfoVerboseServices) UnmarshalJSON(data []byte) (err error) {
	varRestoreBackupInfoVerboseServices := _RestoreBackupInfoVerboseServices{}

	err = json.Unmarshal(data, &varRestoreBackupInfoVerboseServices)

	if err != nil {
		return err
	}

	*o = RestoreBackupInfoVerboseServices(varRestoreBackupInfoVerboseServices)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "service_name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRestoreBackupInfoVerboseServices struct {
	value *RestoreBackupInfoVerboseServices
	isSet bool
}

func (v NullableRestoreBackupInfoVerboseServices) Get() *RestoreBackupInfoVerboseServices {
	return v.value
}

func (v *NullableRestoreBackupInfoVerboseServices) Set(val *RestoreBackupInfoVerboseServices) {
	v.value = val
	v.isSet = true
}

func (v NullableRestoreBackupInfoVerboseServices) IsSet() bool {
	return v.isSet
}

func (v *NullableRestoreBackupInfoVerboseServices) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestoreBackupInfoVerboseServices(val *RestoreBackupInfoVerboseServices) *NullableRestoreBackupInfoVerboseServices {
	return &NullableRestoreBackupInfoVerboseServices{value: val, isSet: true}
}

func (v NullableRestoreBackupInfoVerboseServices) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestoreBackupInfoVerboseServices) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
