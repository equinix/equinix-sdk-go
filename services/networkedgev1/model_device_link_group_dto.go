/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the DeviceLinkGroupDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceLinkGroupDto{}

// DeviceLinkGroupDto struct for DeviceLinkGroupDto
type DeviceLinkGroupDto struct {
	// Unique Id of the linked group.
	Uuid *string `json:"uuid,omitempty"`
	// The name of the linked group
	GroupName *string `json:"groupName,omitempty"`
	// Subnet of the link group.
	Subnet *string `json:"subnet,omitempty"`
	// Whether the connection is through Fabric's primary or secondary port.
	RedundancyType *string `json:"redundancyType,omitempty"`
	// Status of the linked group
	Status *string `json:"status,omitempty"`
	// Created by username.
	CreatedBy *string `json:"createdBy,omitempty"`
	// Created date.
	CreatedDate     *string `json:"createdDate,omitempty"`
	LastUpdatedBy   *string `json:"lastUpdatedBy,omitempty"`
	LastUpdatedDate *string `json:"lastUpdatedDate,omitempty"`
	// An array of links
	MetroLinks []LinkInfoResponse `json:"metroLinks,omitempty"`
	// An array of metros and the devices in the metros belonging to the group.
	LinkDevices          []LinkDeviceResponse `json:"linkDevices,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DeviceLinkGroupDto DeviceLinkGroupDto

// NewDeviceLinkGroupDto instantiates a new DeviceLinkGroupDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceLinkGroupDto() *DeviceLinkGroupDto {
	this := DeviceLinkGroupDto{}
	return &this
}

// NewDeviceLinkGroupDtoWithDefaults instantiates a new DeviceLinkGroupDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceLinkGroupDtoWithDefaults() *DeviceLinkGroupDto {
	this := DeviceLinkGroupDto{}
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *DeviceLinkGroupDto) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceLinkGroupDto) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *DeviceLinkGroupDto) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *DeviceLinkGroupDto) SetUuid(v string) {
	o.Uuid = &v
}

// GetGroupName returns the GroupName field value if set, zero value otherwise.
func (o *DeviceLinkGroupDto) GetGroupName() string {
	if o == nil || IsNil(o.GroupName) {
		var ret string
		return ret
	}
	return *o.GroupName
}

// GetGroupNameOk returns a tuple with the GroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceLinkGroupDto) GetGroupNameOk() (*string, bool) {
	if o == nil || IsNil(o.GroupName) {
		return nil, false
	}
	return o.GroupName, true
}

// HasGroupName returns a boolean if a field has been set.
func (o *DeviceLinkGroupDto) HasGroupName() bool {
	if o != nil && !IsNil(o.GroupName) {
		return true
	}

	return false
}

// SetGroupName gets a reference to the given string and assigns it to the GroupName field.
func (o *DeviceLinkGroupDto) SetGroupName(v string) {
	o.GroupName = &v
}

// GetSubnet returns the Subnet field value if set, zero value otherwise.
func (o *DeviceLinkGroupDto) GetSubnet() string {
	if o == nil || IsNil(o.Subnet) {
		var ret string
		return ret
	}
	return *o.Subnet
}

// GetSubnetOk returns a tuple with the Subnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceLinkGroupDto) GetSubnetOk() (*string, bool) {
	if o == nil || IsNil(o.Subnet) {
		return nil, false
	}
	return o.Subnet, true
}

// HasSubnet returns a boolean if a field has been set.
func (o *DeviceLinkGroupDto) HasSubnet() bool {
	if o != nil && !IsNil(o.Subnet) {
		return true
	}

	return false
}

// SetSubnet gets a reference to the given string and assigns it to the Subnet field.
func (o *DeviceLinkGroupDto) SetSubnet(v string) {
	o.Subnet = &v
}

// GetRedundancyType returns the RedundancyType field value if set, zero value otherwise.
func (o *DeviceLinkGroupDto) GetRedundancyType() string {
	if o == nil || IsNil(o.RedundancyType) {
		var ret string
		return ret
	}
	return *o.RedundancyType
}

// GetRedundancyTypeOk returns a tuple with the RedundancyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceLinkGroupDto) GetRedundancyTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RedundancyType) {
		return nil, false
	}
	return o.RedundancyType, true
}

// HasRedundancyType returns a boolean if a field has been set.
func (o *DeviceLinkGroupDto) HasRedundancyType() bool {
	if o != nil && !IsNil(o.RedundancyType) {
		return true
	}

	return false
}

// SetRedundancyType gets a reference to the given string and assigns it to the RedundancyType field.
func (o *DeviceLinkGroupDto) SetRedundancyType(v string) {
	o.RedundancyType = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DeviceLinkGroupDto) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceLinkGroupDto) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DeviceLinkGroupDto) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DeviceLinkGroupDto) SetStatus(v string) {
	o.Status = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *DeviceLinkGroupDto) GetCreatedBy() string {
	if o == nil || IsNil(o.CreatedBy) {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceLinkGroupDto) GetCreatedByOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *DeviceLinkGroupDto) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *DeviceLinkGroupDto) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

// GetCreatedDate returns the CreatedDate field value if set, zero value otherwise.
func (o *DeviceLinkGroupDto) GetCreatedDate() string {
	if o == nil || IsNil(o.CreatedDate) {
		var ret string
		return ret
	}
	return *o.CreatedDate
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceLinkGroupDto) GetCreatedDateOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedDate) {
		return nil, false
	}
	return o.CreatedDate, true
}

// HasCreatedDate returns a boolean if a field has been set.
func (o *DeviceLinkGroupDto) HasCreatedDate() bool {
	if o != nil && !IsNil(o.CreatedDate) {
		return true
	}

	return false
}

// SetCreatedDate gets a reference to the given string and assigns it to the CreatedDate field.
func (o *DeviceLinkGroupDto) SetCreatedDate(v string) {
	o.CreatedDate = &v
}

// GetLastUpdatedBy returns the LastUpdatedBy field value if set, zero value otherwise.
func (o *DeviceLinkGroupDto) GetLastUpdatedBy() string {
	if o == nil || IsNil(o.LastUpdatedBy) {
		var ret string
		return ret
	}
	return *o.LastUpdatedBy
}

// GetLastUpdatedByOk returns a tuple with the LastUpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceLinkGroupDto) GetLastUpdatedByOk() (*string, bool) {
	if o == nil || IsNil(o.LastUpdatedBy) {
		return nil, false
	}
	return o.LastUpdatedBy, true
}

// HasLastUpdatedBy returns a boolean if a field has been set.
func (o *DeviceLinkGroupDto) HasLastUpdatedBy() bool {
	if o != nil && !IsNil(o.LastUpdatedBy) {
		return true
	}

	return false
}

// SetLastUpdatedBy gets a reference to the given string and assigns it to the LastUpdatedBy field.
func (o *DeviceLinkGroupDto) SetLastUpdatedBy(v string) {
	o.LastUpdatedBy = &v
}

// GetLastUpdatedDate returns the LastUpdatedDate field value if set, zero value otherwise.
func (o *DeviceLinkGroupDto) GetLastUpdatedDate() string {
	if o == nil || IsNil(o.LastUpdatedDate) {
		var ret string
		return ret
	}
	return *o.LastUpdatedDate
}

// GetLastUpdatedDateOk returns a tuple with the LastUpdatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceLinkGroupDto) GetLastUpdatedDateOk() (*string, bool) {
	if o == nil || IsNil(o.LastUpdatedDate) {
		return nil, false
	}
	return o.LastUpdatedDate, true
}

// HasLastUpdatedDate returns a boolean if a field has been set.
func (o *DeviceLinkGroupDto) HasLastUpdatedDate() bool {
	if o != nil && !IsNil(o.LastUpdatedDate) {
		return true
	}

	return false
}

// SetLastUpdatedDate gets a reference to the given string and assigns it to the LastUpdatedDate field.
func (o *DeviceLinkGroupDto) SetLastUpdatedDate(v string) {
	o.LastUpdatedDate = &v
}

// GetMetroLinks returns the MetroLinks field value if set, zero value otherwise.
func (o *DeviceLinkGroupDto) GetMetroLinks() []LinkInfoResponse {
	if o == nil || IsNil(o.MetroLinks) {
		var ret []LinkInfoResponse
		return ret
	}
	return o.MetroLinks
}

// GetMetroLinksOk returns a tuple with the MetroLinks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceLinkGroupDto) GetMetroLinksOk() ([]LinkInfoResponse, bool) {
	if o == nil || IsNil(o.MetroLinks) {
		return nil, false
	}
	return o.MetroLinks, true
}

// HasMetroLinks returns a boolean if a field has been set.
func (o *DeviceLinkGroupDto) HasMetroLinks() bool {
	if o != nil && !IsNil(o.MetroLinks) {
		return true
	}

	return false
}

// SetMetroLinks gets a reference to the given []LinkInfoResponse and assigns it to the MetroLinks field.
func (o *DeviceLinkGroupDto) SetMetroLinks(v []LinkInfoResponse) {
	o.MetroLinks = v
}

// GetLinkDevices returns the LinkDevices field value if set, zero value otherwise.
func (o *DeviceLinkGroupDto) GetLinkDevices() []LinkDeviceResponse {
	if o == nil || IsNil(o.LinkDevices) {
		var ret []LinkDeviceResponse
		return ret
	}
	return o.LinkDevices
}

// GetLinkDevicesOk returns a tuple with the LinkDevices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceLinkGroupDto) GetLinkDevicesOk() ([]LinkDeviceResponse, bool) {
	if o == nil || IsNil(o.LinkDevices) {
		return nil, false
	}
	return o.LinkDevices, true
}

// HasLinkDevices returns a boolean if a field has been set.
func (o *DeviceLinkGroupDto) HasLinkDevices() bool {
	if o != nil && !IsNil(o.LinkDevices) {
		return true
	}

	return false
}

// SetLinkDevices gets a reference to the given []LinkDeviceResponse and assigns it to the LinkDevices field.
func (o *DeviceLinkGroupDto) SetLinkDevices(v []LinkDeviceResponse) {
	o.LinkDevices = v
}

func (o DeviceLinkGroupDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceLinkGroupDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.GroupName) {
		toSerialize["groupName"] = o.GroupName
	}
	if !IsNil(o.Subnet) {
		toSerialize["subnet"] = o.Subnet
	}
	if !IsNil(o.RedundancyType) {
		toSerialize["redundancyType"] = o.RedundancyType
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.CreatedDate) {
		toSerialize["createdDate"] = o.CreatedDate
	}
	if !IsNil(o.LastUpdatedBy) {
		toSerialize["lastUpdatedBy"] = o.LastUpdatedBy
	}
	if !IsNil(o.LastUpdatedDate) {
		toSerialize["lastUpdatedDate"] = o.LastUpdatedDate
	}
	if !IsNil(o.MetroLinks) {
		toSerialize["metroLinks"] = o.MetroLinks
	}
	if !IsNil(o.LinkDevices) {
		toSerialize["linkDevices"] = o.LinkDevices
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeviceLinkGroupDto) UnmarshalJSON(data []byte) (err error) {
	varDeviceLinkGroupDto := _DeviceLinkGroupDto{}

	err = json.Unmarshal(data, &varDeviceLinkGroupDto)

	if err != nil {
		return err
	}

	*o = DeviceLinkGroupDto(varDeviceLinkGroupDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "groupName")
		delete(additionalProperties, "subnet")
		delete(additionalProperties, "redundancyType")
		delete(additionalProperties, "status")
		delete(additionalProperties, "createdBy")
		delete(additionalProperties, "createdDate")
		delete(additionalProperties, "lastUpdatedBy")
		delete(additionalProperties, "lastUpdatedDate")
		delete(additionalProperties, "metroLinks")
		delete(additionalProperties, "linkDevices")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeviceLinkGroupDto struct {
	value *DeviceLinkGroupDto
	isSet bool
}

func (v NullableDeviceLinkGroupDto) Get() *DeviceLinkGroupDto {
	return v.value
}

func (v *NullableDeviceLinkGroupDto) Set(val *DeviceLinkGroupDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceLinkGroupDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceLinkGroupDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceLinkGroupDto(val *DeviceLinkGroupDto) *NullableDeviceLinkGroupDto {
	return &NullableDeviceLinkGroupDto{value: val, isSet: true}
}

func (v NullableDeviceLinkGroupDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceLinkGroupDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
