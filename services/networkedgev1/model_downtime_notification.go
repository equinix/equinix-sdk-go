/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the DowntimeNotification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DowntimeNotification{}

// DowntimeNotification struct for DowntimeNotification
type DowntimeNotification struct {
	// Type of notification, whether planned or unplanned.
	NotificationType *string `json:"notificationType,omitempty"`
	// Start of the downtime.
	StartTime *string `json:"startTime,omitempty"`
	// End of the downtime.
	EndTime *string `json:"endTime,omitempty"`
	// An array of services impacted by the downtime.
	ImpactedServices []ImpactedServices `json:"impactedServices,omitempty"`
	// Any additional messages.
	AdditionalMessage    *string `json:"additionalMessage,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DowntimeNotification DowntimeNotification

// NewDowntimeNotification instantiates a new DowntimeNotification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDowntimeNotification() *DowntimeNotification {
	this := DowntimeNotification{}
	return &this
}

// NewDowntimeNotificationWithDefaults instantiates a new DowntimeNotification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDowntimeNotificationWithDefaults() *DowntimeNotification {
	this := DowntimeNotification{}
	return &this
}

// GetNotificationType returns the NotificationType field value if set, zero value otherwise.
func (o *DowntimeNotification) GetNotificationType() string {
	if o == nil || IsNil(o.NotificationType) {
		var ret string
		return ret
	}
	return *o.NotificationType
}

// GetNotificationTypeOk returns a tuple with the NotificationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DowntimeNotification) GetNotificationTypeOk() (*string, bool) {
	if o == nil || IsNil(o.NotificationType) {
		return nil, false
	}
	return o.NotificationType, true
}

// HasNotificationType returns a boolean if a field has been set.
func (o *DowntimeNotification) HasNotificationType() bool {
	if o != nil && !IsNil(o.NotificationType) {
		return true
	}

	return false
}

// SetNotificationType gets a reference to the given string and assigns it to the NotificationType field.
func (o *DowntimeNotification) SetNotificationType(v string) {
	o.NotificationType = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *DowntimeNotification) GetStartTime() string {
	if o == nil || IsNil(o.StartTime) {
		var ret string
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DowntimeNotification) GetStartTimeOk() (*string, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *DowntimeNotification) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given string and assigns it to the StartTime field.
func (o *DowntimeNotification) SetStartTime(v string) {
	o.StartTime = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *DowntimeNotification) GetEndTime() string {
	if o == nil || IsNil(o.EndTime) {
		var ret string
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DowntimeNotification) GetEndTimeOk() (*string, bool) {
	if o == nil || IsNil(o.EndTime) {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *DowntimeNotification) HasEndTime() bool {
	if o != nil && !IsNil(o.EndTime) {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given string and assigns it to the EndTime field.
func (o *DowntimeNotification) SetEndTime(v string) {
	o.EndTime = &v
}

// GetImpactedServices returns the ImpactedServices field value if set, zero value otherwise.
func (o *DowntimeNotification) GetImpactedServices() []ImpactedServices {
	if o == nil || IsNil(o.ImpactedServices) {
		var ret []ImpactedServices
		return ret
	}
	return o.ImpactedServices
}

// GetImpactedServicesOk returns a tuple with the ImpactedServices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DowntimeNotification) GetImpactedServicesOk() ([]ImpactedServices, bool) {
	if o == nil || IsNil(o.ImpactedServices) {
		return nil, false
	}
	return o.ImpactedServices, true
}

// HasImpactedServices returns a boolean if a field has been set.
func (o *DowntimeNotification) HasImpactedServices() bool {
	if o != nil && !IsNil(o.ImpactedServices) {
		return true
	}

	return false
}

// SetImpactedServices gets a reference to the given []ImpactedServices and assigns it to the ImpactedServices field.
func (o *DowntimeNotification) SetImpactedServices(v []ImpactedServices) {
	o.ImpactedServices = v
}

// GetAdditionalMessage returns the AdditionalMessage field value if set, zero value otherwise.
func (o *DowntimeNotification) GetAdditionalMessage() string {
	if o == nil || IsNil(o.AdditionalMessage) {
		var ret string
		return ret
	}
	return *o.AdditionalMessage
}

// GetAdditionalMessageOk returns a tuple with the AdditionalMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DowntimeNotification) GetAdditionalMessageOk() (*string, bool) {
	if o == nil || IsNil(o.AdditionalMessage) {
		return nil, false
	}
	return o.AdditionalMessage, true
}

// HasAdditionalMessage returns a boolean if a field has been set.
func (o *DowntimeNotification) HasAdditionalMessage() bool {
	if o != nil && !IsNil(o.AdditionalMessage) {
		return true
	}

	return false
}

// SetAdditionalMessage gets a reference to the given string and assigns it to the AdditionalMessage field.
func (o *DowntimeNotification) SetAdditionalMessage(v string) {
	o.AdditionalMessage = &v
}

func (o DowntimeNotification) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DowntimeNotification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NotificationType) {
		toSerialize["notificationType"] = o.NotificationType
	}
	if !IsNil(o.StartTime) {
		toSerialize["startTime"] = o.StartTime
	}
	if !IsNil(o.EndTime) {
		toSerialize["endTime"] = o.EndTime
	}
	if !IsNil(o.ImpactedServices) {
		toSerialize["impactedServices"] = o.ImpactedServices
	}
	if !IsNil(o.AdditionalMessage) {
		toSerialize["additionalMessage"] = o.AdditionalMessage
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DowntimeNotification) UnmarshalJSON(data []byte) (err error) {
	varDowntimeNotification := _DowntimeNotification{}

	err = json.Unmarshal(data, &varDowntimeNotification)

	if err != nil {
		return err
	}

	*o = DowntimeNotification(varDowntimeNotification)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "notificationType")
		delete(additionalProperties, "startTime")
		delete(additionalProperties, "endTime")
		delete(additionalProperties, "impactedServices")
		delete(additionalProperties, "additionalMessage")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDowntimeNotification struct {
	value *DowntimeNotification
	isSet bool
}

func (v NullableDowntimeNotification) Get() *DowntimeNotification {
	return v.value
}

func (v *NullableDowntimeNotification) Set(val *DowntimeNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableDowntimeNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableDowntimeNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDowntimeNotification(val *DowntimeNotification) *NullableDowntimeNotification {
	return &NullableDowntimeNotification{value: val, isSet: true}
}

func (v NullableDowntimeNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDowntimeNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
