/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the LinkDeviceResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LinkDeviceResponse{}

// LinkDeviceResponse struct for LinkDeviceResponse
type LinkDeviceResponse struct {
	// A device that is part of the device linked group
	DeviceUuid *string `json:"deviceUuid,omitempty"`
	// Device name
	DeviceName *string `json:"deviceName,omitempty"`
	// Metro Code
	MetroCode *string `json:"metroCode,omitempty"`
	// Name of the metro.
	MetroName      *string `json:"metroName,omitempty"`
	DeviceTypeCode *string `json:"deviceTypeCode,omitempty"`
	Category       *string `json:"category,omitempty"`
	IpAssigned     *string `json:"ipAssigned,omitempty"`
	InterfaceId    *int32  `json:"interfaceId,omitempty"`
	// The status of the device
	Status *string `json:"status,omitempty"`
	// Device management type
	DeviceManagementType *string `json:"deviceManagementType,omitempty"`
	NetworkScope         *string `json:"networkScope,omitempty"`
	// Whether the device is accessible
	IsDeviceAccessible   *bool `json:"isDeviceAccessible,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LinkDeviceResponse LinkDeviceResponse

// NewLinkDeviceResponse instantiates a new LinkDeviceResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinkDeviceResponse() *LinkDeviceResponse {
	this := LinkDeviceResponse{}
	return &this
}

// NewLinkDeviceResponseWithDefaults instantiates a new LinkDeviceResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkDeviceResponseWithDefaults() *LinkDeviceResponse {
	this := LinkDeviceResponse{}
	return &this
}

// GetDeviceUuid returns the DeviceUuid field value if set, zero value otherwise.
func (o *LinkDeviceResponse) GetDeviceUuid() string {
	if o == nil || IsNil(o.DeviceUuid) {
		var ret string
		return ret
	}
	return *o.DeviceUuid
}

// GetDeviceUuidOk returns a tuple with the DeviceUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDeviceResponse) GetDeviceUuidOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceUuid) {
		return nil, false
	}
	return o.DeviceUuid, true
}

// HasDeviceUuid returns a boolean if a field has been set.
func (o *LinkDeviceResponse) HasDeviceUuid() bool {
	if o != nil && !IsNil(o.DeviceUuid) {
		return true
	}

	return false
}

// SetDeviceUuid gets a reference to the given string and assigns it to the DeviceUuid field.
func (o *LinkDeviceResponse) SetDeviceUuid(v string) {
	o.DeviceUuid = &v
}

// GetDeviceName returns the DeviceName field value if set, zero value otherwise.
func (o *LinkDeviceResponse) GetDeviceName() string {
	if o == nil || IsNil(o.DeviceName) {
		var ret string
		return ret
	}
	return *o.DeviceName
}

// GetDeviceNameOk returns a tuple with the DeviceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDeviceResponse) GetDeviceNameOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceName) {
		return nil, false
	}
	return o.DeviceName, true
}

// HasDeviceName returns a boolean if a field has been set.
func (o *LinkDeviceResponse) HasDeviceName() bool {
	if o != nil && !IsNil(o.DeviceName) {
		return true
	}

	return false
}

// SetDeviceName gets a reference to the given string and assigns it to the DeviceName field.
func (o *LinkDeviceResponse) SetDeviceName(v string) {
	o.DeviceName = &v
}

// GetMetroCode returns the MetroCode field value if set, zero value otherwise.
func (o *LinkDeviceResponse) GetMetroCode() string {
	if o == nil || IsNil(o.MetroCode) {
		var ret string
		return ret
	}
	return *o.MetroCode
}

// GetMetroCodeOk returns a tuple with the MetroCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDeviceResponse) GetMetroCodeOk() (*string, bool) {
	if o == nil || IsNil(o.MetroCode) {
		return nil, false
	}
	return o.MetroCode, true
}

// HasMetroCode returns a boolean if a field has been set.
func (o *LinkDeviceResponse) HasMetroCode() bool {
	if o != nil && !IsNil(o.MetroCode) {
		return true
	}

	return false
}

// SetMetroCode gets a reference to the given string and assigns it to the MetroCode field.
func (o *LinkDeviceResponse) SetMetroCode(v string) {
	o.MetroCode = &v
}

// GetMetroName returns the MetroName field value if set, zero value otherwise.
func (o *LinkDeviceResponse) GetMetroName() string {
	if o == nil || IsNil(o.MetroName) {
		var ret string
		return ret
	}
	return *o.MetroName
}

// GetMetroNameOk returns a tuple with the MetroName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDeviceResponse) GetMetroNameOk() (*string, bool) {
	if o == nil || IsNil(o.MetroName) {
		return nil, false
	}
	return o.MetroName, true
}

// HasMetroName returns a boolean if a field has been set.
func (o *LinkDeviceResponse) HasMetroName() bool {
	if o != nil && !IsNil(o.MetroName) {
		return true
	}

	return false
}

// SetMetroName gets a reference to the given string and assigns it to the MetroName field.
func (o *LinkDeviceResponse) SetMetroName(v string) {
	o.MetroName = &v
}

// GetDeviceTypeCode returns the DeviceTypeCode field value if set, zero value otherwise.
func (o *LinkDeviceResponse) GetDeviceTypeCode() string {
	if o == nil || IsNil(o.DeviceTypeCode) {
		var ret string
		return ret
	}
	return *o.DeviceTypeCode
}

// GetDeviceTypeCodeOk returns a tuple with the DeviceTypeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDeviceResponse) GetDeviceTypeCodeOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceTypeCode) {
		return nil, false
	}
	return o.DeviceTypeCode, true
}

// HasDeviceTypeCode returns a boolean if a field has been set.
func (o *LinkDeviceResponse) HasDeviceTypeCode() bool {
	if o != nil && !IsNil(o.DeviceTypeCode) {
		return true
	}

	return false
}

// SetDeviceTypeCode gets a reference to the given string and assigns it to the DeviceTypeCode field.
func (o *LinkDeviceResponse) SetDeviceTypeCode(v string) {
	o.DeviceTypeCode = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *LinkDeviceResponse) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDeviceResponse) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *LinkDeviceResponse) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *LinkDeviceResponse) SetCategory(v string) {
	o.Category = &v
}

// GetIpAssigned returns the IpAssigned field value if set, zero value otherwise.
func (o *LinkDeviceResponse) GetIpAssigned() string {
	if o == nil || IsNil(o.IpAssigned) {
		var ret string
		return ret
	}
	return *o.IpAssigned
}

// GetIpAssignedOk returns a tuple with the IpAssigned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDeviceResponse) GetIpAssignedOk() (*string, bool) {
	if o == nil || IsNil(o.IpAssigned) {
		return nil, false
	}
	return o.IpAssigned, true
}

// HasIpAssigned returns a boolean if a field has been set.
func (o *LinkDeviceResponse) HasIpAssigned() bool {
	if o != nil && !IsNil(o.IpAssigned) {
		return true
	}

	return false
}

// SetIpAssigned gets a reference to the given string and assigns it to the IpAssigned field.
func (o *LinkDeviceResponse) SetIpAssigned(v string) {
	o.IpAssigned = &v
}

// GetInterfaceId returns the InterfaceId field value if set, zero value otherwise.
func (o *LinkDeviceResponse) GetInterfaceId() int32 {
	if o == nil || IsNil(o.InterfaceId) {
		var ret int32
		return ret
	}
	return *o.InterfaceId
}

// GetInterfaceIdOk returns a tuple with the InterfaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDeviceResponse) GetInterfaceIdOk() (*int32, bool) {
	if o == nil || IsNil(o.InterfaceId) {
		return nil, false
	}
	return o.InterfaceId, true
}

// HasInterfaceId returns a boolean if a field has been set.
func (o *LinkDeviceResponse) HasInterfaceId() bool {
	if o != nil && !IsNil(o.InterfaceId) {
		return true
	}

	return false
}

// SetInterfaceId gets a reference to the given int32 and assigns it to the InterfaceId field.
func (o *LinkDeviceResponse) SetInterfaceId(v int32) {
	o.InterfaceId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *LinkDeviceResponse) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDeviceResponse) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *LinkDeviceResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *LinkDeviceResponse) SetStatus(v string) {
	o.Status = &v
}

// GetDeviceManagementType returns the DeviceManagementType field value if set, zero value otherwise.
func (o *LinkDeviceResponse) GetDeviceManagementType() string {
	if o == nil || IsNil(o.DeviceManagementType) {
		var ret string
		return ret
	}
	return *o.DeviceManagementType
}

// GetDeviceManagementTypeOk returns a tuple with the DeviceManagementType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDeviceResponse) GetDeviceManagementTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceManagementType) {
		return nil, false
	}
	return o.DeviceManagementType, true
}

// HasDeviceManagementType returns a boolean if a field has been set.
func (o *LinkDeviceResponse) HasDeviceManagementType() bool {
	if o != nil && !IsNil(o.DeviceManagementType) {
		return true
	}

	return false
}

// SetDeviceManagementType gets a reference to the given string and assigns it to the DeviceManagementType field.
func (o *LinkDeviceResponse) SetDeviceManagementType(v string) {
	o.DeviceManagementType = &v
}

// GetNetworkScope returns the NetworkScope field value if set, zero value otherwise.
func (o *LinkDeviceResponse) GetNetworkScope() string {
	if o == nil || IsNil(o.NetworkScope) {
		var ret string
		return ret
	}
	return *o.NetworkScope
}

// GetNetworkScopeOk returns a tuple with the NetworkScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDeviceResponse) GetNetworkScopeOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkScope) {
		return nil, false
	}
	return o.NetworkScope, true
}

// HasNetworkScope returns a boolean if a field has been set.
func (o *LinkDeviceResponse) HasNetworkScope() bool {
	if o != nil && !IsNil(o.NetworkScope) {
		return true
	}

	return false
}

// SetNetworkScope gets a reference to the given string and assigns it to the NetworkScope field.
func (o *LinkDeviceResponse) SetNetworkScope(v string) {
	o.NetworkScope = &v
}

// GetIsDeviceAccessible returns the IsDeviceAccessible field value if set, zero value otherwise.
func (o *LinkDeviceResponse) GetIsDeviceAccessible() bool {
	if o == nil || IsNil(o.IsDeviceAccessible) {
		var ret bool
		return ret
	}
	return *o.IsDeviceAccessible
}

// GetIsDeviceAccessibleOk returns a tuple with the IsDeviceAccessible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDeviceResponse) GetIsDeviceAccessibleOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDeviceAccessible) {
		return nil, false
	}
	return o.IsDeviceAccessible, true
}

// HasIsDeviceAccessible returns a boolean if a field has been set.
func (o *LinkDeviceResponse) HasIsDeviceAccessible() bool {
	if o != nil && !IsNil(o.IsDeviceAccessible) {
		return true
	}

	return false
}

// SetIsDeviceAccessible gets a reference to the given bool and assigns it to the IsDeviceAccessible field.
func (o *LinkDeviceResponse) SetIsDeviceAccessible(v bool) {
	o.IsDeviceAccessible = &v
}

func (o LinkDeviceResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LinkDeviceResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeviceUuid) {
		toSerialize["deviceUuid"] = o.DeviceUuid
	}
	if !IsNil(o.DeviceName) {
		toSerialize["deviceName"] = o.DeviceName
	}
	if !IsNil(o.MetroCode) {
		toSerialize["metroCode"] = o.MetroCode
	}
	if !IsNil(o.MetroName) {
		toSerialize["metroName"] = o.MetroName
	}
	if !IsNil(o.DeviceTypeCode) {
		toSerialize["deviceTypeCode"] = o.DeviceTypeCode
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.IpAssigned) {
		toSerialize["ipAssigned"] = o.IpAssigned
	}
	if !IsNil(o.InterfaceId) {
		toSerialize["interfaceId"] = o.InterfaceId
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.DeviceManagementType) {
		toSerialize["deviceManagementType"] = o.DeviceManagementType
	}
	if !IsNil(o.NetworkScope) {
		toSerialize["networkScope"] = o.NetworkScope
	}
	if !IsNil(o.IsDeviceAccessible) {
		toSerialize["isDeviceAccessible"] = o.IsDeviceAccessible
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LinkDeviceResponse) UnmarshalJSON(data []byte) (err error) {
	varLinkDeviceResponse := _LinkDeviceResponse{}

	err = json.Unmarshal(data, &varLinkDeviceResponse)

	if err != nil {
		return err
	}

	*o = LinkDeviceResponse(varLinkDeviceResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "deviceUuid")
		delete(additionalProperties, "deviceName")
		delete(additionalProperties, "metroCode")
		delete(additionalProperties, "metroName")
		delete(additionalProperties, "deviceTypeCode")
		delete(additionalProperties, "category")
		delete(additionalProperties, "ipAssigned")
		delete(additionalProperties, "interfaceId")
		delete(additionalProperties, "status")
		delete(additionalProperties, "deviceManagementType")
		delete(additionalProperties, "networkScope")
		delete(additionalProperties, "isDeviceAccessible")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLinkDeviceResponse struct {
	value *LinkDeviceResponse
	isSet bool
}

func (v NullableLinkDeviceResponse) Get() *LinkDeviceResponse {
	return v.value
}

func (v *NullableLinkDeviceResponse) Set(val *LinkDeviceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkDeviceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkDeviceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkDeviceResponse(val *LinkDeviceResponse) *NullableLinkDeviceResponse {
	return &NullableLinkDeviceResponse{value: val, isSet: true}
}

func (v NullableLinkDeviceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkDeviceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
