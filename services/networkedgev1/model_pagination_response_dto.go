/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the PaginationResponseDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaginationResponseDto{}

// PaginationResponseDto struct for PaginationResponseDto
type PaginationResponseDto struct {
	// It is the starting point of the collection returned fromt the server
	Offset *int32 `json:"offset,omitempty"`
	// The page size
	Limit *int32 `json:"limit,omitempty"`
	// The total number of results
	Total                *int32 `json:"total,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PaginationResponseDto PaginationResponseDto

// NewPaginationResponseDto instantiates a new PaginationResponseDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaginationResponseDto() *PaginationResponseDto {
	this := PaginationResponseDto{}
	return &this
}

// NewPaginationResponseDtoWithDefaults instantiates a new PaginationResponseDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaginationResponseDtoWithDefaults() *PaginationResponseDto {
	this := PaginationResponseDto{}
	return &this
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *PaginationResponseDto) GetOffset() int32 {
	if o == nil || IsNil(o.Offset) {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaginationResponseDto) GetOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *PaginationResponseDto) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *PaginationResponseDto) SetOffset(v int32) {
	o.Offset = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *PaginationResponseDto) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaginationResponseDto) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *PaginationResponseDto) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *PaginationResponseDto) SetLimit(v int32) {
	o.Limit = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *PaginationResponseDto) GetTotal() int32 {
	if o == nil || IsNil(o.Total) {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaginationResponseDto) GetTotalOk() (*int32, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *PaginationResponseDto) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *PaginationResponseDto) SetTotal(v int32) {
	o.Total = &v
}

func (o PaginationResponseDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaginationResponseDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PaginationResponseDto) UnmarshalJSON(data []byte) (err error) {
	varPaginationResponseDto := _PaginationResponseDto{}

	err = json.Unmarshal(data, &varPaginationResponseDto)

	if err != nil {
		return err
	}

	*o = PaginationResponseDto(varPaginationResponseDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "offset")
		delete(additionalProperties, "limit")
		delete(additionalProperties, "total")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePaginationResponseDto struct {
	value *PaginationResponseDto
	isSet bool
}

func (v NullablePaginationResponseDto) Get() *PaginationResponseDto {
	return v.value
}

func (v *NullablePaginationResponseDto) Set(val *PaginationResponseDto) {
	v.value = val
	v.isSet = true
}

func (v NullablePaginationResponseDto) IsSet() bool {
	return v.isSet
}

func (v *NullablePaginationResponseDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaginationResponseDto(val *PaginationResponseDto) *NullablePaginationResponseDto {
	return &NullablePaginationResponseDto{value: val, isSet: true}
}

func (v NullablePaginationResponseDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaginationResponseDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
