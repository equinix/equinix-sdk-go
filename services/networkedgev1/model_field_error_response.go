/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the FieldErrorResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FieldErrorResponse{}

// FieldErrorResponse struct for FieldErrorResponse
type FieldErrorResponse struct {
	ErrorCode            *string `json:"errorCode,omitempty"`
	ErrorMessage         *string `json:"errorMessage,omitempty"`
	MoreInfo             *string `json:"moreInfo,omitempty"`
	Property             *string `json:"property,omitempty"`
	Status               *string `json:"status,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FieldErrorResponse FieldErrorResponse

// NewFieldErrorResponse instantiates a new FieldErrorResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFieldErrorResponse() *FieldErrorResponse {
	this := FieldErrorResponse{}
	return &this
}

// NewFieldErrorResponseWithDefaults instantiates a new FieldErrorResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFieldErrorResponseWithDefaults() *FieldErrorResponse {
	this := FieldErrorResponse{}
	return &this
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *FieldErrorResponse) GetErrorCode() string {
	if o == nil || IsNil(o.ErrorCode) {
		var ret string
		return ret
	}
	return *o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldErrorResponse) GetErrorCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorCode) {
		return nil, false
	}
	return o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *FieldErrorResponse) HasErrorCode() bool {
	if o != nil && !IsNil(o.ErrorCode) {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given string and assigns it to the ErrorCode field.
func (o *FieldErrorResponse) SetErrorCode(v string) {
	o.ErrorCode = &v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *FieldErrorResponse) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage) {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldErrorResponse) GetErrorMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorMessage) {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *FieldErrorResponse) HasErrorMessage() bool {
	if o != nil && !IsNil(o.ErrorMessage) {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *FieldErrorResponse) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

// GetMoreInfo returns the MoreInfo field value if set, zero value otherwise.
func (o *FieldErrorResponse) GetMoreInfo() string {
	if o == nil || IsNil(o.MoreInfo) {
		var ret string
		return ret
	}
	return *o.MoreInfo
}

// GetMoreInfoOk returns a tuple with the MoreInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldErrorResponse) GetMoreInfoOk() (*string, bool) {
	if o == nil || IsNil(o.MoreInfo) {
		return nil, false
	}
	return o.MoreInfo, true
}

// HasMoreInfo returns a boolean if a field has been set.
func (o *FieldErrorResponse) HasMoreInfo() bool {
	if o != nil && !IsNil(o.MoreInfo) {
		return true
	}

	return false
}

// SetMoreInfo gets a reference to the given string and assigns it to the MoreInfo field.
func (o *FieldErrorResponse) SetMoreInfo(v string) {
	o.MoreInfo = &v
}

// GetProperty returns the Property field value if set, zero value otherwise.
func (o *FieldErrorResponse) GetProperty() string {
	if o == nil || IsNil(o.Property) {
		var ret string
		return ret
	}
	return *o.Property
}

// GetPropertyOk returns a tuple with the Property field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldErrorResponse) GetPropertyOk() (*string, bool) {
	if o == nil || IsNil(o.Property) {
		return nil, false
	}
	return o.Property, true
}

// HasProperty returns a boolean if a field has been set.
func (o *FieldErrorResponse) HasProperty() bool {
	if o != nil && !IsNil(o.Property) {
		return true
	}

	return false
}

// SetProperty gets a reference to the given string and assigns it to the Property field.
func (o *FieldErrorResponse) SetProperty(v string) {
	o.Property = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *FieldErrorResponse) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldErrorResponse) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *FieldErrorResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *FieldErrorResponse) SetStatus(v string) {
	o.Status = &v
}

func (o FieldErrorResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FieldErrorResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ErrorCode) {
		toSerialize["errorCode"] = o.ErrorCode
	}
	if !IsNil(o.ErrorMessage) {
		toSerialize["errorMessage"] = o.ErrorMessage
	}
	if !IsNil(o.MoreInfo) {
		toSerialize["moreInfo"] = o.MoreInfo
	}
	if !IsNil(o.Property) {
		toSerialize["property"] = o.Property
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FieldErrorResponse) UnmarshalJSON(data []byte) (err error) {
	varFieldErrorResponse := _FieldErrorResponse{}

	err = json.Unmarshal(data, &varFieldErrorResponse)

	if err != nil {
		return err
	}

	*o = FieldErrorResponse(varFieldErrorResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "errorCode")
		delete(additionalProperties, "errorMessage")
		delete(additionalProperties, "moreInfo")
		delete(additionalProperties, "property")
		delete(additionalProperties, "status")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFieldErrorResponse struct {
	value *FieldErrorResponse
	isSet bool
}

func (v NullableFieldErrorResponse) Get() *FieldErrorResponse {
	return v.value
}

func (v *NullableFieldErrorResponse) Set(val *FieldErrorResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldErrorResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldErrorResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldErrorResponse(val *FieldErrorResponse) *NullableFieldErrorResponse {
	return &NullableFieldErrorResponse{value: val, isSet: true}
}

func (v NullableFieldErrorResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldErrorResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
