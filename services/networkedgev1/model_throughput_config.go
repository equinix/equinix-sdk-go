/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the ThroughputConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ThroughputConfig{}

// ThroughputConfig struct for ThroughputConfig
type ThroughputConfig struct {
	// Whether this throughput is supported.
	Supported *bool `json:"supported,omitempty"`
	// Throughput.
	Throughput *string `json:"throughput,omitempty"`
	// Throughput unit.
	ThroughputUnit       *string `json:"throughputUnit,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ThroughputConfig ThroughputConfig

// NewThroughputConfig instantiates a new ThroughputConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThroughputConfig() *ThroughputConfig {
	this := ThroughputConfig{}
	return &this
}

// NewThroughputConfigWithDefaults instantiates a new ThroughputConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThroughputConfigWithDefaults() *ThroughputConfig {
	this := ThroughputConfig{}
	return &this
}

// GetSupported returns the Supported field value if set, zero value otherwise.
func (o *ThroughputConfig) GetSupported() bool {
	if o == nil || IsNil(o.Supported) {
		var ret bool
		return ret
	}
	return *o.Supported
}

// GetSupportedOk returns a tuple with the Supported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThroughputConfig) GetSupportedOk() (*bool, bool) {
	if o == nil || IsNil(o.Supported) {
		return nil, false
	}
	return o.Supported, true
}

// HasSupported returns a boolean if a field has been set.
func (o *ThroughputConfig) HasSupported() bool {
	if o != nil && !IsNil(o.Supported) {
		return true
	}

	return false
}

// SetSupported gets a reference to the given bool and assigns it to the Supported field.
func (o *ThroughputConfig) SetSupported(v bool) {
	o.Supported = &v
}

// GetThroughput returns the Throughput field value if set, zero value otherwise.
func (o *ThroughputConfig) GetThroughput() string {
	if o == nil || IsNil(o.Throughput) {
		var ret string
		return ret
	}
	return *o.Throughput
}

// GetThroughputOk returns a tuple with the Throughput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThroughputConfig) GetThroughputOk() (*string, bool) {
	if o == nil || IsNil(o.Throughput) {
		return nil, false
	}
	return o.Throughput, true
}

// HasThroughput returns a boolean if a field has been set.
func (o *ThroughputConfig) HasThroughput() bool {
	if o != nil && !IsNil(o.Throughput) {
		return true
	}

	return false
}

// SetThroughput gets a reference to the given string and assigns it to the Throughput field.
func (o *ThroughputConfig) SetThroughput(v string) {
	o.Throughput = &v
}

// GetThroughputUnit returns the ThroughputUnit field value if set, zero value otherwise.
func (o *ThroughputConfig) GetThroughputUnit() string {
	if o == nil || IsNil(o.ThroughputUnit) {
		var ret string
		return ret
	}
	return *o.ThroughputUnit
}

// GetThroughputUnitOk returns a tuple with the ThroughputUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThroughputConfig) GetThroughputUnitOk() (*string, bool) {
	if o == nil || IsNil(o.ThroughputUnit) {
		return nil, false
	}
	return o.ThroughputUnit, true
}

// HasThroughputUnit returns a boolean if a field has been set.
func (o *ThroughputConfig) HasThroughputUnit() bool {
	if o != nil && !IsNil(o.ThroughputUnit) {
		return true
	}

	return false
}

// SetThroughputUnit gets a reference to the given string and assigns it to the ThroughputUnit field.
func (o *ThroughputConfig) SetThroughputUnit(v string) {
	o.ThroughputUnit = &v
}

func (o ThroughputConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ThroughputConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Supported) {
		toSerialize["supported"] = o.Supported
	}
	if !IsNil(o.Throughput) {
		toSerialize["throughput"] = o.Throughput
	}
	if !IsNil(o.ThroughputUnit) {
		toSerialize["throughputUnit"] = o.ThroughputUnit
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ThroughputConfig) UnmarshalJSON(data []byte) (err error) {
	varThroughputConfig := _ThroughputConfig{}

	err = json.Unmarshal(data, &varThroughputConfig)

	if err != nil {
		return err
	}

	*o = ThroughputConfig(varThroughputConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "supported")
		delete(additionalProperties, "throughput")
		delete(additionalProperties, "throughputUnit")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableThroughputConfig struct {
	value *ThroughputConfig
	isSet bool
}

func (v NullableThroughputConfig) Get() *ThroughputConfig {
	return v.value
}

func (v *NullableThroughputConfig) Set(val *ThroughputConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableThroughputConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableThroughputConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThroughputConfig(val *ThroughputConfig) *NullableThroughputConfig {
	return &NullableThroughputConfig{value: val, isSet: true}
}

func (v NullableThroughputConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThroughputConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
