/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
	"fmt"
)

// checks if the DeviceACLTemplateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceACLTemplateRequest{}

// DeviceACLTemplateRequest struct for DeviceACLTemplateRequest
type DeviceACLTemplateRequest struct {
	// The ACL template name.
	Name string `json:"name"`
	// The ACL template description.
	Description string `json:"description"`
	// Customer project Id. Check your projectId under Resource Management on Equinix Portal. You should have access to a project to see or create assets under it. Equinix will assign a projectId if you do not provide one.
	ProjectId *string `json:"projectId,omitempty"`
	// An array of inbound rules.
	InboundRules         []InboundRules `json:"inboundRules"`
	AdditionalProperties map[string]interface{}
}

type _DeviceACLTemplateRequest DeviceACLTemplateRequest

// NewDeviceACLTemplateRequest instantiates a new DeviceACLTemplateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceACLTemplateRequest(name string, description string, inboundRules []InboundRules) *DeviceACLTemplateRequest {
	this := DeviceACLTemplateRequest{}
	this.Name = name
	this.Description = description
	this.InboundRules = inboundRules
	return &this
}

// NewDeviceACLTemplateRequestWithDefaults instantiates a new DeviceACLTemplateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceACLTemplateRequestWithDefaults() *DeviceACLTemplateRequest {
	this := DeviceACLTemplateRequest{}
	return &this
}

// GetName returns the Name field value
func (o *DeviceACLTemplateRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DeviceACLTemplateRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DeviceACLTemplateRequest) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *DeviceACLTemplateRequest) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *DeviceACLTemplateRequest) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *DeviceACLTemplateRequest) SetDescription(v string) {
	o.Description = v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *DeviceACLTemplateRequest) GetProjectId() string {
	if o == nil || IsNil(o.ProjectId) {
		var ret string
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceACLTemplateRequest) GetProjectIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *DeviceACLTemplateRequest) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given string and assigns it to the ProjectId field.
func (o *DeviceACLTemplateRequest) SetProjectId(v string) {
	o.ProjectId = &v
}

// GetInboundRules returns the InboundRules field value
func (o *DeviceACLTemplateRequest) GetInboundRules() []InboundRules {
	if o == nil {
		var ret []InboundRules
		return ret
	}

	return o.InboundRules
}

// GetInboundRulesOk returns a tuple with the InboundRules field value
// and a boolean to check if the value has been set.
func (o *DeviceACLTemplateRequest) GetInboundRulesOk() ([]InboundRules, bool) {
	if o == nil {
		return nil, false
	}
	return o.InboundRules, true
}

// SetInboundRules sets field value
func (o *DeviceACLTemplateRequest) SetInboundRules(v []InboundRules) {
	o.InboundRules = v
}

func (o DeviceACLTemplateRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceACLTemplateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	if !IsNil(o.ProjectId) {
		toSerialize["projectId"] = o.ProjectId
	}
	toSerialize["inboundRules"] = o.InboundRules

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeviceACLTemplateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"description",
		"inboundRules",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeviceACLTemplateRequest := _DeviceACLTemplateRequest{}

	err = json.Unmarshal(data, &varDeviceACLTemplateRequest)

	if err != nil {
		return err
	}

	*o = DeviceACLTemplateRequest(varDeviceACLTemplateRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "projectId")
		delete(additionalProperties, "inboundRules")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeviceACLTemplateRequest struct {
	value *DeviceACLTemplateRequest
	isSet bool
}

func (v NullableDeviceACLTemplateRequest) Get() *DeviceACLTemplateRequest {
	return v.value
}

func (v *NullableDeviceACLTemplateRequest) Set(val *DeviceACLTemplateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceACLTemplateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceACLTemplateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceACLTemplateRequest(val *DeviceACLTemplateRequest) *NullableDeviceACLTemplateRequest {
	return &NullableDeviceACLTemplateRequest{value: val, isSet: true}
}

func (v NullableDeviceACLTemplateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceACLTemplateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
