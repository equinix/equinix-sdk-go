/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the VendorConfigDetailsNode0 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VendorConfigDetailsNode0{}

// VendorConfigDetailsNode0 struct for VendorConfigDetailsNode0
type VendorConfigDetailsNode0 struct {
	// The host name. Only a-z, A-Z, 0-9, and hyphen(-) are allowed. It should start with a letter and end with a letter or digit. The length should be between 2-30 characters. Exceptions - FTDv 2-14; Aruba 2-24.
	Hostname       *string `json:"hostname,omitempty"`
	ActivationKey  *string `json:"activationKey,omitempty"`
	ControllerFqdn *string `json:"controllerFqdn,omitempty"`
	RootPassword   *string `json:"rootPassword,omitempty"`
	// The administrative password of the device. You can use it to log in to the console. This field is not available for all device types.
	AdminPassword        *string `json:"adminPassword,omitempty"`
	Controller1          *string `json:"controller1,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VendorConfigDetailsNode0 VendorConfigDetailsNode0

// NewVendorConfigDetailsNode0 instantiates a new VendorConfigDetailsNode0 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVendorConfigDetailsNode0() *VendorConfigDetailsNode0 {
	this := VendorConfigDetailsNode0{}
	return &this
}

// NewVendorConfigDetailsNode0WithDefaults instantiates a new VendorConfigDetailsNode0 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVendorConfigDetailsNode0WithDefaults() *VendorConfigDetailsNode0 {
	this := VendorConfigDetailsNode0{}
	return &this
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *VendorConfigDetailsNode0) GetHostname() string {
	if o == nil || IsNil(o.Hostname) {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VendorConfigDetailsNode0) GetHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *VendorConfigDetailsNode0) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *VendorConfigDetailsNode0) SetHostname(v string) {
	o.Hostname = &v
}

// GetActivationKey returns the ActivationKey field value if set, zero value otherwise.
func (o *VendorConfigDetailsNode0) GetActivationKey() string {
	if o == nil || IsNil(o.ActivationKey) {
		var ret string
		return ret
	}
	return *o.ActivationKey
}

// GetActivationKeyOk returns a tuple with the ActivationKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VendorConfigDetailsNode0) GetActivationKeyOk() (*string, bool) {
	if o == nil || IsNil(o.ActivationKey) {
		return nil, false
	}
	return o.ActivationKey, true
}

// HasActivationKey returns a boolean if a field has been set.
func (o *VendorConfigDetailsNode0) HasActivationKey() bool {
	if o != nil && !IsNil(o.ActivationKey) {
		return true
	}

	return false
}

// SetActivationKey gets a reference to the given string and assigns it to the ActivationKey field.
func (o *VendorConfigDetailsNode0) SetActivationKey(v string) {
	o.ActivationKey = &v
}

// GetControllerFqdn returns the ControllerFqdn field value if set, zero value otherwise.
func (o *VendorConfigDetailsNode0) GetControllerFqdn() string {
	if o == nil || IsNil(o.ControllerFqdn) {
		var ret string
		return ret
	}
	return *o.ControllerFqdn
}

// GetControllerFqdnOk returns a tuple with the ControllerFqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VendorConfigDetailsNode0) GetControllerFqdnOk() (*string, bool) {
	if o == nil || IsNil(o.ControllerFqdn) {
		return nil, false
	}
	return o.ControllerFqdn, true
}

// HasControllerFqdn returns a boolean if a field has been set.
func (o *VendorConfigDetailsNode0) HasControllerFqdn() bool {
	if o != nil && !IsNil(o.ControllerFqdn) {
		return true
	}

	return false
}

// SetControllerFqdn gets a reference to the given string and assigns it to the ControllerFqdn field.
func (o *VendorConfigDetailsNode0) SetControllerFqdn(v string) {
	o.ControllerFqdn = &v
}

// GetRootPassword returns the RootPassword field value if set, zero value otherwise.
func (o *VendorConfigDetailsNode0) GetRootPassword() string {
	if o == nil || IsNil(o.RootPassword) {
		var ret string
		return ret
	}
	return *o.RootPassword
}

// GetRootPasswordOk returns a tuple with the RootPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VendorConfigDetailsNode0) GetRootPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.RootPassword) {
		return nil, false
	}
	return o.RootPassword, true
}

// HasRootPassword returns a boolean if a field has been set.
func (o *VendorConfigDetailsNode0) HasRootPassword() bool {
	if o != nil && !IsNil(o.RootPassword) {
		return true
	}

	return false
}

// SetRootPassword gets a reference to the given string and assigns it to the RootPassword field.
func (o *VendorConfigDetailsNode0) SetRootPassword(v string) {
	o.RootPassword = &v
}

// GetAdminPassword returns the AdminPassword field value if set, zero value otherwise.
func (o *VendorConfigDetailsNode0) GetAdminPassword() string {
	if o == nil || IsNil(o.AdminPassword) {
		var ret string
		return ret
	}
	return *o.AdminPassword
}

// GetAdminPasswordOk returns a tuple with the AdminPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VendorConfigDetailsNode0) GetAdminPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.AdminPassword) {
		return nil, false
	}
	return o.AdminPassword, true
}

// HasAdminPassword returns a boolean if a field has been set.
func (o *VendorConfigDetailsNode0) HasAdminPassword() bool {
	if o != nil && !IsNil(o.AdminPassword) {
		return true
	}

	return false
}

// SetAdminPassword gets a reference to the given string and assigns it to the AdminPassword field.
func (o *VendorConfigDetailsNode0) SetAdminPassword(v string) {
	o.AdminPassword = &v
}

// GetController1 returns the Controller1 field value if set, zero value otherwise.
func (o *VendorConfigDetailsNode0) GetController1() string {
	if o == nil || IsNil(o.Controller1) {
		var ret string
		return ret
	}
	return *o.Controller1
}

// GetController1Ok returns a tuple with the Controller1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VendorConfigDetailsNode0) GetController1Ok() (*string, bool) {
	if o == nil || IsNil(o.Controller1) {
		return nil, false
	}
	return o.Controller1, true
}

// HasController1 returns a boolean if a field has been set.
func (o *VendorConfigDetailsNode0) HasController1() bool {
	if o != nil && !IsNil(o.Controller1) {
		return true
	}

	return false
}

// SetController1 gets a reference to the given string and assigns it to the Controller1 field.
func (o *VendorConfigDetailsNode0) SetController1(v string) {
	o.Controller1 = &v
}

func (o VendorConfigDetailsNode0) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VendorConfigDetailsNode0) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hostname) {
		toSerialize["hostname"] = o.Hostname
	}
	if !IsNil(o.ActivationKey) {
		toSerialize["activationKey"] = o.ActivationKey
	}
	if !IsNil(o.ControllerFqdn) {
		toSerialize["controllerFqdn"] = o.ControllerFqdn
	}
	if !IsNil(o.RootPassword) {
		toSerialize["rootPassword"] = o.RootPassword
	}
	if !IsNil(o.AdminPassword) {
		toSerialize["adminPassword"] = o.AdminPassword
	}
	if !IsNil(o.Controller1) {
		toSerialize["controller1"] = o.Controller1
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VendorConfigDetailsNode0) UnmarshalJSON(data []byte) (err error) {
	varVendorConfigDetailsNode0 := _VendorConfigDetailsNode0{}

	err = json.Unmarshal(data, &varVendorConfigDetailsNode0)

	if err != nil {
		return err
	}

	*o = VendorConfigDetailsNode0(varVendorConfigDetailsNode0)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "hostname")
		delete(additionalProperties, "activationKey")
		delete(additionalProperties, "controllerFqdn")
		delete(additionalProperties, "rootPassword")
		delete(additionalProperties, "adminPassword")
		delete(additionalProperties, "controller1")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVendorConfigDetailsNode0 struct {
	value *VendorConfigDetailsNode0
	isSet bool
}

func (v NullableVendorConfigDetailsNode0) Get() *VendorConfigDetailsNode0 {
	return v.value
}

func (v *NullableVendorConfigDetailsNode0) Set(val *VendorConfigDetailsNode0) {
	v.value = val
	v.isSet = true
}

func (v NullableVendorConfigDetailsNode0) IsSet() bool {
	return v.isSet
}

func (v *NullableVendorConfigDetailsNode0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVendorConfigDetailsNode0(val *VendorConfigDetailsNode0) *NullableVendorConfigDetailsNode0 {
	return &NullableVendorConfigDetailsNode0{value: val, isSet: true}
}

func (v NullableVendorConfigDetailsNode0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVendorConfigDetailsNode0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
