/*
Network Edge APIs

Network Edge (NE) is a platform that allows customers to deploy and run virtual network services and appliances such as routers, load balancers, and firewalls on a generic device instead of additional dedicated hardware, CapEx and colo space. The Network Edge REST APIs allow you to interact with the Equinix Platform to programmatically create a virtual device and add services. Details on specific use cases can be found in the documentation available on the developer portal.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networkedgev1

import (
	"encoding/json"
)

// checks if the DeviceInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceInfo{}

// DeviceInfo struct for DeviceInfo
type DeviceInfo struct {
	Aside *JsonNode `json:"aside,omitempty"`
	// Category of the device.
	Category                       *string `json:"category,omitempty"`
	CloudProfileProvisioningStatus *string `json:"cloudProfileProvisioningStatus,omitempty"`
	ConnectionStatus               *string `json:"connectionStatus,omitempty"`
	ConnectionUuid                 *string `json:"connectionUuid,omitempty"`
	// Name of the device.
	DeviceName *string `json:"deviceName,omitempty"`
	// Device type code.
	DeviceTypeCode *string `json:"deviceTypeCode,omitempty"`
	// Unique Id of the device.
	DeviceUUID             *string `json:"deviceUUID,omitempty"`
	InterfaceId            *string `json:"interfaceId,omitempty"`
	InterfaceOverlayStatus *string `json:"interfaceOverlayStatus,omitempty"`
	// Unique Id of the interface used to link the device.
	InterfaceUUID *string `json:"interfaceUUID,omitempty"`
	// Assigned IP address of the device.
	IpAssigned     *string   `json:"ipAssigned,omitempty"`
	NetworkDetails *JsonNode `json:"networkDetails,omitempty"`
	// Status of the device.
	Status *string `json:"status,omitempty"`
	// Throughput of the device.
	Throughput *string `json:"throughput,omitempty"`
	// Throughput unit of the device.
	ThroughputUnit       *string `json:"throughputUnit,omitempty"`
	Vxlan                *string `json:"vxlan,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DeviceInfo DeviceInfo

// NewDeviceInfo instantiates a new DeviceInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceInfo() *DeviceInfo {
	this := DeviceInfo{}
	return &this
}

// NewDeviceInfoWithDefaults instantiates a new DeviceInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceInfoWithDefaults() *DeviceInfo {
	this := DeviceInfo{}
	return &this
}

// GetAside returns the Aside field value if set, zero value otherwise.
func (o *DeviceInfo) GetAside() JsonNode {
	if o == nil || IsNil(o.Aside) {
		var ret JsonNode
		return ret
	}
	return *o.Aside
}

// GetAsideOk returns a tuple with the Aside field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInfo) GetAsideOk() (*JsonNode, bool) {
	if o == nil || IsNil(o.Aside) {
		return nil, false
	}
	return o.Aside, true
}

// HasAside returns a boolean if a field has been set.
func (o *DeviceInfo) HasAside() bool {
	if o != nil && !IsNil(o.Aside) {
		return true
	}

	return false
}

// SetAside gets a reference to the given JsonNode and assigns it to the Aside field.
func (o *DeviceInfo) SetAside(v JsonNode) {
	o.Aside = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *DeviceInfo) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInfo) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *DeviceInfo) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *DeviceInfo) SetCategory(v string) {
	o.Category = &v
}

// GetCloudProfileProvisioningStatus returns the CloudProfileProvisioningStatus field value if set, zero value otherwise.
func (o *DeviceInfo) GetCloudProfileProvisioningStatus() string {
	if o == nil || IsNil(o.CloudProfileProvisioningStatus) {
		var ret string
		return ret
	}
	return *o.CloudProfileProvisioningStatus
}

// GetCloudProfileProvisioningStatusOk returns a tuple with the CloudProfileProvisioningStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInfo) GetCloudProfileProvisioningStatusOk() (*string, bool) {
	if o == nil || IsNil(o.CloudProfileProvisioningStatus) {
		return nil, false
	}
	return o.CloudProfileProvisioningStatus, true
}

// HasCloudProfileProvisioningStatus returns a boolean if a field has been set.
func (o *DeviceInfo) HasCloudProfileProvisioningStatus() bool {
	if o != nil && !IsNil(o.CloudProfileProvisioningStatus) {
		return true
	}

	return false
}

// SetCloudProfileProvisioningStatus gets a reference to the given string and assigns it to the CloudProfileProvisioningStatus field.
func (o *DeviceInfo) SetCloudProfileProvisioningStatus(v string) {
	o.CloudProfileProvisioningStatus = &v
}

// GetConnectionStatus returns the ConnectionStatus field value if set, zero value otherwise.
func (o *DeviceInfo) GetConnectionStatus() string {
	if o == nil || IsNil(o.ConnectionStatus) {
		var ret string
		return ret
	}
	return *o.ConnectionStatus
}

// GetConnectionStatusOk returns a tuple with the ConnectionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInfo) GetConnectionStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionStatus) {
		return nil, false
	}
	return o.ConnectionStatus, true
}

// HasConnectionStatus returns a boolean if a field has been set.
func (o *DeviceInfo) HasConnectionStatus() bool {
	if o != nil && !IsNil(o.ConnectionStatus) {
		return true
	}

	return false
}

// SetConnectionStatus gets a reference to the given string and assigns it to the ConnectionStatus field.
func (o *DeviceInfo) SetConnectionStatus(v string) {
	o.ConnectionStatus = &v
}

// GetConnectionUuid returns the ConnectionUuid field value if set, zero value otherwise.
func (o *DeviceInfo) GetConnectionUuid() string {
	if o == nil || IsNil(o.ConnectionUuid) {
		var ret string
		return ret
	}
	return *o.ConnectionUuid
}

// GetConnectionUuidOk returns a tuple with the ConnectionUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInfo) GetConnectionUuidOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionUuid) {
		return nil, false
	}
	return o.ConnectionUuid, true
}

// HasConnectionUuid returns a boolean if a field has been set.
func (o *DeviceInfo) HasConnectionUuid() bool {
	if o != nil && !IsNil(o.ConnectionUuid) {
		return true
	}

	return false
}

// SetConnectionUuid gets a reference to the given string and assigns it to the ConnectionUuid field.
func (o *DeviceInfo) SetConnectionUuid(v string) {
	o.ConnectionUuid = &v
}

// GetDeviceName returns the DeviceName field value if set, zero value otherwise.
func (o *DeviceInfo) GetDeviceName() string {
	if o == nil || IsNil(o.DeviceName) {
		var ret string
		return ret
	}
	return *o.DeviceName
}

// GetDeviceNameOk returns a tuple with the DeviceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInfo) GetDeviceNameOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceName) {
		return nil, false
	}
	return o.DeviceName, true
}

// HasDeviceName returns a boolean if a field has been set.
func (o *DeviceInfo) HasDeviceName() bool {
	if o != nil && !IsNil(o.DeviceName) {
		return true
	}

	return false
}

// SetDeviceName gets a reference to the given string and assigns it to the DeviceName field.
func (o *DeviceInfo) SetDeviceName(v string) {
	o.DeviceName = &v
}

// GetDeviceTypeCode returns the DeviceTypeCode field value if set, zero value otherwise.
func (o *DeviceInfo) GetDeviceTypeCode() string {
	if o == nil || IsNil(o.DeviceTypeCode) {
		var ret string
		return ret
	}
	return *o.DeviceTypeCode
}

// GetDeviceTypeCodeOk returns a tuple with the DeviceTypeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInfo) GetDeviceTypeCodeOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceTypeCode) {
		return nil, false
	}
	return o.DeviceTypeCode, true
}

// HasDeviceTypeCode returns a boolean if a field has been set.
func (o *DeviceInfo) HasDeviceTypeCode() bool {
	if o != nil && !IsNil(o.DeviceTypeCode) {
		return true
	}

	return false
}

// SetDeviceTypeCode gets a reference to the given string and assigns it to the DeviceTypeCode field.
func (o *DeviceInfo) SetDeviceTypeCode(v string) {
	o.DeviceTypeCode = &v
}

// GetDeviceUUID returns the DeviceUUID field value if set, zero value otherwise.
func (o *DeviceInfo) GetDeviceUUID() string {
	if o == nil || IsNil(o.DeviceUUID) {
		var ret string
		return ret
	}
	return *o.DeviceUUID
}

// GetDeviceUUIDOk returns a tuple with the DeviceUUID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInfo) GetDeviceUUIDOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceUUID) {
		return nil, false
	}
	return o.DeviceUUID, true
}

// HasDeviceUUID returns a boolean if a field has been set.
func (o *DeviceInfo) HasDeviceUUID() bool {
	if o != nil && !IsNil(o.DeviceUUID) {
		return true
	}

	return false
}

// SetDeviceUUID gets a reference to the given string and assigns it to the DeviceUUID field.
func (o *DeviceInfo) SetDeviceUUID(v string) {
	o.DeviceUUID = &v
}

// GetInterfaceId returns the InterfaceId field value if set, zero value otherwise.
func (o *DeviceInfo) GetInterfaceId() string {
	if o == nil || IsNil(o.InterfaceId) {
		var ret string
		return ret
	}
	return *o.InterfaceId
}

// GetInterfaceIdOk returns a tuple with the InterfaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInfo) GetInterfaceIdOk() (*string, bool) {
	if o == nil || IsNil(o.InterfaceId) {
		return nil, false
	}
	return o.InterfaceId, true
}

// HasInterfaceId returns a boolean if a field has been set.
func (o *DeviceInfo) HasInterfaceId() bool {
	if o != nil && !IsNil(o.InterfaceId) {
		return true
	}

	return false
}

// SetInterfaceId gets a reference to the given string and assigns it to the InterfaceId field.
func (o *DeviceInfo) SetInterfaceId(v string) {
	o.InterfaceId = &v
}

// GetInterfaceOverlayStatus returns the InterfaceOverlayStatus field value if set, zero value otherwise.
func (o *DeviceInfo) GetInterfaceOverlayStatus() string {
	if o == nil || IsNil(o.InterfaceOverlayStatus) {
		var ret string
		return ret
	}
	return *o.InterfaceOverlayStatus
}

// GetInterfaceOverlayStatusOk returns a tuple with the InterfaceOverlayStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInfo) GetInterfaceOverlayStatusOk() (*string, bool) {
	if o == nil || IsNil(o.InterfaceOverlayStatus) {
		return nil, false
	}
	return o.InterfaceOverlayStatus, true
}

// HasInterfaceOverlayStatus returns a boolean if a field has been set.
func (o *DeviceInfo) HasInterfaceOverlayStatus() bool {
	if o != nil && !IsNil(o.InterfaceOverlayStatus) {
		return true
	}

	return false
}

// SetInterfaceOverlayStatus gets a reference to the given string and assigns it to the InterfaceOverlayStatus field.
func (o *DeviceInfo) SetInterfaceOverlayStatus(v string) {
	o.InterfaceOverlayStatus = &v
}

// GetInterfaceUUID returns the InterfaceUUID field value if set, zero value otherwise.
func (o *DeviceInfo) GetInterfaceUUID() string {
	if o == nil || IsNil(o.InterfaceUUID) {
		var ret string
		return ret
	}
	return *o.InterfaceUUID
}

// GetInterfaceUUIDOk returns a tuple with the InterfaceUUID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInfo) GetInterfaceUUIDOk() (*string, bool) {
	if o == nil || IsNil(o.InterfaceUUID) {
		return nil, false
	}
	return o.InterfaceUUID, true
}

// HasInterfaceUUID returns a boolean if a field has been set.
func (o *DeviceInfo) HasInterfaceUUID() bool {
	if o != nil && !IsNil(o.InterfaceUUID) {
		return true
	}

	return false
}

// SetInterfaceUUID gets a reference to the given string and assigns it to the InterfaceUUID field.
func (o *DeviceInfo) SetInterfaceUUID(v string) {
	o.InterfaceUUID = &v
}

// GetIpAssigned returns the IpAssigned field value if set, zero value otherwise.
func (o *DeviceInfo) GetIpAssigned() string {
	if o == nil || IsNil(o.IpAssigned) {
		var ret string
		return ret
	}
	return *o.IpAssigned
}

// GetIpAssignedOk returns a tuple with the IpAssigned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInfo) GetIpAssignedOk() (*string, bool) {
	if o == nil || IsNil(o.IpAssigned) {
		return nil, false
	}
	return o.IpAssigned, true
}

// HasIpAssigned returns a boolean if a field has been set.
func (o *DeviceInfo) HasIpAssigned() bool {
	if o != nil && !IsNil(o.IpAssigned) {
		return true
	}

	return false
}

// SetIpAssigned gets a reference to the given string and assigns it to the IpAssigned field.
func (o *DeviceInfo) SetIpAssigned(v string) {
	o.IpAssigned = &v
}

// GetNetworkDetails returns the NetworkDetails field value if set, zero value otherwise.
func (o *DeviceInfo) GetNetworkDetails() JsonNode {
	if o == nil || IsNil(o.NetworkDetails) {
		var ret JsonNode
		return ret
	}
	return *o.NetworkDetails
}

// GetNetworkDetailsOk returns a tuple with the NetworkDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInfo) GetNetworkDetailsOk() (*JsonNode, bool) {
	if o == nil || IsNil(o.NetworkDetails) {
		return nil, false
	}
	return o.NetworkDetails, true
}

// HasNetworkDetails returns a boolean if a field has been set.
func (o *DeviceInfo) HasNetworkDetails() bool {
	if o != nil && !IsNil(o.NetworkDetails) {
		return true
	}

	return false
}

// SetNetworkDetails gets a reference to the given JsonNode and assigns it to the NetworkDetails field.
func (o *DeviceInfo) SetNetworkDetails(v JsonNode) {
	o.NetworkDetails = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DeviceInfo) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInfo) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DeviceInfo) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DeviceInfo) SetStatus(v string) {
	o.Status = &v
}

// GetThroughput returns the Throughput field value if set, zero value otherwise.
func (o *DeviceInfo) GetThroughput() string {
	if o == nil || IsNil(o.Throughput) {
		var ret string
		return ret
	}
	return *o.Throughput
}

// GetThroughputOk returns a tuple with the Throughput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInfo) GetThroughputOk() (*string, bool) {
	if o == nil || IsNil(o.Throughput) {
		return nil, false
	}
	return o.Throughput, true
}

// HasThroughput returns a boolean if a field has been set.
func (o *DeviceInfo) HasThroughput() bool {
	if o != nil && !IsNil(o.Throughput) {
		return true
	}

	return false
}

// SetThroughput gets a reference to the given string and assigns it to the Throughput field.
func (o *DeviceInfo) SetThroughput(v string) {
	o.Throughput = &v
}

// GetThroughputUnit returns the ThroughputUnit field value if set, zero value otherwise.
func (o *DeviceInfo) GetThroughputUnit() string {
	if o == nil || IsNil(o.ThroughputUnit) {
		var ret string
		return ret
	}
	return *o.ThroughputUnit
}

// GetThroughputUnitOk returns a tuple with the ThroughputUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInfo) GetThroughputUnitOk() (*string, bool) {
	if o == nil || IsNil(o.ThroughputUnit) {
		return nil, false
	}
	return o.ThroughputUnit, true
}

// HasThroughputUnit returns a boolean if a field has been set.
func (o *DeviceInfo) HasThroughputUnit() bool {
	if o != nil && !IsNil(o.ThroughputUnit) {
		return true
	}

	return false
}

// SetThroughputUnit gets a reference to the given string and assigns it to the ThroughputUnit field.
func (o *DeviceInfo) SetThroughputUnit(v string) {
	o.ThroughputUnit = &v
}

// GetVxlan returns the Vxlan field value if set, zero value otherwise.
func (o *DeviceInfo) GetVxlan() string {
	if o == nil || IsNil(o.Vxlan) {
		var ret string
		return ret
	}
	return *o.Vxlan
}

// GetVxlanOk returns a tuple with the Vxlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInfo) GetVxlanOk() (*string, bool) {
	if o == nil || IsNil(o.Vxlan) {
		return nil, false
	}
	return o.Vxlan, true
}

// HasVxlan returns a boolean if a field has been set.
func (o *DeviceInfo) HasVxlan() bool {
	if o != nil && !IsNil(o.Vxlan) {
		return true
	}

	return false
}

// SetVxlan gets a reference to the given string and assigns it to the Vxlan field.
func (o *DeviceInfo) SetVxlan(v string) {
	o.Vxlan = &v
}

func (o DeviceInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Aside) {
		toSerialize["aside"] = o.Aside
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.CloudProfileProvisioningStatus) {
		toSerialize["cloudProfileProvisioningStatus"] = o.CloudProfileProvisioningStatus
	}
	if !IsNil(o.ConnectionStatus) {
		toSerialize["connectionStatus"] = o.ConnectionStatus
	}
	if !IsNil(o.ConnectionUuid) {
		toSerialize["connectionUuid"] = o.ConnectionUuid
	}
	if !IsNil(o.DeviceName) {
		toSerialize["deviceName"] = o.DeviceName
	}
	if !IsNil(o.DeviceTypeCode) {
		toSerialize["deviceTypeCode"] = o.DeviceTypeCode
	}
	if !IsNil(o.DeviceUUID) {
		toSerialize["deviceUUID"] = o.DeviceUUID
	}
	if !IsNil(o.InterfaceId) {
		toSerialize["interfaceId"] = o.InterfaceId
	}
	if !IsNil(o.InterfaceOverlayStatus) {
		toSerialize["interfaceOverlayStatus"] = o.InterfaceOverlayStatus
	}
	if !IsNil(o.InterfaceUUID) {
		toSerialize["interfaceUUID"] = o.InterfaceUUID
	}
	if !IsNil(o.IpAssigned) {
		toSerialize["ipAssigned"] = o.IpAssigned
	}
	if !IsNil(o.NetworkDetails) {
		toSerialize["networkDetails"] = o.NetworkDetails
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Throughput) {
		toSerialize["throughput"] = o.Throughput
	}
	if !IsNil(o.ThroughputUnit) {
		toSerialize["throughputUnit"] = o.ThroughputUnit
	}
	if !IsNil(o.Vxlan) {
		toSerialize["vxlan"] = o.Vxlan
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeviceInfo) UnmarshalJSON(data []byte) (err error) {
	varDeviceInfo := _DeviceInfo{}

	err = json.Unmarshal(data, &varDeviceInfo)

	if err != nil {
		return err
	}

	*o = DeviceInfo(varDeviceInfo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "aside")
		delete(additionalProperties, "category")
		delete(additionalProperties, "cloudProfileProvisioningStatus")
		delete(additionalProperties, "connectionStatus")
		delete(additionalProperties, "connectionUuid")
		delete(additionalProperties, "deviceName")
		delete(additionalProperties, "deviceTypeCode")
		delete(additionalProperties, "deviceUUID")
		delete(additionalProperties, "interfaceId")
		delete(additionalProperties, "interfaceOverlayStatus")
		delete(additionalProperties, "interfaceUUID")
		delete(additionalProperties, "ipAssigned")
		delete(additionalProperties, "networkDetails")
		delete(additionalProperties, "status")
		delete(additionalProperties, "throughput")
		delete(additionalProperties, "throughputUnit")
		delete(additionalProperties, "vxlan")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeviceInfo struct {
	value *DeviceInfo
	isSet bool
}

func (v NullableDeviceInfo) Get() *DeviceInfo {
	return v.value
}

func (v *NullableDeviceInfo) Set(val *DeviceInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceInfo(val *DeviceInfo) *NullableDeviceInfo {
	return &NullableDeviceInfo{value: val, isSet: true}
}

func (v NullableDeviceInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
