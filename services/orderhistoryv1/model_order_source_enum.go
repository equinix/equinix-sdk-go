/*
Retrieve Orders API

Based on a user's permission, a user may be able to view their own orders or also the orders from all of the users in their organization. These orders can be filtered by product type, order status, location, or date range. Only orders from the past 12 months will be returned.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package orderhistoryv1

import (
	"encoding/json"
	"fmt"
)

// OrderSourceEnum the model 'OrderSourceEnum'
type OrderSourceEnum string

// List of order-source-enum
const (
	ORDERSOURCEENUM_PORTAL  OrderSourceEnum = "Portal"
	ORDERSOURCEENUM_MOBILE  OrderSourceEnum = "Mobile"
	ORDERSOURCEENUM_QUOTE   OrderSourceEnum = "Quote"
	ORDERSOURCEENUM_OFFLINE OrderSourceEnum = "Offline"
)

// All allowed values of OrderSourceEnum enum
var AllowedOrderSourceEnumEnumValues = []OrderSourceEnum{
	"Portal",
	"Mobile",
	"Quote",
	"Offline",
}

func (v *OrderSourceEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrderSourceEnum(value)
	for _, existing := range AllowedOrderSourceEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrderSourceEnum", value)
}

// NewOrderSourceEnumFromValue returns a pointer to a valid OrderSourceEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrderSourceEnumFromValue(v string) (*OrderSourceEnum, error) {
	ev := OrderSourceEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrderSourceEnum: valid values are %v", v, AllowedOrderSourceEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrderSourceEnum) IsValid() bool {
	for _, existing := range AllowedOrderSourceEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to order-source-enum value
func (v OrderSourceEnum) Ptr() *OrderSourceEnum {
	return &v
}

type NullableOrderSourceEnum struct {
	value *OrderSourceEnum
	isSet bool
}

func (v NullableOrderSourceEnum) Get() *OrderSourceEnum {
	return v.value
}

func (v *NullableOrderSourceEnum) Set(val *OrderSourceEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderSourceEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderSourceEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderSourceEnum(val *OrderSourceEnum) *NullableOrderSourceEnum {
	return &NullableOrderSourceEnum{value: val, isSet: true}
}

func (v NullableOrderSourceEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderSourceEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
