/*
Retrieve Orders API

Based on a user's permission, a user may be able to view their own orders or also the orders from all of the users in their organization. These orders can be filtered by product type, order status, location, or date range. Only orders from the past 12 months will be returned.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package orderhistoryv1

import (
	"encoding/json"
	"fmt"
)

// ProductTypesEnum the model 'ProductTypesEnum'
type ProductTypesEnum string

// List of product-types-enum
const (
	PRODUCTTYPESENUM_SMART_HANDS            ProductTypesEnum = "SMART_HANDS"
	PRODUCTTYPESENUM_TROUBLE                ProductTypesEnum = "TROUBLE"
	PRODUCTTYPESENUM_SHIPMENT               ProductTypesEnum = "SHIPMENT"
	PRODUCTTYPESENUM_WORK_VISIT             ProductTypesEnum = "WORK_VISIT"
	PRODUCTTYPESENUM_SECURITY_ACCESS        ProductTypesEnum = "SECURITY_ACCESS"
	PRODUCTTYPESENUM_CONFERENCE_ROOM        ProductTypesEnum = "CONFERENCE_ROOM"
	PRODUCTTYPESENUM_TOUR_REQUESTS          ProductTypesEnum = "TOUR_REQUESTS"
	PRODUCTTYPESENUM_CROSS_CONNECT          ProductTypesEnum = "CROSS_CONNECT"
	PRODUCTTYPESENUM_CLOUD_EXCHANGE_PORT    ProductTypesEnum = "CLOUD_EXCHANGE_PORT"
	PRODUCTTYPESENUM_INTERNET_EXCHANGE_PORT ProductTypesEnum = "INTERNET_EXCHANGE_PORT"
	PRODUCTTYPESENUM_METRO_CONNECT          ProductTypesEnum = "METRO_CONNECT"
	PRODUCTTYPESENUM_POWER                  ProductTypesEnum = "POWER"
	PRODUCTTYPESENUM_IBX_SMARTVIEW_SENSOR   ProductTypesEnum = "IBX_SMARTVIEW_SENSOR"
	PRODUCTTYPESENUM_ACCESSORY              ProductTypesEnum = "ACCESSORY"
	PRODUCTTYPESENUM_CAGE                   ProductTypesEnum = "CAGE"
	PRODUCTTYPESENUM_CABINET                ProductTypesEnum = "CABINET"
	PRODUCTTYPESENUM_IBX_SMART_VIEW         ProductTypesEnum = "IBX_SMART_VIEW"
)

// All allowed values of ProductTypesEnum enum
var AllowedProductTypesEnumEnumValues = []ProductTypesEnum{
	"SMART_HANDS",
	"TROUBLE",
	"SHIPMENT",
	"WORK_VISIT",
	"SECURITY_ACCESS",
	"CONFERENCE_ROOM",
	"TOUR_REQUESTS",
	"CROSS_CONNECT",
	"CLOUD_EXCHANGE_PORT",
	"INTERNET_EXCHANGE_PORT",
	"METRO_CONNECT",
	"POWER",
	"IBX_SMARTVIEW_SENSOR",
	"ACCESSORY",
	"CAGE",
	"CABINET",
	"IBX_SMART_VIEW",
}

func (v *ProductTypesEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProductTypesEnum(value)
	for _, existing := range AllowedProductTypesEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProductTypesEnum", value)
}

// NewProductTypesEnumFromValue returns a pointer to a valid ProductTypesEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProductTypesEnumFromValue(v string) (*ProductTypesEnum, error) {
	ev := ProductTypesEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProductTypesEnum: valid values are %v", v, AllowedProductTypesEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProductTypesEnum) IsValid() bool {
	for _, existing := range AllowedProductTypesEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to product-types-enum value
func (v ProductTypesEnum) Ptr() *ProductTypesEnum {
	return &v
}

type NullableProductTypesEnum struct {
	value *ProductTypesEnum
	isSet bool
}

func (v NullableProductTypesEnum) Get() *ProductTypesEnum {
	return v.value
}

func (v *NullableProductTypesEnum) Set(val *ProductTypesEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableProductTypesEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableProductTypesEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductTypesEnum(val *ProductTypesEnum) *NullableProductTypesEnum {
	return &NullableProductTypesEnum{value: val, isSet: true}
}

func (v NullableProductTypesEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductTypesEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
