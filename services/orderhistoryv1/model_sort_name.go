/*
Retrieve Orders API

Based on a user's permission, a user may be able to view their own orders or also the orders from all of the users in their organization. These orders can be filtered by product type, order status, location, or date range. Only orders from the past 12 months will be returned.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package orderhistoryv1

import (
	"encoding/json"
	"fmt"
)

// SortName ORDERING_CONTACT sort is applicable on ordering contact last name.
type SortName string

// List of sort_name
const (
	SORTNAME_ORDERING_CONTACT SortName = "ORDERING_CONTACT"
	SORTNAME_ACCOUNT_NUMBER   SortName = "ACCOUNT_NUMBER"
	SORTNAME_CREATED_ON       SortName = "CREATED_ON"
)

// All allowed values of SortName enum
var AllowedSortNameEnumValues = []SortName{
	"ORDERING_CONTACT",
	"ACCOUNT_NUMBER",
	"CREATED_ON",
}

func (v *SortName) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SortName(value)
	for _, existing := range AllowedSortNameEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SortName", value)
}

// NewSortNameFromValue returns a pointer to a valid SortName
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSortNameFromValue(v string) (*SortName, error) {
	ev := SortName(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SortName: valid values are %v", v, AllowedSortNameEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SortName) IsValid() bool {
	for _, existing := range AllowedSortNameEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to sort_name value
func (v SortName) Ptr() *SortName {
	return &v
}

type NullableSortName struct {
	value *SortName
	isSet bool
}

func (v NullableSortName) Get() *SortName {
	return v.value
}

func (v *NullableSortName) Set(val *SortName) {
	v.value = val
	v.isSet = true
}

func (v NullableSortName) IsSet() bool {
	return v.isSet
}

func (v *NullableSortName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSortName(val *SortName) *NullableSortName {
	return &NullableSortName{value: val, isSet: true}
}

func (v NullableSortName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSortName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
