/*
Retrieve Orders API

Based on a user's permission, a user may be able to view their own orders or also the orders from all of the users in their organization. These orders can be filtered by product type, order status, location, or date range. Only orders from the past 12 months will be returned.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package orderhistoryv1

import (
	"encoding/json"
	"fmt"
)

// OrderHeaderStatusEnum <b>ENTERED: </b> Order Created. <br><b>SUBMITTED: </b> When the order is assigned to the Equinix OPS team.<br/><b>IN_PROGRESS: </b> When the order fulfillment is in progress <br/><b>PENDING_QA: </b>The order couldn't be submitted. This order required manual intervention from Equinix end.<br/><b>CANCELLED: </b> The order is canceled.<br/><b>CLOSED: </b>Order is closed.
type OrderHeaderStatusEnum string

// List of order-header-status-enum
const (
	ORDERHEADERSTATUSENUM_ENTERED     OrderHeaderStatusEnum = "ENTERED"
	ORDERHEADERSTATUSENUM_SUBMITTED   OrderHeaderStatusEnum = "SUBMITTED"
	ORDERHEADERSTATUSENUM_IN_PROGRESS OrderHeaderStatusEnum = "IN_PROGRESS"
	ORDERHEADERSTATUSENUM_PENDING_QA  OrderHeaderStatusEnum = "PENDING_QA"
	ORDERHEADERSTATUSENUM_CANCELLED   OrderHeaderStatusEnum = "CANCELLED"
	ORDERHEADERSTATUSENUM_CLOSED      OrderHeaderStatusEnum = "CLOSED"
)

// All allowed values of OrderHeaderStatusEnum enum
var AllowedOrderHeaderStatusEnumEnumValues = []OrderHeaderStatusEnum{
	"ENTERED",
	"SUBMITTED",
	"IN_PROGRESS",
	"PENDING_QA",
	"CANCELLED",
	"CLOSED",
}

func (v *OrderHeaderStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrderHeaderStatusEnum(value)
	for _, existing := range AllowedOrderHeaderStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrderHeaderStatusEnum", value)
}

// NewOrderHeaderStatusEnumFromValue returns a pointer to a valid OrderHeaderStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrderHeaderStatusEnumFromValue(v string) (*OrderHeaderStatusEnum, error) {
	ev := OrderHeaderStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrderHeaderStatusEnum: valid values are %v", v, AllowedOrderHeaderStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrderHeaderStatusEnum) IsValid() bool {
	for _, existing := range AllowedOrderHeaderStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to order-header-status-enum value
func (v OrderHeaderStatusEnum) Ptr() *OrderHeaderStatusEnum {
	return &v
}

type NullableOrderHeaderStatusEnum struct {
	value *OrderHeaderStatusEnum
	isSet bool
}

func (v NullableOrderHeaderStatusEnum) Get() *OrderHeaderStatusEnum {
	return v.value
}

func (v *NullableOrderHeaderStatusEnum) Set(val *OrderHeaderStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderHeaderStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderHeaderStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderHeaderStatusEnum(val *OrderHeaderStatusEnum) *NullableOrderHeaderStatusEnum {
	return &NullableOrderHeaderStatusEnum{value: val, isSet: true}
}

func (v NullableOrderHeaderStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderHeaderStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
