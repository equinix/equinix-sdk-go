/*
Retrieve Orders API

Based on a user's permission, a user may be able to view their own orders or also the orders from all of the users in their organization. These orders can be filtered by product type, order status, location, or date range. Only orders from the past 12 months will be returned.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package orderhistoryv1

import (
	"encoding/json"
)

// checks if the Filters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Filters{}

// Filters struct for Filters
type Filters struct {
	// ibxs filter
	Ibxs []string `json:"ibxs,omitempty"`
	// Product(order type) filter
	ProductTypes []ProductTypesEnum `json:"productTypes,omitempty"`
	// order status filter
	OrderStatus []OrderHeaderStatusEnum `json:"orderStatus,omitempty"`
	DateRange   *FiltersDateRange       `json:"dateRange,omitempty"`
	// Date Format Should be mm/dd/yyyy.<br/> Not applicable when dateRange is provided.
	FromDate *string `json:"fromDate,omitempty"`
	// Date Format Should be mm/dd/yyyy.<br/> Not applicable when dateRange is provided
	ToDate               *string `json:"toDate,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Filters Filters

// NewFilters instantiates a new Filters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilters() *Filters {
	this := Filters{}
	return &this
}

// NewFiltersWithDefaults instantiates a new Filters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFiltersWithDefaults() *Filters {
	this := Filters{}
	return &this
}

// GetIbxs returns the Ibxs field value if set, zero value otherwise.
func (o *Filters) GetIbxs() []string {
	if o == nil || IsNil(o.Ibxs) {
		var ret []string
		return ret
	}
	return o.Ibxs
}

// GetIbxsOk returns a tuple with the Ibxs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filters) GetIbxsOk() ([]string, bool) {
	if o == nil || IsNil(o.Ibxs) {
		return nil, false
	}
	return o.Ibxs, true
}

// HasIbxs returns a boolean if a field has been set.
func (o *Filters) HasIbxs() bool {
	if o != nil && !IsNil(o.Ibxs) {
		return true
	}

	return false
}

// SetIbxs gets a reference to the given []string and assigns it to the Ibxs field.
func (o *Filters) SetIbxs(v []string) {
	o.Ibxs = v
}

// GetProductTypes returns the ProductTypes field value if set, zero value otherwise.
func (o *Filters) GetProductTypes() []ProductTypesEnum {
	if o == nil || IsNil(o.ProductTypes) {
		var ret []ProductTypesEnum
		return ret
	}
	return o.ProductTypes
}

// GetProductTypesOk returns a tuple with the ProductTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filters) GetProductTypesOk() ([]ProductTypesEnum, bool) {
	if o == nil || IsNil(o.ProductTypes) {
		return nil, false
	}
	return o.ProductTypes, true
}

// HasProductTypes returns a boolean if a field has been set.
func (o *Filters) HasProductTypes() bool {
	if o != nil && !IsNil(o.ProductTypes) {
		return true
	}

	return false
}

// SetProductTypes gets a reference to the given []ProductTypesEnum and assigns it to the ProductTypes field.
func (o *Filters) SetProductTypes(v []ProductTypesEnum) {
	o.ProductTypes = v
}

// GetOrderStatus returns the OrderStatus field value if set, zero value otherwise.
func (o *Filters) GetOrderStatus() []OrderHeaderStatusEnum {
	if o == nil || IsNil(o.OrderStatus) {
		var ret []OrderHeaderStatusEnum
		return ret
	}
	return o.OrderStatus
}

// GetOrderStatusOk returns a tuple with the OrderStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filters) GetOrderStatusOk() ([]OrderHeaderStatusEnum, bool) {
	if o == nil || IsNil(o.OrderStatus) {
		return nil, false
	}
	return o.OrderStatus, true
}

// HasOrderStatus returns a boolean if a field has been set.
func (o *Filters) HasOrderStatus() bool {
	if o != nil && !IsNil(o.OrderStatus) {
		return true
	}

	return false
}

// SetOrderStatus gets a reference to the given []OrderHeaderStatusEnum and assigns it to the OrderStatus field.
func (o *Filters) SetOrderStatus(v []OrderHeaderStatusEnum) {
	o.OrderStatus = v
}

// GetDateRange returns the DateRange field value if set, zero value otherwise.
func (o *Filters) GetDateRange() FiltersDateRange {
	if o == nil || IsNil(o.DateRange) {
		var ret FiltersDateRange
		return ret
	}
	return *o.DateRange
}

// GetDateRangeOk returns a tuple with the DateRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filters) GetDateRangeOk() (*FiltersDateRange, bool) {
	if o == nil || IsNil(o.DateRange) {
		return nil, false
	}
	return o.DateRange, true
}

// HasDateRange returns a boolean if a field has been set.
func (o *Filters) HasDateRange() bool {
	if o != nil && !IsNil(o.DateRange) {
		return true
	}

	return false
}

// SetDateRange gets a reference to the given FiltersDateRange and assigns it to the DateRange field.
func (o *Filters) SetDateRange(v FiltersDateRange) {
	o.DateRange = &v
}

// GetFromDate returns the FromDate field value if set, zero value otherwise.
func (o *Filters) GetFromDate() string {
	if o == nil || IsNil(o.FromDate) {
		var ret string
		return ret
	}
	return *o.FromDate
}

// GetFromDateOk returns a tuple with the FromDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filters) GetFromDateOk() (*string, bool) {
	if o == nil || IsNil(o.FromDate) {
		return nil, false
	}
	return o.FromDate, true
}

// HasFromDate returns a boolean if a field has been set.
func (o *Filters) HasFromDate() bool {
	if o != nil && !IsNil(o.FromDate) {
		return true
	}

	return false
}

// SetFromDate gets a reference to the given string and assigns it to the FromDate field.
func (o *Filters) SetFromDate(v string) {
	o.FromDate = &v
}

// GetToDate returns the ToDate field value if set, zero value otherwise.
func (o *Filters) GetToDate() string {
	if o == nil || IsNil(o.ToDate) {
		var ret string
		return ret
	}
	return *o.ToDate
}

// GetToDateOk returns a tuple with the ToDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filters) GetToDateOk() (*string, bool) {
	if o == nil || IsNil(o.ToDate) {
		return nil, false
	}
	return o.ToDate, true
}

// HasToDate returns a boolean if a field has been set.
func (o *Filters) HasToDate() bool {
	if o != nil && !IsNil(o.ToDate) {
		return true
	}

	return false
}

// SetToDate gets a reference to the given string and assigns it to the ToDate field.
func (o *Filters) SetToDate(v string) {
	o.ToDate = &v
}

func (o Filters) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Filters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ibxs) {
		toSerialize["ibxs"] = o.Ibxs
	}
	if !IsNil(o.ProductTypes) {
		toSerialize["productTypes"] = o.ProductTypes
	}
	if !IsNil(o.OrderStatus) {
		toSerialize["orderStatus"] = o.OrderStatus
	}
	if !IsNil(o.DateRange) {
		toSerialize["dateRange"] = o.DateRange
	}
	if !IsNil(o.FromDate) {
		toSerialize["fromDate"] = o.FromDate
	}
	if !IsNil(o.ToDate) {
		toSerialize["toDate"] = o.ToDate
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Filters) UnmarshalJSON(data []byte) (err error) {
	varFilters := _Filters{}

	err = json.Unmarshal(data, &varFilters)

	if err != nil {
		return err
	}

	*o = Filters(varFilters)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ibxs")
		delete(additionalProperties, "productTypes")
		delete(additionalProperties, "orderStatus")
		delete(additionalProperties, "dateRange")
		delete(additionalProperties, "fromDate")
		delete(additionalProperties, "toDate")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFilters struct {
	value *Filters
	isSet bool
}

func (v NullableFilters) Get() *Filters {
	return v.value
}

func (v *NullableFilters) Set(val *Filters) {
	v.value = val
	v.isSet = true
}

func (v NullableFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilters(val *Filters) *NullableFilters {
	return &NullableFilters{value: val, isSet: true}
}

func (v NullableFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
