/*
Retrieve Orders API

Based on a user's permission, a user may be able to view their own orders or also the orders from all of the users in their organization. These orders can be filtered by product type, order status, location, or date range. Only orders from the past 12 months will be returned.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package orderhistoryv1

import (
	"encoding/json"
	"fmt"
)

// FiltersDateRange Date range filter
type FiltersDateRange string

// List of filters_dateRange
const (
	FILTERSDATERANGE__7_DAYS   FiltersDateRange = "PAST_7_DAYS"
	FILTERSDATERANGE__14_DAYS  FiltersDateRange = "PAST_14_DAYS"
	FILTERSDATERANGE__30_DAYS  FiltersDateRange = "PAST_30_DAYS"
	FILTERSDATERANGE__3_MONTHS FiltersDateRange = "PAST_3_MONTHS"
	FILTERSDATERANGE__6_MONTHS FiltersDateRange = "PAST_6_MONTHS"
	FILTERSDATERANGE_YEAR      FiltersDateRange = "PAST_YEAR"
)

// All allowed values of FiltersDateRange enum
var AllowedFiltersDateRangeEnumValues = []FiltersDateRange{
	"PAST_7_DAYS",
	"PAST_14_DAYS",
	"PAST_30_DAYS",
	"PAST_3_MONTHS",
	"PAST_6_MONTHS",
	"PAST_YEAR",
}

func (v *FiltersDateRange) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FiltersDateRange(value)
	for _, existing := range AllowedFiltersDateRangeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FiltersDateRange", value)
}

// NewFiltersDateRangeFromValue returns a pointer to a valid FiltersDateRange
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFiltersDateRangeFromValue(v string) (*FiltersDateRange, error) {
	ev := FiltersDateRange(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FiltersDateRange: valid values are %v", v, AllowedFiltersDateRangeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FiltersDateRange) IsValid() bool {
	for _, existing := range AllowedFiltersDateRangeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to filters_dateRange value
func (v FiltersDateRange) Ptr() *FiltersDateRange {
	return &v
}

type NullableFiltersDateRange struct {
	value *FiltersDateRange
	isSet bool
}

func (v NullableFiltersDateRange) Get() *FiltersDateRange {
	return v.value
}

func (v *NullableFiltersDateRange) Set(val *FiltersDateRange) {
	v.value = val
	v.isSet = true
}

func (v NullableFiltersDateRange) IsSet() bool {
	return v.isSet
}

func (v *NullableFiltersDateRange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFiltersDateRange(val *FiltersDateRange) *NullableFiltersDateRange {
	return &NullableFiltersDateRange{value: val, isSet: true}
}

func (v NullableFiltersDateRange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFiltersDateRange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
