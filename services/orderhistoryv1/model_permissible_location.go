/*
Retrieve Orders API

Based on a user's permission, a user may be able to view their own orders or also the orders from all of the users in their organization. These orders can be filtered by product type, order status, location, or date range. Only orders from the past 12 months will be returned.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package orderhistoryv1

import (
	"encoding/json"
)

// checks if the PermissibleLocation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PermissibleLocation{}

// PermissibleLocation struct for PermissibleLocation
type PermissibleLocation struct {
	Ibx                  *IbxDetailForLocationsEndpoint `json:"ibx,omitempty"`
	Cages                []string                       `json:"cages,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PermissibleLocation PermissibleLocation

// NewPermissibleLocation instantiates a new PermissibleLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPermissibleLocation() *PermissibleLocation {
	this := PermissibleLocation{}
	return &this
}

// NewPermissibleLocationWithDefaults instantiates a new PermissibleLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPermissibleLocationWithDefaults() *PermissibleLocation {
	this := PermissibleLocation{}
	return &this
}

// GetIbx returns the Ibx field value if set, zero value otherwise.
func (o *PermissibleLocation) GetIbx() IbxDetailForLocationsEndpoint {
	if o == nil || IsNil(o.Ibx) {
		var ret IbxDetailForLocationsEndpoint
		return ret
	}
	return *o.Ibx
}

// GetIbxOk returns a tuple with the Ibx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissibleLocation) GetIbxOk() (*IbxDetailForLocationsEndpoint, bool) {
	if o == nil || IsNil(o.Ibx) {
		return nil, false
	}
	return o.Ibx, true
}

// HasIbx returns a boolean if a field has been set.
func (o *PermissibleLocation) HasIbx() bool {
	if o != nil && !IsNil(o.Ibx) {
		return true
	}

	return false
}

// SetIbx gets a reference to the given IbxDetailForLocationsEndpoint and assigns it to the Ibx field.
func (o *PermissibleLocation) SetIbx(v IbxDetailForLocationsEndpoint) {
	o.Ibx = &v
}

// GetCages returns the Cages field value if set, zero value otherwise.
func (o *PermissibleLocation) GetCages() []string {
	if o == nil || IsNil(o.Cages) {
		var ret []string
		return ret
	}
	return o.Cages
}

// GetCagesOk returns a tuple with the Cages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissibleLocation) GetCagesOk() ([]string, bool) {
	if o == nil || IsNil(o.Cages) {
		return nil, false
	}
	return o.Cages, true
}

// HasCages returns a boolean if a field has been set.
func (o *PermissibleLocation) HasCages() bool {
	if o != nil && !IsNil(o.Cages) {
		return true
	}

	return false
}

// SetCages gets a reference to the given []string and assigns it to the Cages field.
func (o *PermissibleLocation) SetCages(v []string) {
	o.Cages = v
}

func (o PermissibleLocation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PermissibleLocation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ibx) {
		toSerialize["ibx"] = o.Ibx
	}
	if !IsNil(o.Cages) {
		toSerialize["cages"] = o.Cages
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PermissibleLocation) UnmarshalJSON(data []byte) (err error) {
	varPermissibleLocation := _PermissibleLocation{}

	err = json.Unmarshal(data, &varPermissibleLocation)

	if err != nil {
		return err
	}

	*o = PermissibleLocation(varPermissibleLocation)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ibx")
		delete(additionalProperties, "cages")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePermissibleLocation struct {
	value *PermissibleLocation
	isSet bool
}

func (v NullablePermissibleLocation) Get() *PermissibleLocation {
	return v.value
}

func (v *NullablePermissibleLocation) Set(val *PermissibleLocation) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissibleLocation) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissibleLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissibleLocation(val *PermissibleLocation) *NullablePermissibleLocation {
	return &NullablePermissibleLocation{value: val, isSet: true}
}

func (v NullablePermissibleLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissibleLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
