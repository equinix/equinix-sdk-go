/*
Retrieve Orders API

Based on a user's permission, a user may be able to view their own orders or also the orders from all of the users in their organization. These orders can be filtered by product type, order status, location, or date range. Only orders from the past 12 months will be returned.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package orderhistoryv1

import (
	"encoding/json"
	"fmt"
)

// LinkRel the model 'LinkRel'
type LinkRel string

// List of link_rel
const (
	LINKREL_SELF               LinkRel = "self"
	LINKREL_PREV               LinkRel = "prev"
	LINKREL_NEXT               LinkRel = "next"
	LINKREL_ORDER_FULL_DETAILS LinkRel = "orderFullDetails"
)

// All allowed values of LinkRel enum
var AllowedLinkRelEnumValues = []LinkRel{
	"self",
	"prev",
	"next",
	"orderFullDetails",
}

func (v *LinkRel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LinkRel(value)
	for _, existing := range AllowedLinkRelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LinkRel", value)
}

// NewLinkRelFromValue returns a pointer to a valid LinkRel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLinkRelFromValue(v string) (*LinkRel, error) {
	ev := LinkRel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LinkRel: valid values are %v", v, AllowedLinkRelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LinkRel) IsValid() bool {
	for _, existing := range AllowedLinkRelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to link_rel value
func (v LinkRel) Ptr() *LinkRel {
	return &v
}

type NullableLinkRel struct {
	value *LinkRel
	isSet bool
}

func (v NullableLinkRel) Get() *LinkRel {
	return v.value
}

func (v *NullableLinkRel) Set(val *LinkRel) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkRel) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkRel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkRel(val *LinkRel) *NullableLinkRel {
	return &NullableLinkRel{value: val, isSet: true}
}

func (v NullableLinkRel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkRel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
