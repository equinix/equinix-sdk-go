/*
Retrieve Orders API

Based on a user's permission, a user may be able to view their own orders or also the orders from all of the users in their organization. These orders can be filtered by product type, order status, location, or date range. Only orders from the past 12 months will be returned.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package orderhistoryv1

import (
	"encoding/json"
)

// checks if the NotificationContact type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationContact{}

// NotificationContact struct for NotificationContact
type NotificationContact struct {
	// Notification Contact name
	Name *string `json:"name,omitempty"`
	// Notification Contact email
	Email *string `json:"email,omitempty"`
	// Notification Contact phone
	Phone                *string `json:"phone,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NotificationContact NotificationContact

// NewNotificationContact instantiates a new NotificationContact object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationContact() *NotificationContact {
	this := NotificationContact{}
	return &this
}

// NewNotificationContactWithDefaults instantiates a new NotificationContact object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationContactWithDefaults() *NotificationContact {
	this := NotificationContact{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NotificationContact) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationContact) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NotificationContact) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NotificationContact) SetName(v string) {
	o.Name = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *NotificationContact) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationContact) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *NotificationContact) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *NotificationContact) SetEmail(v string) {
	o.Email = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *NotificationContact) GetPhone() string {
	if o == nil || IsNil(o.Phone) {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationContact) GetPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.Phone) {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *NotificationContact) HasPhone() bool {
	if o != nil && !IsNil(o.Phone) {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *NotificationContact) SetPhone(v string) {
	o.Phone = &v
}

func (o NotificationContact) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationContact) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Phone) {
		toSerialize["phone"] = o.Phone
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NotificationContact) UnmarshalJSON(data []byte) (err error) {
	varNotificationContact := _NotificationContact{}

	err = json.Unmarshal(data, &varNotificationContact)

	if err != nil {
		return err
	}

	*o = NotificationContact(varNotificationContact)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "email")
		delete(additionalProperties, "phone")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNotificationContact struct {
	value *NotificationContact
	isSet bool
}

func (v NullableNotificationContact) Get() *NotificationContact {
	return v.value
}

func (v *NullableNotificationContact) Set(val *NotificationContact) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationContact) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationContact) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationContact(val *NotificationContact) *NullableNotificationContact {
	return &NullableNotificationContact{value: val, isSet: true}
}

func (v NullableNotificationContact) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationContact) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
