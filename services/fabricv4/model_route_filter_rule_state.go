/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// RouteFilterRuleState Route filter rule status
type RouteFilterRuleState string

// List of RouteFilterRuleState
const (
	ROUTEFILTERRULESTATE_PROVISIONING      RouteFilterRuleState = "PROVISIONING"
	ROUTEFILTERRULESTATE_REPROVISIONING    RouteFilterRuleState = "REPROVISIONING"
	ROUTEFILTERRULESTATE_DEPROVISIONING    RouteFilterRuleState = "DEPROVISIONING"
	ROUTEFILTERRULESTATE_PROVISIONED       RouteFilterRuleState = "PROVISIONED"
	ROUTEFILTERRULESTATE_DEPROVISIONED     RouteFilterRuleState = "DEPROVISIONED"
	ROUTEFILTERRULESTATE_NOT_PROVISIONED   RouteFilterRuleState = "NOT_PROVISIONED"
	ROUTEFILTERRULESTATE_NOT_DEPROVISIONED RouteFilterRuleState = "NOT_DEPROVISIONED"
)

// All allowed values of RouteFilterRuleState enum
var AllowedRouteFilterRuleStateEnumValues = []RouteFilterRuleState{
	"PROVISIONING",
	"REPROVISIONING",
	"DEPROVISIONING",
	"PROVISIONED",
	"DEPROVISIONED",
	"NOT_PROVISIONED",
	"NOT_DEPROVISIONED",
}

func (v *RouteFilterRuleState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RouteFilterRuleState(value)
	for _, existing := range AllowedRouteFilterRuleStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RouteFilterRuleState", value)
}

// NewRouteFilterRuleStateFromValue returns a pointer to a valid RouteFilterRuleState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRouteFilterRuleStateFromValue(v string) (*RouteFilterRuleState, error) {
	ev := RouteFilterRuleState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RouteFilterRuleState: valid values are %v", v, AllowedRouteFilterRuleStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RouteFilterRuleState) IsValid() bool {
	for _, existing := range AllowedRouteFilterRuleStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RouteFilterRuleState value
func (v RouteFilterRuleState) Ptr() *RouteFilterRuleState {
	return &v
}

type NullableRouteFilterRuleState struct {
	value *RouteFilterRuleState
	isSet bool
}

func (v NullableRouteFilterRuleState) Get() *RouteFilterRuleState {
	return v.value
}

func (v *NullableRouteFilterRuleState) Set(val *RouteFilterRuleState) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteFilterRuleState) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteFilterRuleState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteFilterRuleState(val *RouteFilterRuleState) *NullableRouteFilterRuleState {
	return &NullableRouteFilterRuleState{value: val, isSet: true}
}

func (v NullableRouteFilterRuleState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteFilterRuleState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
