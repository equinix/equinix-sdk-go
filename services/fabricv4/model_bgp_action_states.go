/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// BGPActionStates BGP action state
type BGPActionStates string

// List of BGPActionStates
const (
	BGPACTIONSTATES_PENDING   BGPActionStates = "PENDING"
	BGPACTIONSTATES_FAILED    BGPActionStates = "FAILED"
	BGPACTIONSTATES_SUCCEEDED BGPActionStates = "SUCCEEDED"
)

// All allowed values of BGPActionStates enum
var AllowedBGPActionStatesEnumValues = []BGPActionStates{
	"PENDING",
	"FAILED",
	"SUCCEEDED",
}

func (v *BGPActionStates) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BGPActionStates(value)
	for _, existing := range AllowedBGPActionStatesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BGPActionStates", value)
}

// NewBGPActionStatesFromValue returns a pointer to a valid BGPActionStates
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBGPActionStatesFromValue(v string) (*BGPActionStates, error) {
	ev := BGPActionStates(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BGPActionStates: valid values are %v", v, AllowedBGPActionStatesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BGPActionStates) IsValid() bool {
	for _, existing := range AllowedBGPActionStatesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BGPActionStates value
func (v BGPActionStates) Ptr() *BGPActionStates {
	return &v
}

type NullableBGPActionStates struct {
	value *BGPActionStates
	isSet bool
}

func (v NullableBGPActionStates) Get() *BGPActionStates {
	return v.value
}

func (v *NullableBGPActionStates) Set(val *BGPActionStates) {
	v.value = val
	v.isSet = true
}

func (v NullableBGPActionStates) IsSet() bool {
	return v.isSet
}

func (v *NullableBGPActionStates) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBGPActionStates(val *BGPActionStates) *NullableBGPActionStates {
	return &NullableBGPActionStates{value: val, isSet: true}
}

func (v NullableBGPActionStates) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBGPActionStates) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
