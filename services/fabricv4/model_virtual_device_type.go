/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// VirtualDeviceType Virtual Device type
type VirtualDeviceType string

// List of VirtualDevice_type
const (
	VIRTUALDEVICETYPE_EDGE VirtualDeviceType = "EDGE"
)

// All allowed values of VirtualDeviceType enum
var AllowedVirtualDeviceTypeEnumValues = []VirtualDeviceType{
	"EDGE",
}

func (v *VirtualDeviceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VirtualDeviceType(value)
	for _, existing := range AllowedVirtualDeviceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VirtualDeviceType", value)
}

// NewVirtualDeviceTypeFromValue returns a pointer to a valid VirtualDeviceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVirtualDeviceTypeFromValue(v string) (*VirtualDeviceType, error) {
	ev := VirtualDeviceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VirtualDeviceType: valid values are %v", v, AllowedVirtualDeviceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VirtualDeviceType) IsValid() bool {
	for _, existing := range AllowedVirtualDeviceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VirtualDevice_type value
func (v VirtualDeviceType) Ptr() *VirtualDeviceType {
	return &v
}

type NullableVirtualDeviceType struct {
	value *VirtualDeviceType
	isSet bool
}

func (v NullableVirtualDeviceType) Get() *VirtualDeviceType {
	return v.value
}

func (v *NullableVirtualDeviceType) Set(val *VirtualDeviceType) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualDeviceType) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualDeviceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualDeviceType(val *VirtualDeviceType) *NullableVirtualDeviceType {
	return &NullableVirtualDeviceType{value: val, isSet: true}
}

func (v NullableVirtualDeviceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualDeviceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
