/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// StreamPostRequestType the model 'StreamPostRequestType'
type StreamPostRequestType string

// List of StreamPostRequest_type
const (
	STREAMPOSTREQUESTTYPE_TELEMETRY_STREAM StreamPostRequestType = "TELEMETRY_STREAM"
)

// All allowed values of StreamPostRequestType enum
var AllowedStreamPostRequestTypeEnumValues = []StreamPostRequestType{
	"TELEMETRY_STREAM",
}

func (v *StreamPostRequestType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StreamPostRequestType(value)
	for _, existing := range AllowedStreamPostRequestTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StreamPostRequestType", value)
}

// NewStreamPostRequestTypeFromValue returns a pointer to a valid StreamPostRequestType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStreamPostRequestTypeFromValue(v string) (*StreamPostRequestType, error) {
	ev := StreamPostRequestType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StreamPostRequestType: valid values are %v", v, AllowedStreamPostRequestTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StreamPostRequestType) IsValid() bool {
	for _, existing := range AllowedStreamPostRequestTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StreamPostRequest_type value
func (v StreamPostRequestType) Ptr() *StreamPostRequestType {
	return &v
}

type NullableStreamPostRequestType struct {
	value *StreamPostRequestType
	isSet bool
}

func (v NullableStreamPostRequestType) Get() *StreamPostRequestType {
	return v.value
}

func (v *NullableStreamPostRequestType) Set(val *StreamPostRequestType) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamPostRequestType) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamPostRequestType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamPostRequestType(val *StreamPostRequestType) *NullableStreamPostRequestType {
	return &NullableStreamPostRequestType{value: val, isSet: true}
}

func (v NullableStreamPostRequestType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamPostRequestType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
