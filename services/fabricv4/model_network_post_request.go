/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// checks if the NetworkPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkPostRequest{}

// NetworkPostRequest Create Network
type NetworkPostRequest struct {
	Type NetworkType `json:"type"`
	// Customer-provided network name
	Name     string              `json:"name"`
	Scope    NetworkScope        `json:"scope"`
	Location *SimplifiedLocation `json:"location,omitempty"`
	Project  *Project            `json:"project,omitempty"`
	// Preferences for notifications on network configuration or status changes
	Notifications        []SimplifiedNotification `json:"notifications"`
	AdditionalProperties map[string]interface{}
}

type _NetworkPostRequest NetworkPostRequest

// NewNetworkPostRequest instantiates a new NetworkPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkPostRequest(type_ NetworkType, name string, scope NetworkScope, notifications []SimplifiedNotification) *NetworkPostRequest {
	this := NetworkPostRequest{}
	this.Type = type_
	this.Name = name
	this.Scope = scope
	this.Notifications = notifications
	return &this
}

// NewNetworkPostRequestWithDefaults instantiates a new NetworkPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkPostRequestWithDefaults() *NetworkPostRequest {
	this := NetworkPostRequest{}
	return &this
}

// GetType returns the Type field value
func (o *NetworkPostRequest) GetType() NetworkType {
	if o == nil {
		var ret NetworkType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *NetworkPostRequest) GetTypeOk() (*NetworkType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *NetworkPostRequest) SetType(v NetworkType) {
	o.Type = v
}

// GetName returns the Name field value
func (o *NetworkPostRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *NetworkPostRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *NetworkPostRequest) SetName(v string) {
	o.Name = v
}

// GetScope returns the Scope field value
func (o *NetworkPostRequest) GetScope() NetworkScope {
	if o == nil {
		var ret NetworkScope
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *NetworkPostRequest) GetScopeOk() (*NetworkScope, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scope, true
}

// SetScope sets field value
func (o *NetworkPostRequest) SetScope(v NetworkScope) {
	o.Scope = v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *NetworkPostRequest) GetLocation() SimplifiedLocation {
	if o == nil || IsNil(o.Location) {
		var ret SimplifiedLocation
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkPostRequest) GetLocationOk() (*SimplifiedLocation, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *NetworkPostRequest) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given SimplifiedLocation and assigns it to the Location field.
func (o *NetworkPostRequest) SetLocation(v SimplifiedLocation) {
	o.Location = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *NetworkPostRequest) GetProject() Project {
	if o == nil || IsNil(o.Project) {
		var ret Project
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkPostRequest) GetProjectOk() (*Project, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *NetworkPostRequest) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given Project and assigns it to the Project field.
func (o *NetworkPostRequest) SetProject(v Project) {
	o.Project = &v
}

// GetNotifications returns the Notifications field value
func (o *NetworkPostRequest) GetNotifications() []SimplifiedNotification {
	if o == nil {
		var ret []SimplifiedNotification
		return ret
	}

	return o.Notifications
}

// GetNotificationsOk returns a tuple with the Notifications field value
// and a boolean to check if the value has been set.
func (o *NetworkPostRequest) GetNotificationsOk() ([]SimplifiedNotification, bool) {
	if o == nil {
		return nil, false
	}
	return o.Notifications, true
}

// SetNotifications sets field value
func (o *NetworkPostRequest) SetNotifications(v []SimplifiedNotification) {
	o.Notifications = v
}

func (o NetworkPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["name"] = o.Name
	toSerialize["scope"] = o.Scope
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}
	toSerialize["notifications"] = o.Notifications

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NetworkPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"name",
		"scope",
		"notifications",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNetworkPostRequest := _NetworkPostRequest{}

	err = json.Unmarshal(data, &varNetworkPostRequest)

	if err != nil {
		return err
	}

	*o = NetworkPostRequest(varNetworkPostRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "name")
		delete(additionalProperties, "scope")
		delete(additionalProperties, "location")
		delete(additionalProperties, "project")
		delete(additionalProperties, "notifications")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNetworkPostRequest struct {
	value *NetworkPostRequest
	isSet bool
}

func (v NullableNetworkPostRequest) Get() *NetworkPostRequest {
	return v.value
}

func (v *NullableNetworkPostRequest) Set(val *NetworkPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkPostRequest(val *NetworkPostRequest) *NullableNetworkPostRequest {
	return &NullableNetworkPostRequest{value: val, isSet: true}
}

func (v NullableNetworkPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
