/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// LinkProtocolRequestType Type of Link Protocol
type LinkProtocolRequestType string

// List of LinkProtocolRequestType
const (
	LINKPROTOCOLREQUESTTYPE_UNTAGGED LinkProtocolRequestType = "UNTAGGED"
	LINKPROTOCOLREQUESTTYPE_DOT1_Q   LinkProtocolRequestType = "DOT1Q"
	LINKPROTOCOLREQUESTTYPE_QINQ     LinkProtocolRequestType = "QINQ"
	LINKPROTOCOLREQUESTTYPE_VXLAN    LinkProtocolRequestType = "VXLAN"
)

// All allowed values of LinkProtocolRequestType enum
var AllowedLinkProtocolRequestTypeEnumValues = []LinkProtocolRequestType{
	"UNTAGGED",
	"DOT1Q",
	"QINQ",
	"VXLAN",
}

func (v *LinkProtocolRequestType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LinkProtocolRequestType(value)
	for _, existing := range AllowedLinkProtocolRequestTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LinkProtocolRequestType", value)
}

// NewLinkProtocolRequestTypeFromValue returns a pointer to a valid LinkProtocolRequestType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLinkProtocolRequestTypeFromValue(v string) (*LinkProtocolRequestType, error) {
	ev := LinkProtocolRequestType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LinkProtocolRequestType: valid values are %v", v, AllowedLinkProtocolRequestTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LinkProtocolRequestType) IsValid() bool {
	for _, existing := range AllowedLinkProtocolRequestTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LinkProtocolRequestType value
func (v LinkProtocolRequestType) Ptr() *LinkProtocolRequestType {
	return &v
}

type NullableLinkProtocolRequestType struct {
	value *LinkProtocolRequestType
	isSet bool
}

func (v NullableLinkProtocolRequestType) Get() *LinkProtocolRequestType {
	return v.value
}

func (v *NullableLinkProtocolRequestType) Set(val *LinkProtocolRequestType) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkProtocolRequestType) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkProtocolRequestType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkProtocolRequestType(val *LinkProtocolRequestType) *NullableLinkProtocolRequestType {
	return &NullableLinkProtocolRequestType{value: val, isSet: true}
}

func (v NullableLinkProtocolRequestType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkProtocolRequestType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
