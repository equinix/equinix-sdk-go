/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// AccessPointRole E-Tree network connection role
type AccessPointRole string

// List of AccessPoint_role
const (
	ACCESSPOINTROLE_LEAF AccessPointRole = "LEAF"
	ACCESSPOINTROLE_ROOT AccessPointRole = "ROOT"
)

// All allowed values of AccessPointRole enum
var AllowedAccessPointRoleEnumValues = []AccessPointRole{
	"LEAF",
	"ROOT",
}

func (v *AccessPointRole) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccessPointRole(value)
	for _, existing := range AllowedAccessPointRoleEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AccessPointRole", value)
}

// NewAccessPointRoleFromValue returns a pointer to a valid AccessPointRole
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccessPointRoleFromValue(v string) (*AccessPointRole, error) {
	ev := AccessPointRole(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AccessPointRole: valid values are %v", v, AllowedAccessPointRoleEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccessPointRole) IsValid() bool {
	for _, existing := range AllowedAccessPointRoleEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AccessPoint_role value
func (v AccessPointRole) Ptr() *AccessPointRole {
	return &v
}

type NullableAccessPointRole struct {
	value *AccessPointRole
	isSet bool
}

func (v NullableAccessPointRole) Get() *AccessPointRole {
	return v.value
}

func (v *NullableAccessPointRole) Set(val *AccessPointRole) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessPointRole) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessPointRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessPointRole(val *AccessPointRole) *NullableAccessPointRole {
	return &NullableAccessPointRole{value: val, isSet: true}
}

func (v NullableAccessPointRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessPointRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
