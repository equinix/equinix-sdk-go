/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// PriceCategory Price category
type PriceCategory string

// List of PriceCategory
const (
	PRICECATEGORY_COUNTRY  PriceCategory = "COUNTRY"
	PRICECATEGORY_CUSTOMER PriceCategory = "CUSTOMER"
)

// All allowed values of PriceCategory enum
var AllowedPriceCategoryEnumValues = []PriceCategory{
	"COUNTRY",
	"CUSTOMER",
}

func (v *PriceCategory) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PriceCategory(value)
	for _, existing := range AllowedPriceCategoryEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PriceCategory", value)
}

// NewPriceCategoryFromValue returns a pointer to a valid PriceCategory
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPriceCategoryFromValue(v string) (*PriceCategory, error) {
	ev := PriceCategory(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PriceCategory: valid values are %v", v, AllowedPriceCategoryEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PriceCategory) IsValid() bool {
	for _, existing := range AllowedPriceCategoryEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PriceCategory value
func (v PriceCategory) Ptr() *PriceCategory {
	return &v
}

type NullablePriceCategory struct {
	value *PriceCategory
	isSet bool
}

func (v NullablePriceCategory) Get() *PriceCategory {
	return v.value
}

func (v *NullablePriceCategory) Set(val *PriceCategory) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceCategory) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceCategory(val *PriceCategory) *NullablePriceCategory {
	return &NullablePriceCategory{value: val, isSet: true}
}

func (v NullablePriceCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
