/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// CloudRouterCommandState Fabric Cloud Router Command State
type CloudRouterCommandState string

// List of CloudRouterCommandState
const (
	CLOUDROUTERCOMMANDSTATE_PENDING   CloudRouterCommandState = "PENDING"
	CLOUDROUTERCOMMANDSTATE_SUCCEEDED CloudRouterCommandState = "SUCCEEDED"
	CLOUDROUTERCOMMANDSTATE_FAILED    CloudRouterCommandState = "FAILED"
	CLOUDROUTERCOMMANDSTATE_DELETED   CloudRouterCommandState = "DELETED"
)

// All allowed values of CloudRouterCommandState enum
var AllowedCloudRouterCommandStateEnumValues = []CloudRouterCommandState{
	"PENDING",
	"SUCCEEDED",
	"FAILED",
	"DELETED",
}

func (v *CloudRouterCommandState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CloudRouterCommandState(value)
	for _, existing := range AllowedCloudRouterCommandStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CloudRouterCommandState", value)
}

// NewCloudRouterCommandStateFromValue returns a pointer to a valid CloudRouterCommandState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCloudRouterCommandStateFromValue(v string) (*CloudRouterCommandState, error) {
	ev := CloudRouterCommandState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CloudRouterCommandState: valid values are %v", v, AllowedCloudRouterCommandStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CloudRouterCommandState) IsValid() bool {
	for _, existing := range AllowedCloudRouterCommandStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CloudRouterCommandState value
func (v CloudRouterCommandState) Ptr() *CloudRouterCommandState {
	return &v
}

type NullableCloudRouterCommandState struct {
	value *CloudRouterCommandState
	isSet bool
}

func (v NullableCloudRouterCommandState) Get() *CloudRouterCommandState {
	return v.value
}

func (v *NullableCloudRouterCommandState) Set(val *CloudRouterCommandState) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudRouterCommandState) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudRouterCommandState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudRouterCommandState(val *CloudRouterCommandState) *NullableCloudRouterCommandState {
	return &NullableCloudRouterCommandState{value: val, isSet: true}
}

func (v NullableCloudRouterCommandState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudRouterCommandState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
