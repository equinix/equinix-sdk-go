/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the PriceLocation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PriceLocation{}

// PriceLocation struct for PriceLocation
type PriceLocation struct {
	MetroCode            *string `json:"metroCode,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PriceLocation PriceLocation

// NewPriceLocation instantiates a new PriceLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPriceLocation() *PriceLocation {
	this := PriceLocation{}
	return &this
}

// NewPriceLocationWithDefaults instantiates a new PriceLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPriceLocationWithDefaults() *PriceLocation {
	this := PriceLocation{}
	return &this
}

// GetMetroCode returns the MetroCode field value if set, zero value otherwise.
func (o *PriceLocation) GetMetroCode() string {
	if o == nil || IsNil(o.MetroCode) {
		var ret string
		return ret
	}
	return *o.MetroCode
}

// GetMetroCodeOk returns a tuple with the MetroCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceLocation) GetMetroCodeOk() (*string, bool) {
	if o == nil || IsNil(o.MetroCode) {
		return nil, false
	}
	return o.MetroCode, true
}

// HasMetroCode returns a boolean if a field has been set.
func (o *PriceLocation) HasMetroCode() bool {
	if o != nil && !IsNil(o.MetroCode) {
		return true
	}

	return false
}

// SetMetroCode gets a reference to the given string and assigns it to the MetroCode field.
func (o *PriceLocation) SetMetroCode(v string) {
	o.MetroCode = &v
}

func (o PriceLocation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PriceLocation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MetroCode) {
		toSerialize["metroCode"] = o.MetroCode
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PriceLocation) UnmarshalJSON(data []byte) (err error) {
	varPriceLocation := _PriceLocation{}

	err = json.Unmarshal(data, &varPriceLocation)

	if err != nil {
		return err
	}

	*o = PriceLocation(varPriceLocation)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "metroCode")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePriceLocation struct {
	value *PriceLocation
	isSet bool
}

func (v NullablePriceLocation) Get() *PriceLocation {
	return v.value
}

func (v *NullablePriceLocation) Set(val *PriceLocation) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceLocation) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceLocation(val *PriceLocation) *NullablePriceLocation {
	return &NullablePriceLocation{value: val, isSet: true}
}

func (v NullablePriceLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
