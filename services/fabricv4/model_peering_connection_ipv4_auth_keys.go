/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the PeeringConnectionIpv4AuthKeys type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PeeringConnectionIpv4AuthKeys{}

// PeeringConnectionIpv4AuthKeys struct for PeeringConnectionIpv4AuthKeys
type PeeringConnectionIpv4AuthKeys struct {
	Type                 *string `json:"type,omitempty"`
	Key                  *string `json:"key,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PeeringConnectionIpv4AuthKeys PeeringConnectionIpv4AuthKeys

// NewPeeringConnectionIpv4AuthKeys instantiates a new PeeringConnectionIpv4AuthKeys object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPeeringConnectionIpv4AuthKeys() *PeeringConnectionIpv4AuthKeys {
	this := PeeringConnectionIpv4AuthKeys{}
	return &this
}

// NewPeeringConnectionIpv4AuthKeysWithDefaults instantiates a new PeeringConnectionIpv4AuthKeys object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPeeringConnectionIpv4AuthKeysWithDefaults() *PeeringConnectionIpv4AuthKeys {
	this := PeeringConnectionIpv4AuthKeys{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PeeringConnectionIpv4AuthKeys) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeeringConnectionIpv4AuthKeys) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PeeringConnectionIpv4AuthKeys) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PeeringConnectionIpv4AuthKeys) SetType(v string) {
	o.Type = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *PeeringConnectionIpv4AuthKeys) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeeringConnectionIpv4AuthKeys) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *PeeringConnectionIpv4AuthKeys) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *PeeringConnectionIpv4AuthKeys) SetKey(v string) {
	o.Key = &v
}

func (o PeeringConnectionIpv4AuthKeys) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PeeringConnectionIpv4AuthKeys) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PeeringConnectionIpv4AuthKeys) UnmarshalJSON(data []byte) (err error) {
	varPeeringConnectionIpv4AuthKeys := _PeeringConnectionIpv4AuthKeys{}

	err = json.Unmarshal(data, &varPeeringConnectionIpv4AuthKeys)

	if err != nil {
		return err
	}

	*o = PeeringConnectionIpv4AuthKeys(varPeeringConnectionIpv4AuthKeys)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "key")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePeeringConnectionIpv4AuthKeys struct {
	value *PeeringConnectionIpv4AuthKeys
	isSet bool
}

func (v NullablePeeringConnectionIpv4AuthKeys) Get() *PeeringConnectionIpv4AuthKeys {
	return v.value
}

func (v *NullablePeeringConnectionIpv4AuthKeys) Set(val *PeeringConnectionIpv4AuthKeys) {
	v.value = val
	v.isSet = true
}

func (v NullablePeeringConnectionIpv4AuthKeys) IsSet() bool {
	return v.isSet
}

func (v *NullablePeeringConnectionIpv4AuthKeys) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePeeringConnectionIpv4AuthKeys(val *PeeringConnectionIpv4AuthKeys) *NullablePeeringConnectionIpv4AuthKeys {
	return &NullablePeeringConnectionIpv4AuthKeys{value: val, isSet: true}
}

func (v NullablePeeringConnectionIpv4AuthKeys) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePeeringConnectionIpv4AuthKeys) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
