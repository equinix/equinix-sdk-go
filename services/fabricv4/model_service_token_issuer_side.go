/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// ServiceTokenIssuerSide information about token side
type ServiceTokenIssuerSide string

// List of ServiceToken_issuerSide
const (
	SERVICETOKENISSUERSIDE_ASIDE ServiceTokenIssuerSide = "ASIDE"
	SERVICETOKENISSUERSIDE_ZSIDE ServiceTokenIssuerSide = "ZSIDE"
)

// All allowed values of ServiceTokenIssuerSide enum
var AllowedServiceTokenIssuerSideEnumValues = []ServiceTokenIssuerSide{
	"ASIDE",
	"ZSIDE",
}

func (v *ServiceTokenIssuerSide) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ServiceTokenIssuerSide(value)
	for _, existing := range AllowedServiceTokenIssuerSideEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServiceTokenIssuerSide", value)
}

// NewServiceTokenIssuerSideFromValue returns a pointer to a valid ServiceTokenIssuerSide
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServiceTokenIssuerSideFromValue(v string) (*ServiceTokenIssuerSide, error) {
	ev := ServiceTokenIssuerSide(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServiceTokenIssuerSide: valid values are %v", v, AllowedServiceTokenIssuerSideEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServiceTokenIssuerSide) IsValid() bool {
	for _, existing := range AllowedServiceTokenIssuerSideEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ServiceToken_issuerSide value
func (v ServiceTokenIssuerSide) Ptr() *ServiceTokenIssuerSide {
	return &v
}

type NullableServiceTokenIssuerSide struct {
	value *ServiceTokenIssuerSide
	isSet bool
}

func (v NullableServiceTokenIssuerSide) Get() *ServiceTokenIssuerSide {
	return v.value
}

func (v *NullableServiceTokenIssuerSide) Set(val *ServiceTokenIssuerSide) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceTokenIssuerSide) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceTokenIssuerSide) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceTokenIssuerSide(val *ServiceTokenIssuerSide) *NullableServiceTokenIssuerSide {
	return &NullableServiceTokenIssuerSide{value: val, isSet: true}
}

func (v NullableServiceTokenIssuerSide) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceTokenIssuerSide) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
