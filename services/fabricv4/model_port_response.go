/*
Equinix Fabric API v4

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.12
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the PortResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PortResponse{}

// PortResponse Port response specification
type PortResponse struct {
	Type *PortType `json:"type,omitempty"`
	// Equinix assigned response attribute for Port Id
	Id *int32 `json:"id,omitempty"`
	// Equinix assigned response attribute for an absolute URL that is the subject of the link's context.
	Href *string `json:"href,omitempty"`
	// Equinix assigned response attribute for  port identifier
	Uuid *string `json:"uuid,omitempty"`
	// Equinix assigned response attribute for Port name
	Name *string `json:"name,omitempty"`
	// Equinix assigned response attribute for Port description
	Description *string `json:"description,omitempty"`
	// Physical Ports Speed in Mbps
	PhysicalPortsSpeed *int32 `json:"physicalPortsSpeed,omitempty"`
	// Equinix assigned response attribute for Connection count
	ConnectionsCount       *int32                              `json:"connectionsCount,omitempty"`
	PhysicalPortsType      *PortResponsePhysicalPortsType      `json:"physicalPortsType,omitempty"`
	PhysicalPortsCount     *int32                              `json:"physicalPortsCount,omitempty"`
	ConnectivitySourceType *PortResponseConnectivitySourceType `json:"connectivitySourceType,omitempty"`
	BmmrType               *PortResponseBmmrType               `json:"bmmrType,omitempty"`
	Project                *Project                            `json:"project,omitempty"`
	State                  *PortState                          `json:"state,omitempty"`
	Order                  *PortOrder                          `json:"order,omitempty"`
	// Equinix assigned response attribute for Unique ID for a virtual port.
	CvpId       *string                        `json:"cvpId,omitempty"`
	Operation   *PortOperation                 `json:"operation,omitempty"`
	Account     *SimplifiedAccountPortResponse `json:"account,omitempty"`
	Changelog   *Changelog                     `json:"changelog,omitempty"`
	ServiceType *PortResponseServiceType       `json:"serviceType,omitempty"`
	// Equinix assigned response attribute for Port bandwidth in Mbps
	Bandwidth *int32 `json:"bandwidth,omitempty"`
	// Equinix assigned response attribute for Port available bandwidth in Mbps
	AvailableBandwidth *int32 `json:"availableBandwidth,omitempty"`
	// Equinix assigned response attribute for Port used bandwidth in Mbps
	UsedBandwidth *int32              `json:"usedBandwidth,omitempty"`
	Location      *SimplifiedLocation `json:"location,omitempty"`
	Device        *PortDevice         `json:"device,omitempty"`
	Interface     *PortInterface      `json:"interface,omitempty"`
	// A-side/Equinix ibx
	DemarcationPointIbx *string `json:"demarcationPointIbx,omitempty"`
	// z-side/Equinix ibx
	TetherIbx        *string               `json:"tetherIbx,omitempty"`
	DemarcationPoint *PortDemarcationPoint `json:"demarcationPoint,omitempty"`
	Redundancy       *PortRedundancy       `json:"redundancy,omitempty"`
	Encapsulation    *PortEncapsulation    `json:"encapsulation,omitempty"`
	// If LAG enabled
	LagEnabled *bool    `json:"lagEnabled,omitempty"`
	Lag        *PortLag `json:"lag,omitempty"`
	// Port ASN
	Asn      *int32        `json:"asn,omitempty"`
	Settings *PortSettings `json:"settings,omitempty"`
	// Number of physical ports
	PhysicalPortQuantity *int32 `json:"physicalPortQuantity,omitempty"`
	// Notification preferences
	Notifications []PortNotification `json:"notifications,omitempty"`
	// Port additional information
	AdditionalInfo []PortAdditionalInfo `json:"additionalInfo,omitempty"`
	// Physical ports that implement this port
	PhysicalPorts []PhysicalPort `json:"physicalPorts,omitempty"`
	// Port Loas
	Loas                 []PortLoa `json:"loas,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PortResponse PortResponse

// NewPortResponse instantiates a new PortResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPortResponse() *PortResponse {
	this := PortResponse{}
	return &this
}

// NewPortResponseWithDefaults instantiates a new PortResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortResponseWithDefaults() *PortResponse {
	this := PortResponse{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PortResponse) GetType() PortType {
	if o == nil || IsNil(o.Type) {
		var ret PortType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortResponse) GetTypeOk() (*PortType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PortResponse) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given PortType and assigns it to the Type field.
func (o *PortResponse) SetType(v PortType) {
	o.Type = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PortResponse) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortResponse) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PortResponse) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *PortResponse) SetId(v int32) {
	o.Id = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *PortResponse) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortResponse) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *PortResponse) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *PortResponse) SetHref(v string) {
	o.Href = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *PortResponse) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortResponse) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *PortResponse) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *PortResponse) SetUuid(v string) {
	o.Uuid = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PortResponse) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortResponse) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PortResponse) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PortResponse) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PortResponse) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortResponse) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PortResponse) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PortResponse) SetDescription(v string) {
	o.Description = &v
}

// GetPhysicalPortsSpeed returns the PhysicalPortsSpeed field value if set, zero value otherwise.
func (o *PortResponse) GetPhysicalPortsSpeed() int32 {
	if o == nil || IsNil(o.PhysicalPortsSpeed) {
		var ret int32
		return ret
	}
	return *o.PhysicalPortsSpeed
}

// GetPhysicalPortsSpeedOk returns a tuple with the PhysicalPortsSpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortResponse) GetPhysicalPortsSpeedOk() (*int32, bool) {
	if o == nil || IsNil(o.PhysicalPortsSpeed) {
		return nil, false
	}
	return o.PhysicalPortsSpeed, true
}

// HasPhysicalPortsSpeed returns a boolean if a field has been set.
func (o *PortResponse) HasPhysicalPortsSpeed() bool {
	if o != nil && !IsNil(o.PhysicalPortsSpeed) {
		return true
	}

	return false
}

// SetPhysicalPortsSpeed gets a reference to the given int32 and assigns it to the PhysicalPortsSpeed field.
func (o *PortResponse) SetPhysicalPortsSpeed(v int32) {
	o.PhysicalPortsSpeed = &v
}

// GetConnectionsCount returns the ConnectionsCount field value if set, zero value otherwise.
func (o *PortResponse) GetConnectionsCount() int32 {
	if o == nil || IsNil(o.ConnectionsCount) {
		var ret int32
		return ret
	}
	return *o.ConnectionsCount
}

// GetConnectionsCountOk returns a tuple with the ConnectionsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortResponse) GetConnectionsCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ConnectionsCount) {
		return nil, false
	}
	return o.ConnectionsCount, true
}

// HasConnectionsCount returns a boolean if a field has been set.
func (o *PortResponse) HasConnectionsCount() bool {
	if o != nil && !IsNil(o.ConnectionsCount) {
		return true
	}

	return false
}

// SetConnectionsCount gets a reference to the given int32 and assigns it to the ConnectionsCount field.
func (o *PortResponse) SetConnectionsCount(v int32) {
	o.ConnectionsCount = &v
}

// GetPhysicalPortsType returns the PhysicalPortsType field value if set, zero value otherwise.
func (o *PortResponse) GetPhysicalPortsType() PortResponsePhysicalPortsType {
	if o == nil || IsNil(o.PhysicalPortsType) {
		var ret PortResponsePhysicalPortsType
		return ret
	}
	return *o.PhysicalPortsType
}

// GetPhysicalPortsTypeOk returns a tuple with the PhysicalPortsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortResponse) GetPhysicalPortsTypeOk() (*PortResponsePhysicalPortsType, bool) {
	if o == nil || IsNil(o.PhysicalPortsType) {
		return nil, false
	}
	return o.PhysicalPortsType, true
}

// HasPhysicalPortsType returns a boolean if a field has been set.
func (o *PortResponse) HasPhysicalPortsType() bool {
	if o != nil && !IsNil(o.PhysicalPortsType) {
		return true
	}

	return false
}

// SetPhysicalPortsType gets a reference to the given PortResponsePhysicalPortsType and assigns it to the PhysicalPortsType field.
func (o *PortResponse) SetPhysicalPortsType(v PortResponsePhysicalPortsType) {
	o.PhysicalPortsType = &v
}

// GetPhysicalPortsCount returns the PhysicalPortsCount field value if set, zero value otherwise.
func (o *PortResponse) GetPhysicalPortsCount() int32 {
	if o == nil || IsNil(o.PhysicalPortsCount) {
		var ret int32
		return ret
	}
	return *o.PhysicalPortsCount
}

// GetPhysicalPortsCountOk returns a tuple with the PhysicalPortsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortResponse) GetPhysicalPortsCountOk() (*int32, bool) {
	if o == nil || IsNil(o.PhysicalPortsCount) {
		return nil, false
	}
	return o.PhysicalPortsCount, true
}

// HasPhysicalPortsCount returns a boolean if a field has been set.
func (o *PortResponse) HasPhysicalPortsCount() bool {
	if o != nil && !IsNil(o.PhysicalPortsCount) {
		return true
	}

	return false
}

// SetPhysicalPortsCount gets a reference to the given int32 and assigns it to the PhysicalPortsCount field.
func (o *PortResponse) SetPhysicalPortsCount(v int32) {
	o.PhysicalPortsCount = &v
}

// GetConnectivitySourceType returns the ConnectivitySourceType field value if set, zero value otherwise.
func (o *PortResponse) GetConnectivitySourceType() PortResponseConnectivitySourceType {
	if o == nil || IsNil(o.ConnectivitySourceType) {
		var ret PortResponseConnectivitySourceType
		return ret
	}
	return *o.ConnectivitySourceType
}

// GetConnectivitySourceTypeOk returns a tuple with the ConnectivitySourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortResponse) GetConnectivitySourceTypeOk() (*PortResponseConnectivitySourceType, bool) {
	if o == nil || IsNil(o.ConnectivitySourceType) {
		return nil, false
	}
	return o.ConnectivitySourceType, true
}

// HasConnectivitySourceType returns a boolean if a field has been set.
func (o *PortResponse) HasConnectivitySourceType() bool {
	if o != nil && !IsNil(o.ConnectivitySourceType) {
		return true
	}

	return false
}

// SetConnectivitySourceType gets a reference to the given PortResponseConnectivitySourceType and assigns it to the ConnectivitySourceType field.
func (o *PortResponse) SetConnectivitySourceType(v PortResponseConnectivitySourceType) {
	o.ConnectivitySourceType = &v
}

// GetBmmrType returns the BmmrType field value if set, zero value otherwise.
func (o *PortResponse) GetBmmrType() PortResponseBmmrType {
	if o == nil || IsNil(o.BmmrType) {
		var ret PortResponseBmmrType
		return ret
	}
	return *o.BmmrType
}

// GetBmmrTypeOk returns a tuple with the BmmrType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortResponse) GetBmmrTypeOk() (*PortResponseBmmrType, bool) {
	if o == nil || IsNil(o.BmmrType) {
		return nil, false
	}
	return o.BmmrType, true
}

// HasBmmrType returns a boolean if a field has been set.
func (o *PortResponse) HasBmmrType() bool {
	if o != nil && !IsNil(o.BmmrType) {
		return true
	}

	return false
}

// SetBmmrType gets a reference to the given PortResponseBmmrType and assigns it to the BmmrType field.
func (o *PortResponse) SetBmmrType(v PortResponseBmmrType) {
	o.BmmrType = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *PortResponse) GetProject() Project {
	if o == nil || IsNil(o.Project) {
		var ret Project
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortResponse) GetProjectOk() (*Project, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *PortResponse) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given Project and assigns it to the Project field.
func (o *PortResponse) SetProject(v Project) {
	o.Project = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *PortResponse) GetState() PortState {
	if o == nil || IsNil(o.State) {
		var ret PortState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortResponse) GetStateOk() (*PortState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *PortResponse) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given PortState and assigns it to the State field.
func (o *PortResponse) SetState(v PortState) {
	o.State = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *PortResponse) GetOrder() PortOrder {
	if o == nil || IsNil(o.Order) {
		var ret PortOrder
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortResponse) GetOrderOk() (*PortOrder, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *PortResponse) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given PortOrder and assigns it to the Order field.
func (o *PortResponse) SetOrder(v PortOrder) {
	o.Order = &v
}

// GetCvpId returns the CvpId field value if set, zero value otherwise.
func (o *PortResponse) GetCvpId() string {
	if o == nil || IsNil(o.CvpId) {
		var ret string
		return ret
	}
	return *o.CvpId
}

// GetCvpIdOk returns a tuple with the CvpId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortResponse) GetCvpIdOk() (*string, bool) {
	if o == nil || IsNil(o.CvpId) {
		return nil, false
	}
	return o.CvpId, true
}

// HasCvpId returns a boolean if a field has been set.
func (o *PortResponse) HasCvpId() bool {
	if o != nil && !IsNil(o.CvpId) {
		return true
	}

	return false
}

// SetCvpId gets a reference to the given string and assigns it to the CvpId field.
func (o *PortResponse) SetCvpId(v string) {
	o.CvpId = &v
}

// GetOperation returns the Operation field value if set, zero value otherwise.
func (o *PortResponse) GetOperation() PortOperation {
	if o == nil || IsNil(o.Operation) {
		var ret PortOperation
		return ret
	}
	return *o.Operation
}

// GetOperationOk returns a tuple with the Operation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortResponse) GetOperationOk() (*PortOperation, bool) {
	if o == nil || IsNil(o.Operation) {
		return nil, false
	}
	return o.Operation, true
}

// HasOperation returns a boolean if a field has been set.
func (o *PortResponse) HasOperation() bool {
	if o != nil && !IsNil(o.Operation) {
		return true
	}

	return false
}

// SetOperation gets a reference to the given PortOperation and assigns it to the Operation field.
func (o *PortResponse) SetOperation(v PortOperation) {
	o.Operation = &v
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *PortResponse) GetAccount() SimplifiedAccountPortResponse {
	if o == nil || IsNil(o.Account) {
		var ret SimplifiedAccountPortResponse
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortResponse) GetAccountOk() (*SimplifiedAccountPortResponse, bool) {
	if o == nil || IsNil(o.Account) {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *PortResponse) HasAccount() bool {
	if o != nil && !IsNil(o.Account) {
		return true
	}

	return false
}

// SetAccount gets a reference to the given SimplifiedAccountPortResponse and assigns it to the Account field.
func (o *PortResponse) SetAccount(v SimplifiedAccountPortResponse) {
	o.Account = &v
}

// GetChangelog returns the Changelog field value if set, zero value otherwise.
func (o *PortResponse) GetChangelog() Changelog {
	if o == nil || IsNil(o.Changelog) {
		var ret Changelog
		return ret
	}
	return *o.Changelog
}

// GetChangelogOk returns a tuple with the Changelog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortResponse) GetChangelogOk() (*Changelog, bool) {
	if o == nil || IsNil(o.Changelog) {
		return nil, false
	}
	return o.Changelog, true
}

// HasChangelog returns a boolean if a field has been set.
func (o *PortResponse) HasChangelog() bool {
	if o != nil && !IsNil(o.Changelog) {
		return true
	}

	return false
}

// SetChangelog gets a reference to the given Changelog and assigns it to the Changelog field.
func (o *PortResponse) SetChangelog(v Changelog) {
	o.Changelog = &v
}

// GetServiceType returns the ServiceType field value if set, zero value otherwise.
func (o *PortResponse) GetServiceType() PortResponseServiceType {
	if o == nil || IsNil(o.ServiceType) {
		var ret PortResponseServiceType
		return ret
	}
	return *o.ServiceType
}

// GetServiceTypeOk returns a tuple with the ServiceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortResponse) GetServiceTypeOk() (*PortResponseServiceType, bool) {
	if o == nil || IsNil(o.ServiceType) {
		return nil, false
	}
	return o.ServiceType, true
}

// HasServiceType returns a boolean if a field has been set.
func (o *PortResponse) HasServiceType() bool {
	if o != nil && !IsNil(o.ServiceType) {
		return true
	}

	return false
}

// SetServiceType gets a reference to the given PortResponseServiceType and assigns it to the ServiceType field.
func (o *PortResponse) SetServiceType(v PortResponseServiceType) {
	o.ServiceType = &v
}

// GetBandwidth returns the Bandwidth field value if set, zero value otherwise.
func (o *PortResponse) GetBandwidth() int32 {
	if o == nil || IsNil(o.Bandwidth) {
		var ret int32
		return ret
	}
	return *o.Bandwidth
}

// GetBandwidthOk returns a tuple with the Bandwidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortResponse) GetBandwidthOk() (*int32, bool) {
	if o == nil || IsNil(o.Bandwidth) {
		return nil, false
	}
	return o.Bandwidth, true
}

// HasBandwidth returns a boolean if a field has been set.
func (o *PortResponse) HasBandwidth() bool {
	if o != nil && !IsNil(o.Bandwidth) {
		return true
	}

	return false
}

// SetBandwidth gets a reference to the given int32 and assigns it to the Bandwidth field.
func (o *PortResponse) SetBandwidth(v int32) {
	o.Bandwidth = &v
}

// GetAvailableBandwidth returns the AvailableBandwidth field value if set, zero value otherwise.
func (o *PortResponse) GetAvailableBandwidth() int32 {
	if o == nil || IsNil(o.AvailableBandwidth) {
		var ret int32
		return ret
	}
	return *o.AvailableBandwidth
}

// GetAvailableBandwidthOk returns a tuple with the AvailableBandwidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortResponse) GetAvailableBandwidthOk() (*int32, bool) {
	if o == nil || IsNil(o.AvailableBandwidth) {
		return nil, false
	}
	return o.AvailableBandwidth, true
}

// HasAvailableBandwidth returns a boolean if a field has been set.
func (o *PortResponse) HasAvailableBandwidth() bool {
	if o != nil && !IsNil(o.AvailableBandwidth) {
		return true
	}

	return false
}

// SetAvailableBandwidth gets a reference to the given int32 and assigns it to the AvailableBandwidth field.
func (o *PortResponse) SetAvailableBandwidth(v int32) {
	o.AvailableBandwidth = &v
}

// GetUsedBandwidth returns the UsedBandwidth field value if set, zero value otherwise.
func (o *PortResponse) GetUsedBandwidth() int32 {
	if o == nil || IsNil(o.UsedBandwidth) {
		var ret int32
		return ret
	}
	return *o.UsedBandwidth
}

// GetUsedBandwidthOk returns a tuple with the UsedBandwidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortResponse) GetUsedBandwidthOk() (*int32, bool) {
	if o == nil || IsNil(o.UsedBandwidth) {
		return nil, false
	}
	return o.UsedBandwidth, true
}

// HasUsedBandwidth returns a boolean if a field has been set.
func (o *PortResponse) HasUsedBandwidth() bool {
	if o != nil && !IsNil(o.UsedBandwidth) {
		return true
	}

	return false
}

// SetUsedBandwidth gets a reference to the given int32 and assigns it to the UsedBandwidth field.
func (o *PortResponse) SetUsedBandwidth(v int32) {
	o.UsedBandwidth = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *PortResponse) GetLocation() SimplifiedLocation {
	if o == nil || IsNil(o.Location) {
		var ret SimplifiedLocation
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortResponse) GetLocationOk() (*SimplifiedLocation, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *PortResponse) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given SimplifiedLocation and assigns it to the Location field.
func (o *PortResponse) SetLocation(v SimplifiedLocation) {
	o.Location = &v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *PortResponse) GetDevice() PortDevice {
	if o == nil || IsNil(o.Device) {
		var ret PortDevice
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortResponse) GetDeviceOk() (*PortDevice, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *PortResponse) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given PortDevice and assigns it to the Device field.
func (o *PortResponse) SetDevice(v PortDevice) {
	o.Device = &v
}

// GetInterface returns the Interface field value if set, zero value otherwise.
func (o *PortResponse) GetInterface() PortInterface {
	if o == nil || IsNil(o.Interface) {
		var ret PortInterface
		return ret
	}
	return *o.Interface
}

// GetInterfaceOk returns a tuple with the Interface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortResponse) GetInterfaceOk() (*PortInterface, bool) {
	if o == nil || IsNil(o.Interface) {
		return nil, false
	}
	return o.Interface, true
}

// HasInterface returns a boolean if a field has been set.
func (o *PortResponse) HasInterface() bool {
	if o != nil && !IsNil(o.Interface) {
		return true
	}

	return false
}

// SetInterface gets a reference to the given PortInterface and assigns it to the Interface field.
func (o *PortResponse) SetInterface(v PortInterface) {
	o.Interface = &v
}

// GetDemarcationPointIbx returns the DemarcationPointIbx field value if set, zero value otherwise.
func (o *PortResponse) GetDemarcationPointIbx() string {
	if o == nil || IsNil(o.DemarcationPointIbx) {
		var ret string
		return ret
	}
	return *o.DemarcationPointIbx
}

// GetDemarcationPointIbxOk returns a tuple with the DemarcationPointIbx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortResponse) GetDemarcationPointIbxOk() (*string, bool) {
	if o == nil || IsNil(o.DemarcationPointIbx) {
		return nil, false
	}
	return o.DemarcationPointIbx, true
}

// HasDemarcationPointIbx returns a boolean if a field has been set.
func (o *PortResponse) HasDemarcationPointIbx() bool {
	if o != nil && !IsNil(o.DemarcationPointIbx) {
		return true
	}

	return false
}

// SetDemarcationPointIbx gets a reference to the given string and assigns it to the DemarcationPointIbx field.
func (o *PortResponse) SetDemarcationPointIbx(v string) {
	o.DemarcationPointIbx = &v
}

// GetTetherIbx returns the TetherIbx field value if set, zero value otherwise.
func (o *PortResponse) GetTetherIbx() string {
	if o == nil || IsNil(o.TetherIbx) {
		var ret string
		return ret
	}
	return *o.TetherIbx
}

// GetTetherIbxOk returns a tuple with the TetherIbx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortResponse) GetTetherIbxOk() (*string, bool) {
	if o == nil || IsNil(o.TetherIbx) {
		return nil, false
	}
	return o.TetherIbx, true
}

// HasTetherIbx returns a boolean if a field has been set.
func (o *PortResponse) HasTetherIbx() bool {
	if o != nil && !IsNil(o.TetherIbx) {
		return true
	}

	return false
}

// SetTetherIbx gets a reference to the given string and assigns it to the TetherIbx field.
func (o *PortResponse) SetTetherIbx(v string) {
	o.TetherIbx = &v
}

// GetDemarcationPoint returns the DemarcationPoint field value if set, zero value otherwise.
func (o *PortResponse) GetDemarcationPoint() PortDemarcationPoint {
	if o == nil || IsNil(o.DemarcationPoint) {
		var ret PortDemarcationPoint
		return ret
	}
	return *o.DemarcationPoint
}

// GetDemarcationPointOk returns a tuple with the DemarcationPoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortResponse) GetDemarcationPointOk() (*PortDemarcationPoint, bool) {
	if o == nil || IsNil(o.DemarcationPoint) {
		return nil, false
	}
	return o.DemarcationPoint, true
}

// HasDemarcationPoint returns a boolean if a field has been set.
func (o *PortResponse) HasDemarcationPoint() bool {
	if o != nil && !IsNil(o.DemarcationPoint) {
		return true
	}

	return false
}

// SetDemarcationPoint gets a reference to the given PortDemarcationPoint and assigns it to the DemarcationPoint field.
func (o *PortResponse) SetDemarcationPoint(v PortDemarcationPoint) {
	o.DemarcationPoint = &v
}

// GetRedundancy returns the Redundancy field value if set, zero value otherwise.
func (o *PortResponse) GetRedundancy() PortRedundancy {
	if o == nil || IsNil(o.Redundancy) {
		var ret PortRedundancy
		return ret
	}
	return *o.Redundancy
}

// GetRedundancyOk returns a tuple with the Redundancy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortResponse) GetRedundancyOk() (*PortRedundancy, bool) {
	if o == nil || IsNil(o.Redundancy) {
		return nil, false
	}
	return o.Redundancy, true
}

// HasRedundancy returns a boolean if a field has been set.
func (o *PortResponse) HasRedundancy() bool {
	if o != nil && !IsNil(o.Redundancy) {
		return true
	}

	return false
}

// SetRedundancy gets a reference to the given PortRedundancy and assigns it to the Redundancy field.
func (o *PortResponse) SetRedundancy(v PortRedundancy) {
	o.Redundancy = &v
}

// GetEncapsulation returns the Encapsulation field value if set, zero value otherwise.
func (o *PortResponse) GetEncapsulation() PortEncapsulation {
	if o == nil || IsNil(o.Encapsulation) {
		var ret PortEncapsulation
		return ret
	}
	return *o.Encapsulation
}

// GetEncapsulationOk returns a tuple with the Encapsulation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortResponse) GetEncapsulationOk() (*PortEncapsulation, bool) {
	if o == nil || IsNil(o.Encapsulation) {
		return nil, false
	}
	return o.Encapsulation, true
}

// HasEncapsulation returns a boolean if a field has been set.
func (o *PortResponse) HasEncapsulation() bool {
	if o != nil && !IsNil(o.Encapsulation) {
		return true
	}

	return false
}

// SetEncapsulation gets a reference to the given PortEncapsulation and assigns it to the Encapsulation field.
func (o *PortResponse) SetEncapsulation(v PortEncapsulation) {
	o.Encapsulation = &v
}

// GetLagEnabled returns the LagEnabled field value if set, zero value otherwise.
func (o *PortResponse) GetLagEnabled() bool {
	if o == nil || IsNil(o.LagEnabled) {
		var ret bool
		return ret
	}
	return *o.LagEnabled
}

// GetLagEnabledOk returns a tuple with the LagEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortResponse) GetLagEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.LagEnabled) {
		return nil, false
	}
	return o.LagEnabled, true
}

// HasLagEnabled returns a boolean if a field has been set.
func (o *PortResponse) HasLagEnabled() bool {
	if o != nil && !IsNil(o.LagEnabled) {
		return true
	}

	return false
}

// SetLagEnabled gets a reference to the given bool and assigns it to the LagEnabled field.
func (o *PortResponse) SetLagEnabled(v bool) {
	o.LagEnabled = &v
}

// GetLag returns the Lag field value if set, zero value otherwise.
func (o *PortResponse) GetLag() PortLag {
	if o == nil || IsNil(o.Lag) {
		var ret PortLag
		return ret
	}
	return *o.Lag
}

// GetLagOk returns a tuple with the Lag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortResponse) GetLagOk() (*PortLag, bool) {
	if o == nil || IsNil(o.Lag) {
		return nil, false
	}
	return o.Lag, true
}

// HasLag returns a boolean if a field has been set.
func (o *PortResponse) HasLag() bool {
	if o != nil && !IsNil(o.Lag) {
		return true
	}

	return false
}

// SetLag gets a reference to the given PortLag and assigns it to the Lag field.
func (o *PortResponse) SetLag(v PortLag) {
	o.Lag = &v
}

// GetAsn returns the Asn field value if set, zero value otherwise.
func (o *PortResponse) GetAsn() int32 {
	if o == nil || IsNil(o.Asn) {
		var ret int32
		return ret
	}
	return *o.Asn
}

// GetAsnOk returns a tuple with the Asn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortResponse) GetAsnOk() (*int32, bool) {
	if o == nil || IsNil(o.Asn) {
		return nil, false
	}
	return o.Asn, true
}

// HasAsn returns a boolean if a field has been set.
func (o *PortResponse) HasAsn() bool {
	if o != nil && !IsNil(o.Asn) {
		return true
	}

	return false
}

// SetAsn gets a reference to the given int32 and assigns it to the Asn field.
func (o *PortResponse) SetAsn(v int32) {
	o.Asn = &v
}

// GetSettings returns the Settings field value if set, zero value otherwise.
func (o *PortResponse) GetSettings() PortSettings {
	if o == nil || IsNil(o.Settings) {
		var ret PortSettings
		return ret
	}
	return *o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortResponse) GetSettingsOk() (*PortSettings, bool) {
	if o == nil || IsNil(o.Settings) {
		return nil, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *PortResponse) HasSettings() bool {
	if o != nil && !IsNil(o.Settings) {
		return true
	}

	return false
}

// SetSettings gets a reference to the given PortSettings and assigns it to the Settings field.
func (o *PortResponse) SetSettings(v PortSettings) {
	o.Settings = &v
}

// GetPhysicalPortQuantity returns the PhysicalPortQuantity field value if set, zero value otherwise.
func (o *PortResponse) GetPhysicalPortQuantity() int32 {
	if o == nil || IsNil(o.PhysicalPortQuantity) {
		var ret int32
		return ret
	}
	return *o.PhysicalPortQuantity
}

// GetPhysicalPortQuantityOk returns a tuple with the PhysicalPortQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortResponse) GetPhysicalPortQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.PhysicalPortQuantity) {
		return nil, false
	}
	return o.PhysicalPortQuantity, true
}

// HasPhysicalPortQuantity returns a boolean if a field has been set.
func (o *PortResponse) HasPhysicalPortQuantity() bool {
	if o != nil && !IsNil(o.PhysicalPortQuantity) {
		return true
	}

	return false
}

// SetPhysicalPortQuantity gets a reference to the given int32 and assigns it to the PhysicalPortQuantity field.
func (o *PortResponse) SetPhysicalPortQuantity(v int32) {
	o.PhysicalPortQuantity = &v
}

// GetNotifications returns the Notifications field value if set, zero value otherwise.
func (o *PortResponse) GetNotifications() []PortNotification {
	if o == nil || IsNil(o.Notifications) {
		var ret []PortNotification
		return ret
	}
	return o.Notifications
}

// GetNotificationsOk returns a tuple with the Notifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortResponse) GetNotificationsOk() ([]PortNotification, bool) {
	if o == nil || IsNil(o.Notifications) {
		return nil, false
	}
	return o.Notifications, true
}

// HasNotifications returns a boolean if a field has been set.
func (o *PortResponse) HasNotifications() bool {
	if o != nil && !IsNil(o.Notifications) {
		return true
	}

	return false
}

// SetNotifications gets a reference to the given []PortNotification and assigns it to the Notifications field.
func (o *PortResponse) SetNotifications(v []PortNotification) {
	o.Notifications = v
}

// GetAdditionalInfo returns the AdditionalInfo field value if set, zero value otherwise.
func (o *PortResponse) GetAdditionalInfo() []PortAdditionalInfo {
	if o == nil || IsNil(o.AdditionalInfo) {
		var ret []PortAdditionalInfo
		return ret
	}
	return o.AdditionalInfo
}

// GetAdditionalInfoOk returns a tuple with the AdditionalInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortResponse) GetAdditionalInfoOk() ([]PortAdditionalInfo, bool) {
	if o == nil || IsNil(o.AdditionalInfo) {
		return nil, false
	}
	return o.AdditionalInfo, true
}

// HasAdditionalInfo returns a boolean if a field has been set.
func (o *PortResponse) HasAdditionalInfo() bool {
	if o != nil && !IsNil(o.AdditionalInfo) {
		return true
	}

	return false
}

// SetAdditionalInfo gets a reference to the given []PortAdditionalInfo and assigns it to the AdditionalInfo field.
func (o *PortResponse) SetAdditionalInfo(v []PortAdditionalInfo) {
	o.AdditionalInfo = v
}

// GetPhysicalPorts returns the PhysicalPorts field value if set, zero value otherwise.
func (o *PortResponse) GetPhysicalPorts() []PhysicalPort {
	if o == nil || IsNil(o.PhysicalPorts) {
		var ret []PhysicalPort
		return ret
	}
	return o.PhysicalPorts
}

// GetPhysicalPortsOk returns a tuple with the PhysicalPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortResponse) GetPhysicalPortsOk() ([]PhysicalPort, bool) {
	if o == nil || IsNil(o.PhysicalPorts) {
		return nil, false
	}
	return o.PhysicalPorts, true
}

// HasPhysicalPorts returns a boolean if a field has been set.
func (o *PortResponse) HasPhysicalPorts() bool {
	if o != nil && !IsNil(o.PhysicalPorts) {
		return true
	}

	return false
}

// SetPhysicalPorts gets a reference to the given []PhysicalPort and assigns it to the PhysicalPorts field.
func (o *PortResponse) SetPhysicalPorts(v []PhysicalPort) {
	o.PhysicalPorts = v
}

// GetLoas returns the Loas field value if set, zero value otherwise.
func (o *PortResponse) GetLoas() []PortLoa {
	if o == nil || IsNil(o.Loas) {
		var ret []PortLoa
		return ret
	}
	return o.Loas
}

// GetLoasOk returns a tuple with the Loas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortResponse) GetLoasOk() ([]PortLoa, bool) {
	if o == nil || IsNil(o.Loas) {
		return nil, false
	}
	return o.Loas, true
}

// HasLoas returns a boolean if a field has been set.
func (o *PortResponse) HasLoas() bool {
	if o != nil && !IsNil(o.Loas) {
		return true
	}

	return false
}

// SetLoas gets a reference to the given []PortLoa and assigns it to the Loas field.
func (o *PortResponse) SetLoas(v []PortLoa) {
	o.Loas = v
}

func (o PortResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PortResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.PhysicalPortsSpeed) {
		toSerialize["physicalPortsSpeed"] = o.PhysicalPortsSpeed
	}
	if !IsNil(o.ConnectionsCount) {
		toSerialize["connectionsCount"] = o.ConnectionsCount
	}
	if !IsNil(o.PhysicalPortsType) {
		toSerialize["physicalPortsType"] = o.PhysicalPortsType
	}
	if !IsNil(o.PhysicalPortsCount) {
		toSerialize["physicalPortsCount"] = o.PhysicalPortsCount
	}
	if !IsNil(o.ConnectivitySourceType) {
		toSerialize["connectivitySourceType"] = o.ConnectivitySourceType
	}
	if !IsNil(o.BmmrType) {
		toSerialize["bmmrType"] = o.BmmrType
	}
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	if !IsNil(o.CvpId) {
		toSerialize["cvpId"] = o.CvpId
	}
	if !IsNil(o.Operation) {
		toSerialize["operation"] = o.Operation
	}
	if !IsNil(o.Account) {
		toSerialize["account"] = o.Account
	}
	if !IsNil(o.Changelog) {
		toSerialize["changelog"] = o.Changelog
	}
	if !IsNil(o.ServiceType) {
		toSerialize["serviceType"] = o.ServiceType
	}
	if !IsNil(o.Bandwidth) {
		toSerialize["bandwidth"] = o.Bandwidth
	}
	if !IsNil(o.AvailableBandwidth) {
		toSerialize["availableBandwidth"] = o.AvailableBandwidth
	}
	if !IsNil(o.UsedBandwidth) {
		toSerialize["usedBandwidth"] = o.UsedBandwidth
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.Interface) {
		toSerialize["interface"] = o.Interface
	}
	if !IsNil(o.DemarcationPointIbx) {
		toSerialize["demarcationPointIbx"] = o.DemarcationPointIbx
	}
	if !IsNil(o.TetherIbx) {
		toSerialize["tetherIbx"] = o.TetherIbx
	}
	if !IsNil(o.DemarcationPoint) {
		toSerialize["demarcationPoint"] = o.DemarcationPoint
	}
	if !IsNil(o.Redundancy) {
		toSerialize["redundancy"] = o.Redundancy
	}
	if !IsNil(o.Encapsulation) {
		toSerialize["encapsulation"] = o.Encapsulation
	}
	if !IsNil(o.LagEnabled) {
		toSerialize["lagEnabled"] = o.LagEnabled
	}
	if !IsNil(o.Lag) {
		toSerialize["lag"] = o.Lag
	}
	if !IsNil(o.Asn) {
		toSerialize["asn"] = o.Asn
	}
	if !IsNil(o.Settings) {
		toSerialize["settings"] = o.Settings
	}
	if !IsNil(o.PhysicalPortQuantity) {
		toSerialize["physicalPortQuantity"] = o.PhysicalPortQuantity
	}
	if !IsNil(o.Notifications) {
		toSerialize["notifications"] = o.Notifications
	}
	if !IsNil(o.AdditionalInfo) {
		toSerialize["additionalInfo"] = o.AdditionalInfo
	}
	if !IsNil(o.PhysicalPorts) {
		toSerialize["physicalPorts"] = o.PhysicalPorts
	}
	if !IsNil(o.Loas) {
		toSerialize["loas"] = o.Loas
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PortResponse) UnmarshalJSON(data []byte) (err error) {
	varPortResponse := _PortResponse{}

	err = json.Unmarshal(data, &varPortResponse)

	if err != nil {
		return err
	}

	*o = PortResponse(varPortResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "id")
		delete(additionalProperties, "href")
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "physicalPortsSpeed")
		delete(additionalProperties, "connectionsCount")
		delete(additionalProperties, "physicalPortsType")
		delete(additionalProperties, "physicalPortsCount")
		delete(additionalProperties, "connectivitySourceType")
		delete(additionalProperties, "bmmrType")
		delete(additionalProperties, "project")
		delete(additionalProperties, "state")
		delete(additionalProperties, "order")
		delete(additionalProperties, "cvpId")
		delete(additionalProperties, "operation")
		delete(additionalProperties, "account")
		delete(additionalProperties, "changelog")
		delete(additionalProperties, "serviceType")
		delete(additionalProperties, "bandwidth")
		delete(additionalProperties, "availableBandwidth")
		delete(additionalProperties, "usedBandwidth")
		delete(additionalProperties, "location")
		delete(additionalProperties, "device")
		delete(additionalProperties, "interface")
		delete(additionalProperties, "demarcationPointIbx")
		delete(additionalProperties, "tetherIbx")
		delete(additionalProperties, "demarcationPoint")
		delete(additionalProperties, "redundancy")
		delete(additionalProperties, "encapsulation")
		delete(additionalProperties, "lagEnabled")
		delete(additionalProperties, "lag")
		delete(additionalProperties, "asn")
		delete(additionalProperties, "settings")
		delete(additionalProperties, "physicalPortQuantity")
		delete(additionalProperties, "notifications")
		delete(additionalProperties, "additionalInfo")
		delete(additionalProperties, "physicalPorts")
		delete(additionalProperties, "loas")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePortResponse struct {
	value *PortResponse
	isSet bool
}

func (v NullablePortResponse) Get() *PortResponse {
	return v.value
}

func (v *NullablePortResponse) Set(val *PortResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePortResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePortResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortResponse(val *PortResponse) *NullablePortResponse {
	return &NullablePortResponse{value: val, isSet: true}
}

func (v NullablePortResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
