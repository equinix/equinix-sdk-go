/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"time"
)

// checks if the NetworkChange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkChange{}

// NetworkChange Current state of latest network change
type NetworkChange struct {
	// Network URI
	Href *string `json:"href,omitempty"`
	// Uniquely identifies a change
	Uuid   *string              `json:"uuid,omitempty"`
	Type   *NetworkChangeType   `json:"type,omitempty"`
	Status *NetworkChangeStatus `json:"status,omitempty"`
	// Set when change flow starts
	CreatedDateTime *time.Time `json:"createdDateTime,omitempty"`
	// Set when change object is updated
	UpdatedDateTime      *time.Time               `json:"updatedDateTime,omitempty"`
	Data                 []NetworkChangeOperation `json:"data,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NetworkChange NetworkChange

// NewNetworkChange instantiates a new NetworkChange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkChange() *NetworkChange {
	this := NetworkChange{}
	return &this
}

// NewNetworkChangeWithDefaults instantiates a new NetworkChange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkChangeWithDefaults() *NetworkChange {
	this := NetworkChange{}
	return &this
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *NetworkChange) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkChange) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *NetworkChange) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *NetworkChange) SetHref(v string) {
	o.Href = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *NetworkChange) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkChange) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *NetworkChange) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *NetworkChange) SetUuid(v string) {
	o.Uuid = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *NetworkChange) GetType() NetworkChangeType {
	if o == nil || IsNil(o.Type) {
		var ret NetworkChangeType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkChange) GetTypeOk() (*NetworkChangeType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *NetworkChange) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given NetworkChangeType and assigns it to the Type field.
func (o *NetworkChange) SetType(v NetworkChangeType) {
	o.Type = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *NetworkChange) GetStatus() NetworkChangeStatus {
	if o == nil || IsNil(o.Status) {
		var ret NetworkChangeStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkChange) GetStatusOk() (*NetworkChangeStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *NetworkChange) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NetworkChangeStatus and assigns it to the Status field.
func (o *NetworkChange) SetStatus(v NetworkChangeStatus) {
	o.Status = &v
}

// GetCreatedDateTime returns the CreatedDateTime field value if set, zero value otherwise.
func (o *NetworkChange) GetCreatedDateTime() time.Time {
	if o == nil || IsNil(o.CreatedDateTime) {
		var ret time.Time
		return ret
	}
	return *o.CreatedDateTime
}

// GetCreatedDateTimeOk returns a tuple with the CreatedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkChange) GetCreatedDateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedDateTime) {
		return nil, false
	}
	return o.CreatedDateTime, true
}

// HasCreatedDateTime returns a boolean if a field has been set.
func (o *NetworkChange) HasCreatedDateTime() bool {
	if o != nil && !IsNil(o.CreatedDateTime) {
		return true
	}

	return false
}

// SetCreatedDateTime gets a reference to the given time.Time and assigns it to the CreatedDateTime field.
func (o *NetworkChange) SetCreatedDateTime(v time.Time) {
	o.CreatedDateTime = &v
}

// GetUpdatedDateTime returns the UpdatedDateTime field value if set, zero value otherwise.
func (o *NetworkChange) GetUpdatedDateTime() time.Time {
	if o == nil || IsNil(o.UpdatedDateTime) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedDateTime
}

// GetUpdatedDateTimeOk returns a tuple with the UpdatedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkChange) GetUpdatedDateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedDateTime) {
		return nil, false
	}
	return o.UpdatedDateTime, true
}

// HasUpdatedDateTime returns a boolean if a field has been set.
func (o *NetworkChange) HasUpdatedDateTime() bool {
	if o != nil && !IsNil(o.UpdatedDateTime) {
		return true
	}

	return false
}

// SetUpdatedDateTime gets a reference to the given time.Time and assigns it to the UpdatedDateTime field.
func (o *NetworkChange) SetUpdatedDateTime(v time.Time) {
	o.UpdatedDateTime = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *NetworkChange) GetData() []NetworkChangeOperation {
	if o == nil || IsNil(o.Data) {
		var ret []NetworkChangeOperation
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkChange) GetDataOk() ([]NetworkChangeOperation, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *NetworkChange) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []NetworkChangeOperation and assigns it to the Data field.
func (o *NetworkChange) SetData(v []NetworkChangeOperation) {
	o.Data = v
}

func (o NetworkChange) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkChange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.CreatedDateTime) {
		toSerialize["createdDateTime"] = o.CreatedDateTime
	}
	if !IsNil(o.UpdatedDateTime) {
		toSerialize["updatedDateTime"] = o.UpdatedDateTime
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NetworkChange) UnmarshalJSON(data []byte) (err error) {
	varNetworkChange := _NetworkChange{}

	err = json.Unmarshal(data, &varNetworkChange)

	if err != nil {
		return err
	}

	*o = NetworkChange(varNetworkChange)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "href")
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "type")
		delete(additionalProperties, "status")
		delete(additionalProperties, "createdDateTime")
		delete(additionalProperties, "updatedDateTime")
		delete(additionalProperties, "data")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNetworkChange struct {
	value *NetworkChange
	isSet bool
}

func (v NullableNetworkChange) Get() *NetworkChange {
	return v.value
}

func (v *NullableNetworkChange) Set(val *NetworkChange) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkChange) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkChange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkChange(val *NetworkChange) *NullableNetworkChange {
	return &NullableNetworkChange{value: val, isSet: true}
}

func (v NullableNetworkChange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkChange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
