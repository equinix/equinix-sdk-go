/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// ConnectionRouteFilterDataType Route filter type
type ConnectionRouteFilterDataType string

// List of ConnectionRouteFilterData_type
const (
	CONNECTIONROUTEFILTERDATATYPE_IPV4_PREFIX_FILTER ConnectionRouteFilterDataType = "BGP_IPv4_PREFIX_FILTER"
	CONNECTIONROUTEFILTERDATATYPE_IPV6_PREFIX_FILTER ConnectionRouteFilterDataType = "BGP_IPv6_PREFIX_FILTER"
)

// All allowed values of ConnectionRouteFilterDataType enum
var AllowedConnectionRouteFilterDataTypeEnumValues = []ConnectionRouteFilterDataType{
	"BGP_IPv4_PREFIX_FILTER",
	"BGP_IPv6_PREFIX_FILTER",
}

func (v *ConnectionRouteFilterDataType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConnectionRouteFilterDataType(value)
	for _, existing := range AllowedConnectionRouteFilterDataTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConnectionRouteFilterDataType", value)
}

// NewConnectionRouteFilterDataTypeFromValue returns a pointer to a valid ConnectionRouteFilterDataType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConnectionRouteFilterDataTypeFromValue(v string) (*ConnectionRouteFilterDataType, error) {
	ev := ConnectionRouteFilterDataType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConnectionRouteFilterDataType: valid values are %v", v, AllowedConnectionRouteFilterDataTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConnectionRouteFilterDataType) IsValid() bool {
	for _, existing := range AllowedConnectionRouteFilterDataTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConnectionRouteFilterData_type value
func (v ConnectionRouteFilterDataType) Ptr() *ConnectionRouteFilterDataType {
	return &v
}

type NullableConnectionRouteFilterDataType struct {
	value *ConnectionRouteFilterDataType
	isSet bool
}

func (v NullableConnectionRouteFilterDataType) Get() *ConnectionRouteFilterDataType {
	return v.value
}

func (v *NullableConnectionRouteFilterDataType) Set(val *ConnectionRouteFilterDataType) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionRouteFilterDataType) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionRouteFilterDataType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionRouteFilterDataType(val *ConnectionRouteFilterDataType) *NullableConnectionRouteFilterDataType {
	return &NullableConnectionRouteFilterDataType{value: val, isSet: true}
}

func (v NullableConnectionRouteFilterDataType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionRouteFilterDataType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
