/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// SimplifiedNotificationType Notification Type
type SimplifiedNotificationType string

// List of SimplifiedNotification_type
const (
	SIMPLIFIEDNOTIFICATIONTYPE_NOTIFICATION            SimplifiedNotificationType = "NOTIFICATION"
	SIMPLIFIEDNOTIFICATIONTYPE_BANDWIDTH_ALERT         SimplifiedNotificationType = "BANDWIDTH_ALERT"
	SIMPLIFIEDNOTIFICATIONTYPE_CONNECTION_APPROVAL     SimplifiedNotificationType = "CONNECTION_APPROVAL"
	SIMPLIFIEDNOTIFICATIONTYPE_PROFILE_LIFECYCLE       SimplifiedNotificationType = "PROFILE_LIFECYCLE"
	SIMPLIFIEDNOTIFICATIONTYPE_ALL                     SimplifiedNotificationType = "ALL"
	SIMPLIFIEDNOTIFICATIONTYPE_SALES_REP_NOTIFICATIONS SimplifiedNotificationType = "SALES_REP_NOTIFICATIONS"
)

// All allowed values of SimplifiedNotificationType enum
var AllowedSimplifiedNotificationTypeEnumValues = []SimplifiedNotificationType{
	"NOTIFICATION",
	"BANDWIDTH_ALERT",
	"CONNECTION_APPROVAL",
	"PROFILE_LIFECYCLE",
	"ALL",
	"SALES_REP_NOTIFICATIONS",
}

func (v *SimplifiedNotificationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SimplifiedNotificationType(value)
	for _, existing := range AllowedSimplifiedNotificationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SimplifiedNotificationType", value)
}

// NewSimplifiedNotificationTypeFromValue returns a pointer to a valid SimplifiedNotificationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSimplifiedNotificationTypeFromValue(v string) (*SimplifiedNotificationType, error) {
	ev := SimplifiedNotificationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SimplifiedNotificationType: valid values are %v", v, AllowedSimplifiedNotificationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SimplifiedNotificationType) IsValid() bool {
	for _, existing := range AllowedSimplifiedNotificationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SimplifiedNotification_type value
func (v SimplifiedNotificationType) Ptr() *SimplifiedNotificationType {
	return &v
}

type NullableSimplifiedNotificationType struct {
	value *SimplifiedNotificationType
	isSet bool
}

func (v NullableSimplifiedNotificationType) Get() *SimplifiedNotificationType {
	return v.value
}

func (v *NullableSimplifiedNotificationType) Set(val *SimplifiedNotificationType) {
	v.value = val
	v.isSet = true
}

func (v NullableSimplifiedNotificationType) IsSet() bool {
	return v.isSet
}

func (v *NullableSimplifiedNotificationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSimplifiedNotificationType(val *SimplifiedNotificationType) *NullableSimplifiedNotificationType {
	return &NullableSimplifiedNotificationType{value: val, isSet: true}
}

func (v NullableSimplifiedNotificationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSimplifiedNotificationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
