/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// AWSProviderResourceResponse - struct for AWSProviderResourceResponse
type AWSProviderResourceResponse struct {
	AWSDirectConnectResponse         *AWSDirectConnectResponse
	AWSPermission                    *AWSPermission
	AWSVirtualPrivateGatewayResponse *AWSVirtualPrivateGatewayResponse
}

// AWSDirectConnectResponseAsAWSProviderResourceResponse is a convenience function that returns AWSDirectConnectResponse wrapped in AWSProviderResourceResponse
func AWSDirectConnectResponseAsAWSProviderResourceResponse(v *AWSDirectConnectResponse) AWSProviderResourceResponse {
	return AWSProviderResourceResponse{
		AWSDirectConnectResponse: v,
	}
}

// AWSPermissionAsAWSProviderResourceResponse is a convenience function that returns AWSPermission wrapped in AWSProviderResourceResponse
func AWSPermissionAsAWSProviderResourceResponse(v *AWSPermission) AWSProviderResourceResponse {
	return AWSProviderResourceResponse{
		AWSPermission: v,
	}
}

// AWSVirtualPrivateGatewayResponseAsAWSProviderResourceResponse is a convenience function that returns AWSVirtualPrivateGatewayResponse wrapped in AWSProviderResourceResponse
func AWSVirtualPrivateGatewayResponseAsAWSProviderResourceResponse(v *AWSVirtualPrivateGatewayResponse) AWSProviderResourceResponse {
	return AWSProviderResourceResponse{
		AWSVirtualPrivateGatewayResponse: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *AWSProviderResourceResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AWSDirectConnectResponse
	err = newStrictDecoder(data).Decode(&dst.AWSDirectConnectResponse)
	if err == nil {
		jsonAWSDirectConnectResponse, _ := json.Marshal(dst.AWSDirectConnectResponse)
		if string(jsonAWSDirectConnectResponse) == "{}" { // empty struct
			dst.AWSDirectConnectResponse = nil
		} else {
			if err = validator.Validate(dst.AWSDirectConnectResponse); err != nil {
				dst.AWSDirectConnectResponse = nil
			} else {
				match++
			}
		}
	} else {
		dst.AWSDirectConnectResponse = nil
	}

	// try to unmarshal data into AWSPermission
	err = newStrictDecoder(data).Decode(&dst.AWSPermission)
	if err == nil {
		jsonAWSPermission, _ := json.Marshal(dst.AWSPermission)
		if string(jsonAWSPermission) == "{}" { // empty struct
			dst.AWSPermission = nil
		} else {
			if err = validator.Validate(dst.AWSPermission); err != nil {
				dst.AWSPermission = nil
			} else {
				match++
			}
		}
	} else {
		dst.AWSPermission = nil
	}

	// try to unmarshal data into AWSVirtualPrivateGatewayResponse
	err = newStrictDecoder(data).Decode(&dst.AWSVirtualPrivateGatewayResponse)
	if err == nil {
		jsonAWSVirtualPrivateGatewayResponse, _ := json.Marshal(dst.AWSVirtualPrivateGatewayResponse)
		if string(jsonAWSVirtualPrivateGatewayResponse) == "{}" { // empty struct
			dst.AWSVirtualPrivateGatewayResponse = nil
		} else {
			if err = validator.Validate(dst.AWSVirtualPrivateGatewayResponse); err != nil {
				dst.AWSVirtualPrivateGatewayResponse = nil
			} else {
				match++
			}
		}
	} else {
		dst.AWSVirtualPrivateGatewayResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AWSDirectConnectResponse = nil
		dst.AWSPermission = nil
		dst.AWSVirtualPrivateGatewayResponse = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AWSProviderResourceResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AWSProviderResourceResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AWSProviderResourceResponse) MarshalJSON() ([]byte, error) {
	if src.AWSDirectConnectResponse != nil {
		return json.Marshal(&src.AWSDirectConnectResponse)
	}

	if src.AWSPermission != nil {
		return json.Marshal(&src.AWSPermission)
	}

	if src.AWSVirtualPrivateGatewayResponse != nil {
		return json.Marshal(&src.AWSVirtualPrivateGatewayResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AWSProviderResourceResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.AWSDirectConnectResponse != nil {
		return obj.AWSDirectConnectResponse
	}

	if obj.AWSPermission != nil {
		return obj.AWSPermission
	}

	if obj.AWSVirtualPrivateGatewayResponse != nil {
		return obj.AWSVirtualPrivateGatewayResponse
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj AWSProviderResourceResponse) GetActualInstanceValue() interface{} {
	if obj.AWSDirectConnectResponse != nil {
		return *obj.AWSDirectConnectResponse
	}

	if obj.AWSPermission != nil {
		return *obj.AWSPermission
	}

	if obj.AWSVirtualPrivateGatewayResponse != nil {
		return *obj.AWSVirtualPrivateGatewayResponse
	}

	// all schemas are nil
	return nil
}

type NullableAWSProviderResourceResponse struct {
	value *AWSProviderResourceResponse
	isSet bool
}

func (v NullableAWSProviderResourceResponse) Get() *AWSProviderResourceResponse {
	return v.value
}

func (v *NullableAWSProviderResourceResponse) Set(val *AWSProviderResourceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAWSProviderResourceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAWSProviderResourceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAWSProviderResourceResponse(val *AWSProviderResourceResponse) *NullableAWSProviderResourceResponse {
	return &NullableAWSProviderResourceResponse{value: val, isSet: true}
}

func (v NullableAWSProviderResourceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAWSProviderResourceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
