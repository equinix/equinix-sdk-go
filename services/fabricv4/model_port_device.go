/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the PortDevice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PortDevice{}

// PortDevice Port device
type PortDevice struct {
	// Device name
	Name                 *string               `json:"name,omitempty"`
	Redundancy           *PortDeviceRedundancy `json:"redundancy,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PortDevice PortDevice

// NewPortDevice instantiates a new PortDevice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPortDevice() *PortDevice {
	this := PortDevice{}
	return &this
}

// NewPortDeviceWithDefaults instantiates a new PortDevice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortDeviceWithDefaults() *PortDevice {
	this := PortDevice{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PortDevice) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortDevice) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PortDevice) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PortDevice) SetName(v string) {
	o.Name = &v
}

// GetRedundancy returns the Redundancy field value if set, zero value otherwise.
func (o *PortDevice) GetRedundancy() PortDeviceRedundancy {
	if o == nil || IsNil(o.Redundancy) {
		var ret PortDeviceRedundancy
		return ret
	}
	return *o.Redundancy
}

// GetRedundancyOk returns a tuple with the Redundancy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortDevice) GetRedundancyOk() (*PortDeviceRedundancy, bool) {
	if o == nil || IsNil(o.Redundancy) {
		return nil, false
	}
	return o.Redundancy, true
}

// HasRedundancy returns a boolean if a field has been set.
func (o *PortDevice) HasRedundancy() bool {
	if o != nil && !IsNil(o.Redundancy) {
		return true
	}

	return false
}

// SetRedundancy gets a reference to the given PortDeviceRedundancy and assigns it to the Redundancy field.
func (o *PortDevice) SetRedundancy(v PortDeviceRedundancy) {
	o.Redundancy = &v
}

func (o PortDevice) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PortDevice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Redundancy) {
		toSerialize["redundancy"] = o.Redundancy
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PortDevice) UnmarshalJSON(data []byte) (err error) {
	varPortDevice := _PortDevice{}

	err = json.Unmarshal(data, &varPortDevice)

	if err != nil {
		return err
	}

	*o = PortDevice(varPortDevice)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "redundancy")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePortDevice struct {
	value *PortDevice
	isSet bool
}

func (v NullablePortDevice) Get() *PortDevice {
	return v.value
}

func (v *NullablePortDevice) Set(val *PortDevice) {
	v.value = val
	v.isSet = true
}

func (v NullablePortDevice) IsSet() bool {
	return v.isSet
}

func (v *NullablePortDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortDevice(val *PortDevice) *NullablePortDevice {
	return &NullablePortDevice{value: val, isSet: true}
}

func (v NullablePortDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
