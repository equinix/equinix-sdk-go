/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// PtpAdvanceConfigurationTransportMode the model 'PtpAdvanceConfigurationTransportMode'
type PtpAdvanceConfigurationTransportMode string

// List of ptpAdvanceConfiguration_transportMode
const (
	PTPADVANCECONFIGURATIONTRANSPORTMODE_MULTICAST PtpAdvanceConfigurationTransportMode = "MULTICAST"
	PTPADVANCECONFIGURATIONTRANSPORTMODE_UNICAST   PtpAdvanceConfigurationTransportMode = "UNICAST"
	PTPADVANCECONFIGURATIONTRANSPORTMODE_HYBRID    PtpAdvanceConfigurationTransportMode = "HYBRID"
)

// All allowed values of PtpAdvanceConfigurationTransportMode enum
var AllowedPtpAdvanceConfigurationTransportModeEnumValues = []PtpAdvanceConfigurationTransportMode{
	"MULTICAST",
	"UNICAST",
	"HYBRID",
}

func (v *PtpAdvanceConfigurationTransportMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PtpAdvanceConfigurationTransportMode(value)
	for _, existing := range AllowedPtpAdvanceConfigurationTransportModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PtpAdvanceConfigurationTransportMode", value)
}

// NewPtpAdvanceConfigurationTransportModeFromValue returns a pointer to a valid PtpAdvanceConfigurationTransportMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPtpAdvanceConfigurationTransportModeFromValue(v string) (*PtpAdvanceConfigurationTransportMode, error) {
	ev := PtpAdvanceConfigurationTransportMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PtpAdvanceConfigurationTransportMode: valid values are %v", v, AllowedPtpAdvanceConfigurationTransportModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PtpAdvanceConfigurationTransportMode) IsValid() bool {
	for _, existing := range AllowedPtpAdvanceConfigurationTransportModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ptpAdvanceConfiguration_transportMode value
func (v PtpAdvanceConfigurationTransportMode) Ptr() *PtpAdvanceConfigurationTransportMode {
	return &v
}

type NullablePtpAdvanceConfigurationTransportMode struct {
	value *PtpAdvanceConfigurationTransportMode
	isSet bool
}

func (v NullablePtpAdvanceConfigurationTransportMode) Get() *PtpAdvanceConfigurationTransportMode {
	return v.value
}

func (v *NullablePtpAdvanceConfigurationTransportMode) Set(val *PtpAdvanceConfigurationTransportMode) {
	v.value = val
	v.isSet = true
}

func (v NullablePtpAdvanceConfigurationTransportMode) IsSet() bool {
	return v.isSet
}

func (v *NullablePtpAdvanceConfigurationTransportMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePtpAdvanceConfigurationTransportMode(val *PtpAdvanceConfigurationTransportMode) *NullablePtpAdvanceConfigurationTransportMode {
	return &NullablePtpAdvanceConfigurationTransportMode{value: val, isSet: true}
}

func (v NullablePtpAdvanceConfigurationTransportMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePtpAdvanceConfigurationTransportMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
