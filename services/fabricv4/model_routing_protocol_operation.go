/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the RoutingProtocolOperation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoutingProtocolOperation{}

// RoutingProtocolOperation struct for RoutingProtocolOperation
type RoutingProtocolOperation struct {
	Errors               []Error `json:"errors,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RoutingProtocolOperation RoutingProtocolOperation

// NewRoutingProtocolOperation instantiates a new RoutingProtocolOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoutingProtocolOperation() *RoutingProtocolOperation {
	this := RoutingProtocolOperation{}
	return &this
}

// NewRoutingProtocolOperationWithDefaults instantiates a new RoutingProtocolOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoutingProtocolOperationWithDefaults() *RoutingProtocolOperation {
	this := RoutingProtocolOperation{}
	return &this
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *RoutingProtocolOperation) GetErrors() []Error {
	if o == nil || IsNil(o.Errors) {
		var ret []Error
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingProtocolOperation) GetErrorsOk() ([]Error, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *RoutingProtocolOperation) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []Error and assigns it to the Errors field.
func (o *RoutingProtocolOperation) SetErrors(v []Error) {
	o.Errors = v
}

func (o RoutingProtocolOperation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoutingProtocolOperation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RoutingProtocolOperation) UnmarshalJSON(data []byte) (err error) {
	varRoutingProtocolOperation := _RoutingProtocolOperation{}

	err = json.Unmarshal(data, &varRoutingProtocolOperation)

	if err != nil {
		return err
	}

	*o = RoutingProtocolOperation(varRoutingProtocolOperation)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "errors")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRoutingProtocolOperation struct {
	value *RoutingProtocolOperation
	isSet bool
}

func (v NullableRoutingProtocolOperation) Get() *RoutingProtocolOperation {
	return v.value
}

func (v *NullableRoutingProtocolOperation) Set(val *RoutingProtocolOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutingProtocolOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutingProtocolOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutingProtocolOperation(val *RoutingProtocolOperation) *NullableRoutingProtocolOperation {
	return &NullableRoutingProtocolOperation{value: val, isSet: true}
}

func (v NullableRoutingProtocolOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutingProtocolOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
