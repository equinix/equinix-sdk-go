/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// CloudRouterChangeType Type of change
type CloudRouterChangeType string

// List of CloudRouterChange_type
const (
	CLOUDROUTERCHANGETYPE_UPDATE         CloudRouterChangeType = "ROUTER_UPDATE"
	CLOUDROUTERCHANGETYPE_PACKAGE_UPDATE CloudRouterChangeType = "ROUTER_PACKAGE_UPDATE"
)

// All allowed values of CloudRouterChangeType enum
var AllowedCloudRouterChangeTypeEnumValues = []CloudRouterChangeType{
	"ROUTER_UPDATE",
	"ROUTER_PACKAGE_UPDATE",
}

func (v *CloudRouterChangeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CloudRouterChangeType(value)
	for _, existing := range AllowedCloudRouterChangeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CloudRouterChangeType", value)
}

// NewCloudRouterChangeTypeFromValue returns a pointer to a valid CloudRouterChangeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCloudRouterChangeTypeFromValue(v string) (*CloudRouterChangeType, error) {
	ev := CloudRouterChangeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CloudRouterChangeType: valid values are %v", v, AllowedCloudRouterChangeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CloudRouterChangeType) IsValid() bool {
	for _, existing := range AllowedCloudRouterChangeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CloudRouterChange_type value
func (v CloudRouterChangeType) Ptr() *CloudRouterChangeType {
	return &v
}

type NullableCloudRouterChangeType struct {
	value *CloudRouterChangeType
	isSet bool
}

func (v NullableCloudRouterChangeType) Get() *CloudRouterChangeType {
	return v.value
}

func (v *NullableCloudRouterChangeType) Set(val *CloudRouterChangeType) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudRouterChangeType) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudRouterChangeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudRouterChangeType(val *CloudRouterChangeType) *NullableCloudRouterChangeType {
	return &NullableCloudRouterChangeType{value: val, isSet: true}
}

func (v NullableCloudRouterChangeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudRouterChangeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
