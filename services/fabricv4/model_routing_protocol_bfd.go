/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// checks if the RoutingProtocolBFD type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoutingProtocolBFD{}

// RoutingProtocolBFD struct for RoutingProtocolBFD
type RoutingProtocolBFD struct {
	Enabled              bool    `json:"enabled"`
	Interval             *string `json:"interval,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RoutingProtocolBFD RoutingProtocolBFD

// NewRoutingProtocolBFD instantiates a new RoutingProtocolBFD object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoutingProtocolBFD(enabled bool) *RoutingProtocolBFD {
	this := RoutingProtocolBFD{}
	this.Enabled = enabled
	return &this
}

// NewRoutingProtocolBFDWithDefaults instantiates a new RoutingProtocolBFD object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoutingProtocolBFDWithDefaults() *RoutingProtocolBFD {
	this := RoutingProtocolBFD{}
	return &this
}

// GetEnabled returns the Enabled field value
func (o *RoutingProtocolBFD) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *RoutingProtocolBFD) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *RoutingProtocolBFD) SetEnabled(v bool) {
	o.Enabled = v
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *RoutingProtocolBFD) GetInterval() string {
	if o == nil || IsNil(o.Interval) {
		var ret string
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingProtocolBFD) GetIntervalOk() (*string, bool) {
	if o == nil || IsNil(o.Interval) {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *RoutingProtocolBFD) HasInterval() bool {
	if o != nil && !IsNil(o.Interval) {
		return true
	}

	return false
}

// SetInterval gets a reference to the given string and assigns it to the Interval field.
func (o *RoutingProtocolBFD) SetInterval(v string) {
	o.Interval = &v
}

func (o RoutingProtocolBFD) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoutingProtocolBFD) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled
	if !IsNil(o.Interval) {
		toSerialize["interval"] = o.Interval
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RoutingProtocolBFD) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRoutingProtocolBFD := _RoutingProtocolBFD{}

	err = json.Unmarshal(data, &varRoutingProtocolBFD)

	if err != nil {
		return err
	}

	*o = RoutingProtocolBFD(varRoutingProtocolBFD)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "interval")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRoutingProtocolBFD struct {
	value *RoutingProtocolBFD
	isSet bool
}

func (v NullableRoutingProtocolBFD) Get() *RoutingProtocolBFD {
	return v.value
}

func (v *NullableRoutingProtocolBFD) Set(val *RoutingProtocolBFD) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutingProtocolBFD) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutingProtocolBFD) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutingProtocolBFD(val *RoutingProtocolBFD) *NullableRoutingProtocolBFD {
	return &NullableRoutingProtocolBFD{value: val, isSet: true}
}

func (v NullableRoutingProtocolBFD) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutingProtocolBFD) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
