/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the SimplifiedLocation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SimplifiedLocation{}

// SimplifiedLocation struct for SimplifiedLocation
type SimplifiedLocation struct {
	Region    *string `json:"region,omitempty"`
	MetroName *string `json:"metroName,omitempty"`
	MetroCode *string `json:"metroCode,omitempty"`
	MetroHref *string `json:"metroHref,omitempty"`
	// Deprecated
	Ibx                  *string `json:"ibx,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SimplifiedLocation SimplifiedLocation

// NewSimplifiedLocation instantiates a new SimplifiedLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSimplifiedLocation() *SimplifiedLocation {
	this := SimplifiedLocation{}
	return &this
}

// NewSimplifiedLocationWithDefaults instantiates a new SimplifiedLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSimplifiedLocationWithDefaults() *SimplifiedLocation {
	this := SimplifiedLocation{}
	return &this
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *SimplifiedLocation) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimplifiedLocation) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *SimplifiedLocation) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *SimplifiedLocation) SetRegion(v string) {
	o.Region = &v
}

// GetMetroName returns the MetroName field value if set, zero value otherwise.
func (o *SimplifiedLocation) GetMetroName() string {
	if o == nil || IsNil(o.MetroName) {
		var ret string
		return ret
	}
	return *o.MetroName
}

// GetMetroNameOk returns a tuple with the MetroName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimplifiedLocation) GetMetroNameOk() (*string, bool) {
	if o == nil || IsNil(o.MetroName) {
		return nil, false
	}
	return o.MetroName, true
}

// HasMetroName returns a boolean if a field has been set.
func (o *SimplifiedLocation) HasMetroName() bool {
	if o != nil && !IsNil(o.MetroName) {
		return true
	}

	return false
}

// SetMetroName gets a reference to the given string and assigns it to the MetroName field.
func (o *SimplifiedLocation) SetMetroName(v string) {
	o.MetroName = &v
}

// GetMetroCode returns the MetroCode field value if set, zero value otherwise.
func (o *SimplifiedLocation) GetMetroCode() string {
	if o == nil || IsNil(o.MetroCode) {
		var ret string
		return ret
	}
	return *o.MetroCode
}

// GetMetroCodeOk returns a tuple with the MetroCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimplifiedLocation) GetMetroCodeOk() (*string, bool) {
	if o == nil || IsNil(o.MetroCode) {
		return nil, false
	}
	return o.MetroCode, true
}

// HasMetroCode returns a boolean if a field has been set.
func (o *SimplifiedLocation) HasMetroCode() bool {
	if o != nil && !IsNil(o.MetroCode) {
		return true
	}

	return false
}

// SetMetroCode gets a reference to the given string and assigns it to the MetroCode field.
func (o *SimplifiedLocation) SetMetroCode(v string) {
	o.MetroCode = &v
}

// GetMetroHref returns the MetroHref field value if set, zero value otherwise.
func (o *SimplifiedLocation) GetMetroHref() string {
	if o == nil || IsNil(o.MetroHref) {
		var ret string
		return ret
	}
	return *o.MetroHref
}

// GetMetroHrefOk returns a tuple with the MetroHref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimplifiedLocation) GetMetroHrefOk() (*string, bool) {
	if o == nil || IsNil(o.MetroHref) {
		return nil, false
	}
	return o.MetroHref, true
}

// HasMetroHref returns a boolean if a field has been set.
func (o *SimplifiedLocation) HasMetroHref() bool {
	if o != nil && !IsNil(o.MetroHref) {
		return true
	}

	return false
}

// SetMetroHref gets a reference to the given string and assigns it to the MetroHref field.
func (o *SimplifiedLocation) SetMetroHref(v string) {
	o.MetroHref = &v
}

// GetIbx returns the Ibx field value if set, zero value otherwise.
// Deprecated
func (o *SimplifiedLocation) GetIbx() string {
	if o == nil || IsNil(o.Ibx) {
		var ret string
		return ret
	}
	return *o.Ibx
}

// GetIbxOk returns a tuple with the Ibx field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *SimplifiedLocation) GetIbxOk() (*string, bool) {
	if o == nil || IsNil(o.Ibx) {
		return nil, false
	}
	return o.Ibx, true
}

// HasIbx returns a boolean if a field has been set.
func (o *SimplifiedLocation) HasIbx() bool {
	if o != nil && !IsNil(o.Ibx) {
		return true
	}

	return false
}

// SetIbx gets a reference to the given string and assigns it to the Ibx field.
// Deprecated
func (o *SimplifiedLocation) SetIbx(v string) {
	o.Ibx = &v
}

func (o SimplifiedLocation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SimplifiedLocation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.MetroName) {
		toSerialize["metroName"] = o.MetroName
	}
	if !IsNil(o.MetroCode) {
		toSerialize["metroCode"] = o.MetroCode
	}
	if !IsNil(o.MetroHref) {
		toSerialize["metroHref"] = o.MetroHref
	}
	if !IsNil(o.Ibx) {
		toSerialize["ibx"] = o.Ibx
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SimplifiedLocation) UnmarshalJSON(data []byte) (err error) {
	varSimplifiedLocation := _SimplifiedLocation{}

	err = json.Unmarshal(data, &varSimplifiedLocation)

	if err != nil {
		return err
	}

	*o = SimplifiedLocation(varSimplifiedLocation)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "region")
		delete(additionalProperties, "metroName")
		delete(additionalProperties, "metroCode")
		delete(additionalProperties, "metroHref")
		delete(additionalProperties, "ibx")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSimplifiedLocation struct {
	value *SimplifiedLocation
	isSet bool
}

func (v NullableSimplifiedLocation) Get() *SimplifiedLocation {
	return v.value
}

func (v *NullableSimplifiedLocation) Set(val *SimplifiedLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableSimplifiedLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableSimplifiedLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSimplifiedLocation(val *SimplifiedLocation) *NullableSimplifiedLocation {
	return &NullableSimplifiedLocation{value: val, isSet: true}
}

func (v NullableSimplifiedLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSimplifiedLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
