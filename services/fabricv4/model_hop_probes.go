/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the HopProbes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HopProbes{}

// HopProbes struct for HopProbes
type HopProbes struct {
	Name                 *string `json:"name,omitempty"`
	Ip                   *string `json:"ip,omitempty"`
	Asn                  *int32  `json:"asn,omitempty"`
	Rtt                  *string `json:"rtt,omitempty"`
	Annotation           *string `json:"annotation,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HopProbes HopProbes

// NewHopProbes instantiates a new HopProbes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHopProbes() *HopProbes {
	this := HopProbes{}
	return &this
}

// NewHopProbesWithDefaults instantiates a new HopProbes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHopProbesWithDefaults() *HopProbes {
	this := HopProbes{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *HopProbes) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HopProbes) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *HopProbes) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *HopProbes) SetName(v string) {
	o.Name = &v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *HopProbes) GetIp() string {
	if o == nil || IsNil(o.Ip) {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HopProbes) GetIpOk() (*string, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *HopProbes) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *HopProbes) SetIp(v string) {
	o.Ip = &v
}

// GetAsn returns the Asn field value if set, zero value otherwise.
func (o *HopProbes) GetAsn() int32 {
	if o == nil || IsNil(o.Asn) {
		var ret int32
		return ret
	}
	return *o.Asn
}

// GetAsnOk returns a tuple with the Asn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HopProbes) GetAsnOk() (*int32, bool) {
	if o == nil || IsNil(o.Asn) {
		return nil, false
	}
	return o.Asn, true
}

// HasAsn returns a boolean if a field has been set.
func (o *HopProbes) HasAsn() bool {
	if o != nil && !IsNil(o.Asn) {
		return true
	}

	return false
}

// SetAsn gets a reference to the given int32 and assigns it to the Asn field.
func (o *HopProbes) SetAsn(v int32) {
	o.Asn = &v
}

// GetRtt returns the Rtt field value if set, zero value otherwise.
func (o *HopProbes) GetRtt() string {
	if o == nil || IsNil(o.Rtt) {
		var ret string
		return ret
	}
	return *o.Rtt
}

// GetRttOk returns a tuple with the Rtt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HopProbes) GetRttOk() (*string, bool) {
	if o == nil || IsNil(o.Rtt) {
		return nil, false
	}
	return o.Rtt, true
}

// HasRtt returns a boolean if a field has been set.
func (o *HopProbes) HasRtt() bool {
	if o != nil && !IsNil(o.Rtt) {
		return true
	}

	return false
}

// SetRtt gets a reference to the given string and assigns it to the Rtt field.
func (o *HopProbes) SetRtt(v string) {
	o.Rtt = &v
}

// GetAnnotation returns the Annotation field value if set, zero value otherwise.
func (o *HopProbes) GetAnnotation() string {
	if o == nil || IsNil(o.Annotation) {
		var ret string
		return ret
	}
	return *o.Annotation
}

// GetAnnotationOk returns a tuple with the Annotation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HopProbes) GetAnnotationOk() (*string, bool) {
	if o == nil || IsNil(o.Annotation) {
		return nil, false
	}
	return o.Annotation, true
}

// HasAnnotation returns a boolean if a field has been set.
func (o *HopProbes) HasAnnotation() bool {
	if o != nil && !IsNil(o.Annotation) {
		return true
	}

	return false
}

// SetAnnotation gets a reference to the given string and assigns it to the Annotation field.
func (o *HopProbes) SetAnnotation(v string) {
	o.Annotation = &v
}

func (o HopProbes) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HopProbes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if !IsNil(o.Asn) {
		toSerialize["asn"] = o.Asn
	}
	if !IsNil(o.Rtt) {
		toSerialize["rtt"] = o.Rtt
	}
	if !IsNil(o.Annotation) {
		toSerialize["annotation"] = o.Annotation
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HopProbes) UnmarshalJSON(data []byte) (err error) {
	varHopProbes := _HopProbes{}

	err = json.Unmarshal(data, &varHopProbes)

	if err != nil {
		return err
	}

	*o = HopProbes(varHopProbes)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "ip")
		delete(additionalProperties, "asn")
		delete(additionalProperties, "rtt")
		delete(additionalProperties, "annotation")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHopProbes struct {
	value *HopProbes
	isSet bool
}

func (v NullableHopProbes) Get() *HopProbes {
	return v.value
}

func (v *NullableHopProbes) Set(val *HopProbes) {
	v.value = val
	v.isSet = true
}

func (v NullableHopProbes) IsSet() bool {
	return v.isSet
}

func (v *NullableHopProbes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHopProbes(val *HopProbes) *NullableHopProbes {
	return &NullableHopProbes{value: val, isSet: true}
}

func (v NullableHopProbes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHopProbes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
