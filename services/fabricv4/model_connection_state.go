/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// ConnectionState Connection status
type ConnectionState string

// List of ConnectionState
const (
	CONNECTIONSTATE_ACTIVE         ConnectionState = "ACTIVE"
	CONNECTIONSTATE_CANCELLED      ConnectionState = "CANCELLED"
	CONNECTIONSTATE_DEPROVISIONED  ConnectionState = "DEPROVISIONED"
	CONNECTIONSTATE_DEPROVISIONING ConnectionState = "DEPROVISIONING"
	CONNECTIONSTATE_DRAFT          ConnectionState = "DRAFT"
	CONNECTIONSTATE_FAILED         ConnectionState = "FAILED"
	CONNECTIONSTATE_PENDING        ConnectionState = "PENDING"
	CONNECTIONSTATE_PROVISIONED    ConnectionState = "PROVISIONED"
	CONNECTIONSTATE_PROVISIONING   ConnectionState = "PROVISIONING"
	CONNECTIONSTATE_REPROVISIONING ConnectionState = "REPROVISIONING"
	CONNECTIONSTATE_EMPTY          ConnectionState = ""
)

// All allowed values of ConnectionState enum
var AllowedConnectionStateEnumValues = []ConnectionState{
	"ACTIVE",
	"CANCELLED",
	"DEPROVISIONED",
	"DEPROVISIONING",
	"DRAFT",
	"FAILED",
	"PENDING",
	"PROVISIONED",
	"PROVISIONING",
	"REPROVISIONING",
	"",
}

func (v *ConnectionState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConnectionState(value)
	for _, existing := range AllowedConnectionStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConnectionState", value)
}

// NewConnectionStateFromValue returns a pointer to a valid ConnectionState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConnectionStateFromValue(v string) (*ConnectionState, error) {
	ev := ConnectionState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConnectionState: valid values are %v", v, AllowedConnectionStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConnectionState) IsValid() bool {
	for _, existing := range AllowedConnectionStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConnectionState value
func (v ConnectionState) Ptr() *ConnectionState {
	return &v
}

type NullableConnectionState struct {
	value *ConnectionState
	isSet bool
}

func (v NullableConnectionState) Get() *ConnectionState {
	return v.value
}

func (v *NullableConnectionState) Set(val *ConnectionState) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionState) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionState(val *ConnectionState) *NullableConnectionState {
	return &NullableConnectionState{value: val, isSet: true}
}

func (v NullableConnectionState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
