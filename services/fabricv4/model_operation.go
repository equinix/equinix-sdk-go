/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the Operation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Operation{}

// Operation Operation object for router actions
type Operation struct {
	// IPV4 route count
	BgpIpv4RoutesCount *int32 `json:"bgpIpv4RoutesCount,omitempty"`
	// IPV6 route count
	BgpIpv6RoutesCount *int32 `json:"bgpIpv6RoutesCount,omitempty"`
	// distinct IPV4 prefixes count
	DistinctIpv4PrefixesCount *int32 `json:"distinctIpv4PrefixesCount,omitempty"`
	// distinct IPV6 prefixes count
	DistinctIpv6PrefixesCount *int32 `json:"distinctIpv6PrefixesCount,omitempty"`
	AdditionalProperties      map[string]interface{}
}

type _Operation Operation

// NewOperation instantiates a new Operation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOperation() *Operation {
	this := Operation{}
	return &this
}

// NewOperationWithDefaults instantiates a new Operation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOperationWithDefaults() *Operation {
	this := Operation{}
	return &this
}

// GetBgpIpv4RoutesCount returns the BgpIpv4RoutesCount field value if set, zero value otherwise.
func (o *Operation) GetBgpIpv4RoutesCount() int32 {
	if o == nil || IsNil(o.BgpIpv4RoutesCount) {
		var ret int32
		return ret
	}
	return *o.BgpIpv4RoutesCount
}

// GetBgpIpv4RoutesCountOk returns a tuple with the BgpIpv4RoutesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Operation) GetBgpIpv4RoutesCountOk() (*int32, bool) {
	if o == nil || IsNil(o.BgpIpv4RoutesCount) {
		return nil, false
	}
	return o.BgpIpv4RoutesCount, true
}

// HasBgpIpv4RoutesCount returns a boolean if a field has been set.
func (o *Operation) HasBgpIpv4RoutesCount() bool {
	if o != nil && !IsNil(o.BgpIpv4RoutesCount) {
		return true
	}

	return false
}

// SetBgpIpv4RoutesCount gets a reference to the given int32 and assigns it to the BgpIpv4RoutesCount field.
func (o *Operation) SetBgpIpv4RoutesCount(v int32) {
	o.BgpIpv4RoutesCount = &v
}

// GetBgpIpv6RoutesCount returns the BgpIpv6RoutesCount field value if set, zero value otherwise.
func (o *Operation) GetBgpIpv6RoutesCount() int32 {
	if o == nil || IsNil(o.BgpIpv6RoutesCount) {
		var ret int32
		return ret
	}
	return *o.BgpIpv6RoutesCount
}

// GetBgpIpv6RoutesCountOk returns a tuple with the BgpIpv6RoutesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Operation) GetBgpIpv6RoutesCountOk() (*int32, bool) {
	if o == nil || IsNil(o.BgpIpv6RoutesCount) {
		return nil, false
	}
	return o.BgpIpv6RoutesCount, true
}

// HasBgpIpv6RoutesCount returns a boolean if a field has been set.
func (o *Operation) HasBgpIpv6RoutesCount() bool {
	if o != nil && !IsNil(o.BgpIpv6RoutesCount) {
		return true
	}

	return false
}

// SetBgpIpv6RoutesCount gets a reference to the given int32 and assigns it to the BgpIpv6RoutesCount field.
func (o *Operation) SetBgpIpv6RoutesCount(v int32) {
	o.BgpIpv6RoutesCount = &v
}

// GetDistinctIpv4PrefixesCount returns the DistinctIpv4PrefixesCount field value if set, zero value otherwise.
func (o *Operation) GetDistinctIpv4PrefixesCount() int32 {
	if o == nil || IsNil(o.DistinctIpv4PrefixesCount) {
		var ret int32
		return ret
	}
	return *o.DistinctIpv4PrefixesCount
}

// GetDistinctIpv4PrefixesCountOk returns a tuple with the DistinctIpv4PrefixesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Operation) GetDistinctIpv4PrefixesCountOk() (*int32, bool) {
	if o == nil || IsNil(o.DistinctIpv4PrefixesCount) {
		return nil, false
	}
	return o.DistinctIpv4PrefixesCount, true
}

// HasDistinctIpv4PrefixesCount returns a boolean if a field has been set.
func (o *Operation) HasDistinctIpv4PrefixesCount() bool {
	if o != nil && !IsNil(o.DistinctIpv4PrefixesCount) {
		return true
	}

	return false
}

// SetDistinctIpv4PrefixesCount gets a reference to the given int32 and assigns it to the DistinctIpv4PrefixesCount field.
func (o *Operation) SetDistinctIpv4PrefixesCount(v int32) {
	o.DistinctIpv4PrefixesCount = &v
}

// GetDistinctIpv6PrefixesCount returns the DistinctIpv6PrefixesCount field value if set, zero value otherwise.
func (o *Operation) GetDistinctIpv6PrefixesCount() int32 {
	if o == nil || IsNil(o.DistinctIpv6PrefixesCount) {
		var ret int32
		return ret
	}
	return *o.DistinctIpv6PrefixesCount
}

// GetDistinctIpv6PrefixesCountOk returns a tuple with the DistinctIpv6PrefixesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Operation) GetDistinctIpv6PrefixesCountOk() (*int32, bool) {
	if o == nil || IsNil(o.DistinctIpv6PrefixesCount) {
		return nil, false
	}
	return o.DistinctIpv6PrefixesCount, true
}

// HasDistinctIpv6PrefixesCount returns a boolean if a field has been set.
func (o *Operation) HasDistinctIpv6PrefixesCount() bool {
	if o != nil && !IsNil(o.DistinctIpv6PrefixesCount) {
		return true
	}

	return false
}

// SetDistinctIpv6PrefixesCount gets a reference to the given int32 and assigns it to the DistinctIpv6PrefixesCount field.
func (o *Operation) SetDistinctIpv6PrefixesCount(v int32) {
	o.DistinctIpv6PrefixesCount = &v
}

func (o Operation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Operation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BgpIpv4RoutesCount) {
		toSerialize["bgpIpv4RoutesCount"] = o.BgpIpv4RoutesCount
	}
	if !IsNil(o.BgpIpv6RoutesCount) {
		toSerialize["bgpIpv6RoutesCount"] = o.BgpIpv6RoutesCount
	}
	if !IsNil(o.DistinctIpv4PrefixesCount) {
		toSerialize["distinctIpv4PrefixesCount"] = o.DistinctIpv4PrefixesCount
	}
	if !IsNil(o.DistinctIpv6PrefixesCount) {
		toSerialize["distinctIpv6PrefixesCount"] = o.DistinctIpv6PrefixesCount
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Operation) UnmarshalJSON(data []byte) (err error) {
	varOperation := _Operation{}

	err = json.Unmarshal(data, &varOperation)

	if err != nil {
		return err
	}

	*o = Operation(varOperation)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "bgpIpv4RoutesCount")
		delete(additionalProperties, "bgpIpv6RoutesCount")
		delete(additionalProperties, "distinctIpv4PrefixesCount")
		delete(additionalProperties, "distinctIpv6PrefixesCount")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOperation struct {
	value *Operation
	isSet bool
}

func (v NullableOperation) Get() *Operation {
	return v.value
}

func (v *NullableOperation) Set(val *Operation) {
	v.value = val
	v.isSet = true
}

func (v NullableOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOperation(val *Operation) *NullableOperation {
	return &NullableOperation{value: val, isSet: true}
}

func (v NullableOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
