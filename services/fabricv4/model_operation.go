/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the Operation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Operation{}

// Operation Operation object for router actions
type Operation struct {
	// IPV4 Route Count
	BgpIpv4RoutesCount *int32 `json:"bgpIpv4RoutesCount,omitempty"`
	// IPV6 Route Count
	BgpIpv6RoutesCount   *int32 `json:"bgpIpv6RoutesCount,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Operation Operation

// NewOperation instantiates a new Operation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOperation() *Operation {
	this := Operation{}
	return &this
}

// NewOperationWithDefaults instantiates a new Operation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOperationWithDefaults() *Operation {
	this := Operation{}
	return &this
}

// GetBgpIpv4RoutesCount returns the BgpIpv4RoutesCount field value if set, zero value otherwise.
func (o *Operation) GetBgpIpv4RoutesCount() int32 {
	if o == nil || IsNil(o.BgpIpv4RoutesCount) {
		var ret int32
		return ret
	}
	return *o.BgpIpv4RoutesCount
}

// GetBgpIpv4RoutesCountOk returns a tuple with the BgpIpv4RoutesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Operation) GetBgpIpv4RoutesCountOk() (*int32, bool) {
	if o == nil || IsNil(o.BgpIpv4RoutesCount) {
		return nil, false
	}
	return o.BgpIpv4RoutesCount, true
}

// HasBgpIpv4RoutesCount returns a boolean if a field has been set.
func (o *Operation) HasBgpIpv4RoutesCount() bool {
	if o != nil && !IsNil(o.BgpIpv4RoutesCount) {
		return true
	}

	return false
}

// SetBgpIpv4RoutesCount gets a reference to the given int32 and assigns it to the BgpIpv4RoutesCount field.
func (o *Operation) SetBgpIpv4RoutesCount(v int32) {
	o.BgpIpv4RoutesCount = &v
}

// GetBgpIpv6RoutesCount returns the BgpIpv6RoutesCount field value if set, zero value otherwise.
func (o *Operation) GetBgpIpv6RoutesCount() int32 {
	if o == nil || IsNil(o.BgpIpv6RoutesCount) {
		var ret int32
		return ret
	}
	return *o.BgpIpv6RoutesCount
}

// GetBgpIpv6RoutesCountOk returns a tuple with the BgpIpv6RoutesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Operation) GetBgpIpv6RoutesCountOk() (*int32, bool) {
	if o == nil || IsNil(o.BgpIpv6RoutesCount) {
		return nil, false
	}
	return o.BgpIpv6RoutesCount, true
}

// HasBgpIpv6RoutesCount returns a boolean if a field has been set.
func (o *Operation) HasBgpIpv6RoutesCount() bool {
	if o != nil && !IsNil(o.BgpIpv6RoutesCount) {
		return true
	}

	return false
}

// SetBgpIpv6RoutesCount gets a reference to the given int32 and assigns it to the BgpIpv6RoutesCount field.
func (o *Operation) SetBgpIpv6RoutesCount(v int32) {
	o.BgpIpv6RoutesCount = &v
}

func (o Operation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Operation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BgpIpv4RoutesCount) {
		toSerialize["bgpIpv4RoutesCount"] = o.BgpIpv4RoutesCount
	}
	if !IsNil(o.BgpIpv6RoutesCount) {
		toSerialize["bgpIpv6RoutesCount"] = o.BgpIpv6RoutesCount
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Operation) UnmarshalJSON(data []byte) (err error) {
	varOperation := _Operation{}

	err = json.Unmarshal(data, &varOperation)

	if err != nil {
		return err
	}

	*o = Operation(varOperation)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "bgpIpv4RoutesCount")
		delete(additionalProperties, "bgpIpv6RoutesCount")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOperation struct {
	value *Operation
	isSet bool
}

func (v NullableOperation) Get() *Operation {
	return v.value
}

func (v *NullableOperation) Set(val *Operation) {
	v.value = val
	v.isSet = true
}

func (v NullableOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOperation(val *Operation) *NullableOperation {
	return &NullableOperation{value: val, isSet: true}
}

func (v NullableOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
