/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// BGPActions BGP action type
type BGPActions string

// List of BGPActions
const (
	BGPACTIONS_CLEAR_BGPIPV4         BGPActions = "CLEAR_BGPIPV4"
	BGPACTIONS_CLEAR_BGPIPV6         BGPActions = "CLEAR_BGPIPV6"
	BGPACTIONS_CLEAR_BGPIPV4_INBOUND BGPActions = "CLEAR_BGPIPV4_INBOUND"
	BGPACTIONS_CLEAR_BGPIPV6_INBOUND BGPActions = "CLEAR_BGPIPV6_INBOUND"
	BGPACTIONS_RESET_BGPIPV4         BGPActions = "RESET_BGPIPV4"
	BGPACTIONS_RESET_BGPIPV6         BGPActions = "RESET_BGPIPV6"
)

// All allowed values of BGPActions enum
var AllowedBGPActionsEnumValues = []BGPActions{
	"CLEAR_BGPIPV4",
	"CLEAR_BGPIPV6",
	"CLEAR_BGPIPV4_INBOUND",
	"CLEAR_BGPIPV6_INBOUND",
	"RESET_BGPIPV4",
	"RESET_BGPIPV6",
}

func (v *BGPActions) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BGPActions(value)
	for _, existing := range AllowedBGPActionsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BGPActions", value)
}

// NewBGPActionsFromValue returns a pointer to a valid BGPActions
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBGPActionsFromValue(v string) (*BGPActions, error) {
	ev := BGPActions(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BGPActions: valid values are %v", v, AllowedBGPActionsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BGPActions) IsValid() bool {
	for _, existing := range AllowedBGPActionsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BGPActions value
func (v BGPActions) Ptr() *BGPActions {
	return &v
}

type NullableBGPActions struct {
	value *BGPActions
	isSet bool
}

func (v NullableBGPActions) Get() *BGPActions {
	return v.value
}

func (v *NullableBGPActions) Set(val *BGPActions) {
	v.value = val
	v.isSet = true
}

func (v NullableBGPActions) IsSet() bool {
	return v.isSet
}

func (v *NullableBGPActions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBGPActions(val *BGPActions) *NullableBGPActions {
	return &NullableBGPActions{value: val, isSet: true}
}

func (v NullableBGPActions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBGPActions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
