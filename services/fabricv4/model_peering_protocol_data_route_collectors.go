/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the PeeringProtocolDataRouteCollectors type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PeeringProtocolDataRouteCollectors{}

// PeeringProtocolDataRouteCollectors Route Collectors
type PeeringProtocolDataRouteCollectors struct {
	// Primary Route Collector
	Primary *string `json:"primary,omitempty"`
	// Secondary Route Collector
	Secondary            *string `json:"secondary,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PeeringProtocolDataRouteCollectors PeeringProtocolDataRouteCollectors

// NewPeeringProtocolDataRouteCollectors instantiates a new PeeringProtocolDataRouteCollectors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPeeringProtocolDataRouteCollectors() *PeeringProtocolDataRouteCollectors {
	this := PeeringProtocolDataRouteCollectors{}
	return &this
}

// NewPeeringProtocolDataRouteCollectorsWithDefaults instantiates a new PeeringProtocolDataRouteCollectors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPeeringProtocolDataRouteCollectorsWithDefaults() *PeeringProtocolDataRouteCollectors {
	this := PeeringProtocolDataRouteCollectors{}
	return &this
}

// GetPrimary returns the Primary field value if set, zero value otherwise.
func (o *PeeringProtocolDataRouteCollectors) GetPrimary() string {
	if o == nil || IsNil(o.Primary) {
		var ret string
		return ret
	}
	return *o.Primary
}

// GetPrimaryOk returns a tuple with the Primary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeeringProtocolDataRouteCollectors) GetPrimaryOk() (*string, bool) {
	if o == nil || IsNil(o.Primary) {
		return nil, false
	}
	return o.Primary, true
}

// HasPrimary returns a boolean if a field has been set.
func (o *PeeringProtocolDataRouteCollectors) HasPrimary() bool {
	if o != nil && !IsNil(o.Primary) {
		return true
	}

	return false
}

// SetPrimary gets a reference to the given string and assigns it to the Primary field.
func (o *PeeringProtocolDataRouteCollectors) SetPrimary(v string) {
	o.Primary = &v
}

// GetSecondary returns the Secondary field value if set, zero value otherwise.
func (o *PeeringProtocolDataRouteCollectors) GetSecondary() string {
	if o == nil || IsNil(o.Secondary) {
		var ret string
		return ret
	}
	return *o.Secondary
}

// GetSecondaryOk returns a tuple with the Secondary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeeringProtocolDataRouteCollectors) GetSecondaryOk() (*string, bool) {
	if o == nil || IsNil(o.Secondary) {
		return nil, false
	}
	return o.Secondary, true
}

// HasSecondary returns a boolean if a field has been set.
func (o *PeeringProtocolDataRouteCollectors) HasSecondary() bool {
	if o != nil && !IsNil(o.Secondary) {
		return true
	}

	return false
}

// SetSecondary gets a reference to the given string and assigns it to the Secondary field.
func (o *PeeringProtocolDataRouteCollectors) SetSecondary(v string) {
	o.Secondary = &v
}

func (o PeeringProtocolDataRouteCollectors) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PeeringProtocolDataRouteCollectors) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Primary) {
		toSerialize["primary"] = o.Primary
	}
	if !IsNil(o.Secondary) {
		toSerialize["secondary"] = o.Secondary
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PeeringProtocolDataRouteCollectors) UnmarshalJSON(data []byte) (err error) {
	varPeeringProtocolDataRouteCollectors := _PeeringProtocolDataRouteCollectors{}

	err = json.Unmarshal(data, &varPeeringProtocolDataRouteCollectors)

	if err != nil {
		return err
	}

	*o = PeeringProtocolDataRouteCollectors(varPeeringProtocolDataRouteCollectors)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "primary")
		delete(additionalProperties, "secondary")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePeeringProtocolDataRouteCollectors struct {
	value *PeeringProtocolDataRouteCollectors
	isSet bool
}

func (v NullablePeeringProtocolDataRouteCollectors) Get() *PeeringProtocolDataRouteCollectors {
	return v.value
}

func (v *NullablePeeringProtocolDataRouteCollectors) Set(val *PeeringProtocolDataRouteCollectors) {
	v.value = val
	v.isSet = true
}

func (v NullablePeeringProtocolDataRouteCollectors) IsSet() bool {
	return v.isSet
}

func (v *NullablePeeringProtocolDataRouteCollectors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePeeringProtocolDataRouteCollectors(val *PeeringProtocolDataRouteCollectors) *NullablePeeringProtocolDataRouteCollectors {
	return &NullablePeeringProtocolDataRouteCollectors{value: val, isSet: true}
}

func (v NullablePeeringProtocolDataRouteCollectors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePeeringProtocolDataRouteCollectors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
