/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// ServiceProfileLinkProtocolConfigEncapsulationStrategy was tagType - missing on wiki
type ServiceProfileLinkProtocolConfigEncapsulationStrategy string

// List of ServiceProfileLinkProtocolConfig_encapsulationStrategy
const (
	SERVICEPROFILELINKPROTOCOLCONFIGENCAPSULATIONSTRATEGY_CTAGED ServiceProfileLinkProtocolConfigEncapsulationStrategy = "CTAGED"
	SERVICEPROFILELINKPROTOCOLCONFIGENCAPSULATIONSTRATEGY_BOTH   ServiceProfileLinkProtocolConfigEncapsulationStrategy = "BOTH"
	SERVICEPROFILELINKPROTOCOLCONFIGENCAPSULATIONSTRATEGY_NAMED  ServiceProfileLinkProtocolConfigEncapsulationStrategy = "NAMED"
)

// All allowed values of ServiceProfileLinkProtocolConfigEncapsulationStrategy enum
var AllowedServiceProfileLinkProtocolConfigEncapsulationStrategyEnumValues = []ServiceProfileLinkProtocolConfigEncapsulationStrategy{
	"CTAGED",
	"BOTH",
	"NAMED",
}

func (v *ServiceProfileLinkProtocolConfigEncapsulationStrategy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ServiceProfileLinkProtocolConfigEncapsulationStrategy(value)
	for _, existing := range AllowedServiceProfileLinkProtocolConfigEncapsulationStrategyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServiceProfileLinkProtocolConfigEncapsulationStrategy", value)
}

// NewServiceProfileLinkProtocolConfigEncapsulationStrategyFromValue returns a pointer to a valid ServiceProfileLinkProtocolConfigEncapsulationStrategy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServiceProfileLinkProtocolConfigEncapsulationStrategyFromValue(v string) (*ServiceProfileLinkProtocolConfigEncapsulationStrategy, error) {
	ev := ServiceProfileLinkProtocolConfigEncapsulationStrategy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServiceProfileLinkProtocolConfigEncapsulationStrategy: valid values are %v", v, AllowedServiceProfileLinkProtocolConfigEncapsulationStrategyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServiceProfileLinkProtocolConfigEncapsulationStrategy) IsValid() bool {
	for _, existing := range AllowedServiceProfileLinkProtocolConfigEncapsulationStrategyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ServiceProfileLinkProtocolConfig_encapsulationStrategy value
func (v ServiceProfileLinkProtocolConfigEncapsulationStrategy) Ptr() *ServiceProfileLinkProtocolConfigEncapsulationStrategy {
	return &v
}

type NullableServiceProfileLinkProtocolConfigEncapsulationStrategy struct {
	value *ServiceProfileLinkProtocolConfigEncapsulationStrategy
	isSet bool
}

func (v NullableServiceProfileLinkProtocolConfigEncapsulationStrategy) Get() *ServiceProfileLinkProtocolConfigEncapsulationStrategy {
	return v.value
}

func (v *NullableServiceProfileLinkProtocolConfigEncapsulationStrategy) Set(val *ServiceProfileLinkProtocolConfigEncapsulationStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceProfileLinkProtocolConfigEncapsulationStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceProfileLinkProtocolConfigEncapsulationStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceProfileLinkProtocolConfigEncapsulationStrategy(val *ServiceProfileLinkProtocolConfigEncapsulationStrategy) *NullableServiceProfileLinkProtocolConfigEncapsulationStrategy {
	return &NullableServiceProfileLinkProtocolConfigEncapsulationStrategy{value: val, isSet: true}
}

func (v NullableServiceProfileLinkProtocolConfigEncapsulationStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceProfileLinkProtocolConfigEncapsulationStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
