/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the StreamPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StreamPostRequest{}

// StreamPostRequest Create Stream
type StreamPostRequest struct {
	Type *StreamPostRequestType `json:"type,omitempty"`
	// Customer-provided stream name
	Name *string `json:"name,omitempty"`
	// Customer-provided stream description
	Description *string  `json:"description,omitempty"`
	Project     *Project `json:"project,omitempty"`
	// Stream enabled status
	Enabled              *bool `json:"enabled,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StreamPostRequest StreamPostRequest

// NewStreamPostRequest instantiates a new StreamPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStreamPostRequest() *StreamPostRequest {
	this := StreamPostRequest{}
	return &this
}

// NewStreamPostRequestWithDefaults instantiates a new StreamPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStreamPostRequestWithDefaults() *StreamPostRequest {
	this := StreamPostRequest{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *StreamPostRequest) GetType() StreamPostRequestType {
	if o == nil || IsNil(o.Type) {
		var ret StreamPostRequestType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamPostRequest) GetTypeOk() (*StreamPostRequestType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *StreamPostRequest) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given StreamPostRequestType and assigns it to the Type field.
func (o *StreamPostRequest) SetType(v StreamPostRequestType) {
	o.Type = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *StreamPostRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamPostRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *StreamPostRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *StreamPostRequest) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *StreamPostRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamPostRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *StreamPostRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *StreamPostRequest) SetDescription(v string) {
	o.Description = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *StreamPostRequest) GetProject() Project {
	if o == nil || IsNil(o.Project) {
		var ret Project
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamPostRequest) GetProjectOk() (*Project, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *StreamPostRequest) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given Project and assigns it to the Project field.
func (o *StreamPostRequest) SetProject(v Project) {
	o.Project = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *StreamPostRequest) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamPostRequest) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *StreamPostRequest) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *StreamPostRequest) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o StreamPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StreamPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StreamPostRequest) UnmarshalJSON(data []byte) (err error) {
	varStreamPostRequest := _StreamPostRequest{}

	err = json.Unmarshal(data, &varStreamPostRequest)

	if err != nil {
		return err
	}

	*o = StreamPostRequest(varStreamPostRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "project")
		delete(additionalProperties, "enabled")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStreamPostRequest struct {
	value *StreamPostRequest
	isSet bool
}

func (v NullableStreamPostRequest) Get() *StreamPostRequest {
	return v.value
}

func (v *NullableStreamPostRequest) Set(val *StreamPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamPostRequest(val *StreamPostRequest) *NullableStreamPostRequest {
	return &NullableStreamPostRequest{value: val, isSet: true}
}

func (v NullableStreamPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
