/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// PortEncapsulationType Port encapsulation protocol type
type PortEncapsulationType string

// List of PortEncapsulation_type
const (
	PORTENCAPSULATIONTYPE_NULL     PortEncapsulationType = "NULL"
	PORTENCAPSULATIONTYPE_DOT1_Q   PortEncapsulationType = "DOT1Q"
	PORTENCAPSULATIONTYPE_QINQ     PortEncapsulationType = "QINQ"
	PORTENCAPSULATIONTYPE_UNTAGGED PortEncapsulationType = "UNTAGGED"
)

// All allowed values of PortEncapsulationType enum
var AllowedPortEncapsulationTypeEnumValues = []PortEncapsulationType{
	"NULL",
	"DOT1Q",
	"QINQ",
	"UNTAGGED",
}

func (v *PortEncapsulationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PortEncapsulationType(value)
	for _, existing := range AllowedPortEncapsulationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PortEncapsulationType", value)
}

// NewPortEncapsulationTypeFromValue returns a pointer to a valid PortEncapsulationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPortEncapsulationTypeFromValue(v string) (*PortEncapsulationType, error) {
	ev := PortEncapsulationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PortEncapsulationType: valid values are %v", v, AllowedPortEncapsulationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PortEncapsulationType) IsValid() bool {
	for _, existing := range AllowedPortEncapsulationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PortEncapsulation_type value
func (v PortEncapsulationType) Ptr() *PortEncapsulationType {
	return &v
}

type NullablePortEncapsulationType struct {
	value *PortEncapsulationType
	isSet bool
}

func (v NullablePortEncapsulationType) Get() *PortEncapsulationType {
	return v.value
}

func (v *NullablePortEncapsulationType) Set(val *PortEncapsulationType) {
	v.value = val
	v.isSet = true
}

func (v NullablePortEncapsulationType) IsSet() bool {
	return v.isSet
}

func (v *NullablePortEncapsulationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortEncapsulationType(val *PortEncapsulationType) *NullablePortEncapsulationType {
	return &NullablePortEncapsulationType{value: val, isSet: true}
}

func (v NullablePortEncapsulationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortEncapsulationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
