/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the VirtualDevice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VirtualDevice{}

// VirtualDevice Virtual Device AccessPoint Information
type VirtualDevice struct {
	// Virtual Device URI
	Href *string `json:"href,omitempty"`
	// Equinix-assigned Virtual Device identifier
	Uuid *string `json:"uuid,omitempty"`
	// Customer-assigned Virtual Device name
	Name    *string            `json:"name,omitempty"`
	Type    *VirtualDeviceType `json:"type,omitempty"`
	Account *SimplifiedAccount `json:"account,omitempty"`
	// Virtual Device Cluster Information
	Cluster              *string `json:"cluster,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VirtualDevice VirtualDevice

// NewVirtualDevice instantiates a new VirtualDevice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualDevice() *VirtualDevice {
	this := VirtualDevice{}
	return &this
}

// NewVirtualDeviceWithDefaults instantiates a new VirtualDevice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualDeviceWithDefaults() *VirtualDevice {
	this := VirtualDevice{}
	return &this
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *VirtualDevice) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDevice) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *VirtualDevice) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *VirtualDevice) SetHref(v string) {
	o.Href = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *VirtualDevice) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDevice) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *VirtualDevice) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *VirtualDevice) SetUuid(v string) {
	o.Uuid = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VirtualDevice) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDevice) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VirtualDevice) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VirtualDevice) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *VirtualDevice) GetType() VirtualDeviceType {
	if o == nil || IsNil(o.Type) {
		var ret VirtualDeviceType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDevice) GetTypeOk() (*VirtualDeviceType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *VirtualDevice) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given VirtualDeviceType and assigns it to the Type field.
func (o *VirtualDevice) SetType(v VirtualDeviceType) {
	o.Type = &v
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *VirtualDevice) GetAccount() SimplifiedAccount {
	if o == nil || IsNil(o.Account) {
		var ret SimplifiedAccount
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDevice) GetAccountOk() (*SimplifiedAccount, bool) {
	if o == nil || IsNil(o.Account) {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *VirtualDevice) HasAccount() bool {
	if o != nil && !IsNil(o.Account) {
		return true
	}

	return false
}

// SetAccount gets a reference to the given SimplifiedAccount and assigns it to the Account field.
func (o *VirtualDevice) SetAccount(v SimplifiedAccount) {
	o.Account = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *VirtualDevice) GetCluster() string {
	if o == nil || IsNil(o.Cluster) {
		var ret string
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDevice) GetClusterOk() (*string, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *VirtualDevice) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given string and assigns it to the Cluster field.
func (o *VirtualDevice) SetCluster(v string) {
	o.Cluster = &v
}

func (o VirtualDevice) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VirtualDevice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Account) {
		toSerialize["account"] = o.Account
	}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VirtualDevice) UnmarshalJSON(data []byte) (err error) {
	varVirtualDevice := _VirtualDevice{}

	err = json.Unmarshal(data, &varVirtualDevice)

	if err != nil {
		return err
	}

	*o = VirtualDevice(varVirtualDevice)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "href")
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "name")
		delete(additionalProperties, "type")
		delete(additionalProperties, "account")
		delete(additionalProperties, "cluster")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVirtualDevice struct {
	value *VirtualDevice
	isSet bool
}

func (v NullableVirtualDevice) Get() *VirtualDevice {
	return v.value
}

func (v *NullableVirtualDevice) Set(val *VirtualDevice) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualDevice(val *VirtualDevice) *NullableVirtualDevice {
	return &NullableVirtualDevice{value: val, isSet: true}
}

func (v NullableVirtualDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
