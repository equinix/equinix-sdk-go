/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// checks if the AWSPermission type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AWSPermission{}

// AWSPermission Provides the AWS permission configuration for the orchestrator. This permission is used to manage the AWS resources and their access control.
type AWSPermission struct {
	Type                 AWSPermissionType  `json:"type"`
	RoleArn              string             `json:"roleArn"`
	Region               string             `json:"region"`
	DeploymentProperties TopologyProperties `json:"deploymentProperties"`
	AdditionalProperties map[string]interface{}
}

type _AWSPermission AWSPermission

// NewAWSPermission instantiates a new AWSPermission object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAWSPermission(type_ AWSPermissionType, roleArn string, region string, deploymentProperties TopologyProperties) *AWSPermission {
	this := AWSPermission{}
	this.Type = type_
	this.RoleArn = roleArn
	this.Region = region
	this.DeploymentProperties = deploymentProperties
	return &this
}

// NewAWSPermissionWithDefaults instantiates a new AWSPermission object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAWSPermissionWithDefaults() *AWSPermission {
	this := AWSPermission{}
	return &this
}

// GetType returns the Type field value
func (o *AWSPermission) GetType() AWSPermissionType {
	if o == nil {
		var ret AWSPermissionType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AWSPermission) GetTypeOk() (*AWSPermissionType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AWSPermission) SetType(v AWSPermissionType) {
	o.Type = v
}

// GetRoleArn returns the RoleArn field value
func (o *AWSPermission) GetRoleArn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RoleArn
}

// GetRoleArnOk returns a tuple with the RoleArn field value
// and a boolean to check if the value has been set.
func (o *AWSPermission) GetRoleArnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RoleArn, true
}

// SetRoleArn sets field value
func (o *AWSPermission) SetRoleArn(v string) {
	o.RoleArn = v
}

// GetRegion returns the Region field value
func (o *AWSPermission) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *AWSPermission) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *AWSPermission) SetRegion(v string) {
	o.Region = v
}

// GetDeploymentProperties returns the DeploymentProperties field value
func (o *AWSPermission) GetDeploymentProperties() TopologyProperties {
	if o == nil {
		var ret TopologyProperties
		return ret
	}

	return o.DeploymentProperties
}

// GetDeploymentPropertiesOk returns a tuple with the DeploymentProperties field value
// and a boolean to check if the value has been set.
func (o *AWSPermission) GetDeploymentPropertiesOk() (*TopologyProperties, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeploymentProperties, true
}

// SetDeploymentProperties sets field value
func (o *AWSPermission) SetDeploymentProperties(v TopologyProperties) {
	o.DeploymentProperties = v
}

func (o AWSPermission) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AWSPermission) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["roleArn"] = o.RoleArn
	toSerialize["region"] = o.Region
	toSerialize["deploymentProperties"] = o.DeploymentProperties

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AWSPermission) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"roleArn",
		"region",
		"deploymentProperties",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAWSPermission := _AWSPermission{}

	err = json.Unmarshal(data, &varAWSPermission)

	if err != nil {
		return err
	}

	*o = AWSPermission(varAWSPermission)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "roleArn")
		delete(additionalProperties, "region")
		delete(additionalProperties, "deploymentProperties")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAWSPermission struct {
	value *AWSPermission
	isSet bool
}

func (v NullableAWSPermission) Get() *AWSPermission {
	return v.value
}

func (v *NullableAWSPermission) Set(val *AWSPermission) {
	v.value = val
	v.isSet = true
}

func (v NullableAWSPermission) IsSet() bool {
	return v.isSet
}

func (v *NullableAWSPermission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAWSPermission(val *AWSPermission) *NullableAWSPermission {
	return &NullableAWSPermission{value: val, isSet: true}
}

func (v NullableAWSPermission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAWSPermission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
