/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the StreamSubscription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StreamSubscription{}

// StreamSubscription Stream Subscription object
type StreamSubscription struct {
	// Stream Subscription URI
	Href *string `json:"href,omitempty"`
	// Equinix-assigned access point identifier
	Uuid *string                 `json:"uuid,omitempty"`
	Type *StreamSubscriptionType `json:"type,omitempty"`
	// Customer-provided subscription name
	Name *string `json:"name,omitempty"`
	// Customer-provided subscription description
	Description *string                  `json:"description,omitempty"`
	Project     *Project                 `json:"project,omitempty"`
	State       *StreamSubscriptionState `json:"state,omitempty"`
	// Stream subscription enabled status
	Enabled              *bool                     `json:"enabled,omitempty"`
	Stream               *StreamTarget             `json:"stream,omitempty"`
	Filters              *StreamSubscriptionFilter `json:"filters,omitempty"`
	Sink                 *StreamSubscriptionSink   `json:"sink,omitempty"`
	Changelog            *Changelog                `json:"changelog,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StreamSubscription StreamSubscription

// NewStreamSubscription instantiates a new StreamSubscription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStreamSubscription() *StreamSubscription {
	this := StreamSubscription{}
	return &this
}

// NewStreamSubscriptionWithDefaults instantiates a new StreamSubscription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStreamSubscriptionWithDefaults() *StreamSubscription {
	this := StreamSubscription{}
	return &this
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *StreamSubscription) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscription) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *StreamSubscription) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *StreamSubscription) SetHref(v string) {
	o.Href = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *StreamSubscription) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscription) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *StreamSubscription) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *StreamSubscription) SetUuid(v string) {
	o.Uuid = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *StreamSubscription) GetType() StreamSubscriptionType {
	if o == nil || IsNil(o.Type) {
		var ret StreamSubscriptionType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscription) GetTypeOk() (*StreamSubscriptionType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *StreamSubscription) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given StreamSubscriptionType and assigns it to the Type field.
func (o *StreamSubscription) SetType(v StreamSubscriptionType) {
	o.Type = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *StreamSubscription) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscription) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *StreamSubscription) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *StreamSubscription) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *StreamSubscription) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscription) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *StreamSubscription) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *StreamSubscription) SetDescription(v string) {
	o.Description = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *StreamSubscription) GetProject() Project {
	if o == nil || IsNil(o.Project) {
		var ret Project
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscription) GetProjectOk() (*Project, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *StreamSubscription) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given Project and assigns it to the Project field.
func (o *StreamSubscription) SetProject(v Project) {
	o.Project = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *StreamSubscription) GetState() StreamSubscriptionState {
	if o == nil || IsNil(o.State) {
		var ret StreamSubscriptionState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscription) GetStateOk() (*StreamSubscriptionState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *StreamSubscription) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given StreamSubscriptionState and assigns it to the State field.
func (o *StreamSubscription) SetState(v StreamSubscriptionState) {
	o.State = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *StreamSubscription) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscription) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *StreamSubscription) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *StreamSubscription) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetStream returns the Stream field value if set, zero value otherwise.
func (o *StreamSubscription) GetStream() StreamTarget {
	if o == nil || IsNil(o.Stream) {
		var ret StreamTarget
		return ret
	}
	return *o.Stream
}

// GetStreamOk returns a tuple with the Stream field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscription) GetStreamOk() (*StreamTarget, bool) {
	if o == nil || IsNil(o.Stream) {
		return nil, false
	}
	return o.Stream, true
}

// HasStream returns a boolean if a field has been set.
func (o *StreamSubscription) HasStream() bool {
	if o != nil && !IsNil(o.Stream) {
		return true
	}

	return false
}

// SetStream gets a reference to the given StreamTarget and assigns it to the Stream field.
func (o *StreamSubscription) SetStream(v StreamTarget) {
	o.Stream = &v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *StreamSubscription) GetFilters() StreamSubscriptionFilter {
	if o == nil || IsNil(o.Filters) {
		var ret StreamSubscriptionFilter
		return ret
	}
	return *o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscription) GetFiltersOk() (*StreamSubscriptionFilter, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *StreamSubscription) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given StreamSubscriptionFilter and assigns it to the Filters field.
func (o *StreamSubscription) SetFilters(v StreamSubscriptionFilter) {
	o.Filters = &v
}

// GetSink returns the Sink field value if set, zero value otherwise.
func (o *StreamSubscription) GetSink() StreamSubscriptionSink {
	if o == nil || IsNil(o.Sink) {
		var ret StreamSubscriptionSink
		return ret
	}
	return *o.Sink
}

// GetSinkOk returns a tuple with the Sink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscription) GetSinkOk() (*StreamSubscriptionSink, bool) {
	if o == nil || IsNil(o.Sink) {
		return nil, false
	}
	return o.Sink, true
}

// HasSink returns a boolean if a field has been set.
func (o *StreamSubscription) HasSink() bool {
	if o != nil && !IsNil(o.Sink) {
		return true
	}

	return false
}

// SetSink gets a reference to the given StreamSubscriptionSink and assigns it to the Sink field.
func (o *StreamSubscription) SetSink(v StreamSubscriptionSink) {
	o.Sink = &v
}

// GetChangelog returns the Changelog field value if set, zero value otherwise.
func (o *StreamSubscription) GetChangelog() Changelog {
	if o == nil || IsNil(o.Changelog) {
		var ret Changelog
		return ret
	}
	return *o.Changelog
}

// GetChangelogOk returns a tuple with the Changelog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscription) GetChangelogOk() (*Changelog, bool) {
	if o == nil || IsNil(o.Changelog) {
		return nil, false
	}
	return o.Changelog, true
}

// HasChangelog returns a boolean if a field has been set.
func (o *StreamSubscription) HasChangelog() bool {
	if o != nil && !IsNil(o.Changelog) {
		return true
	}

	return false
}

// SetChangelog gets a reference to the given Changelog and assigns it to the Changelog field.
func (o *StreamSubscription) SetChangelog(v Changelog) {
	o.Changelog = &v
}

func (o StreamSubscription) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StreamSubscription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Stream) {
		toSerialize["stream"] = o.Stream
	}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	if !IsNil(o.Sink) {
		toSerialize["sink"] = o.Sink
	}
	if !IsNil(o.Changelog) {
		toSerialize["changelog"] = o.Changelog
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StreamSubscription) UnmarshalJSON(data []byte) (err error) {
	varStreamSubscription := _StreamSubscription{}

	err = json.Unmarshal(data, &varStreamSubscription)

	if err != nil {
		return err
	}

	*o = StreamSubscription(varStreamSubscription)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "href")
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "type")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "project")
		delete(additionalProperties, "state")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "stream")
		delete(additionalProperties, "filters")
		delete(additionalProperties, "sink")
		delete(additionalProperties, "changelog")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStreamSubscription struct {
	value *StreamSubscription
	isSet bool
}

func (v NullableStreamSubscription) Get() *StreamSubscription {
	return v.value
}

func (v *NullableStreamSubscription) Set(val *StreamSubscription) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamSubscription) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamSubscription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamSubscription(val *StreamSubscription) *NullableStreamSubscription {
	return &NullableStreamSubscription{value: val, isSet: true}
}

func (v NullableStreamSubscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamSubscription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
