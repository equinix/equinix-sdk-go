/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// AuthContextAuthid Cloud Event auth identifier
type AuthContextAuthid string

// List of AuthContext_authid
const (
	AUTHCONTEXTAUTHID_EQUINIX AuthContextAuthid = "equinix"
	AUTHCONTEXTAUTHID_USER_ID AuthContextAuthid = "userId"
)

// All allowed values of AuthContextAuthid enum
var AllowedAuthContextAuthidEnumValues = []AuthContextAuthid{
	"equinix",
	"userId",
}

func (v *AuthContextAuthid) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AuthContextAuthid(value)
	for _, existing := range AllowedAuthContextAuthidEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AuthContextAuthid", value)
}

// NewAuthContextAuthidFromValue returns a pointer to a valid AuthContextAuthid
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAuthContextAuthidFromValue(v string) (*AuthContextAuthid, error) {
	ev := AuthContextAuthid(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AuthContextAuthid: valid values are %v", v, AllowedAuthContextAuthidEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AuthContextAuthid) IsValid() bool {
	for _, existing := range AllowedAuthContextAuthidEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AuthContext_authid value
func (v AuthContextAuthid) Ptr() *AuthContextAuthid {
	return &v
}

type NullableAuthContextAuthid struct {
	value *AuthContextAuthid
	isSet bool
}

func (v NullableAuthContextAuthid) Get() *AuthContextAuthid {
	return v.value
}

func (v *NullableAuthContextAuthid) Set(val *AuthContextAuthid) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthContextAuthid) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthContextAuthid) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthContextAuthid(val *AuthContextAuthid) *NullableAuthContextAuthid {
	return &NullableAuthContextAuthid{value: val, isSet: true}
}

func (v NullableAuthContextAuthid) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthContextAuthid) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
