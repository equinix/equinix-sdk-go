/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// MetricAssetType the model 'MetricAssetType'
type MetricAssetType string

// List of MetricAssetType
const (
	METRICASSETTYPE_PORTS       MetricAssetType = "ports"
	METRICASSETTYPE_CONNECTIONS MetricAssetType = "connections"
	METRICASSETTYPE_METROS      MetricAssetType = "metros"
)

// All allowed values of MetricAssetType enum
var AllowedMetricAssetTypeEnumValues = []MetricAssetType{
	"ports",
	"connections",
	"metros",
}

func (v *MetricAssetType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MetricAssetType(value)
	for _, existing := range AllowedMetricAssetTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MetricAssetType", value)
}

// NewMetricAssetTypeFromValue returns a pointer to a valid MetricAssetType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMetricAssetTypeFromValue(v string) (*MetricAssetType, error) {
	ev := MetricAssetType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MetricAssetType: valid values are %v", v, AllowedMetricAssetTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MetricAssetType) IsValid() bool {
	for _, existing := range AllowedMetricAssetTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MetricAssetType value
func (v MetricAssetType) Ptr() *MetricAssetType {
	return &v
}

type NullableMetricAssetType struct {
	value *MetricAssetType
	isSet bool
}

func (v NullableMetricAssetType) Get() *MetricAssetType {
	return v.value
}

func (v *NullableMetricAssetType) Set(val *MetricAssetType) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricAssetType) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricAssetType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricAssetType(val *MetricAssetType) *NullableMetricAssetType {
	return &NullableMetricAssetType{value: val, isSet: true}
}

func (v NullableMetricAssetType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricAssetType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
