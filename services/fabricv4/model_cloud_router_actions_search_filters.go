/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the CloudRouterActionsSearchFilters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CloudRouterActionsSearchFilters{}

// CloudRouterActionsSearchFilters struct for CloudRouterActionsSearchFilters
type CloudRouterActionsSearchFilters struct {
	And                  []CloudRouterActionsSearchFilter `json:"and,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CloudRouterActionsSearchFilters CloudRouterActionsSearchFilters

// NewCloudRouterActionsSearchFilters instantiates a new CloudRouterActionsSearchFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloudRouterActionsSearchFilters() *CloudRouterActionsSearchFilters {
	this := CloudRouterActionsSearchFilters{}
	return &this
}

// NewCloudRouterActionsSearchFiltersWithDefaults instantiates a new CloudRouterActionsSearchFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloudRouterActionsSearchFiltersWithDefaults() *CloudRouterActionsSearchFilters {
	this := CloudRouterActionsSearchFilters{}
	return &this
}

// GetAnd returns the And field value if set, zero value otherwise.
func (o *CloudRouterActionsSearchFilters) GetAnd() []CloudRouterActionsSearchFilter {
	if o == nil || IsNil(o.And) {
		var ret []CloudRouterActionsSearchFilter
		return ret
	}
	return o.And
}

// GetAndOk returns a tuple with the And field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudRouterActionsSearchFilters) GetAndOk() ([]CloudRouterActionsSearchFilter, bool) {
	if o == nil || IsNil(o.And) {
		return nil, false
	}
	return o.And, true
}

// HasAnd returns a boolean if a field has been set.
func (o *CloudRouterActionsSearchFilters) HasAnd() bool {
	if o != nil && !IsNil(o.And) {
		return true
	}

	return false
}

// SetAnd gets a reference to the given []CloudRouterActionsSearchFilter and assigns it to the And field.
func (o *CloudRouterActionsSearchFilters) SetAnd(v []CloudRouterActionsSearchFilter) {
	o.And = v
}

func (o CloudRouterActionsSearchFilters) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CloudRouterActionsSearchFilters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.And) {
		toSerialize["and"] = o.And
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CloudRouterActionsSearchFilters) UnmarshalJSON(data []byte) (err error) {
	varCloudRouterActionsSearchFilters := _CloudRouterActionsSearchFilters{}

	err = json.Unmarshal(data, &varCloudRouterActionsSearchFilters)

	if err != nil {
		return err
	}

	*o = CloudRouterActionsSearchFilters(varCloudRouterActionsSearchFilters)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "and")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCloudRouterActionsSearchFilters struct {
	value *CloudRouterActionsSearchFilters
	isSet bool
}

func (v NullableCloudRouterActionsSearchFilters) Get() *CloudRouterActionsSearchFilters {
	return v.value
}

func (v *NullableCloudRouterActionsSearchFilters) Set(val *CloudRouterActionsSearchFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudRouterActionsSearchFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudRouterActionsSearchFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudRouterActionsSearchFilters(val *CloudRouterActionsSearchFilters) *NullableCloudRouterActionsSearchFilters {
	return &NullableCloudRouterActionsSearchFilters{value: val, isSet: true}
}

func (v NullableCloudRouterActionsSearchFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudRouterActionsSearchFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
