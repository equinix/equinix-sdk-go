/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// PortPackageType Port Package Type
type PortPackageType string

// List of PortPackage_type
const (
	PORTPACKAGETYPE_PORT_PACKAGE PortPackageType = "PORT_PACKAGE"
)

// All allowed values of PortPackageType enum
var AllowedPortPackageTypeEnumValues = []PortPackageType{
	"PORT_PACKAGE",
}

func (v *PortPackageType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PortPackageType(value)
	for _, existing := range AllowedPortPackageTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PortPackageType", value)
}

// NewPortPackageTypeFromValue returns a pointer to a valid PortPackageType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPortPackageTypeFromValue(v string) (*PortPackageType, error) {
	ev := PortPackageType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PortPackageType: valid values are %v", v, AllowedPortPackageTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PortPackageType) IsValid() bool {
	for _, existing := range AllowedPortPackageTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PortPackage_type value
func (v PortPackageType) Ptr() *PortPackageType {
	return &v
}

type NullablePortPackageType struct {
	value *PortPackageType
	isSet bool
}

func (v NullablePortPackageType) Get() *PortPackageType {
	return v.value
}

func (v *NullablePortPackageType) Set(val *PortPackageType) {
	v.value = val
	v.isSet = true
}

func (v NullablePortPackageType) IsSet() bool {
	return v.isSet
}

func (v *NullablePortPackageType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortPackageType(val *PortPackageType) *NullablePortPackageType {
	return &NullablePortPackageType{value: val, isSet: true}
}

func (v NullablePortPackageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortPackageType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
