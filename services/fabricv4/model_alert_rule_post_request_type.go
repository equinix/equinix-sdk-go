/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// AlertRulePostRequestType the model 'AlertRulePostRequestType'
type AlertRulePostRequestType string

// List of AlertRulePostRequest_type
const (
	ALERTRULEPOSTREQUESTTYPE_METRIC_ALERT AlertRulePostRequestType = "METRIC_ALERT"
)

// All allowed values of AlertRulePostRequestType enum
var AllowedAlertRulePostRequestTypeEnumValues = []AlertRulePostRequestType{
	"METRIC_ALERT",
}

func (v *AlertRulePostRequestType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AlertRulePostRequestType(value)
	for _, existing := range AllowedAlertRulePostRequestTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AlertRulePostRequestType", value)
}

// NewAlertRulePostRequestTypeFromValue returns a pointer to a valid AlertRulePostRequestType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAlertRulePostRequestTypeFromValue(v string) (*AlertRulePostRequestType, error) {
	ev := AlertRulePostRequestType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AlertRulePostRequestType: valid values are %v", v, AllowedAlertRulePostRequestTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AlertRulePostRequestType) IsValid() bool {
	for _, existing := range AllowedAlertRulePostRequestTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AlertRulePostRequest_type value
func (v AlertRulePostRequestType) Ptr() *AlertRulePostRequestType {
	return &v
}

type NullableAlertRulePostRequestType struct {
	value *AlertRulePostRequestType
	isSet bool
}

func (v NullableAlertRulePostRequestType) Get() *AlertRulePostRequestType {
	return v.value
}

func (v *NullableAlertRulePostRequestType) Set(val *AlertRulePostRequestType) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertRulePostRequestType) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertRulePostRequestType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertRulePostRequestType(val *AlertRulePostRequestType) *NullableAlertRulePostRequestType {
	return &NullableAlertRulePostRequestType{value: val, isSet: true}
}

func (v NullableAlertRulePostRequestType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertRulePostRequestType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
