/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// CloudRouterPackageNatType CloudRouter package NAT supported type
type CloudRouterPackageNatType string

// List of CloudRouterPackage_natType
const (
	CLOUDROUTERPACKAGENATTYPE_STATIC_NAT CloudRouterPackageNatType = "STATIC_NAT"
)

// All allowed values of CloudRouterPackageNatType enum
var AllowedCloudRouterPackageNatTypeEnumValues = []CloudRouterPackageNatType{
	"STATIC_NAT",
}

func (v *CloudRouterPackageNatType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CloudRouterPackageNatType(value)
	for _, existing := range AllowedCloudRouterPackageNatTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CloudRouterPackageNatType", value)
}

// NewCloudRouterPackageNatTypeFromValue returns a pointer to a valid CloudRouterPackageNatType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCloudRouterPackageNatTypeFromValue(v string) (*CloudRouterPackageNatType, error) {
	ev := CloudRouterPackageNatType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CloudRouterPackageNatType: valid values are %v", v, AllowedCloudRouterPackageNatTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CloudRouterPackageNatType) IsValid() bool {
	for _, existing := range AllowedCloudRouterPackageNatTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CloudRouterPackage_natType value
func (v CloudRouterPackageNatType) Ptr() *CloudRouterPackageNatType {
	return &v
}

type NullableCloudRouterPackageNatType struct {
	value *CloudRouterPackageNatType
	isSet bool
}

func (v NullableCloudRouterPackageNatType) Get() *CloudRouterPackageNatType {
	return v.value
}

func (v *NullableCloudRouterPackageNatType) Set(val *CloudRouterPackageNatType) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudRouterPackageNatType) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudRouterPackageNatType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudRouterPackageNatType(val *CloudRouterPackageNatType) *NullableCloudRouterPackageNatType {
	return &NullableCloudRouterPackageNatType{value: val, isSet: true}
}

func (v NullableCloudRouterPackageNatType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudRouterPackageNatType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
