/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// VirtualPortType Port type.
type VirtualPortType string

// List of VirtualPortType
const (
	VIRTUALPORTTYPE_XF_PORT VirtualPortType = "XF_PORT"
)

// All allowed values of VirtualPortType enum
var AllowedVirtualPortTypeEnumValues = []VirtualPortType{
	"XF_PORT",
}

func (v *VirtualPortType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VirtualPortType(value)
	for _, existing := range AllowedVirtualPortTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VirtualPortType", value)
}

// NewVirtualPortTypeFromValue returns a pointer to a valid VirtualPortType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVirtualPortTypeFromValue(v string) (*VirtualPortType, error) {
	ev := VirtualPortType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VirtualPortType: valid values are %v", v, AllowedVirtualPortTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VirtualPortType) IsValid() bool {
	for _, existing := range AllowedVirtualPortTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VirtualPortType value
func (v VirtualPortType) Ptr() *VirtualPortType {
	return &v
}

type NullableVirtualPortType struct {
	value *VirtualPortType
	isSet bool
}

func (v NullableVirtualPortType) Get() *VirtualPortType {
	return v.value
}

func (v *NullableVirtualPortType) Set(val *VirtualPortType) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualPortType) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualPortType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualPortType(val *VirtualPortType) *NullableVirtualPortType {
	return &NullableVirtualPortType{value: val, isSet: true}
}

func (v NullableVirtualPortType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualPortType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
