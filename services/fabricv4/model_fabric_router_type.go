/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// FabricRouterType the model 'FabricRouterType'
type FabricRouterType string

// List of FabricRouter_type
const (
	FABRICROUTERTYPE_XF_ROUTER FabricRouterType = "XF_ROUTER"
)

// All allowed values of FabricRouterType enum
var AllowedFabricRouterTypeEnumValues = []FabricRouterType{
	"XF_ROUTER",
}

func (v *FabricRouterType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FabricRouterType(value)
	for _, existing := range AllowedFabricRouterTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FabricRouterType", value)
}

// NewFabricRouterTypeFromValue returns a pointer to a valid FabricRouterType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFabricRouterTypeFromValue(v string) (*FabricRouterType, error) {
	ev := FabricRouterType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FabricRouterType: valid values are %v", v, AllowedFabricRouterTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FabricRouterType) IsValid() bool {
	for _, existing := range AllowedFabricRouterTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FabricRouter_type value
func (v FabricRouterType) Ptr() *FabricRouterType {
	return &v
}

type NullableFabricRouterType struct {
	value *FabricRouterType
	isSet bool
}

func (v NullableFabricRouterType) Get() *FabricRouterType {
	return v.value
}

func (v *NullableFabricRouterType) Set(val *FabricRouterType) {
	v.value = val
	v.isSet = true
}

func (v NullableFabricRouterType) IsSet() bool {
	return v.isSet
}

func (v *NullableFabricRouterType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFabricRouterType(val *FabricRouterType) *NullableFabricRouterType {
	return &NullableFabricRouterType{value: val, isSet: true}
}

func (v NullableFabricRouterType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFabricRouterType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
