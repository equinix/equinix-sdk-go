/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// checks if the AWSProviderResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AWSProviderResponse{}

// AWSProviderResponse struct for AWSProviderResponse
type AWSProviderResponse struct {
	Type                 AWSProviderType               `json:"type"`
	Resources            []AWSProviderResourceResponse `json:"resources,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AWSProviderResponse AWSProviderResponse

// NewAWSProviderResponse instantiates a new AWSProviderResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAWSProviderResponse(type_ AWSProviderType) *AWSProviderResponse {
	this := AWSProviderResponse{}
	this.Type = type_
	return &this
}

// NewAWSProviderResponseWithDefaults instantiates a new AWSProviderResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAWSProviderResponseWithDefaults() *AWSProviderResponse {
	this := AWSProviderResponse{}
	return &this
}

// GetType returns the Type field value
func (o *AWSProviderResponse) GetType() AWSProviderType {
	if o == nil {
		var ret AWSProviderType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AWSProviderResponse) GetTypeOk() (*AWSProviderType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AWSProviderResponse) SetType(v AWSProviderType) {
	o.Type = v
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *AWSProviderResponse) GetResources() []AWSProviderResourceResponse {
	if o == nil || IsNil(o.Resources) {
		var ret []AWSProviderResourceResponse
		return ret
	}
	return o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AWSProviderResponse) GetResourcesOk() ([]AWSProviderResourceResponse, bool) {
	if o == nil || IsNil(o.Resources) {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *AWSProviderResponse) HasResources() bool {
	if o != nil && !IsNil(o.Resources) {
		return true
	}

	return false
}

// SetResources gets a reference to the given []AWSProviderResourceResponse and assigns it to the Resources field.
func (o *AWSProviderResponse) SetResources(v []AWSProviderResourceResponse) {
	o.Resources = v
}

func (o AWSProviderResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AWSProviderResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Resources) {
		toSerialize["resources"] = o.Resources
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AWSProviderResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAWSProviderResponse := _AWSProviderResponse{}

	err = json.Unmarshal(data, &varAWSProviderResponse)

	if err != nil {
		return err
	}

	*o = AWSProviderResponse(varAWSProviderResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "resources")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAWSProviderResponse struct {
	value *AWSProviderResponse
	isSet bool
}

func (v NullableAWSProviderResponse) Get() *AWSProviderResponse {
	return v.value
}

func (v *NullableAWSProviderResponse) Set(val *AWSProviderResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAWSProviderResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAWSProviderResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAWSProviderResponse(val *AWSProviderResponse) *NullableAWSProviderResponse {
	return &NullableAWSProviderResponse{value: val, isSet: true}
}

func (v NullableAWSProviderResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAWSProviderResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
