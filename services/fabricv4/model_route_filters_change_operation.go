/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// checks if the RouteFiltersChangeOperation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RouteFiltersChangeOperation{}

// RouteFiltersChangeOperation Route Filter change operation data
type RouteFiltersChangeOperation struct {
	Op RoutingProtocolChangeOperationOp `json:"op"`
	// path inside document leading to updated parameter
	Path                 string           `json:"path"`
	Value                RouteFiltersBase `json:"value"`
	AdditionalProperties map[string]interface{}
}

type _RouteFiltersChangeOperation RouteFiltersChangeOperation

// NewRouteFiltersChangeOperation instantiates a new RouteFiltersChangeOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRouteFiltersChangeOperation(op RoutingProtocolChangeOperationOp, path string, value RouteFiltersBase) *RouteFiltersChangeOperation {
	this := RouteFiltersChangeOperation{}
	this.Op = op
	this.Path = path
	this.Value = value
	return &this
}

// NewRouteFiltersChangeOperationWithDefaults instantiates a new RouteFiltersChangeOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteFiltersChangeOperationWithDefaults() *RouteFiltersChangeOperation {
	this := RouteFiltersChangeOperation{}
	return &this
}

// GetOp returns the Op field value
func (o *RouteFiltersChangeOperation) GetOp() RoutingProtocolChangeOperationOp {
	if o == nil {
		var ret RoutingProtocolChangeOperationOp
		return ret
	}

	return o.Op
}

// GetOpOk returns a tuple with the Op field value
// and a boolean to check if the value has been set.
func (o *RouteFiltersChangeOperation) GetOpOk() (*RoutingProtocolChangeOperationOp, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Op, true
}

// SetOp sets field value
func (o *RouteFiltersChangeOperation) SetOp(v RoutingProtocolChangeOperationOp) {
	o.Op = v
}

// GetPath returns the Path field value
func (o *RouteFiltersChangeOperation) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *RouteFiltersChangeOperation) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *RouteFiltersChangeOperation) SetPath(v string) {
	o.Path = v
}

// GetValue returns the Value field value
func (o *RouteFiltersChangeOperation) GetValue() RouteFiltersBase {
	if o == nil {
		var ret RouteFiltersBase
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *RouteFiltersChangeOperation) GetValueOk() (*RouteFiltersBase, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *RouteFiltersChangeOperation) SetValue(v RouteFiltersBase) {
	o.Value = v
}

func (o RouteFiltersChangeOperation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RouteFiltersChangeOperation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["op"] = o.Op
	toSerialize["path"] = o.Path
	toSerialize["value"] = o.Value

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RouteFiltersChangeOperation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"op",
		"path",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRouteFiltersChangeOperation := _RouteFiltersChangeOperation{}

	err = json.Unmarshal(data, &varRouteFiltersChangeOperation)

	if err != nil {
		return err
	}

	*o = RouteFiltersChangeOperation(varRouteFiltersChangeOperation)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "op")
		delete(additionalProperties, "path")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRouteFiltersChangeOperation struct {
	value *RouteFiltersChangeOperation
	isSet bool
}

func (v NullableRouteFiltersChangeOperation) Get() *RouteFiltersChangeOperation {
	return v.value
}

func (v *NullableRouteFiltersChangeOperation) Set(val *RouteFiltersChangeOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteFiltersChangeOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteFiltersChangeOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteFiltersChangeOperation(val *RouteFiltersChangeOperation) *NullableRouteFiltersChangeOperation {
	return &NullableRouteFiltersChangeOperation{value: val, isSet: true}
}

func (v NullableRouteFiltersChangeOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteFiltersChangeOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
