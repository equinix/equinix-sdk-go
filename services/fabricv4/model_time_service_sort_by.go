/*
Equinix Fabric API v4

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// TimeServiceSortBy Possible field names to use on sorting
type TimeServiceSortBy string

// List of TimeServiceSortBy
const (
	TIMESERVICESORTBY_NAME                         TimeServiceSortBy = "/name"
	TIMESERVICESORTBY_UUID                         TimeServiceSortBy = "/uuid"
	TIMESERVICESORTBY_STATE                        TimeServiceSortBy = "/state"
	TIMESERVICESORTBY_TYPE                         TimeServiceSortBy = "/type"
	TIMESERVICESORTBY_PACKAGE_CODE                 TimeServiceSortBy = "/package/code"
	TIMESERVICESORTBY_CHANGE_LOG_CREATED_DATE_TIME TimeServiceSortBy = "/changeLog/createdDateTime"
	TIMESERVICESORTBY_CHANGE_LOG_UPDATED_DATE_TIME TimeServiceSortBy = "/changeLog/updatedDateTime"
)

// All allowed values of TimeServiceSortBy enum
var AllowedTimeServiceSortByEnumValues = []TimeServiceSortBy{
	"/name",
	"/uuid",
	"/state",
	"/type",
	"/package/code",
	"/changeLog/createdDateTime",
	"/changeLog/updatedDateTime",
}

func (v *TimeServiceSortBy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TimeServiceSortBy(value)
	for _, existing := range AllowedTimeServiceSortByEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TimeServiceSortBy", value)
}

// NewTimeServiceSortByFromValue returns a pointer to a valid TimeServiceSortBy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTimeServiceSortByFromValue(v string) (*TimeServiceSortBy, error) {
	ev := TimeServiceSortBy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TimeServiceSortBy: valid values are %v", v, AllowedTimeServiceSortByEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TimeServiceSortBy) IsValid() bool {
	for _, existing := range AllowedTimeServiceSortByEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TimeServiceSortBy value
func (v TimeServiceSortBy) Ptr() *TimeServiceSortBy {
	return &v
}

type NullableTimeServiceSortBy struct {
	value *TimeServiceSortBy
	isSet bool
}

func (v NullableTimeServiceSortBy) Get() *TimeServiceSortBy {
	return v.value
}

func (v *NullableTimeServiceSortBy) Set(val *TimeServiceSortBy) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeServiceSortBy) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeServiceSortBy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeServiceSortBy(val *TimeServiceSortBy) *NullableTimeServiceSortBy {
	return &NullableTimeServiceSortBy{value: val, isSet: true}
}

func (v NullableTimeServiceSortBy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeServiceSortBy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
