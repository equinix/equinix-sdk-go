/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// CustomFieldDataType the model 'CustomFieldDataType'
type CustomFieldDataType string

// List of CustomField_dataType
const (
	CUSTOMFIELDDATATYPE_STRING CustomFieldDataType = "STRING"
	CUSTOMFIELDDATATYPE_LIST   CustomFieldDataType = "LIST"
	CUSTOMFIELDDATATYPE_NUMBER CustomFieldDataType = "NUMBER"
)

// All allowed values of CustomFieldDataType enum
var AllowedCustomFieldDataTypeEnumValues = []CustomFieldDataType{
	"STRING",
	"LIST",
	"NUMBER",
}

func (v *CustomFieldDataType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CustomFieldDataType(value)
	for _, existing := range AllowedCustomFieldDataTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CustomFieldDataType", value)
}

// NewCustomFieldDataTypeFromValue returns a pointer to a valid CustomFieldDataType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCustomFieldDataTypeFromValue(v string) (*CustomFieldDataType, error) {
	ev := CustomFieldDataType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CustomFieldDataType: valid values are %v", v, AllowedCustomFieldDataTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CustomFieldDataType) IsValid() bool {
	for _, existing := range AllowedCustomFieldDataTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CustomField_dataType value
func (v CustomFieldDataType) Ptr() *CustomFieldDataType {
	return &v
}

type NullableCustomFieldDataType struct {
	value *CustomFieldDataType
	isSet bool
}

func (v NullableCustomFieldDataType) Get() *CustomFieldDataType {
	return v.value
}

func (v *NullableCustomFieldDataType) Set(val *CustomFieldDataType) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomFieldDataType) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomFieldDataType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomFieldDataType(val *CustomFieldDataType) *NullableCustomFieldDataType {
	return &NullableCustomFieldDataType{value: val, isSet: true}
}

func (v NullableCustomFieldDataType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomFieldDataType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
