/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// RouteAggregationsBaseType Route Aggregation type
type RouteAggregationsBaseType string

// List of RouteAggregationsBase_type
const (
	ROUTEAGGREGATIONSBASETYPE_IPV4_PREFIX_AGGREGATION RouteAggregationsBaseType = "BGP_IPv4_PREFIX_AGGREGATION"
	ROUTEAGGREGATIONSBASETYPE_IPV6_PREFIX_AGGREGATION RouteAggregationsBaseType = "BGP_IPv6_PREFIX_AGGREGATION"
)

// All allowed values of RouteAggregationsBaseType enum
var AllowedRouteAggregationsBaseTypeEnumValues = []RouteAggregationsBaseType{
	"BGP_IPv4_PREFIX_AGGREGATION",
	"BGP_IPv6_PREFIX_AGGREGATION",
}

func (v *RouteAggregationsBaseType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RouteAggregationsBaseType(value)
	for _, existing := range AllowedRouteAggregationsBaseTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RouteAggregationsBaseType", value)
}

// NewRouteAggregationsBaseTypeFromValue returns a pointer to a valid RouteAggregationsBaseType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRouteAggregationsBaseTypeFromValue(v string) (*RouteAggregationsBaseType, error) {
	ev := RouteAggregationsBaseType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RouteAggregationsBaseType: valid values are %v", v, AllowedRouteAggregationsBaseTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RouteAggregationsBaseType) IsValid() bool {
	for _, existing := range AllowedRouteAggregationsBaseTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RouteAggregationsBase_type value
func (v RouteAggregationsBaseType) Ptr() *RouteAggregationsBaseType {
	return &v
}

type NullableRouteAggregationsBaseType struct {
	value *RouteAggregationsBaseType
	isSet bool
}

func (v NullableRouteAggregationsBaseType) Get() *RouteAggregationsBaseType {
	return v.value
}

func (v *NullableRouteAggregationsBaseType) Set(val *RouteAggregationsBaseType) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteAggregationsBaseType) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteAggregationsBaseType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteAggregationsBaseType(val *RouteAggregationsBaseType) *NullableRouteAggregationsBaseType {
	return &NullableRouteAggregationsBaseType{value: val, isSet: true}
}

func (v NullableRouteAggregationsBaseType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteAggregationsBaseType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
