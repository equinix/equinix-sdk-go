/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// AuthContextAuthtype Cloud Event auth type
type AuthContextAuthtype string

// List of AuthContext_authtype
const (
	AUTHCONTEXTAUTHTYPE_SYSTEM AuthContextAuthtype = "system"
	AUTHCONTEXTAUTHTYPE_USER   AuthContextAuthtype = "user"
)

// All allowed values of AuthContextAuthtype enum
var AllowedAuthContextAuthtypeEnumValues = []AuthContextAuthtype{
	"system",
	"user",
}

func (v *AuthContextAuthtype) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AuthContextAuthtype(value)
	for _, existing := range AllowedAuthContextAuthtypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AuthContextAuthtype", value)
}

// NewAuthContextAuthtypeFromValue returns a pointer to a valid AuthContextAuthtype
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAuthContextAuthtypeFromValue(v string) (*AuthContextAuthtype, error) {
	ev := AuthContextAuthtype(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AuthContextAuthtype: valid values are %v", v, AllowedAuthContextAuthtypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AuthContextAuthtype) IsValid() bool {
	for _, existing := range AllowedAuthContextAuthtypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AuthContext_authtype value
func (v AuthContextAuthtype) Ptr() *AuthContextAuthtype {
	return &v
}

type NullableAuthContextAuthtype struct {
	value *AuthContextAuthtype
	isSet bool
}

func (v NullableAuthContextAuthtype) Get() *AuthContextAuthtype {
	return v.value
}

func (v *NullableAuthContextAuthtype) Set(val *AuthContextAuthtype) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthContextAuthtype) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthContextAuthtype) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthContextAuthtype(val *AuthContextAuthtype) *NullableAuthContextAuthtype {
	return &NullableAuthContextAuthtype{value: val, isSet: true}
}

func (v NullableAuthContextAuthtype) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthContextAuthtype) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
