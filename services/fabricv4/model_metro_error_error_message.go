/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// MetroErrorErrorMessage the model 'MetroErrorErrorMessage'
type MetroErrorErrorMessage string

// List of MetroError_errorMessage
const (
	METROERRORERRORMESSAGE_UNAUTHORIZED                    MetroErrorErrorMessage = "Unauthorized"
	METROERRORERRORMESSAGE_INVALID_QUERY_PARAMETER         MetroErrorErrorMessage = "Invalid Query Parameter"
	METROERRORERRORMESSAGE_INVALID_PATH_PARAMETER          MetroErrorErrorMessage = "Invalid Path Parameter"
	METROERRORERRORMESSAGE_INVALID_QUERY_OR_PATH_PARAMETER MetroErrorErrorMessage = "Invalid Query or Path Parameter"
	METROERRORERRORMESSAGE_INTERNAL_SERVER_ERROR           MetroErrorErrorMessage = "Internal Server Error"
	METROERRORERRORMESSAGE_METRO_NOT_FOUND                 MetroErrorErrorMessage = "Metro Not Found"
)

// All allowed values of MetroErrorErrorMessage enum
var AllowedMetroErrorErrorMessageEnumValues = []MetroErrorErrorMessage{
	"Unauthorized",
	"Invalid Query Parameter",
	"Invalid Path Parameter",
	"Invalid Query or Path Parameter",
	"Internal Server Error",
	"Metro Not Found",
}

func (v *MetroErrorErrorMessage) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MetroErrorErrorMessage(value)
	for _, existing := range AllowedMetroErrorErrorMessageEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MetroErrorErrorMessage", value)
}

// NewMetroErrorErrorMessageFromValue returns a pointer to a valid MetroErrorErrorMessage
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMetroErrorErrorMessageFromValue(v string) (*MetroErrorErrorMessage, error) {
	ev := MetroErrorErrorMessage(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MetroErrorErrorMessage: valid values are %v", v, AllowedMetroErrorErrorMessageEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MetroErrorErrorMessage) IsValid() bool {
	for _, existing := range AllowedMetroErrorErrorMessageEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MetroError_errorMessage value
func (v MetroErrorErrorMessage) Ptr() *MetroErrorErrorMessage {
	return &v
}

type NullableMetroErrorErrorMessage struct {
	value *MetroErrorErrorMessage
	isSet bool
}

func (v NullableMetroErrorErrorMessage) Get() *MetroErrorErrorMessage {
	return v.value
}

func (v *NullableMetroErrorErrorMessage) Set(val *MetroErrorErrorMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableMetroErrorErrorMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableMetroErrorErrorMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetroErrorErrorMessage(val *MetroErrorErrorMessage) *NullableMetroErrorErrorMessage {
	return &NullableMetroErrorErrorMessage{value: val, isSet: true}
}

func (v NullableMetroErrorErrorMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetroErrorErrorMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
