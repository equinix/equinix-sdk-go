/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// checks if the ConnectionPeeringProtocolPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectionPeeringProtocolPostRequest{}

// ConnectionPeeringProtocolPostRequest struct for ConnectionPeeringProtocolPostRequest
type ConnectionPeeringProtocolPostRequest struct {
	Type ConnectionPeeringProtocolPostRequestType `json:"type"`
	// Customer-provided peering protocol name
	Name string `json:"name"`
	// Customer-provided peering protocol description
	Description string `json:"description"`
	// Customer ASN
	CustomerAsn int64 `json:"customerAsn"`
	// MAC address of the peering protocol
	MacAddress           string                `json:"macAddress"`
	BgpIpv4              PeeringConnectionIpv4 `json:"bgpIpv4"`
	BgpIpv6              PeeringConnectionIpv6 `json:"bgpIpv6"`
	AdditionalProperties map[string]interface{}
}

type _ConnectionPeeringProtocolPostRequest ConnectionPeeringProtocolPostRequest

// NewConnectionPeeringProtocolPostRequest instantiates a new ConnectionPeeringProtocolPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionPeeringProtocolPostRequest(type_ ConnectionPeeringProtocolPostRequestType, name string, description string, customerAsn int64, macAddress string, bgpIpv4 PeeringConnectionIpv4, bgpIpv6 PeeringConnectionIpv6) *ConnectionPeeringProtocolPostRequest {
	this := ConnectionPeeringProtocolPostRequest{}
	this.Type = type_
	this.Name = name
	this.Description = description
	this.CustomerAsn = customerAsn
	this.MacAddress = macAddress
	this.BgpIpv4 = bgpIpv4
	this.BgpIpv6 = bgpIpv6
	return &this
}

// NewConnectionPeeringProtocolPostRequestWithDefaults instantiates a new ConnectionPeeringProtocolPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionPeeringProtocolPostRequestWithDefaults() *ConnectionPeeringProtocolPostRequest {
	this := ConnectionPeeringProtocolPostRequest{}
	return &this
}

// GetType returns the Type field value
func (o *ConnectionPeeringProtocolPostRequest) GetType() ConnectionPeeringProtocolPostRequestType {
	if o == nil {
		var ret ConnectionPeeringProtocolPostRequestType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ConnectionPeeringProtocolPostRequest) GetTypeOk() (*ConnectionPeeringProtocolPostRequestType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ConnectionPeeringProtocolPostRequest) SetType(v ConnectionPeeringProtocolPostRequestType) {
	o.Type = v
}

// GetName returns the Name field value
func (o *ConnectionPeeringProtocolPostRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ConnectionPeeringProtocolPostRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ConnectionPeeringProtocolPostRequest) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *ConnectionPeeringProtocolPostRequest) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *ConnectionPeeringProtocolPostRequest) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *ConnectionPeeringProtocolPostRequest) SetDescription(v string) {
	o.Description = v
}

// GetCustomerAsn returns the CustomerAsn field value
func (o *ConnectionPeeringProtocolPostRequest) GetCustomerAsn() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CustomerAsn
}

// GetCustomerAsnOk returns a tuple with the CustomerAsn field value
// and a boolean to check if the value has been set.
func (o *ConnectionPeeringProtocolPostRequest) GetCustomerAsnOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomerAsn, true
}

// SetCustomerAsn sets field value
func (o *ConnectionPeeringProtocolPostRequest) SetCustomerAsn(v int64) {
	o.CustomerAsn = v
}

// GetMacAddress returns the MacAddress field value
func (o *ConnectionPeeringProtocolPostRequest) GetMacAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MacAddress
}

// GetMacAddressOk returns a tuple with the MacAddress field value
// and a boolean to check if the value has been set.
func (o *ConnectionPeeringProtocolPostRequest) GetMacAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MacAddress, true
}

// SetMacAddress sets field value
func (o *ConnectionPeeringProtocolPostRequest) SetMacAddress(v string) {
	o.MacAddress = v
}

// GetBgpIpv4 returns the BgpIpv4 field value
func (o *ConnectionPeeringProtocolPostRequest) GetBgpIpv4() PeeringConnectionIpv4 {
	if o == nil {
		var ret PeeringConnectionIpv4
		return ret
	}

	return o.BgpIpv4
}

// GetBgpIpv4Ok returns a tuple with the BgpIpv4 field value
// and a boolean to check if the value has been set.
func (o *ConnectionPeeringProtocolPostRequest) GetBgpIpv4Ok() (*PeeringConnectionIpv4, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BgpIpv4, true
}

// SetBgpIpv4 sets field value
func (o *ConnectionPeeringProtocolPostRequest) SetBgpIpv4(v PeeringConnectionIpv4) {
	o.BgpIpv4 = v
}

// GetBgpIpv6 returns the BgpIpv6 field value
func (o *ConnectionPeeringProtocolPostRequest) GetBgpIpv6() PeeringConnectionIpv6 {
	if o == nil {
		var ret PeeringConnectionIpv6
		return ret
	}

	return o.BgpIpv6
}

// GetBgpIpv6Ok returns a tuple with the BgpIpv6 field value
// and a boolean to check if the value has been set.
func (o *ConnectionPeeringProtocolPostRequest) GetBgpIpv6Ok() (*PeeringConnectionIpv6, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BgpIpv6, true
}

// SetBgpIpv6 sets field value
func (o *ConnectionPeeringProtocolPostRequest) SetBgpIpv6(v PeeringConnectionIpv6) {
	o.BgpIpv6 = v
}

func (o ConnectionPeeringProtocolPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectionPeeringProtocolPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	toSerialize["customerAsn"] = o.CustomerAsn
	toSerialize["macAddress"] = o.MacAddress
	toSerialize["bgpIpv4"] = o.BgpIpv4
	toSerialize["bgpIpv6"] = o.BgpIpv6

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ConnectionPeeringProtocolPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"name",
		"description",
		"customerAsn",
		"macAddress",
		"bgpIpv4",
		"bgpIpv6",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConnectionPeeringProtocolPostRequest := _ConnectionPeeringProtocolPostRequest{}

	err = json.Unmarshal(data, &varConnectionPeeringProtocolPostRequest)

	if err != nil {
		return err
	}

	*o = ConnectionPeeringProtocolPostRequest(varConnectionPeeringProtocolPostRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "customerAsn")
		delete(additionalProperties, "macAddress")
		delete(additionalProperties, "bgpIpv4")
		delete(additionalProperties, "bgpIpv6")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableConnectionPeeringProtocolPostRequest struct {
	value *ConnectionPeeringProtocolPostRequest
	isSet bool
}

func (v NullableConnectionPeeringProtocolPostRequest) Get() *ConnectionPeeringProtocolPostRequest {
	return v.value
}

func (v *NullableConnectionPeeringProtocolPostRequest) Set(val *ConnectionPeeringProtocolPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionPeeringProtocolPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionPeeringProtocolPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionPeeringProtocolPostRequest(val *ConnectionPeeringProtocolPostRequest) *NullableConnectionPeeringProtocolPostRequest {
	return &NullableConnectionPeeringProtocolPostRequest{value: val, isSet: true}
}

func (v NullableConnectionPeeringProtocolPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionPeeringProtocolPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
