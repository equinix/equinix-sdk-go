/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// RouteFilterRulesChangeType Type of change
type RouteFilterRulesChangeType string

// List of RouteFilterRulesChange_type
const (
	ROUTEFILTERRULESCHANGETYPE_IPV4_PREFIX_FILTER_RULE_UPDATE   RouteFilterRulesChangeType = "BGP_IPv4_PREFIX_FILTER_RULE_UPDATE"
	ROUTEFILTERRULESCHANGETYPE_IPV4_PREFIX_FILTER_RULE_CREATION RouteFilterRulesChangeType = "BGP_IPv4_PREFIX_FILTER_RULE_CREATION"
	ROUTEFILTERRULESCHANGETYPE_IPV4_PREFIX_FILTER_RULE_DELETION RouteFilterRulesChangeType = "BGP_IPv4_PREFIX_FILTER_RULE_DELETION"
	ROUTEFILTERRULESCHANGETYPE_IPV6_PREFIX_FILTER_RULE_UPDATE   RouteFilterRulesChangeType = "BGP_IPv6_PREFIX_FILTER_RULE_UPDATE"
	ROUTEFILTERRULESCHANGETYPE_IPV6_PREFIX_FILTER_RULE_CREATION RouteFilterRulesChangeType = "BGP_IPv6_PREFIX_FILTER_RULE_CREATION"
	ROUTEFILTERRULESCHANGETYPE_IPV6_PREFIX_FILTER_RULE_DELETION RouteFilterRulesChangeType = "BGP_IPv6_PREFIX_FILTER_RULE_DELETION"
)

// All allowed values of RouteFilterRulesChangeType enum
var AllowedRouteFilterRulesChangeTypeEnumValues = []RouteFilterRulesChangeType{
	"BGP_IPv4_PREFIX_FILTER_RULE_UPDATE",
	"BGP_IPv4_PREFIX_FILTER_RULE_CREATION",
	"BGP_IPv4_PREFIX_FILTER_RULE_DELETION",
	"BGP_IPv6_PREFIX_FILTER_RULE_UPDATE",
	"BGP_IPv6_PREFIX_FILTER_RULE_CREATION",
	"BGP_IPv6_PREFIX_FILTER_RULE_DELETION",
}

func (v *RouteFilterRulesChangeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RouteFilterRulesChangeType(value)
	for _, existing := range AllowedRouteFilterRulesChangeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RouteFilterRulesChangeType", value)
}

// NewRouteFilterRulesChangeTypeFromValue returns a pointer to a valid RouteFilterRulesChangeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRouteFilterRulesChangeTypeFromValue(v string) (*RouteFilterRulesChangeType, error) {
	ev := RouteFilterRulesChangeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RouteFilterRulesChangeType: valid values are %v", v, AllowedRouteFilterRulesChangeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RouteFilterRulesChangeType) IsValid() bool {
	for _, existing := range AllowedRouteFilterRulesChangeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RouteFilterRulesChange_type value
func (v RouteFilterRulesChangeType) Ptr() *RouteFilterRulesChangeType {
	return &v
}

type NullableRouteFilterRulesChangeType struct {
	value *RouteFilterRulesChangeType
	isSet bool
}

func (v NullableRouteFilterRulesChangeType) Get() *RouteFilterRulesChangeType {
	return v.value
}

func (v *NullableRouteFilterRulesChangeType) Set(val *RouteFilterRulesChangeType) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteFilterRulesChangeType) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteFilterRulesChangeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteFilterRulesChangeType(val *RouteFilterRulesChangeType) *NullableRouteFilterRulesChangeType {
	return &NullableRouteFilterRulesChangeType{value: val, isSet: true}
}

func (v NullableRouteFilterRulesChangeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteFilterRulesChangeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
