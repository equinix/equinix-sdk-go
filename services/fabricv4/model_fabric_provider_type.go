/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// FabricProviderType the model 'FabricProviderType'
type FabricProviderType string

// List of FabricProvider_type
const (
	FABRICPROVIDERTYPE_FABRIC_PROVIDER FabricProviderType = "FABRIC_PROVIDER"
)

// All allowed values of FabricProviderType enum
var AllowedFabricProviderTypeEnumValues = []FabricProviderType{
	"FABRIC_PROVIDER",
}

func (v *FabricProviderType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FabricProviderType(value)
	for _, existing := range AllowedFabricProviderTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FabricProviderType", value)
}

// NewFabricProviderTypeFromValue returns a pointer to a valid FabricProviderType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFabricProviderTypeFromValue(v string) (*FabricProviderType, error) {
	ev := FabricProviderType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FabricProviderType: valid values are %v", v, AllowedFabricProviderTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FabricProviderType) IsValid() bool {
	for _, existing := range AllowedFabricProviderTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FabricProvider_type value
func (v FabricProviderType) Ptr() *FabricProviderType {
	return &v
}

type NullableFabricProviderType struct {
	value *FabricProviderType
	isSet bool
}

func (v NullableFabricProviderType) Get() *FabricProviderType {
	return v.value
}

func (v *NullableFabricProviderType) Set(val *FabricProviderType) {
	v.value = val
	v.isSet = true
}

func (v NullableFabricProviderType) IsSet() bool {
	return v.isSet
}

func (v *NullableFabricProviderType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFabricProviderType(val *FabricProviderType) *NullableFabricProviderType {
	return &NullableFabricProviderType{value: val, isSet: true}
}

func (v NullableFabricProviderType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFabricProviderType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
