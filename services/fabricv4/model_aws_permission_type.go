/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// AWSPermissionType the model 'AWSPermissionType'
type AWSPermissionType string

// List of AWSPermission_type
const (
	AWSPERMISSIONTYPE_PERMISSION AWSPermissionType = "PERMISSION"
)

// All allowed values of AWSPermissionType enum
var AllowedAWSPermissionTypeEnumValues = []AWSPermissionType{
	"PERMISSION",
}

func (v *AWSPermissionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AWSPermissionType(value)
	for _, existing := range AllowedAWSPermissionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AWSPermissionType", value)
}

// NewAWSPermissionTypeFromValue returns a pointer to a valid AWSPermissionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAWSPermissionTypeFromValue(v string) (*AWSPermissionType, error) {
	ev := AWSPermissionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AWSPermissionType: valid values are %v", v, AllowedAWSPermissionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AWSPermissionType) IsValid() bool {
	for _, existing := range AllowedAWSPermissionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AWSPermission_type value
func (v AWSPermissionType) Ptr() *AWSPermissionType {
	return &v
}

type NullableAWSPermissionType struct {
	value *AWSPermissionType
	isSet bool
}

func (v NullableAWSPermissionType) Get() *AWSPermissionType {
	return v.value
}

func (v *NullableAWSPermissionType) Set(val *AWSPermissionType) {
	v.value = val
	v.isSet = true
}

func (v NullableAWSPermissionType) IsSet() bool {
	return v.isSet
}

func (v *NullableAWSPermissionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAWSPermissionType(val *AWSPermissionType) *NullableAWSPermissionType {
	return &NullableAWSPermissionType{value: val, isSet: true}
}

func (v NullableAWSPermissionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAWSPermissionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
