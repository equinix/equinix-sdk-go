/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the VirtualConnectionPriceASideAccessPoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VirtualConnectionPriceASideAccessPoint{}

// VirtualConnectionPriceASideAccessPoint struct for VirtualConnectionPriceASideAccessPoint
type VirtualConnectionPriceASideAccessPoint struct {
	Uuid                 *string                                     `json:"uuid,omitempty"`
	Type                 *VirtualConnectionPriceAccessPointType      `json:"type,omitempty"`
	Location             *PriceLocation                              `json:"location,omitempty"`
	Port                 *VirtualConnectionPriceASideAccessPointPort `json:"port,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VirtualConnectionPriceASideAccessPoint VirtualConnectionPriceASideAccessPoint

// NewVirtualConnectionPriceASideAccessPoint instantiates a new VirtualConnectionPriceASideAccessPoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualConnectionPriceASideAccessPoint() *VirtualConnectionPriceASideAccessPoint {
	this := VirtualConnectionPriceASideAccessPoint{}
	return &this
}

// NewVirtualConnectionPriceASideAccessPointWithDefaults instantiates a new VirtualConnectionPriceASideAccessPoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualConnectionPriceASideAccessPointWithDefaults() *VirtualConnectionPriceASideAccessPoint {
	this := VirtualConnectionPriceASideAccessPoint{}
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *VirtualConnectionPriceASideAccessPoint) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualConnectionPriceASideAccessPoint) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *VirtualConnectionPriceASideAccessPoint) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *VirtualConnectionPriceASideAccessPoint) SetUuid(v string) {
	o.Uuid = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *VirtualConnectionPriceASideAccessPoint) GetType() VirtualConnectionPriceAccessPointType {
	if o == nil || IsNil(o.Type) {
		var ret VirtualConnectionPriceAccessPointType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualConnectionPriceASideAccessPoint) GetTypeOk() (*VirtualConnectionPriceAccessPointType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *VirtualConnectionPriceASideAccessPoint) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given VirtualConnectionPriceAccessPointType and assigns it to the Type field.
func (o *VirtualConnectionPriceASideAccessPoint) SetType(v VirtualConnectionPriceAccessPointType) {
	o.Type = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *VirtualConnectionPriceASideAccessPoint) GetLocation() PriceLocation {
	if o == nil || IsNil(o.Location) {
		var ret PriceLocation
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualConnectionPriceASideAccessPoint) GetLocationOk() (*PriceLocation, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *VirtualConnectionPriceASideAccessPoint) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given PriceLocation and assigns it to the Location field.
func (o *VirtualConnectionPriceASideAccessPoint) SetLocation(v PriceLocation) {
	o.Location = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *VirtualConnectionPriceASideAccessPoint) GetPort() VirtualConnectionPriceASideAccessPointPort {
	if o == nil || IsNil(o.Port) {
		var ret VirtualConnectionPriceASideAccessPointPort
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualConnectionPriceASideAccessPoint) GetPortOk() (*VirtualConnectionPriceASideAccessPointPort, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *VirtualConnectionPriceASideAccessPoint) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given VirtualConnectionPriceASideAccessPointPort and assigns it to the Port field.
func (o *VirtualConnectionPriceASideAccessPoint) SetPort(v VirtualConnectionPriceASideAccessPointPort) {
	o.Port = &v
}

func (o VirtualConnectionPriceASideAccessPoint) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VirtualConnectionPriceASideAccessPoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VirtualConnectionPriceASideAccessPoint) UnmarshalJSON(data []byte) (err error) {
	varVirtualConnectionPriceASideAccessPoint := _VirtualConnectionPriceASideAccessPoint{}

	err = json.Unmarshal(data, &varVirtualConnectionPriceASideAccessPoint)

	if err != nil {
		return err
	}

	*o = VirtualConnectionPriceASideAccessPoint(varVirtualConnectionPriceASideAccessPoint)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "type")
		delete(additionalProperties, "location")
		delete(additionalProperties, "port")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVirtualConnectionPriceASideAccessPoint struct {
	value *VirtualConnectionPriceASideAccessPoint
	isSet bool
}

func (v NullableVirtualConnectionPriceASideAccessPoint) Get() *VirtualConnectionPriceASideAccessPoint {
	return v.value
}

func (v *NullableVirtualConnectionPriceASideAccessPoint) Set(val *VirtualConnectionPriceASideAccessPoint) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualConnectionPriceASideAccessPoint) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualConnectionPriceASideAccessPoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualConnectionPriceASideAccessPoint(val *VirtualConnectionPriceASideAccessPoint) *NullableVirtualConnectionPriceASideAccessPoint {
	return &NullableVirtualConnectionPriceASideAccessPoint{value: val, isSet: true}
}

func (v NullableVirtualConnectionPriceASideAccessPoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualConnectionPriceASideAccessPoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
