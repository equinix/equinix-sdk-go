/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// PortState Port lifecycle state
type PortState string

// List of PortState
const (
	PORTSTATE_PENDING        PortState = "PENDING"
	PORTSTATE_PROVISIONING   PortState = "PROVISIONING"
	PORTSTATE_REPROVISIONING PortState = "REPROVISIONING"
	PORTSTATE_PROVISIONED    PortState = "PROVISIONED"
	PORTSTATE_ACTIVE         PortState = "ACTIVE"
	PORTSTATE_DEPROVISIONING PortState = "DEPROVISIONING"
	PORTSTATE_DEPROVISIONED  PortState = "DEPROVISIONED"
	PORTSTATE_INACTIVE       PortState = "INACTIVE"
	PORTSTATE_FAILED         PortState = "FAILED"
	PORTSTATE_ADDED          PortState = "ADDED"
	PORTSTATE_DELETED        PortState = "DELETED"
	PORTSTATE_TO_BE_ADDED    PortState = "TO_BE_ADDED"
	PORTSTATE_TO_BE_DELETED  PortState = "TO_BE_DELETED"
)

// All allowed values of PortState enum
var AllowedPortStateEnumValues = []PortState{
	"PENDING",
	"PROVISIONING",
	"REPROVISIONING",
	"PROVISIONED",
	"ACTIVE",
	"DEPROVISIONING",
	"DEPROVISIONED",
	"INACTIVE",
	"FAILED",
	"ADDED",
	"DELETED",
	"TO_BE_ADDED",
	"TO_BE_DELETED",
}

func (v *PortState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PortState(value)
	for _, existing := range AllowedPortStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PortState", value)
}

// NewPortStateFromValue returns a pointer to a valid PortState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPortStateFromValue(v string) (*PortState, error) {
	ev := PortState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PortState: valid values are %v", v, AllowedPortStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PortState) IsValid() bool {
	for _, existing := range AllowedPortStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PortState value
func (v PortState) Ptr() *PortState {
	return &v
}

type NullablePortState struct {
	value *PortState
	isSet bool
}

func (v NullablePortState) Get() *PortState {
	return v.value
}

func (v *NullablePortState) Set(val *PortState) {
	v.value = val
	v.isSet = true
}

func (v NullablePortState) IsSet() bool {
	return v.isSet
}

func (v *NullablePortState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortState(val *PortState) *NullablePortState {
	return &NullablePortState{value: val, isSet: true}
}

func (v NullablePortState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
