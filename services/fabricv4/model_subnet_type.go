/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// SubnetType the model 'SubnetType'
type SubnetType string

// List of Subnet_type
const (
	SUBNETTYPE_SUBNET SubnetType = "Subnet"
)

// All allowed values of SubnetType enum
var AllowedSubnetTypeEnumValues = []SubnetType{
	"Subnet",
}

func (v *SubnetType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SubnetType(value)
	for _, existing := range AllowedSubnetTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SubnetType", value)
}

// NewSubnetTypeFromValue returns a pointer to a valid SubnetType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSubnetTypeFromValue(v string) (*SubnetType, error) {
	ev := SubnetType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SubnetType: valid values are %v", v, AllowedSubnetTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SubnetType) IsValid() bool {
	for _, existing := range AllowedSubnetTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Subnet_type value
func (v SubnetType) Ptr() *SubnetType {
	return &v
}

type NullableSubnetType struct {
	value *SubnetType
	isSet bool
}

func (v NullableSubnetType) Get() *SubnetType {
	return v.value
}

func (v *NullableSubnetType) Set(val *SubnetType) {
	v.value = val
	v.isSet = true
}

func (v NullableSubnetType) IsSet() bool {
	return v.isSet
}

func (v *NullableSubnetType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubnetType(val *SubnetType) *NullableSubnetType {
	return &NullableSubnetType{value: val, isSet: true}
}

func (v NullableSubnetType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubnetType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
