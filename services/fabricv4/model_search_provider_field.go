/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// SearchProviderField Possible Provider field names to use on filters
type SearchProviderField string

// List of SearchProviderField
const (
	SEARCHPROVIDERFIELD_PROVIDERS_TYPE                         SearchProviderField = "/providers/type"
	SEARCHPROVIDERFIELD_PROVIDERS_OIDC_CREDENTIALS_ROLE_ARN    SearchProviderField = "/providers/oidcCredentials/roleArn"
	SEARCHPROVIDERFIELD_PROVIDERS_OIDC_CREDENTIALS_REGION      SearchProviderField = "/providers/oidcCredentials/region"
	SEARCHPROVIDERFIELD_PROVIDERS_RESOURCES_TYPE               SearchProviderField = "/providers/resources/type"
	SEARCHPROVIDERFIELD_PROVIDERS_OIDC_CREDENTIALS_PROJECT_ID  SearchProviderField = "/providers/oidcCredentials/projectId"
	SEARCHPROVIDERFIELD_PROVIDERS_OIDC_CREDENTIALS_PROVIDER_ID SearchProviderField = "/providers/oidcCredentials/providerId"
	SEARCHPROVIDERFIELD_PROVIDERS_OIDC_CREDENTIALS_POOL_ID     SearchProviderField = "/providers/oidcCredentials/poolId"
	SEARCHPROVIDERFIELD_PROJECT_PROJECT_ID                     SearchProviderField = "/project/projectId"
	SEARCHPROVIDERFIELD_STAR                                   SearchProviderField = "*"
)

// All allowed values of SearchProviderField enum
var AllowedSearchProviderFieldEnumValues = []SearchProviderField{
	"/providers/type",
	"/providers/oidcCredentials/roleArn",
	"/providers/oidcCredentials/region",
	"/providers/resources/type",
	"/providers/oidcCredentials/projectId",
	"/providers/oidcCredentials/providerId",
	"/providers/oidcCredentials/poolId",
	"/project/projectId",
	"*",
}

func (v *SearchProviderField) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SearchProviderField(value)
	for _, existing := range AllowedSearchProviderFieldEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SearchProviderField", value)
}

// NewSearchProviderFieldFromValue returns a pointer to a valid SearchProviderField
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSearchProviderFieldFromValue(v string) (*SearchProviderField, error) {
	ev := SearchProviderField(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SearchProviderField: valid values are %v", v, AllowedSearchProviderFieldEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SearchProviderField) IsValid() bool {
	for _, existing := range AllowedSearchProviderFieldEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SearchProviderField value
func (v SearchProviderField) Ptr() *SearchProviderField {
	return &v
}

type NullableSearchProviderField struct {
	value *SearchProviderField
	isSet bool
}

func (v NullableSearchProviderField) Get() *SearchProviderField {
	return v.value
}

func (v *NullableSearchProviderField) Set(val *SearchProviderField) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchProviderField) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchProviderField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchProviderField(val *SearchProviderField) *NullableSearchProviderField {
	return &NullableSearchProviderField{value: val, isSet: true}
}

func (v NullableSearchProviderField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchProviderField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
