/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// CloudRouterFilter struct for CloudRouterFilter
type CloudRouterFilter struct {
	CloudRouterOrFilter         *CloudRouterOrFilter
	CloudRouterSimpleExpression *CloudRouterSimpleExpression
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *CloudRouterFilter) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into CloudRouterOrFilter
	err = json.Unmarshal(data, &dst.CloudRouterOrFilter)
	if err == nil {
		jsonCloudRouterOrFilter, _ := json.Marshal(dst.CloudRouterOrFilter)
		if string(jsonCloudRouterOrFilter) == "{}" { // empty struct
			dst.CloudRouterOrFilter = nil
		} else {
			return nil // data stored in dst.CloudRouterOrFilter, return on the first match
		}
	} else {
		dst.CloudRouterOrFilter = nil
	}

	// try to unmarshal JSON data into CloudRouterSimpleExpression
	err = json.Unmarshal(data, &dst.CloudRouterSimpleExpression)
	if err == nil {
		jsonCloudRouterSimpleExpression, _ := json.Marshal(dst.CloudRouterSimpleExpression)
		if string(jsonCloudRouterSimpleExpression) == "{}" { // empty struct
			dst.CloudRouterSimpleExpression = nil
		} else {
			return nil // data stored in dst.CloudRouterSimpleExpression, return on the first match
		}
	} else {
		dst.CloudRouterSimpleExpression = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(CloudRouterFilter)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *CloudRouterFilter) MarshalJSON() ([]byte, error) {
	if src.CloudRouterOrFilter != nil {
		return json.Marshal(&src.CloudRouterOrFilter)
	}

	if src.CloudRouterSimpleExpression != nil {
		return json.Marshal(&src.CloudRouterSimpleExpression)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableCloudRouterFilter struct {
	value *CloudRouterFilter
	isSet bool
}

func (v NullableCloudRouterFilter) Get() *CloudRouterFilter {
	return v.value
}

func (v *NullableCloudRouterFilter) Set(val *CloudRouterFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudRouterFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudRouterFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudRouterFilter(val *CloudRouterFilter) *NullableCloudRouterFilter {
	return &NullableCloudRouterFilter{value: val, isSet: true}
}

func (v NullableCloudRouterFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudRouterFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
