/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// SimplifiedVirtualDeviceType Type of Virtual Device
type SimplifiedVirtualDeviceType string

// List of SimplifiedVirtualDevice_type
const (
	SIMPLIFIEDVIRTUALDEVICETYPE_EDGE SimplifiedVirtualDeviceType = "EDGE"
)

// All allowed values of SimplifiedVirtualDeviceType enum
var AllowedSimplifiedVirtualDeviceTypeEnumValues = []SimplifiedVirtualDeviceType{
	"EDGE",
}

func (v *SimplifiedVirtualDeviceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SimplifiedVirtualDeviceType(value)
	for _, existing := range AllowedSimplifiedVirtualDeviceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SimplifiedVirtualDeviceType", value)
}

// NewSimplifiedVirtualDeviceTypeFromValue returns a pointer to a valid SimplifiedVirtualDeviceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSimplifiedVirtualDeviceTypeFromValue(v string) (*SimplifiedVirtualDeviceType, error) {
	ev := SimplifiedVirtualDeviceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SimplifiedVirtualDeviceType: valid values are %v", v, AllowedSimplifiedVirtualDeviceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SimplifiedVirtualDeviceType) IsValid() bool {
	for _, existing := range AllowedSimplifiedVirtualDeviceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SimplifiedVirtualDevice_type value
func (v SimplifiedVirtualDeviceType) Ptr() *SimplifiedVirtualDeviceType {
	return &v
}

type NullableSimplifiedVirtualDeviceType struct {
	value *SimplifiedVirtualDeviceType
	isSet bool
}

func (v NullableSimplifiedVirtualDeviceType) Get() *SimplifiedVirtualDeviceType {
	return v.value
}

func (v *NullableSimplifiedVirtualDeviceType) Set(val *SimplifiedVirtualDeviceType) {
	v.value = val
	v.isSet = true
}

func (v NullableSimplifiedVirtualDeviceType) IsSet() bool {
	return v.isSet
}

func (v *NullableSimplifiedVirtualDeviceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSimplifiedVirtualDeviceType(val *SimplifiedVirtualDeviceType) *NullableSimplifiedVirtualDeviceType {
	return &NullableSimplifiedVirtualDeviceType{value: val, isSet: true}
}

func (v NullableSimplifiedVirtualDeviceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSimplifiedVirtualDeviceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
