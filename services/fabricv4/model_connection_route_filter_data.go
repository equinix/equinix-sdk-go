/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the ConnectionRouteFilterData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectionRouteFilterData{}

// ConnectionRouteFilterData struct for ConnectionRouteFilterData
type ConnectionRouteFilterData struct {
	// Route Filter URI
	Href *string                        `json:"href,omitempty"`
	Type *ConnectionRouteFilterDataType `json:"type,omitempty"`
	// Route Filter identifier
	Uuid                 *string                                    `json:"uuid,omitempty"`
	AttachmentStatus     *ConnectionRouteFilterDataAttachmentStatus `json:"attachmentStatus,omitempty"`
	Direction            *ConnectionRouteFilterDataDirection        `json:"direction,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ConnectionRouteFilterData ConnectionRouteFilterData

// NewConnectionRouteFilterData instantiates a new ConnectionRouteFilterData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionRouteFilterData() *ConnectionRouteFilterData {
	this := ConnectionRouteFilterData{}
	return &this
}

// NewConnectionRouteFilterDataWithDefaults instantiates a new ConnectionRouteFilterData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionRouteFilterDataWithDefaults() *ConnectionRouteFilterData {
	this := ConnectionRouteFilterData{}
	return &this
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *ConnectionRouteFilterData) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionRouteFilterData) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *ConnectionRouteFilterData) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *ConnectionRouteFilterData) SetHref(v string) {
	o.Href = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ConnectionRouteFilterData) GetType() ConnectionRouteFilterDataType {
	if o == nil || IsNil(o.Type) {
		var ret ConnectionRouteFilterDataType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionRouteFilterData) GetTypeOk() (*ConnectionRouteFilterDataType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ConnectionRouteFilterData) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ConnectionRouteFilterDataType and assigns it to the Type field.
func (o *ConnectionRouteFilterData) SetType(v ConnectionRouteFilterDataType) {
	o.Type = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *ConnectionRouteFilterData) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionRouteFilterData) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *ConnectionRouteFilterData) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *ConnectionRouteFilterData) SetUuid(v string) {
	o.Uuid = &v
}

// GetAttachmentStatus returns the AttachmentStatus field value if set, zero value otherwise.
func (o *ConnectionRouteFilterData) GetAttachmentStatus() ConnectionRouteFilterDataAttachmentStatus {
	if o == nil || IsNil(o.AttachmentStatus) {
		var ret ConnectionRouteFilterDataAttachmentStatus
		return ret
	}
	return *o.AttachmentStatus
}

// GetAttachmentStatusOk returns a tuple with the AttachmentStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionRouteFilterData) GetAttachmentStatusOk() (*ConnectionRouteFilterDataAttachmentStatus, bool) {
	if o == nil || IsNil(o.AttachmentStatus) {
		return nil, false
	}
	return o.AttachmentStatus, true
}

// HasAttachmentStatus returns a boolean if a field has been set.
func (o *ConnectionRouteFilterData) HasAttachmentStatus() bool {
	if o != nil && !IsNil(o.AttachmentStatus) {
		return true
	}

	return false
}

// SetAttachmentStatus gets a reference to the given ConnectionRouteFilterDataAttachmentStatus and assigns it to the AttachmentStatus field.
func (o *ConnectionRouteFilterData) SetAttachmentStatus(v ConnectionRouteFilterDataAttachmentStatus) {
	o.AttachmentStatus = &v
}

// GetDirection returns the Direction field value if set, zero value otherwise.
func (o *ConnectionRouteFilterData) GetDirection() ConnectionRouteFilterDataDirection {
	if o == nil || IsNil(o.Direction) {
		var ret ConnectionRouteFilterDataDirection
		return ret
	}
	return *o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionRouteFilterData) GetDirectionOk() (*ConnectionRouteFilterDataDirection, bool) {
	if o == nil || IsNil(o.Direction) {
		return nil, false
	}
	return o.Direction, true
}

// HasDirection returns a boolean if a field has been set.
func (o *ConnectionRouteFilterData) HasDirection() bool {
	if o != nil && !IsNil(o.Direction) {
		return true
	}

	return false
}

// SetDirection gets a reference to the given ConnectionRouteFilterDataDirection and assigns it to the Direction field.
func (o *ConnectionRouteFilterData) SetDirection(v ConnectionRouteFilterDataDirection) {
	o.Direction = &v
}

func (o ConnectionRouteFilterData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectionRouteFilterData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.AttachmentStatus) {
		toSerialize["attachmentStatus"] = o.AttachmentStatus
	}
	if !IsNil(o.Direction) {
		toSerialize["direction"] = o.Direction
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ConnectionRouteFilterData) UnmarshalJSON(data []byte) (err error) {
	varConnectionRouteFilterData := _ConnectionRouteFilterData{}

	err = json.Unmarshal(data, &varConnectionRouteFilterData)

	if err != nil {
		return err
	}

	*o = ConnectionRouteFilterData(varConnectionRouteFilterData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "href")
		delete(additionalProperties, "type")
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "attachmentStatus")
		delete(additionalProperties, "direction")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableConnectionRouteFilterData struct {
	value *ConnectionRouteFilterData
	isSet bool
}

func (v NullableConnectionRouteFilterData) Get() *ConnectionRouteFilterData {
	return v.value
}

func (v *NullableConnectionRouteFilterData) Set(val *ConnectionRouteFilterData) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionRouteFilterData) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionRouteFilterData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionRouteFilterData(val *ConnectionRouteFilterData) *NullableConnectionRouteFilterData {
	return &NullableConnectionRouteFilterData{value: val, isSet: true}
}

func (v NullableConnectionRouteFilterData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionRouteFilterData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
