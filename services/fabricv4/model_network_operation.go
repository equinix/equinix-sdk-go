/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the NetworkOperation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkOperation{}

// NetworkOperation Network operational data
type NetworkOperation struct {
	EquinixStatus        *NetworkEquinixStatus `json:"equinixStatus,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NetworkOperation NetworkOperation

// NewNetworkOperation instantiates a new NetworkOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkOperation() *NetworkOperation {
	this := NetworkOperation{}
	return &this
}

// NewNetworkOperationWithDefaults instantiates a new NetworkOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkOperationWithDefaults() *NetworkOperation {
	this := NetworkOperation{}
	return &this
}

// GetEquinixStatus returns the EquinixStatus field value if set, zero value otherwise.
func (o *NetworkOperation) GetEquinixStatus() NetworkEquinixStatus {
	if o == nil || IsNil(o.EquinixStatus) {
		var ret NetworkEquinixStatus
		return ret
	}
	return *o.EquinixStatus
}

// GetEquinixStatusOk returns a tuple with the EquinixStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkOperation) GetEquinixStatusOk() (*NetworkEquinixStatus, bool) {
	if o == nil || IsNil(o.EquinixStatus) {
		return nil, false
	}
	return o.EquinixStatus, true
}

// HasEquinixStatus returns a boolean if a field has been set.
func (o *NetworkOperation) HasEquinixStatus() bool {
	if o != nil && !IsNil(o.EquinixStatus) {
		return true
	}

	return false
}

// SetEquinixStatus gets a reference to the given NetworkEquinixStatus and assigns it to the EquinixStatus field.
func (o *NetworkOperation) SetEquinixStatus(v NetworkEquinixStatus) {
	o.EquinixStatus = &v
}

func (o NetworkOperation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkOperation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EquinixStatus) {
		toSerialize["equinixStatus"] = o.EquinixStatus
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NetworkOperation) UnmarshalJSON(data []byte) (err error) {
	varNetworkOperation := _NetworkOperation{}

	err = json.Unmarshal(data, &varNetworkOperation)

	if err != nil {
		return err
	}

	*o = NetworkOperation(varNetworkOperation)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "equinixStatus")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNetworkOperation struct {
	value *NetworkOperation
	isSet bool
}

func (v NullableNetworkOperation) Get() *NetworkOperation {
	return v.value
}

func (v *NullableNetworkOperation) Set(val *NetworkOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkOperation(val *NetworkOperation) *NullableNetworkOperation {
	return &NullableNetworkOperation{value: val, isSet: true}
}

func (v NullableNetworkOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
