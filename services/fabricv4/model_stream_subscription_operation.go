/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"time"
)

// checks if the StreamSubscriptionOperation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StreamSubscriptionOperation{}

// StreamSubscriptionOperation Stream subscription operational information
type StreamSubscriptionOperation struct {
	// count of delivered events
	EventsDeliveredCount *int32 `json:"eventsDeliveredCount,omitempty"`
	// count of delivered metrics
	MetricsDeliveredCount *int32 `json:"metricsDeliveredCount,omitempty"`
	// count of delivered alerts
	AlertsDeliveredCount *int32 `json:"alertsDeliveredCount,omitempty"`
	// last successful date time of delivered event, metric, or alert
	LastSuccessfulDeliveryDateTime *time.Time `json:"lastSuccessfulDeliveryDateTime,omitempty"`
	// suspended date time of stream subscription delivery for event, metric, or alert
	SuspendedDateTime *time.Time `json:"suspendedDateTime,omitempty"`
	// List of error information for stream subscription delivery
	Errors               []StreamSubscriptionOperationErrors `json:"errors,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StreamSubscriptionOperation StreamSubscriptionOperation

// NewStreamSubscriptionOperation instantiates a new StreamSubscriptionOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStreamSubscriptionOperation() *StreamSubscriptionOperation {
	this := StreamSubscriptionOperation{}
	return &this
}

// NewStreamSubscriptionOperationWithDefaults instantiates a new StreamSubscriptionOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStreamSubscriptionOperationWithDefaults() *StreamSubscriptionOperation {
	this := StreamSubscriptionOperation{}
	return &this
}

// GetEventsDeliveredCount returns the EventsDeliveredCount field value if set, zero value otherwise.
func (o *StreamSubscriptionOperation) GetEventsDeliveredCount() int32 {
	if o == nil || IsNil(o.EventsDeliveredCount) {
		var ret int32
		return ret
	}
	return *o.EventsDeliveredCount
}

// GetEventsDeliveredCountOk returns a tuple with the EventsDeliveredCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscriptionOperation) GetEventsDeliveredCountOk() (*int32, bool) {
	if o == nil || IsNil(o.EventsDeliveredCount) {
		return nil, false
	}
	return o.EventsDeliveredCount, true
}

// HasEventsDeliveredCount returns a boolean if a field has been set.
func (o *StreamSubscriptionOperation) HasEventsDeliveredCount() bool {
	if o != nil && !IsNil(o.EventsDeliveredCount) {
		return true
	}

	return false
}

// SetEventsDeliveredCount gets a reference to the given int32 and assigns it to the EventsDeliveredCount field.
func (o *StreamSubscriptionOperation) SetEventsDeliveredCount(v int32) {
	o.EventsDeliveredCount = &v
}

// GetMetricsDeliveredCount returns the MetricsDeliveredCount field value if set, zero value otherwise.
func (o *StreamSubscriptionOperation) GetMetricsDeliveredCount() int32 {
	if o == nil || IsNil(o.MetricsDeliveredCount) {
		var ret int32
		return ret
	}
	return *o.MetricsDeliveredCount
}

// GetMetricsDeliveredCountOk returns a tuple with the MetricsDeliveredCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscriptionOperation) GetMetricsDeliveredCountOk() (*int32, bool) {
	if o == nil || IsNil(o.MetricsDeliveredCount) {
		return nil, false
	}
	return o.MetricsDeliveredCount, true
}

// HasMetricsDeliveredCount returns a boolean if a field has been set.
func (o *StreamSubscriptionOperation) HasMetricsDeliveredCount() bool {
	if o != nil && !IsNil(o.MetricsDeliveredCount) {
		return true
	}

	return false
}

// SetMetricsDeliveredCount gets a reference to the given int32 and assigns it to the MetricsDeliveredCount field.
func (o *StreamSubscriptionOperation) SetMetricsDeliveredCount(v int32) {
	o.MetricsDeliveredCount = &v
}

// GetAlertsDeliveredCount returns the AlertsDeliveredCount field value if set, zero value otherwise.
func (o *StreamSubscriptionOperation) GetAlertsDeliveredCount() int32 {
	if o == nil || IsNil(o.AlertsDeliveredCount) {
		var ret int32
		return ret
	}
	return *o.AlertsDeliveredCount
}

// GetAlertsDeliveredCountOk returns a tuple with the AlertsDeliveredCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscriptionOperation) GetAlertsDeliveredCountOk() (*int32, bool) {
	if o == nil || IsNil(o.AlertsDeliveredCount) {
		return nil, false
	}
	return o.AlertsDeliveredCount, true
}

// HasAlertsDeliveredCount returns a boolean if a field has been set.
func (o *StreamSubscriptionOperation) HasAlertsDeliveredCount() bool {
	if o != nil && !IsNil(o.AlertsDeliveredCount) {
		return true
	}

	return false
}

// SetAlertsDeliveredCount gets a reference to the given int32 and assigns it to the AlertsDeliveredCount field.
func (o *StreamSubscriptionOperation) SetAlertsDeliveredCount(v int32) {
	o.AlertsDeliveredCount = &v
}

// GetLastSuccessfulDeliveryDateTime returns the LastSuccessfulDeliveryDateTime field value if set, zero value otherwise.
func (o *StreamSubscriptionOperation) GetLastSuccessfulDeliveryDateTime() time.Time {
	if o == nil || IsNil(o.LastSuccessfulDeliveryDateTime) {
		var ret time.Time
		return ret
	}
	return *o.LastSuccessfulDeliveryDateTime
}

// GetLastSuccessfulDeliveryDateTimeOk returns a tuple with the LastSuccessfulDeliveryDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscriptionOperation) GetLastSuccessfulDeliveryDateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastSuccessfulDeliveryDateTime) {
		return nil, false
	}
	return o.LastSuccessfulDeliveryDateTime, true
}

// HasLastSuccessfulDeliveryDateTime returns a boolean if a field has been set.
func (o *StreamSubscriptionOperation) HasLastSuccessfulDeliveryDateTime() bool {
	if o != nil && !IsNil(o.LastSuccessfulDeliveryDateTime) {
		return true
	}

	return false
}

// SetLastSuccessfulDeliveryDateTime gets a reference to the given time.Time and assigns it to the LastSuccessfulDeliveryDateTime field.
func (o *StreamSubscriptionOperation) SetLastSuccessfulDeliveryDateTime(v time.Time) {
	o.LastSuccessfulDeliveryDateTime = &v
}

// GetSuspendedDateTime returns the SuspendedDateTime field value if set, zero value otherwise.
func (o *StreamSubscriptionOperation) GetSuspendedDateTime() time.Time {
	if o == nil || IsNil(o.SuspendedDateTime) {
		var ret time.Time
		return ret
	}
	return *o.SuspendedDateTime
}

// GetSuspendedDateTimeOk returns a tuple with the SuspendedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscriptionOperation) GetSuspendedDateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.SuspendedDateTime) {
		return nil, false
	}
	return o.SuspendedDateTime, true
}

// HasSuspendedDateTime returns a boolean if a field has been set.
func (o *StreamSubscriptionOperation) HasSuspendedDateTime() bool {
	if o != nil && !IsNil(o.SuspendedDateTime) {
		return true
	}

	return false
}

// SetSuspendedDateTime gets a reference to the given time.Time and assigns it to the SuspendedDateTime field.
func (o *StreamSubscriptionOperation) SetSuspendedDateTime(v time.Time) {
	o.SuspendedDateTime = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *StreamSubscriptionOperation) GetErrors() []StreamSubscriptionOperationErrors {
	if o == nil || IsNil(o.Errors) {
		var ret []StreamSubscriptionOperationErrors
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscriptionOperation) GetErrorsOk() ([]StreamSubscriptionOperationErrors, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *StreamSubscriptionOperation) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []StreamSubscriptionOperationErrors and assigns it to the Errors field.
func (o *StreamSubscriptionOperation) SetErrors(v []StreamSubscriptionOperationErrors) {
	o.Errors = v
}

func (o StreamSubscriptionOperation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StreamSubscriptionOperation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventsDeliveredCount) {
		toSerialize["eventsDeliveredCount"] = o.EventsDeliveredCount
	}
	if !IsNil(o.MetricsDeliveredCount) {
		toSerialize["metricsDeliveredCount"] = o.MetricsDeliveredCount
	}
	if !IsNil(o.AlertsDeliveredCount) {
		toSerialize["alertsDeliveredCount"] = o.AlertsDeliveredCount
	}
	if !IsNil(o.LastSuccessfulDeliveryDateTime) {
		toSerialize["lastSuccessfulDeliveryDateTime"] = o.LastSuccessfulDeliveryDateTime
	}
	if !IsNil(o.SuspendedDateTime) {
		toSerialize["suspendedDateTime"] = o.SuspendedDateTime
	}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StreamSubscriptionOperation) UnmarshalJSON(data []byte) (err error) {
	varStreamSubscriptionOperation := _StreamSubscriptionOperation{}

	err = json.Unmarshal(data, &varStreamSubscriptionOperation)

	if err != nil {
		return err
	}

	*o = StreamSubscriptionOperation(varStreamSubscriptionOperation)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "eventsDeliveredCount")
		delete(additionalProperties, "metricsDeliveredCount")
		delete(additionalProperties, "alertsDeliveredCount")
		delete(additionalProperties, "lastSuccessfulDeliveryDateTime")
		delete(additionalProperties, "suspendedDateTime")
		delete(additionalProperties, "errors")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStreamSubscriptionOperation struct {
	value *StreamSubscriptionOperation
	isSet bool
}

func (v NullableStreamSubscriptionOperation) Get() *StreamSubscriptionOperation {
	return v.value
}

func (v *NullableStreamSubscriptionOperation) Set(val *StreamSubscriptionOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamSubscriptionOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamSubscriptionOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamSubscriptionOperation(val *StreamSubscriptionOperation) *NullableStreamSubscriptionOperation {
	return &NullableStreamSubscriptionOperation{value: val, isSet: true}
}

func (v NullableStreamSubscriptionOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamSubscriptionOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
