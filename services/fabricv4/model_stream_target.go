/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the StreamTarget type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StreamTarget{}

// StreamTarget Stream uuid
type StreamTarget struct {
	// Stream UUID
	Uuid                 *string `json:"uuid,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StreamTarget StreamTarget

// NewStreamTarget instantiates a new StreamTarget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStreamTarget() *StreamTarget {
	this := StreamTarget{}
	return &this
}

// NewStreamTargetWithDefaults instantiates a new StreamTarget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStreamTargetWithDefaults() *StreamTarget {
	this := StreamTarget{}
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *StreamTarget) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamTarget) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *StreamTarget) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *StreamTarget) SetUuid(v string) {
	o.Uuid = &v
}

func (o StreamTarget) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StreamTarget) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StreamTarget) UnmarshalJSON(data []byte) (err error) {
	varStreamTarget := _StreamTarget{}

	err = json.Unmarshal(data, &varStreamTarget)

	if err != nil {
		return err
	}

	*o = StreamTarget(varStreamTarget)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "uuid")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStreamTarget struct {
	value *StreamTarget
	isSet bool
}

func (v NullableStreamTarget) Get() *StreamTarget {
	return v.value
}

func (v *NullableStreamTarget) Set(val *StreamTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamTarget(val *StreamTarget) *NullableStreamTarget {
	return &NullableStreamTarget{value: val, isSet: true}
}

func (v NullableStreamTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
