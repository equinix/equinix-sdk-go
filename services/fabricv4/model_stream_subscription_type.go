/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// StreamSubscriptionType type
type StreamSubscriptionType string

// List of StreamSubscription_type
const (
	STREAMSUBSCRIPTIONTYPE_STREAM_SUBSCRIPTION StreamSubscriptionType = "STREAM_SUBSCRIPTION"
)

// All allowed values of StreamSubscriptionType enum
var AllowedStreamSubscriptionTypeEnumValues = []StreamSubscriptionType{
	"STREAM_SUBSCRIPTION",
}

func (v *StreamSubscriptionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StreamSubscriptionType(value)
	for _, existing := range AllowedStreamSubscriptionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StreamSubscriptionType", value)
}

// NewStreamSubscriptionTypeFromValue returns a pointer to a valid StreamSubscriptionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStreamSubscriptionTypeFromValue(v string) (*StreamSubscriptionType, error) {
	ev := StreamSubscriptionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StreamSubscriptionType: valid values are %v", v, AllowedStreamSubscriptionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StreamSubscriptionType) IsValid() bool {
	for _, existing := range AllowedStreamSubscriptionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StreamSubscription_type value
func (v StreamSubscriptionType) Ptr() *StreamSubscriptionType {
	return &v
}

type NullableStreamSubscriptionType struct {
	value *StreamSubscriptionType
	isSet bool
}

func (v NullableStreamSubscriptionType) Get() *StreamSubscriptionType {
	return v.value
}

func (v *NullableStreamSubscriptionType) Set(val *StreamSubscriptionType) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamSubscriptionType) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamSubscriptionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamSubscriptionType(val *StreamSubscriptionType) *NullableStreamSubscriptionType {
	return &NullableStreamSubscriptionType{value: val, isSet: true}
}

func (v NullableStreamSubscriptionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamSubscriptionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
