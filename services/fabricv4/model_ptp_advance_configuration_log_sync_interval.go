/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// PtpAdvanceConfigurationLogSyncInterval Logarithmic value that controls the rate of PTP Sync packets. Default is -4 (16 packets per second), Unit packets/second..
type PtpAdvanceConfigurationLogSyncInterval int32

// List of ptpAdvanceConfiguration_logSyncInterval
const (
	PTPADVANCECONFIGURATIONLOGSYNCINTERVAL__MINUS_5 PtpAdvanceConfigurationLogSyncInterval = -5
	PTPADVANCECONFIGURATIONLOGSYNCINTERVAL__MINUS_4 PtpAdvanceConfigurationLogSyncInterval = -4
	PTPADVANCECONFIGURATIONLOGSYNCINTERVAL__MINUS_3 PtpAdvanceConfigurationLogSyncInterval = -3
	PTPADVANCECONFIGURATIONLOGSYNCINTERVAL__MINUS_2 PtpAdvanceConfigurationLogSyncInterval = -2
	PTPADVANCECONFIGURATIONLOGSYNCINTERVAL__MINUS_1 PtpAdvanceConfigurationLogSyncInterval = -1
	PTPADVANCECONFIGURATIONLOGSYNCINTERVAL__0       PtpAdvanceConfigurationLogSyncInterval = 0
	PTPADVANCECONFIGURATIONLOGSYNCINTERVAL__1       PtpAdvanceConfigurationLogSyncInterval = 1
)

// All allowed values of PtpAdvanceConfigurationLogSyncInterval enum
var AllowedPtpAdvanceConfigurationLogSyncIntervalEnumValues = []PtpAdvanceConfigurationLogSyncInterval{
	-5,
	-4,
	-3,
	-2,
	-1,
	0,
	1,
}

func (v *PtpAdvanceConfigurationLogSyncInterval) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PtpAdvanceConfigurationLogSyncInterval(value)
	for _, existing := range AllowedPtpAdvanceConfigurationLogSyncIntervalEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PtpAdvanceConfigurationLogSyncInterval", value)
}

// NewPtpAdvanceConfigurationLogSyncIntervalFromValue returns a pointer to a valid PtpAdvanceConfigurationLogSyncInterval
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPtpAdvanceConfigurationLogSyncIntervalFromValue(v int32) (*PtpAdvanceConfigurationLogSyncInterval, error) {
	ev := PtpAdvanceConfigurationLogSyncInterval(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PtpAdvanceConfigurationLogSyncInterval: valid values are %v", v, AllowedPtpAdvanceConfigurationLogSyncIntervalEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PtpAdvanceConfigurationLogSyncInterval) IsValid() bool {
	for _, existing := range AllowedPtpAdvanceConfigurationLogSyncIntervalEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ptpAdvanceConfiguration_logSyncInterval value
func (v PtpAdvanceConfigurationLogSyncInterval) Ptr() *PtpAdvanceConfigurationLogSyncInterval {
	return &v
}

type NullablePtpAdvanceConfigurationLogSyncInterval struct {
	value *PtpAdvanceConfigurationLogSyncInterval
	isSet bool
}

func (v NullablePtpAdvanceConfigurationLogSyncInterval) Get() *PtpAdvanceConfigurationLogSyncInterval {
	return v.value
}

func (v *NullablePtpAdvanceConfigurationLogSyncInterval) Set(val *PtpAdvanceConfigurationLogSyncInterval) {
	v.value = val
	v.isSet = true
}

func (v NullablePtpAdvanceConfigurationLogSyncInterval) IsSet() bool {
	return v.isSet
}

func (v *NullablePtpAdvanceConfigurationLogSyncInterval) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePtpAdvanceConfigurationLogSyncInterval(val *PtpAdvanceConfigurationLogSyncInterval) *NullablePtpAdvanceConfigurationLogSyncInterval {
	return &NullablePtpAdvanceConfigurationLogSyncInterval{value: val, isSet: true}
}

func (v NullablePtpAdvanceConfigurationLogSyncInterval) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePtpAdvanceConfigurationLogSyncInterval) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
