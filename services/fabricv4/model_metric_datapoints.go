/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"time"
)

// checks if the MetricDatapoints type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetricDatapoints{}

// MetricDatapoints struct for MetricDatapoints
type MetricDatapoints struct {
	// Datapoint end date and time
	EndDateTime *time.Time `json:"endDateTime,omitempty"`
	// Datapoint start date and time
	StartDateTime *time.Time `json:"startDateTime,omitempty"`
	// Datapoint value
	Value                *float32 `json:"value,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MetricDatapoints MetricDatapoints

// NewMetricDatapoints instantiates a new MetricDatapoints object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricDatapoints() *MetricDatapoints {
	this := MetricDatapoints{}
	return &this
}

// NewMetricDatapointsWithDefaults instantiates a new MetricDatapoints object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricDatapointsWithDefaults() *MetricDatapoints {
	this := MetricDatapoints{}
	return &this
}

// GetEndDateTime returns the EndDateTime field value if set, zero value otherwise.
func (o *MetricDatapoints) GetEndDateTime() time.Time {
	if o == nil || IsNil(o.EndDateTime) {
		var ret time.Time
		return ret
	}
	return *o.EndDateTime
}

// GetEndDateTimeOk returns a tuple with the EndDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricDatapoints) GetEndDateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndDateTime) {
		return nil, false
	}
	return o.EndDateTime, true
}

// HasEndDateTime returns a boolean if a field has been set.
func (o *MetricDatapoints) HasEndDateTime() bool {
	if o != nil && !IsNil(o.EndDateTime) {
		return true
	}

	return false
}

// SetEndDateTime gets a reference to the given time.Time and assigns it to the EndDateTime field.
func (o *MetricDatapoints) SetEndDateTime(v time.Time) {
	o.EndDateTime = &v
}

// GetStartDateTime returns the StartDateTime field value if set, zero value otherwise.
func (o *MetricDatapoints) GetStartDateTime() time.Time {
	if o == nil || IsNil(o.StartDateTime) {
		var ret time.Time
		return ret
	}
	return *o.StartDateTime
}

// GetStartDateTimeOk returns a tuple with the StartDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricDatapoints) GetStartDateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartDateTime) {
		return nil, false
	}
	return o.StartDateTime, true
}

// HasStartDateTime returns a boolean if a field has been set.
func (o *MetricDatapoints) HasStartDateTime() bool {
	if o != nil && !IsNil(o.StartDateTime) {
		return true
	}

	return false
}

// SetStartDateTime gets a reference to the given time.Time and assigns it to the StartDateTime field.
func (o *MetricDatapoints) SetStartDateTime(v time.Time) {
	o.StartDateTime = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *MetricDatapoints) GetValue() float32 {
	if o == nil || IsNil(o.Value) {
		var ret float32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricDatapoints) GetValueOk() (*float32, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *MetricDatapoints) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given float32 and assigns it to the Value field.
func (o *MetricDatapoints) SetValue(v float32) {
	o.Value = &v
}

func (o MetricDatapoints) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetricDatapoints) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EndDateTime) {
		toSerialize["endDateTime"] = o.EndDateTime
	}
	if !IsNil(o.StartDateTime) {
		toSerialize["startDateTime"] = o.StartDateTime
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MetricDatapoints) UnmarshalJSON(data []byte) (err error) {
	varMetricDatapoints := _MetricDatapoints{}

	err = json.Unmarshal(data, &varMetricDatapoints)

	if err != nil {
		return err
	}

	*o = MetricDatapoints(varMetricDatapoints)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "endDateTime")
		delete(additionalProperties, "startDateTime")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMetricDatapoints struct {
	value *MetricDatapoints
	isSet bool
}

func (v NullableMetricDatapoints) Get() *MetricDatapoints {
	return v.value
}

func (v *NullableMetricDatapoints) Set(val *MetricDatapoints) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricDatapoints) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricDatapoints) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricDatapoints(val *MetricDatapoints) *NullableMetricDatapoints {
	return &NullableMetricDatapoints{value: val, isSet: true}
}

func (v NullableMetricDatapoints) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricDatapoints) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
