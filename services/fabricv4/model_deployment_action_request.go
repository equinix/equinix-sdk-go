/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// checks if the DeploymentActionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeploymentActionRequest{}

// DeploymentActionRequest struct for DeploymentActionRequest
type DeploymentActionRequest struct {
	Type                 DeploymentActionType `json:"type"`
	Data                 []ActionRequest      `json:"data"`
	AdditionalProperties map[string]interface{}
}

type _DeploymentActionRequest DeploymentActionRequest

// NewDeploymentActionRequest instantiates a new DeploymentActionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploymentActionRequest(type_ DeploymentActionType, data []ActionRequest) *DeploymentActionRequest {
	this := DeploymentActionRequest{}
	this.Type = type_
	this.Data = data
	return &this
}

// NewDeploymentActionRequestWithDefaults instantiates a new DeploymentActionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploymentActionRequestWithDefaults() *DeploymentActionRequest {
	this := DeploymentActionRequest{}
	return &this
}

// GetType returns the Type field value
func (o *DeploymentActionRequest) GetType() DeploymentActionType {
	if o == nil {
		var ret DeploymentActionType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DeploymentActionRequest) GetTypeOk() (*DeploymentActionType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DeploymentActionRequest) SetType(v DeploymentActionType) {
	o.Type = v
}

// GetData returns the Data field value
func (o *DeploymentActionRequest) GetData() []ActionRequest {
	if o == nil {
		var ret []ActionRequest
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *DeploymentActionRequest) GetDataOk() ([]ActionRequest, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *DeploymentActionRequest) SetData(v []ActionRequest) {
	o.Data = v
}

func (o DeploymentActionRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeploymentActionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["data"] = o.Data

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeploymentActionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeploymentActionRequest := _DeploymentActionRequest{}

	err = json.Unmarshal(data, &varDeploymentActionRequest)

	if err != nil {
		return err
	}

	*o = DeploymentActionRequest(varDeploymentActionRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "data")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeploymentActionRequest struct {
	value *DeploymentActionRequest
	isSet bool
}

func (v NullableDeploymentActionRequest) Get() *DeploymentActionRequest {
	return v.value
}

func (v *NullableDeploymentActionRequest) Set(val *DeploymentActionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentActionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentActionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentActionRequest(val *DeploymentActionRequest) *NullableDeploymentActionRequest {
	return &NullableDeploymentActionRequest{value: val, isSet: true}
}

func (v NullableDeploymentActionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentActionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
