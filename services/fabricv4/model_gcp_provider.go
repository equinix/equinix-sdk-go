/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// checks if the GCPProvider type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GCPProvider{}

// GCPProvider The Orchestrator GCP Providers schema defines the structure for the orchestrator gcp provider configuration.
type GCPProvider struct {
	Type                 GCPProviderType       `json:"type"`
	Resources            []GCPProviderResource `json:"resources"`
	AdditionalProperties map[string]interface{}
}

type _GCPProvider GCPProvider

// NewGCPProvider instantiates a new GCPProvider object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGCPProvider(type_ GCPProviderType, resources []GCPProviderResource) *GCPProvider {
	this := GCPProvider{}
	this.Type = type_
	this.Resources = resources
	return &this
}

// NewGCPProviderWithDefaults instantiates a new GCPProvider object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGCPProviderWithDefaults() *GCPProvider {
	this := GCPProvider{}
	return &this
}

// GetType returns the Type field value
func (o *GCPProvider) GetType() GCPProviderType {
	if o == nil {
		var ret GCPProviderType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *GCPProvider) GetTypeOk() (*GCPProviderType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *GCPProvider) SetType(v GCPProviderType) {
	o.Type = v
}

// GetResources returns the Resources field value
func (o *GCPProvider) GetResources() []GCPProviderResource {
	if o == nil {
		var ret []GCPProviderResource
		return ret
	}

	return o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value
// and a boolean to check if the value has been set.
func (o *GCPProvider) GetResourcesOk() ([]GCPProviderResource, bool) {
	if o == nil {
		return nil, false
	}
	return o.Resources, true
}

// SetResources sets field value
func (o *GCPProvider) SetResources(v []GCPProviderResource) {
	o.Resources = v
}

func (o GCPProvider) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GCPProvider) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["resources"] = o.Resources

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GCPProvider) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"resources",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGCPProvider := _GCPProvider{}

	err = json.Unmarshal(data, &varGCPProvider)

	if err != nil {
		return err
	}

	*o = GCPProvider(varGCPProvider)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "resources")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGCPProvider struct {
	value *GCPProvider
	isSet bool
}

func (v NullableGCPProvider) Get() *GCPProvider {
	return v.value
}

func (v *NullableGCPProvider) Set(val *GCPProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableGCPProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableGCPProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGCPProvider(val *GCPProvider) *NullableGCPProvider {
	return &NullableGCPProvider{value: val, isSet: true}
}

func (v NullableGCPProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGCPProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
