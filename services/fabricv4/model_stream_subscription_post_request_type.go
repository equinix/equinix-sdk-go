/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// StreamSubscriptionPostRequestType the model 'StreamSubscriptionPostRequestType'
type StreamSubscriptionPostRequestType string

// List of StreamSubscriptionPostRequest_type
const (
	STREAMSUBSCRIPTIONPOSTREQUESTTYPE_STREAM_SUBSCRIPTION StreamSubscriptionPostRequestType = "STREAM_SUBSCRIPTION"
)

// All allowed values of StreamSubscriptionPostRequestType enum
var AllowedStreamSubscriptionPostRequestTypeEnumValues = []StreamSubscriptionPostRequestType{
	"STREAM_SUBSCRIPTION",
}

func (v *StreamSubscriptionPostRequestType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StreamSubscriptionPostRequestType(value)
	for _, existing := range AllowedStreamSubscriptionPostRequestTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StreamSubscriptionPostRequestType", value)
}

// NewStreamSubscriptionPostRequestTypeFromValue returns a pointer to a valid StreamSubscriptionPostRequestType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStreamSubscriptionPostRequestTypeFromValue(v string) (*StreamSubscriptionPostRequestType, error) {
	ev := StreamSubscriptionPostRequestType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StreamSubscriptionPostRequestType: valid values are %v", v, AllowedStreamSubscriptionPostRequestTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StreamSubscriptionPostRequestType) IsValid() bool {
	for _, existing := range AllowedStreamSubscriptionPostRequestTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StreamSubscriptionPostRequest_type value
func (v StreamSubscriptionPostRequestType) Ptr() *StreamSubscriptionPostRequestType {
	return &v
}

type NullableStreamSubscriptionPostRequestType struct {
	value *StreamSubscriptionPostRequestType
	isSet bool
}

func (v NullableStreamSubscriptionPostRequestType) Get() *StreamSubscriptionPostRequestType {
	return v.value
}

func (v *NullableStreamSubscriptionPostRequestType) Set(val *StreamSubscriptionPostRequestType) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamSubscriptionPostRequestType) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamSubscriptionPostRequestType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamSubscriptionPostRequestType(val *StreamSubscriptionPostRequestType) *NullableStreamSubscriptionPostRequestType {
	return &NullableStreamSubscriptionPostRequestType{value: val, isSet: true}
}

func (v NullableStreamSubscriptionPostRequestType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamSubscriptionPostRequestType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
