/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// ConnectivitySourceType Type of connectivity. COLO, colocation; BMMR, building meet-me room. The default is COLO. <br> A building meet-me room (BMMR) is a room within the same building where an Equinix IBX customer can connect with a non-Equinix IBX customer.
type ConnectivitySourceType string

// List of ConnectivitySourceType
const (
	CONNECTIVITYSOURCETYPE_COLO   ConnectivitySourceType = "COLO"
	CONNECTIVITYSOURCETYPE_BMMR   ConnectivitySourceType = "BMMR"
	CONNECTIVITYSOURCETYPE_REMOTE ConnectivitySourceType = "REMOTE"
)

// All allowed values of ConnectivitySourceType enum
var AllowedConnectivitySourceTypeEnumValues = []ConnectivitySourceType{
	"COLO",
	"BMMR",
	"REMOTE",
}

func (v *ConnectivitySourceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConnectivitySourceType(value)
	for _, existing := range AllowedConnectivitySourceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConnectivitySourceType", value)
}

// NewConnectivitySourceTypeFromValue returns a pointer to a valid ConnectivitySourceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConnectivitySourceTypeFromValue(v string) (*ConnectivitySourceType, error) {
	ev := ConnectivitySourceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConnectivitySourceType: valid values are %v", v, AllowedConnectivitySourceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConnectivitySourceType) IsValid() bool {
	for _, existing := range AllowedConnectivitySourceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConnectivitySourceType value
func (v ConnectivitySourceType) Ptr() *ConnectivitySourceType {
	return &v
}

type NullableConnectivitySourceType struct {
	value *ConnectivitySourceType
	isSet bool
}

func (v NullableConnectivitySourceType) Get() *ConnectivitySourceType {
	return v.value
}

func (v *NullableConnectivitySourceType) Set(val *ConnectivitySourceType) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectivitySourceType) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectivitySourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectivitySourceType(val *ConnectivitySourceType) *NullableConnectivitySourceType {
	return &NullableConnectivitySourceType{value: val, isSet: true}
}

func (v NullableConnectivitySourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectivitySourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
