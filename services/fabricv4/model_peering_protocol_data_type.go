/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// PeeringProtocolDataType Peering Protocol Type
type PeeringProtocolDataType string

// List of PeeringProtocolData_type
const (
	PEERINGPROTOCOLDATATYPE_BGP PeeringProtocolDataType = "BGP"
)

// All allowed values of PeeringProtocolDataType enum
var AllowedPeeringProtocolDataTypeEnumValues = []PeeringProtocolDataType{
	"BGP",
}

func (v *PeeringProtocolDataType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PeeringProtocolDataType(value)
	for _, existing := range AllowedPeeringProtocolDataTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PeeringProtocolDataType", value)
}

// NewPeeringProtocolDataTypeFromValue returns a pointer to a valid PeeringProtocolDataType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPeeringProtocolDataTypeFromValue(v string) (*PeeringProtocolDataType, error) {
	ev := PeeringProtocolDataType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PeeringProtocolDataType: valid values are %v", v, AllowedPeeringProtocolDataTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PeeringProtocolDataType) IsValid() bool {
	for _, existing := range AllowedPeeringProtocolDataTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PeeringProtocolData_type value
func (v PeeringProtocolDataType) Ptr() *PeeringProtocolDataType {
	return &v
}

type NullablePeeringProtocolDataType struct {
	value *PeeringProtocolDataType
	isSet bool
}

func (v NullablePeeringProtocolDataType) Get() *PeeringProtocolDataType {
	return v.value
}

func (v *NullablePeeringProtocolDataType) Set(val *PeeringProtocolDataType) {
	v.value = val
	v.isSet = true
}

func (v NullablePeeringProtocolDataType) IsSet() bool {
	return v.isSet
}

func (v *NullablePeeringProtocolDataType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePeeringProtocolDataType(val *PeeringProtocolDataType) *NullablePeeringProtocolDataType {
	return &NullablePeeringProtocolDataType{value: val, isSet: true}
}

func (v NullablePeeringProtocolDataType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePeeringProtocolDataType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
