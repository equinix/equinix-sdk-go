/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// PortCapacitySearchFieldName Possible field names to use on filters
type PortCapacitySearchFieldName string

// List of PortCapacitySearchFieldName
const (
	PORTCAPACITYSEARCHFIELDNAME_DEMARCATION_POINT_IBX PortCapacitySearchFieldName = "/demarcationPointIbx"
	PORTCAPACITYSEARCHFIELDNAME_TETHER_IBX            PortCapacitySearchFieldName = "/tetherIbx"
	PORTCAPACITYSEARCHFIELDNAME_PHYSICAL_PORTS_SPEED  PortCapacitySearchFieldName = "/physicalPortsSpeed"
	PORTCAPACITYSEARCHFIELDNAME_PHYSICAL_PORTS_TYPE   PortCapacitySearchFieldName = "/physicalPortsType"
	PORTCAPACITYSEARCHFIELDNAME_LAG_ENABLED           PortCapacitySearchFieldName = "/lagEnabled"
)

// All allowed values of PortCapacitySearchFieldName enum
var AllowedPortCapacitySearchFieldNameEnumValues = []PortCapacitySearchFieldName{
	"/demarcationPointIbx",
	"/tetherIbx",
	"/physicalPortsSpeed",
	"/physicalPortsType",
	"/lagEnabled",
}

func (v *PortCapacitySearchFieldName) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PortCapacitySearchFieldName(value)
	for _, existing := range AllowedPortCapacitySearchFieldNameEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PortCapacitySearchFieldName", value)
}

// NewPortCapacitySearchFieldNameFromValue returns a pointer to a valid PortCapacitySearchFieldName
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPortCapacitySearchFieldNameFromValue(v string) (*PortCapacitySearchFieldName, error) {
	ev := PortCapacitySearchFieldName(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PortCapacitySearchFieldName: valid values are %v", v, AllowedPortCapacitySearchFieldNameEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PortCapacitySearchFieldName) IsValid() bool {
	for _, existing := range AllowedPortCapacitySearchFieldNameEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PortCapacitySearchFieldName value
func (v PortCapacitySearchFieldName) Ptr() *PortCapacitySearchFieldName {
	return &v
}

type NullablePortCapacitySearchFieldName struct {
	value *PortCapacitySearchFieldName
	isSet bool
}

func (v NullablePortCapacitySearchFieldName) Get() *PortCapacitySearchFieldName {
	return v.value
}

func (v *NullablePortCapacitySearchFieldName) Set(val *PortCapacitySearchFieldName) {
	v.value = val
	v.isSet = true
}

func (v NullablePortCapacitySearchFieldName) IsSet() bool {
	return v.isSet
}

func (v *NullablePortCapacitySearchFieldName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortCapacitySearchFieldName(val *PortCapacitySearchFieldName) *NullablePortCapacitySearchFieldName {
	return &NullablePortCapacitySearchFieldName{value: val, isSet: true}
}

func (v NullablePortCapacitySearchFieldName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortCapacitySearchFieldName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
