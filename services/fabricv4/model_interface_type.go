/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// InterfaceType Interface type
type InterfaceType string

// List of Interface_type
const (
	INTERFACETYPE_CLOUD   InterfaceType = "CLOUD"
	INTERFACETYPE_NETWORK InterfaceType = "NETWORK"
)

// All allowed values of InterfaceType enum
var AllowedInterfaceTypeEnumValues = []InterfaceType{
	"CLOUD",
	"NETWORK",
}

func (v *InterfaceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InterfaceType(value)
	for _, existing := range AllowedInterfaceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InterfaceType", value)
}

// NewInterfaceTypeFromValue returns a pointer to a valid InterfaceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInterfaceTypeFromValue(v string) (*InterfaceType, error) {
	ev := InterfaceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InterfaceType: valid values are %v", v, AllowedInterfaceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InterfaceType) IsValid() bool {
	for _, existing := range AllowedInterfaceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Interface_type value
func (v InterfaceType) Ptr() *InterfaceType {
	return &v
}

type NullableInterfaceType struct {
	value *InterfaceType
	isSet bool
}

func (v NullableInterfaceType) Get() *InterfaceType {
	return v.value
}

func (v *NullableInterfaceType) Set(val *InterfaceType) {
	v.value = val
	v.isSet = true
}

func (v NullableInterfaceType) IsSet() bool {
	return v.isSet
}

func (v *NullableInterfaceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterfaceType(val *InterfaceType) *NullableInterfaceType {
	return &NullableInterfaceType{value: val, isSet: true}
}

func (v NullableInterfaceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterfaceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
