/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the StreamAssetPutRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StreamAssetPutRequest{}

// StreamAssetPutRequest Update Stream Asset
type StreamAssetPutRequest struct {
	// enable metric
	MetricsEnabled       *bool `json:"metricsEnabled,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StreamAssetPutRequest StreamAssetPutRequest

// NewStreamAssetPutRequest instantiates a new StreamAssetPutRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStreamAssetPutRequest() *StreamAssetPutRequest {
	this := StreamAssetPutRequest{}
	return &this
}

// NewStreamAssetPutRequestWithDefaults instantiates a new StreamAssetPutRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStreamAssetPutRequestWithDefaults() *StreamAssetPutRequest {
	this := StreamAssetPutRequest{}
	return &this
}

// GetMetricsEnabled returns the MetricsEnabled field value if set, zero value otherwise.
func (o *StreamAssetPutRequest) GetMetricsEnabled() bool {
	if o == nil || IsNil(o.MetricsEnabled) {
		var ret bool
		return ret
	}
	return *o.MetricsEnabled
}

// GetMetricsEnabledOk returns a tuple with the MetricsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamAssetPutRequest) GetMetricsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.MetricsEnabled) {
		return nil, false
	}
	return o.MetricsEnabled, true
}

// HasMetricsEnabled returns a boolean if a field has been set.
func (o *StreamAssetPutRequest) HasMetricsEnabled() bool {
	if o != nil && !IsNil(o.MetricsEnabled) {
		return true
	}

	return false
}

// SetMetricsEnabled gets a reference to the given bool and assigns it to the MetricsEnabled field.
func (o *StreamAssetPutRequest) SetMetricsEnabled(v bool) {
	o.MetricsEnabled = &v
}

func (o StreamAssetPutRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StreamAssetPutRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MetricsEnabled) {
		toSerialize["metricsEnabled"] = o.MetricsEnabled
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StreamAssetPutRequest) UnmarshalJSON(data []byte) (err error) {
	varStreamAssetPutRequest := _StreamAssetPutRequest{}

	err = json.Unmarshal(data, &varStreamAssetPutRequest)

	if err != nil {
		return err
	}

	*o = StreamAssetPutRequest(varStreamAssetPutRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "metricsEnabled")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStreamAssetPutRequest struct {
	value *StreamAssetPutRequest
	isSet bool
}

func (v NullableStreamAssetPutRequest) Get() *StreamAssetPutRequest {
	return v.value
}

func (v *NullableStreamAssetPutRequest) Set(val *StreamAssetPutRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamAssetPutRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamAssetPutRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamAssetPutRequest(val *StreamAssetPutRequest) *NullableStreamAssetPutRequest {
	return &NullableStreamAssetPutRequest{value: val, isSet: true}
}

func (v NullableStreamAssetPutRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamAssetPutRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
