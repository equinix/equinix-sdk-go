/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// RoutingProtocolDirectTypeType Routing protocol type
type RoutingProtocolDirectTypeType string

// List of RoutingProtocolDirectType_type
const (
	ROUTINGPROTOCOLDIRECTTYPETYPE_DIRECT RoutingProtocolDirectTypeType = "DIRECT"
)

// All allowed values of RoutingProtocolDirectTypeType enum
var AllowedRoutingProtocolDirectTypeTypeEnumValues = []RoutingProtocolDirectTypeType{
	"DIRECT",
}

func (v *RoutingProtocolDirectTypeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RoutingProtocolDirectTypeType(value)
	for _, existing := range AllowedRoutingProtocolDirectTypeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RoutingProtocolDirectTypeType", value)
}

// NewRoutingProtocolDirectTypeTypeFromValue returns a pointer to a valid RoutingProtocolDirectTypeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRoutingProtocolDirectTypeTypeFromValue(v string) (*RoutingProtocolDirectTypeType, error) {
	ev := RoutingProtocolDirectTypeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RoutingProtocolDirectTypeType: valid values are %v", v, AllowedRoutingProtocolDirectTypeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RoutingProtocolDirectTypeType) IsValid() bool {
	for _, existing := range AllowedRoutingProtocolDirectTypeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RoutingProtocolDirectType_type value
func (v RoutingProtocolDirectTypeType) Ptr() *RoutingProtocolDirectTypeType {
	return &v
}

type NullableRoutingProtocolDirectTypeType struct {
	value *RoutingProtocolDirectTypeType
	isSet bool
}

func (v NullableRoutingProtocolDirectTypeType) Get() *RoutingProtocolDirectTypeType {
	return v.value
}

func (v *NullableRoutingProtocolDirectTypeType) Set(val *RoutingProtocolDirectTypeType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutingProtocolDirectTypeType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutingProtocolDirectTypeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutingProtocolDirectTypeType(val *RoutingProtocolDirectTypeType) *NullableRoutingProtocolDirectTypeType {
	return &NullableRoutingProtocolDirectTypeType{value: val, isSet: true}
}

func (v NullableRoutingProtocolDirectTypeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutingProtocolDirectTypeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
