/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// CloudRouterPackageType Type of Router package
type CloudRouterPackageType string

// List of CloudRouterPackage_type
const (
	CLOUDROUTERPACKAGETYPE_ROUTER_PACKAGE CloudRouterPackageType = "ROUTER_PACKAGE"
)

// All allowed values of CloudRouterPackageType enum
var AllowedCloudRouterPackageTypeEnumValues = []CloudRouterPackageType{
	"ROUTER_PACKAGE",
}

func (v *CloudRouterPackageType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CloudRouterPackageType(value)
	for _, existing := range AllowedCloudRouterPackageTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CloudRouterPackageType", value)
}

// NewCloudRouterPackageTypeFromValue returns a pointer to a valid CloudRouterPackageType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCloudRouterPackageTypeFromValue(v string) (*CloudRouterPackageType, error) {
	ev := CloudRouterPackageType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CloudRouterPackageType: valid values are %v", v, AllowedCloudRouterPackageTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CloudRouterPackageType) IsValid() bool {
	for _, existing := range AllowedCloudRouterPackageTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CloudRouterPackage_type value
func (v CloudRouterPackageType) Ptr() *CloudRouterPackageType {
	return &v
}

type NullableCloudRouterPackageType struct {
	value *CloudRouterPackageType
	isSet bool
}

func (v NullableCloudRouterPackageType) Get() *CloudRouterPackageType {
	return v.value
}

func (v *NullableCloudRouterPackageType) Set(val *CloudRouterPackageType) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudRouterPackageType) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudRouterPackageType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudRouterPackageType(val *CloudRouterPackageType) *NullableCloudRouterPackageType {
	return &NullableCloudRouterPackageType{value: val, isSet: true}
}

func (v NullableCloudRouterPackageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudRouterPackageType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
