/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// DeploymentActionType Deployment action type
type DeploymentActionType string

// List of DeploymentActionType
const (
	DEPLOYMENTACTIONTYPE_DEPLOY  DeploymentActionType = "DEPLOY"
	DEPLOYMENTACTIONTYPE_DRY_RUN DeploymentActionType = "DRY_RUN"
	DEPLOYMENTACTIONTYPE_DESTROY DeploymentActionType = "DESTROY"
)

// All allowed values of DeploymentActionType enum
var AllowedDeploymentActionTypeEnumValues = []DeploymentActionType{
	"DEPLOY",
	"DRY_RUN",
	"DESTROY",
}

func (v *DeploymentActionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeploymentActionType(value)
	for _, existing := range AllowedDeploymentActionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeploymentActionType", value)
}

// NewDeploymentActionTypeFromValue returns a pointer to a valid DeploymentActionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeploymentActionTypeFromValue(v string) (*DeploymentActionType, error) {
	ev := DeploymentActionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeploymentActionType: valid values are %v", v, AllowedDeploymentActionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeploymentActionType) IsValid() bool {
	for _, existing := range AllowedDeploymentActionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DeploymentActionType value
func (v DeploymentActionType) Ptr() *DeploymentActionType {
	return &v
}

type NullableDeploymentActionType struct {
	value *DeploymentActionType
	isSet bool
}

func (v NullableDeploymentActionType) Get() *DeploymentActionType {
	return v.value
}

func (v *NullableDeploymentActionType) Set(val *DeploymentActionType) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentActionType) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentActionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentActionType(val *DeploymentActionType) *NullableDeploymentActionType {
	return &NullableDeploymentActionType{value: val, isSet: true}
}

func (v NullableDeploymentActionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentActionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
