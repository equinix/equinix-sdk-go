/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// checks if the FabricProviderResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FabricProviderResponse{}

// FabricProviderResponse The response from the orchestrator when querying for fabric provider resources. This response contains a list of resources that are managed by the fabric provider. The resources can be routers, connections, or route protocols.
type FabricProviderResponse struct {
	Type                 FabricProviderType               `json:"type"`
	Resources            []FabricProviderResourceResponse `json:"resources,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FabricProviderResponse FabricProviderResponse

// NewFabricProviderResponse instantiates a new FabricProviderResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFabricProviderResponse(type_ FabricProviderType) *FabricProviderResponse {
	this := FabricProviderResponse{}
	this.Type = type_
	return &this
}

// NewFabricProviderResponseWithDefaults instantiates a new FabricProviderResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFabricProviderResponseWithDefaults() *FabricProviderResponse {
	this := FabricProviderResponse{}
	return &this
}

// GetType returns the Type field value
func (o *FabricProviderResponse) GetType() FabricProviderType {
	if o == nil {
		var ret FabricProviderType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *FabricProviderResponse) GetTypeOk() (*FabricProviderType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *FabricProviderResponse) SetType(v FabricProviderType) {
	o.Type = v
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *FabricProviderResponse) GetResources() []FabricProviderResourceResponse {
	if o == nil || IsNil(o.Resources) {
		var ret []FabricProviderResourceResponse
		return ret
	}
	return o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FabricProviderResponse) GetResourcesOk() ([]FabricProviderResourceResponse, bool) {
	if o == nil || IsNil(o.Resources) {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *FabricProviderResponse) HasResources() bool {
	if o != nil && !IsNil(o.Resources) {
		return true
	}

	return false
}

// SetResources gets a reference to the given []FabricProviderResourceResponse and assigns it to the Resources field.
func (o *FabricProviderResponse) SetResources(v []FabricProviderResourceResponse) {
	o.Resources = v
}

func (o FabricProviderResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FabricProviderResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Resources) {
		toSerialize["resources"] = o.Resources
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FabricProviderResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFabricProviderResponse := _FabricProviderResponse{}

	err = json.Unmarshal(data, &varFabricProviderResponse)

	if err != nil {
		return err
	}

	*o = FabricProviderResponse(varFabricProviderResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "resources")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFabricProviderResponse struct {
	value *FabricProviderResponse
	isSet bool
}

func (v NullableFabricProviderResponse) Get() *FabricProviderResponse {
	return v.value
}

func (v *NullableFabricProviderResponse) Set(val *FabricProviderResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFabricProviderResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFabricProviderResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFabricProviderResponse(val *FabricProviderResponse) *NullableFabricProviderResponse {
	return &NullableFabricProviderResponse{value: val, isSet: true}
}

func (v NullableFabricProviderResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFabricProviderResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
