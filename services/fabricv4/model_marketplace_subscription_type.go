/*
Equinix Fabric API v4

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// MarketplaceSubscriptionType Marketplace Subscription type
type MarketplaceSubscriptionType string

// List of marketplaceSubscription_type
const (
	MARKETPLACESUBSCRIPTIONTYPE_AWS_MARKETPLACE_SUBSCRIPTION MarketplaceSubscriptionType = "AWS_MARKETPLACE_SUBSCRIPTION"
)

// All allowed values of MarketplaceSubscriptionType enum
var AllowedMarketplaceSubscriptionTypeEnumValues = []MarketplaceSubscriptionType{
	"AWS_MARKETPLACE_SUBSCRIPTION",
}

func (v *MarketplaceSubscriptionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MarketplaceSubscriptionType(value)
	for _, existing := range AllowedMarketplaceSubscriptionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MarketplaceSubscriptionType", value)
}

// NewMarketplaceSubscriptionTypeFromValue returns a pointer to a valid MarketplaceSubscriptionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMarketplaceSubscriptionTypeFromValue(v string) (*MarketplaceSubscriptionType, error) {
	ev := MarketplaceSubscriptionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MarketplaceSubscriptionType: valid values are %v", v, AllowedMarketplaceSubscriptionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MarketplaceSubscriptionType) IsValid() bool {
	for _, existing := range AllowedMarketplaceSubscriptionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to marketplaceSubscription_type value
func (v MarketplaceSubscriptionType) Ptr() *MarketplaceSubscriptionType {
	return &v
}

type NullableMarketplaceSubscriptionType struct {
	value *MarketplaceSubscriptionType
	isSet bool
}

func (v NullableMarketplaceSubscriptionType) Get() *MarketplaceSubscriptionType {
	return v.value
}

func (v *NullableMarketplaceSubscriptionType) Set(val *MarketplaceSubscriptionType) {
	v.value = val
	v.isSet = true
}

func (v NullableMarketplaceSubscriptionType) IsSet() bool {
	return v.isSet
}

func (v *NullableMarketplaceSubscriptionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMarketplaceSubscriptionType(val *MarketplaceSubscriptionType) *NullableMarketplaceSubscriptionType {
	return &NullableMarketplaceSubscriptionType{value: val, isSet: true}
}

func (v NullableMarketplaceSubscriptionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMarketplaceSubscriptionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
