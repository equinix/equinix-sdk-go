/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the HealthResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HealthResponse{}

// HealthResponse GET Services Health
type HealthResponse struct {
	// The Canonical URL at which the resource resides.
	Href *string `json:"href,omitempty"`
	// Indicator of a version
	Version *string `json:"version,omitempty"`
	// release details.
	Release *string `json:"release,omitempty"`
	// status of a service
	State                *string      `json:"state,omitempty"`
	ApiServices          *ApiServices `json:"apiServices,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HealthResponse HealthResponse

// NewHealthResponse instantiates a new HealthResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHealthResponse() *HealthResponse {
	this := HealthResponse{}
	return &this
}

// NewHealthResponseWithDefaults instantiates a new HealthResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHealthResponseWithDefaults() *HealthResponse {
	this := HealthResponse{}
	return &this
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *HealthResponse) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthResponse) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *HealthResponse) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *HealthResponse) SetHref(v string) {
	o.Href = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *HealthResponse) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthResponse) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *HealthResponse) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *HealthResponse) SetVersion(v string) {
	o.Version = &v
}

// GetRelease returns the Release field value if set, zero value otherwise.
func (o *HealthResponse) GetRelease() string {
	if o == nil || IsNil(o.Release) {
		var ret string
		return ret
	}
	return *o.Release
}

// GetReleaseOk returns a tuple with the Release field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthResponse) GetReleaseOk() (*string, bool) {
	if o == nil || IsNil(o.Release) {
		return nil, false
	}
	return o.Release, true
}

// HasRelease returns a boolean if a field has been set.
func (o *HealthResponse) HasRelease() bool {
	if o != nil && !IsNil(o.Release) {
		return true
	}

	return false
}

// SetRelease gets a reference to the given string and assigns it to the Release field.
func (o *HealthResponse) SetRelease(v string) {
	o.Release = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *HealthResponse) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthResponse) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *HealthResponse) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *HealthResponse) SetState(v string) {
	o.State = &v
}

// GetApiServices returns the ApiServices field value if set, zero value otherwise.
func (o *HealthResponse) GetApiServices() ApiServices {
	if o == nil || IsNil(o.ApiServices) {
		var ret ApiServices
		return ret
	}
	return *o.ApiServices
}

// GetApiServicesOk returns a tuple with the ApiServices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthResponse) GetApiServicesOk() (*ApiServices, bool) {
	if o == nil || IsNil(o.ApiServices) {
		return nil, false
	}
	return o.ApiServices, true
}

// HasApiServices returns a boolean if a field has been set.
func (o *HealthResponse) HasApiServices() bool {
	if o != nil && !IsNil(o.ApiServices) {
		return true
	}

	return false
}

// SetApiServices gets a reference to the given ApiServices and assigns it to the ApiServices field.
func (o *HealthResponse) SetApiServices(v ApiServices) {
	o.ApiServices = &v
}

func (o HealthResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HealthResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Release) {
		toSerialize["release"] = o.Release
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.ApiServices) {
		toSerialize["apiServices"] = o.ApiServices
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HealthResponse) UnmarshalJSON(data []byte) (err error) {
	varHealthResponse := _HealthResponse{}

	err = json.Unmarshal(data, &varHealthResponse)

	if err != nil {
		return err
	}

	*o = HealthResponse(varHealthResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "href")
		delete(additionalProperties, "version")
		delete(additionalProperties, "release")
		delete(additionalProperties, "state")
		delete(additionalProperties, "apiServices")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHealthResponse struct {
	value *HealthResponse
	isSet bool
}

func (v NullableHealthResponse) Get() *HealthResponse {
	return v.value
}

func (v *NullableHealthResponse) Set(val *HealthResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableHealthResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableHealthResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHealthResponse(val *HealthResponse) *NullableHealthResponse {
	return &NullableHealthResponse{value: val, isSet: true}
}

func (v NullableHealthResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHealthResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
