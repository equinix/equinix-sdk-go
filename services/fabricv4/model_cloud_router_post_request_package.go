/*
Equinix Fabric API v4

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.12
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// checks if the CloudRouterPostRequestPackage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CloudRouterPostRequestPackage{}

// CloudRouterPostRequestPackage Fabric Cloud Router Package Type
type CloudRouterPostRequestPackage struct {
	// Fabric Cloud Router URI
	Href                 *string                            `json:"href,omitempty"`
	Type                 *CloudRouterPostRequestPackageType `json:"type,omitempty"`
	Code                 CloudRouterPostRequestPackageCode  `json:"code"`
	AdditionalProperties map[string]interface{}
}

type _CloudRouterPostRequestPackage CloudRouterPostRequestPackage

// NewCloudRouterPostRequestPackage instantiates a new CloudRouterPostRequestPackage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloudRouterPostRequestPackage(code CloudRouterPostRequestPackageCode) *CloudRouterPostRequestPackage {
	this := CloudRouterPostRequestPackage{}
	this.Code = code
	return &this
}

// NewCloudRouterPostRequestPackageWithDefaults instantiates a new CloudRouterPostRequestPackage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloudRouterPostRequestPackageWithDefaults() *CloudRouterPostRequestPackage {
	this := CloudRouterPostRequestPackage{}
	return &this
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *CloudRouterPostRequestPackage) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudRouterPostRequestPackage) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *CloudRouterPostRequestPackage) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *CloudRouterPostRequestPackage) SetHref(v string) {
	o.Href = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CloudRouterPostRequestPackage) GetType() CloudRouterPostRequestPackageType {
	if o == nil || IsNil(o.Type) {
		var ret CloudRouterPostRequestPackageType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudRouterPostRequestPackage) GetTypeOk() (*CloudRouterPostRequestPackageType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CloudRouterPostRequestPackage) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given CloudRouterPostRequestPackageType and assigns it to the Type field.
func (o *CloudRouterPostRequestPackage) SetType(v CloudRouterPostRequestPackageType) {
	o.Type = &v
}

// GetCode returns the Code field value
func (o *CloudRouterPostRequestPackage) GetCode() CloudRouterPostRequestPackageCode {
	if o == nil {
		var ret CloudRouterPostRequestPackageCode
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *CloudRouterPostRequestPackage) GetCodeOk() (*CloudRouterPostRequestPackageCode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *CloudRouterPostRequestPackage) SetCode(v CloudRouterPostRequestPackageCode) {
	o.Code = v
}

func (o CloudRouterPostRequestPackage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CloudRouterPostRequestPackage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["code"] = o.Code

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CloudRouterPostRequestPackage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCloudRouterPostRequestPackage := _CloudRouterPostRequestPackage{}

	err = json.Unmarshal(data, &varCloudRouterPostRequestPackage)

	if err != nil {
		return err
	}

	*o = CloudRouterPostRequestPackage(varCloudRouterPostRequestPackage)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "href")
		delete(additionalProperties, "type")
		delete(additionalProperties, "code")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCloudRouterPostRequestPackage struct {
	value *CloudRouterPostRequestPackage
	isSet bool
}

func (v NullableCloudRouterPostRequestPackage) Get() *CloudRouterPostRequestPackage {
	return v.value
}

func (v *NullableCloudRouterPostRequestPackage) Set(val *CloudRouterPostRequestPackage) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudRouterPostRequestPackage) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudRouterPostRequestPackage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudRouterPostRequestPackage(val *CloudRouterPostRequestPackage) *NullableCloudRouterPostRequestPackage {
	return &NullableCloudRouterPostRequestPackage{value: val, isSet: true}
}

func (v NullableCloudRouterPostRequestPackage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudRouterPostRequestPackage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
