/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the Hop type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Hop{}

// Hop struct for Hop
type Hop struct {
	Hop                  *int32      `json:"hop,omitempty"`
	Probes               []HopProbes `json:"probes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Hop Hop

// NewHop instantiates a new Hop object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHop() *Hop {
	this := Hop{}
	return &this
}

// NewHopWithDefaults instantiates a new Hop object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHopWithDefaults() *Hop {
	this := Hop{}
	return &this
}

// GetHop returns the Hop field value if set, zero value otherwise.
func (o *Hop) GetHop() int32 {
	if o == nil || IsNil(o.Hop) {
		var ret int32
		return ret
	}
	return *o.Hop
}

// GetHopOk returns a tuple with the Hop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hop) GetHopOk() (*int32, bool) {
	if o == nil || IsNil(o.Hop) {
		return nil, false
	}
	return o.Hop, true
}

// HasHop returns a boolean if a field has been set.
func (o *Hop) HasHop() bool {
	if o != nil && !IsNil(o.Hop) {
		return true
	}

	return false
}

// SetHop gets a reference to the given int32 and assigns it to the Hop field.
func (o *Hop) SetHop(v int32) {
	o.Hop = &v
}

// GetProbes returns the Probes field value if set, zero value otherwise.
func (o *Hop) GetProbes() []HopProbes {
	if o == nil || IsNil(o.Probes) {
		var ret []HopProbes
		return ret
	}
	return o.Probes
}

// GetProbesOk returns a tuple with the Probes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hop) GetProbesOk() ([]HopProbes, bool) {
	if o == nil || IsNil(o.Probes) {
		return nil, false
	}
	return o.Probes, true
}

// HasProbes returns a boolean if a field has been set.
func (o *Hop) HasProbes() bool {
	if o != nil && !IsNil(o.Probes) {
		return true
	}

	return false
}

// SetProbes gets a reference to the given []HopProbes and assigns it to the Probes field.
func (o *Hop) SetProbes(v []HopProbes) {
	o.Probes = v
}

func (o Hop) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Hop) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hop) {
		toSerialize["hop"] = o.Hop
	}
	if !IsNil(o.Probes) {
		toSerialize["probes"] = o.Probes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Hop) UnmarshalJSON(data []byte) (err error) {
	varHop := _Hop{}

	err = json.Unmarshal(data, &varHop)

	if err != nil {
		return err
	}

	*o = Hop(varHop)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "hop")
		delete(additionalProperties, "probes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHop struct {
	value *Hop
	isSet bool
}

func (v NullableHop) Get() *Hop {
	return v.value
}

func (v *NullableHop) Set(val *Hop) {
	v.value = val
	v.isSet = true
}

func (v NullableHop) IsSet() bool {
	return v.isSet
}

func (v *NullableHop) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHop(val *Hop) *NullableHop {
	return &NullableHop{value: val, isSet: true}
}

func (v NullableHop) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHop) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
