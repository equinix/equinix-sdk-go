/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// CloudRouterCommandSearchFilter struct for CloudRouterCommandSearchFilter
type CloudRouterCommandSearchFilter struct {
	CloudRouterCommandSearchExpression *CloudRouterCommandSearchExpression
	CloudRouterCommandSearchOrFilter   *CloudRouterCommandSearchOrFilter
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *CloudRouterCommandSearchFilter) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into CloudRouterCommandSearchExpression
	err = json.Unmarshal(data, &dst.CloudRouterCommandSearchExpression)
	if err == nil {
		jsonCloudRouterCommandSearchExpression, _ := json.Marshal(dst.CloudRouterCommandSearchExpression)
		if string(jsonCloudRouterCommandSearchExpression) == "{}" { // empty struct
			dst.CloudRouterCommandSearchExpression = nil
		} else {
			return nil // data stored in dst.CloudRouterCommandSearchExpression, return on the first match
		}
	} else {
		dst.CloudRouterCommandSearchExpression = nil
	}

	// try to unmarshal JSON data into CloudRouterCommandSearchOrFilter
	err = json.Unmarshal(data, &dst.CloudRouterCommandSearchOrFilter)
	if err == nil {
		jsonCloudRouterCommandSearchOrFilter, _ := json.Marshal(dst.CloudRouterCommandSearchOrFilter)
		if string(jsonCloudRouterCommandSearchOrFilter) == "{}" { // empty struct
			dst.CloudRouterCommandSearchOrFilter = nil
		} else {
			return nil // data stored in dst.CloudRouterCommandSearchOrFilter, return on the first match
		}
	} else {
		dst.CloudRouterCommandSearchOrFilter = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(CloudRouterCommandSearchFilter)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CloudRouterCommandSearchFilter) MarshalJSON() ([]byte, error) {
	if src.CloudRouterCommandSearchExpression != nil {
		return json.Marshal(&src.CloudRouterCommandSearchExpression)
	}

	if src.CloudRouterCommandSearchOrFilter != nil {
		return json.Marshal(&src.CloudRouterCommandSearchOrFilter)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableCloudRouterCommandSearchFilter struct {
	value *CloudRouterCommandSearchFilter
	isSet bool
}

func (v NullableCloudRouterCommandSearchFilter) Get() *CloudRouterCommandSearchFilter {
	return v.value
}

func (v *NullableCloudRouterCommandSearchFilter) Set(val *CloudRouterCommandSearchFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudRouterCommandSearchFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudRouterCommandSearchFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudRouterCommandSearchFilter(val *CloudRouterCommandSearchFilter) *NullableCloudRouterCommandSearchFilter {
	return &NullableCloudRouterCommandSearchFilter{value: val, isSet: true}
}

func (v NullableCloudRouterCommandSearchFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudRouterCommandSearchFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
