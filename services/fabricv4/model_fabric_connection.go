/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// checks if the FabricConnection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FabricConnection{}

// FabricConnection The OrchestratorProvider schema defines the configuration for a network connection and deployment properties, offering a detailed overview of the connection's characteristics and requirements.
type FabricConnection struct {
	Type                 FabricConnectionType `json:"type"`
	Bandwidth            int32                `json:"bandwidth"`
	Name                 *string              `json:"name,omitempty"`
	Redundancy           ConnectionRedundancy `json:"redundancy"`
	ASide                ConnectionSide       `json:"aSide"`
	ZSide                ConnectionSide       `json:"zSide"`
	DeploymentProperties TopologyProperties   `json:"deploymentProperties"`
	AdditionalProperties map[string]interface{}
}

type _FabricConnection FabricConnection

// NewFabricConnection instantiates a new FabricConnection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFabricConnection(type_ FabricConnectionType, bandwidth int32, redundancy ConnectionRedundancy, aSide ConnectionSide, zSide ConnectionSide, deploymentProperties TopologyProperties) *FabricConnection {
	this := FabricConnection{}
	this.Type = type_
	this.Bandwidth = bandwidth
	this.Redundancy = redundancy
	this.ASide = aSide
	this.ZSide = zSide
	this.DeploymentProperties = deploymentProperties
	return &this
}

// NewFabricConnectionWithDefaults instantiates a new FabricConnection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFabricConnectionWithDefaults() *FabricConnection {
	this := FabricConnection{}
	return &this
}

// GetType returns the Type field value
func (o *FabricConnection) GetType() FabricConnectionType {
	if o == nil {
		var ret FabricConnectionType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *FabricConnection) GetTypeOk() (*FabricConnectionType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *FabricConnection) SetType(v FabricConnectionType) {
	o.Type = v
}

// GetBandwidth returns the Bandwidth field value
func (o *FabricConnection) GetBandwidth() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Bandwidth
}

// GetBandwidthOk returns a tuple with the Bandwidth field value
// and a boolean to check if the value has been set.
func (o *FabricConnection) GetBandwidthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bandwidth, true
}

// SetBandwidth sets field value
func (o *FabricConnection) SetBandwidth(v int32) {
	o.Bandwidth = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FabricConnection) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FabricConnection) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FabricConnection) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FabricConnection) SetName(v string) {
	o.Name = &v
}

// GetRedundancy returns the Redundancy field value
func (o *FabricConnection) GetRedundancy() ConnectionRedundancy {
	if o == nil {
		var ret ConnectionRedundancy
		return ret
	}

	return o.Redundancy
}

// GetRedundancyOk returns a tuple with the Redundancy field value
// and a boolean to check if the value has been set.
func (o *FabricConnection) GetRedundancyOk() (*ConnectionRedundancy, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Redundancy, true
}

// SetRedundancy sets field value
func (o *FabricConnection) SetRedundancy(v ConnectionRedundancy) {
	o.Redundancy = v
}

// GetASide returns the ASide field value
func (o *FabricConnection) GetASide() ConnectionSide {
	if o == nil {
		var ret ConnectionSide
		return ret
	}

	return o.ASide
}

// GetASideOk returns a tuple with the ASide field value
// and a boolean to check if the value has been set.
func (o *FabricConnection) GetASideOk() (*ConnectionSide, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ASide, true
}

// SetASide sets field value
func (o *FabricConnection) SetASide(v ConnectionSide) {
	o.ASide = v
}

// GetZSide returns the ZSide field value
func (o *FabricConnection) GetZSide() ConnectionSide {
	if o == nil {
		var ret ConnectionSide
		return ret
	}

	return o.ZSide
}

// GetZSideOk returns a tuple with the ZSide field value
// and a boolean to check if the value has been set.
func (o *FabricConnection) GetZSideOk() (*ConnectionSide, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZSide, true
}

// SetZSide sets field value
func (o *FabricConnection) SetZSide(v ConnectionSide) {
	o.ZSide = v
}

// GetDeploymentProperties returns the DeploymentProperties field value
func (o *FabricConnection) GetDeploymentProperties() TopologyProperties {
	if o == nil {
		var ret TopologyProperties
		return ret
	}

	return o.DeploymentProperties
}

// GetDeploymentPropertiesOk returns a tuple with the DeploymentProperties field value
// and a boolean to check if the value has been set.
func (o *FabricConnection) GetDeploymentPropertiesOk() (*TopologyProperties, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeploymentProperties, true
}

// SetDeploymentProperties sets field value
func (o *FabricConnection) SetDeploymentProperties(v TopologyProperties) {
	o.DeploymentProperties = v
}

func (o FabricConnection) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FabricConnection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["bandwidth"] = o.Bandwidth
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["redundancy"] = o.Redundancy
	toSerialize["aSide"] = o.ASide
	toSerialize["zSide"] = o.ZSide
	toSerialize["deploymentProperties"] = o.DeploymentProperties

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FabricConnection) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"bandwidth",
		"redundancy",
		"aSide",
		"zSide",
		"deploymentProperties",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFabricConnection := _FabricConnection{}

	err = json.Unmarshal(data, &varFabricConnection)

	if err != nil {
		return err
	}

	*o = FabricConnection(varFabricConnection)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "bandwidth")
		delete(additionalProperties, "name")
		delete(additionalProperties, "redundancy")
		delete(additionalProperties, "aSide")
		delete(additionalProperties, "zSide")
		delete(additionalProperties, "deploymentProperties")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFabricConnection struct {
	value *FabricConnection
	isSet bool
}

func (v NullableFabricConnection) Get() *FabricConnection {
	return v.value
}

func (v *NullableFabricConnection) Set(val *FabricConnection) {
	v.value = val
	v.isSet = true
}

func (v NullableFabricConnection) IsSet() bool {
	return v.isSet
}

func (v *NullableFabricConnection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFabricConnection(val *FabricConnection) *NullableFabricConnection {
	return &NullableFabricConnection{value: val, isSet: true}
}

func (v NullableFabricConnection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFabricConnection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
