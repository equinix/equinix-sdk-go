/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the VirtualPortRedundancy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VirtualPortRedundancy{}

// VirtualPortRedundancy Specifications for redundant connections, which improve service continuity by routing traffic to secondary ports when primary ports are unavailable. <br> Redundancy increases resilience and boosts site reliability scores.
type VirtualPortRedundancy struct {
	// Parameter showing whether redundancy is mandatory. The default is false.
	Enabled              *bool `json:"enabled,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VirtualPortRedundancy VirtualPortRedundancy

// NewVirtualPortRedundancy instantiates a new VirtualPortRedundancy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualPortRedundancy() *VirtualPortRedundancy {
	this := VirtualPortRedundancy{}
	var enabled bool = false
	this.Enabled = &enabled
	return &this
}

// NewVirtualPortRedundancyWithDefaults instantiates a new VirtualPortRedundancy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualPortRedundancyWithDefaults() *VirtualPortRedundancy {
	this := VirtualPortRedundancy{}
	var enabled bool = false
	this.Enabled = &enabled
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *VirtualPortRedundancy) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualPortRedundancy) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *VirtualPortRedundancy) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *VirtualPortRedundancy) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o VirtualPortRedundancy) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VirtualPortRedundancy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VirtualPortRedundancy) UnmarshalJSON(data []byte) (err error) {
	varVirtualPortRedundancy := _VirtualPortRedundancy{}

	err = json.Unmarshal(data, &varVirtualPortRedundancy)

	if err != nil {
		return err
	}

	*o = VirtualPortRedundancy(varVirtualPortRedundancy)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enabled")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVirtualPortRedundancy struct {
	value *VirtualPortRedundancy
	isSet bool
}

func (v NullableVirtualPortRedundancy) Get() *VirtualPortRedundancy {
	return v.value
}

func (v *NullableVirtualPortRedundancy) Set(val *VirtualPortRedundancy) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualPortRedundancy) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualPortRedundancy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualPortRedundancy(val *VirtualPortRedundancy) *NullableVirtualPortRedundancy {
	return &NullableVirtualPortRedundancy{value: val, isSet: true}
}

func (v NullableVirtualPortRedundancy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualPortRedundancy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
