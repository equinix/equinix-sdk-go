/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the ServiceTokenConnection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceTokenConnection{}

// ServiceTokenConnection Service Token Connection Type Information
type ServiceTokenConnection struct {
	Type *ServiceTokenConnectionType `json:"type,omitempty"`
	// An absolute URL that is the subject of the link's context.
	Href *string `json:"href,omitempty"`
	// Equinix-assigned connection identifier
	Uuid *string `json:"uuid,omitempty"`
	// Authorization to connect remotely
	AllowRemoteConnection *bool `json:"allowRemoteConnection,omitempty"`
	// Allow custom bandwidth value
	AllowCustomBandwidth *bool `json:"allowCustomBandwidth,omitempty"`
	// Connection bandwidth limit in Mbps
	BandwidthLimit *int32 `json:"bandwidthLimit,omitempty"`
	// List of permitted bandwidths.
	SupportedBandwidths  []int32           `json:"supportedBandwidths,omitempty"`
	ASide                *ServiceTokenSide `json:"aSide,omitempty"`
	ZSide                *ServiceTokenSide `json:"zSide,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServiceTokenConnection ServiceTokenConnection

// NewServiceTokenConnection instantiates a new ServiceTokenConnection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceTokenConnection() *ServiceTokenConnection {
	this := ServiceTokenConnection{}
	var allowRemoteConnection bool = false
	this.AllowRemoteConnection = &allowRemoteConnection
	var allowCustomBandwidth bool = false
	this.AllowCustomBandwidth = &allowCustomBandwidth
	return &this
}

// NewServiceTokenConnectionWithDefaults instantiates a new ServiceTokenConnection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceTokenConnectionWithDefaults() *ServiceTokenConnection {
	this := ServiceTokenConnection{}
	var allowRemoteConnection bool = false
	this.AllowRemoteConnection = &allowRemoteConnection
	var allowCustomBandwidth bool = false
	this.AllowCustomBandwidth = &allowCustomBandwidth
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ServiceTokenConnection) GetType() ServiceTokenConnectionType {
	if o == nil || IsNil(o.Type) {
		var ret ServiceTokenConnectionType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTokenConnection) GetTypeOk() (*ServiceTokenConnectionType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ServiceTokenConnection) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ServiceTokenConnectionType and assigns it to the Type field.
func (o *ServiceTokenConnection) SetType(v ServiceTokenConnectionType) {
	o.Type = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *ServiceTokenConnection) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTokenConnection) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *ServiceTokenConnection) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *ServiceTokenConnection) SetHref(v string) {
	o.Href = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *ServiceTokenConnection) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTokenConnection) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *ServiceTokenConnection) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *ServiceTokenConnection) SetUuid(v string) {
	o.Uuid = &v
}

// GetAllowRemoteConnection returns the AllowRemoteConnection field value if set, zero value otherwise.
func (o *ServiceTokenConnection) GetAllowRemoteConnection() bool {
	if o == nil || IsNil(o.AllowRemoteConnection) {
		var ret bool
		return ret
	}
	return *o.AllowRemoteConnection
}

// GetAllowRemoteConnectionOk returns a tuple with the AllowRemoteConnection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTokenConnection) GetAllowRemoteConnectionOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowRemoteConnection) {
		return nil, false
	}
	return o.AllowRemoteConnection, true
}

// HasAllowRemoteConnection returns a boolean if a field has been set.
func (o *ServiceTokenConnection) HasAllowRemoteConnection() bool {
	if o != nil && !IsNil(o.AllowRemoteConnection) {
		return true
	}

	return false
}

// SetAllowRemoteConnection gets a reference to the given bool and assigns it to the AllowRemoteConnection field.
func (o *ServiceTokenConnection) SetAllowRemoteConnection(v bool) {
	o.AllowRemoteConnection = &v
}

// GetAllowCustomBandwidth returns the AllowCustomBandwidth field value if set, zero value otherwise.
func (o *ServiceTokenConnection) GetAllowCustomBandwidth() bool {
	if o == nil || IsNil(o.AllowCustomBandwidth) {
		var ret bool
		return ret
	}
	return *o.AllowCustomBandwidth
}

// GetAllowCustomBandwidthOk returns a tuple with the AllowCustomBandwidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTokenConnection) GetAllowCustomBandwidthOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowCustomBandwidth) {
		return nil, false
	}
	return o.AllowCustomBandwidth, true
}

// HasAllowCustomBandwidth returns a boolean if a field has been set.
func (o *ServiceTokenConnection) HasAllowCustomBandwidth() bool {
	if o != nil && !IsNil(o.AllowCustomBandwidth) {
		return true
	}

	return false
}

// SetAllowCustomBandwidth gets a reference to the given bool and assigns it to the AllowCustomBandwidth field.
func (o *ServiceTokenConnection) SetAllowCustomBandwidth(v bool) {
	o.AllowCustomBandwidth = &v
}

// GetBandwidthLimit returns the BandwidthLimit field value if set, zero value otherwise.
func (o *ServiceTokenConnection) GetBandwidthLimit() int32 {
	if o == nil || IsNil(o.BandwidthLimit) {
		var ret int32
		return ret
	}
	return *o.BandwidthLimit
}

// GetBandwidthLimitOk returns a tuple with the BandwidthLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTokenConnection) GetBandwidthLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.BandwidthLimit) {
		return nil, false
	}
	return o.BandwidthLimit, true
}

// HasBandwidthLimit returns a boolean if a field has been set.
func (o *ServiceTokenConnection) HasBandwidthLimit() bool {
	if o != nil && !IsNil(o.BandwidthLimit) {
		return true
	}

	return false
}

// SetBandwidthLimit gets a reference to the given int32 and assigns it to the BandwidthLimit field.
func (o *ServiceTokenConnection) SetBandwidthLimit(v int32) {
	o.BandwidthLimit = &v
}

// GetSupportedBandwidths returns the SupportedBandwidths field value if set, zero value otherwise.
func (o *ServiceTokenConnection) GetSupportedBandwidths() []int32 {
	if o == nil || IsNil(o.SupportedBandwidths) {
		var ret []int32
		return ret
	}
	return o.SupportedBandwidths
}

// GetSupportedBandwidthsOk returns a tuple with the SupportedBandwidths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTokenConnection) GetSupportedBandwidthsOk() ([]int32, bool) {
	if o == nil || IsNil(o.SupportedBandwidths) {
		return nil, false
	}
	return o.SupportedBandwidths, true
}

// HasSupportedBandwidths returns a boolean if a field has been set.
func (o *ServiceTokenConnection) HasSupportedBandwidths() bool {
	if o != nil && !IsNil(o.SupportedBandwidths) {
		return true
	}

	return false
}

// SetSupportedBandwidths gets a reference to the given []int32 and assigns it to the SupportedBandwidths field.
func (o *ServiceTokenConnection) SetSupportedBandwidths(v []int32) {
	o.SupportedBandwidths = v
}

// GetASide returns the ASide field value if set, zero value otherwise.
func (o *ServiceTokenConnection) GetASide() ServiceTokenSide {
	if o == nil || IsNil(o.ASide) {
		var ret ServiceTokenSide
		return ret
	}
	return *o.ASide
}

// GetASideOk returns a tuple with the ASide field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTokenConnection) GetASideOk() (*ServiceTokenSide, bool) {
	if o == nil || IsNil(o.ASide) {
		return nil, false
	}
	return o.ASide, true
}

// HasASide returns a boolean if a field has been set.
func (o *ServiceTokenConnection) HasASide() bool {
	if o != nil && !IsNil(o.ASide) {
		return true
	}

	return false
}

// SetASide gets a reference to the given ServiceTokenSide and assigns it to the ASide field.
func (o *ServiceTokenConnection) SetASide(v ServiceTokenSide) {
	o.ASide = &v
}

// GetZSide returns the ZSide field value if set, zero value otherwise.
func (o *ServiceTokenConnection) GetZSide() ServiceTokenSide {
	if o == nil || IsNil(o.ZSide) {
		var ret ServiceTokenSide
		return ret
	}
	return *o.ZSide
}

// GetZSideOk returns a tuple with the ZSide field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTokenConnection) GetZSideOk() (*ServiceTokenSide, bool) {
	if o == nil || IsNil(o.ZSide) {
		return nil, false
	}
	return o.ZSide, true
}

// HasZSide returns a boolean if a field has been set.
func (o *ServiceTokenConnection) HasZSide() bool {
	if o != nil && !IsNil(o.ZSide) {
		return true
	}

	return false
}

// SetZSide gets a reference to the given ServiceTokenSide and assigns it to the ZSide field.
func (o *ServiceTokenConnection) SetZSide(v ServiceTokenSide) {
	o.ZSide = &v
}

func (o ServiceTokenConnection) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceTokenConnection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.AllowRemoteConnection) {
		toSerialize["allowRemoteConnection"] = o.AllowRemoteConnection
	}
	if !IsNil(o.AllowCustomBandwidth) {
		toSerialize["allowCustomBandwidth"] = o.AllowCustomBandwidth
	}
	if !IsNil(o.BandwidthLimit) {
		toSerialize["bandwidthLimit"] = o.BandwidthLimit
	}
	if !IsNil(o.SupportedBandwidths) {
		toSerialize["supportedBandwidths"] = o.SupportedBandwidths
	}
	if !IsNil(o.ASide) {
		toSerialize["aSide"] = o.ASide
	}
	if !IsNil(o.ZSide) {
		toSerialize["zSide"] = o.ZSide
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServiceTokenConnection) UnmarshalJSON(data []byte) (err error) {
	varServiceTokenConnection := _ServiceTokenConnection{}

	err = json.Unmarshal(data, &varServiceTokenConnection)

	if err != nil {
		return err
	}

	*o = ServiceTokenConnection(varServiceTokenConnection)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "href")
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "allowRemoteConnection")
		delete(additionalProperties, "allowCustomBandwidth")
		delete(additionalProperties, "bandwidthLimit")
		delete(additionalProperties, "supportedBandwidths")
		delete(additionalProperties, "aSide")
		delete(additionalProperties, "zSide")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServiceTokenConnection struct {
	value *ServiceTokenConnection
	isSet bool
}

func (v NullableServiceTokenConnection) Get() *ServiceTokenConnection {
	return v.value
}

func (v *NullableServiceTokenConnection) Set(val *ServiceTokenConnection) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceTokenConnection) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceTokenConnection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceTokenConnection(val *ServiceTokenConnection) *NullableServiceTokenConnection {
	return &NullableServiceTokenConnection{value: val, isSet: true}
}

func (v NullableServiceTokenConnection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceTokenConnection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
