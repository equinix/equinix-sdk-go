/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// GeoScopeType Geographic boundary types
type GeoScopeType string

// List of GeoScopeType
const (
	GEOSCOPETYPE_CANADA GeoScopeType = "CANADA"
	GEOSCOPETYPE_CONUS  GeoScopeType = "CONUS"
)

// All allowed values of GeoScopeType enum
var AllowedGeoScopeTypeEnumValues = []GeoScopeType{
	"CANADA",
	"CONUS",
}

func (v *GeoScopeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GeoScopeType(value)
	for _, existing := range AllowedGeoScopeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GeoScopeType", value)
}

// NewGeoScopeTypeFromValue returns a pointer to a valid GeoScopeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGeoScopeTypeFromValue(v string) (*GeoScopeType, error) {
	ev := GeoScopeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GeoScopeType: valid values are %v", v, AllowedGeoScopeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GeoScopeType) IsValid() bool {
	for _, existing := range AllowedGeoScopeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GeoScopeType value
func (v GeoScopeType) Ptr() *GeoScopeType {
	return &v
}

type NullableGeoScopeType struct {
	value *GeoScopeType
	isSet bool
}

func (v NullableGeoScopeType) Get() *GeoScopeType {
	return v.value
}

func (v *NullableGeoScopeType) Set(val *GeoScopeType) {
	v.value = val
	v.isSet = true
}

func (v NullableGeoScopeType) IsSet() bool {
	return v.isSet
}

func (v *NullableGeoScopeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeoScopeType(val *GeoScopeType) *NullableGeoScopeType {
	return &NullableGeoScopeType{value: val, isSet: true}
}

func (v NullableGeoScopeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeoScopeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
