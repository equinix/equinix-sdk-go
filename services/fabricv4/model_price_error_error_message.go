/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// PriceErrorErrorMessage the model 'PriceErrorErrorMessage'
type PriceErrorErrorMessage string

// List of PriceError_errorMessage
const (
	PRICEERRORERRORMESSAGE_VALIDATION_FAILURE    PriceErrorErrorMessage = "Validation failure"
	PRICEERRORERRORMESSAGE_INVALID_VALUE         PriceErrorErrorMessage = "Invalid value"
	PRICEERRORERRORMESSAGE_INTERNAL_SERVER_ERROR PriceErrorErrorMessage = "Internal Server Error"
)

// All allowed values of PriceErrorErrorMessage enum
var AllowedPriceErrorErrorMessageEnumValues = []PriceErrorErrorMessage{
	"Validation failure",
	"Invalid value",
	"Internal Server Error",
}

func (v *PriceErrorErrorMessage) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PriceErrorErrorMessage(value)
	for _, existing := range AllowedPriceErrorErrorMessageEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PriceErrorErrorMessage", value)
}

// NewPriceErrorErrorMessageFromValue returns a pointer to a valid PriceErrorErrorMessage
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPriceErrorErrorMessageFromValue(v string) (*PriceErrorErrorMessage, error) {
	ev := PriceErrorErrorMessage(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PriceErrorErrorMessage: valid values are %v", v, AllowedPriceErrorErrorMessageEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PriceErrorErrorMessage) IsValid() bool {
	for _, existing := range AllowedPriceErrorErrorMessageEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PriceError_errorMessage value
func (v PriceErrorErrorMessage) Ptr() *PriceErrorErrorMessage {
	return &v
}

type NullablePriceErrorErrorMessage struct {
	value *PriceErrorErrorMessage
	isSet bool
}

func (v NullablePriceErrorErrorMessage) Get() *PriceErrorErrorMessage {
	return v.value
}

func (v *NullablePriceErrorErrorMessage) Set(val *PriceErrorErrorMessage) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceErrorErrorMessage) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceErrorErrorMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceErrorErrorMessage(val *PriceErrorErrorMessage) *NullablePriceErrorErrorMessage {
	return &NullablePriceErrorErrorMessage{value: val, isSet: true}
}

func (v NullablePriceErrorErrorMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceErrorErrorMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
