/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// RouteAggregationRuleState Route Aggregation Rule status
type RouteAggregationRuleState string

// List of RouteAggregationRuleState
const (
	ROUTEAGGREGATIONRULESTATE_PROVISIONING      RouteAggregationRuleState = "PROVISIONING"
	ROUTEAGGREGATIONRULESTATE_REPROVISIONING    RouteAggregationRuleState = "REPROVISIONING"
	ROUTEAGGREGATIONRULESTATE_DEPROVISIONING    RouteAggregationRuleState = "DEPROVISIONING"
	ROUTEAGGREGATIONRULESTATE_PROVISIONED       RouteAggregationRuleState = "PROVISIONED"
	ROUTEAGGREGATIONRULESTATE_DEPROVISIONED     RouteAggregationRuleState = "DEPROVISIONED"
	ROUTEAGGREGATIONRULESTATE_NOT_PROVISIONED   RouteAggregationRuleState = "NOT_PROVISIONED"
	ROUTEAGGREGATIONRULESTATE_NOT_DEPROVISIONED RouteAggregationRuleState = "NOT_DEPROVISIONED"
)

// All allowed values of RouteAggregationRuleState enum
var AllowedRouteAggregationRuleStateEnumValues = []RouteAggregationRuleState{
	"PROVISIONING",
	"REPROVISIONING",
	"DEPROVISIONING",
	"PROVISIONED",
	"DEPROVISIONED",
	"NOT_PROVISIONED",
	"NOT_DEPROVISIONED",
}

func (v *RouteAggregationRuleState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RouteAggregationRuleState(value)
	for _, existing := range AllowedRouteAggregationRuleStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RouteAggregationRuleState", value)
}

// NewRouteAggregationRuleStateFromValue returns a pointer to a valid RouteAggregationRuleState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRouteAggregationRuleStateFromValue(v string) (*RouteAggregationRuleState, error) {
	ev := RouteAggregationRuleState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RouteAggregationRuleState: valid values are %v", v, AllowedRouteAggregationRuleStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RouteAggregationRuleState) IsValid() bool {
	for _, existing := range AllowedRouteAggregationRuleStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RouteAggregationRuleState value
func (v RouteAggregationRuleState) Ptr() *RouteAggregationRuleState {
	return &v
}

type NullableRouteAggregationRuleState struct {
	value *RouteAggregationRuleState
	isSet bool
}

func (v NullableRouteAggregationRuleState) Get() *RouteAggregationRuleState {
	return v.value
}

func (v *NullableRouteAggregationRuleState) Set(val *RouteAggregationRuleState) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteAggregationRuleState) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteAggregationRuleState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteAggregationRuleState(val *RouteAggregationRuleState) *NullableRouteAggregationRuleState {
	return &NullableRouteAggregationRuleState{value: val, isSet: true}
}

func (v NullableRouteAggregationRuleState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteAggregationRuleState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
