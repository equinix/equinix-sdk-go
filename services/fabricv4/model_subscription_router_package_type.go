/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the SubscriptionRouterPackageType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionRouterPackageType{}

// SubscriptionRouterPackageType Cloud Router Package Type
type SubscriptionRouterPackageType struct {
	Code                 *SubscriptionRouterPackageTypeCode `json:"code,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SubscriptionRouterPackageType SubscriptionRouterPackageType

// NewSubscriptionRouterPackageType instantiates a new SubscriptionRouterPackageType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionRouterPackageType() *SubscriptionRouterPackageType {
	this := SubscriptionRouterPackageType{}
	return &this
}

// NewSubscriptionRouterPackageTypeWithDefaults instantiates a new SubscriptionRouterPackageType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionRouterPackageTypeWithDefaults() *SubscriptionRouterPackageType {
	this := SubscriptionRouterPackageType{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *SubscriptionRouterPackageType) GetCode() SubscriptionRouterPackageTypeCode {
	if o == nil || IsNil(o.Code) {
		var ret SubscriptionRouterPackageTypeCode
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRouterPackageType) GetCodeOk() (*SubscriptionRouterPackageTypeCode, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *SubscriptionRouterPackageType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given SubscriptionRouterPackageTypeCode and assigns it to the Code field.
func (o *SubscriptionRouterPackageType) SetCode(v SubscriptionRouterPackageTypeCode) {
	o.Code = &v
}

func (o SubscriptionRouterPackageType) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionRouterPackageType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SubscriptionRouterPackageType) UnmarshalJSON(data []byte) (err error) {
	varSubscriptionRouterPackageType := _SubscriptionRouterPackageType{}

	err = json.Unmarshal(data, &varSubscriptionRouterPackageType)

	if err != nil {
		return err
	}

	*o = SubscriptionRouterPackageType(varSubscriptionRouterPackageType)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "code")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSubscriptionRouterPackageType struct {
	value *SubscriptionRouterPackageType
	isSet bool
}

func (v NullableSubscriptionRouterPackageType) Get() *SubscriptionRouterPackageType {
	return v.value
}

func (v *NullableSubscriptionRouterPackageType) Set(val *SubscriptionRouterPackageType) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionRouterPackageType) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionRouterPackageType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionRouterPackageType(val *SubscriptionRouterPackageType) *NullableSubscriptionRouterPackageType {
	return &NullableSubscriptionRouterPackageType{value: val, isSet: true}
}

func (v NullableSubscriptionRouterPackageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionRouterPackageType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
