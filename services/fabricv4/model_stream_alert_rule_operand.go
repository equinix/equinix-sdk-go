/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// StreamAlertRuleOperand Stream alert rule metric operand
type StreamAlertRuleOperand string

// List of StreamAlertRule_operand
const (
	STREAMALERTRULEOPERAND_ABOVE StreamAlertRuleOperand = "ABOVE"
	STREAMALERTRULEOPERAND_BELOW StreamAlertRuleOperand = "BELOW"
)

// All allowed values of StreamAlertRuleOperand enum
var AllowedStreamAlertRuleOperandEnumValues = []StreamAlertRuleOperand{
	"ABOVE",
	"BELOW",
}

func (v *StreamAlertRuleOperand) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StreamAlertRuleOperand(value)
	for _, existing := range AllowedStreamAlertRuleOperandEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StreamAlertRuleOperand", value)
}

// NewStreamAlertRuleOperandFromValue returns a pointer to a valid StreamAlertRuleOperand
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStreamAlertRuleOperandFromValue(v string) (*StreamAlertRuleOperand, error) {
	ev := StreamAlertRuleOperand(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StreamAlertRuleOperand: valid values are %v", v, AllowedStreamAlertRuleOperandEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StreamAlertRuleOperand) IsValid() bool {
	for _, existing := range AllowedStreamAlertRuleOperandEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StreamAlertRule_operand value
func (v StreamAlertRuleOperand) Ptr() *StreamAlertRuleOperand {
	return &v
}

type NullableStreamAlertRuleOperand struct {
	value *StreamAlertRuleOperand
	isSet bool
}

func (v NullableStreamAlertRuleOperand) Get() *StreamAlertRuleOperand {
	return v.value
}

func (v *NullableStreamAlertRuleOperand) Set(val *StreamAlertRuleOperand) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamAlertRuleOperand) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamAlertRuleOperand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamAlertRuleOperand(val *StreamAlertRuleOperand) *NullableStreamAlertRuleOperand {
	return &NullableStreamAlertRuleOperand{value: val, isSet: true}
}

func (v NullableStreamAlertRuleOperand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamAlertRuleOperand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
