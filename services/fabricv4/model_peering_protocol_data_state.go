/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// PeeringProtocolDataState Protocol State
type PeeringProtocolDataState string

// List of PeeringProtocolData_state
const (
	PEERINGPROTOCOLDATASTATE_PROVISIONED    PeeringProtocolDataState = "PROVISIONED"
	PEERINGPROTOCOLDATASTATE_DEPROVISIONED  PeeringProtocolDataState = "DEPROVISIONED"
	PEERINGPROTOCOLDATASTATE_PROVISIONING   PeeringProtocolDataState = "PROVISIONING"
	PEERINGPROTOCOLDATASTATE_DEPROVISIONING PeeringProtocolDataState = "DEPROVISIONING"
	PEERINGPROTOCOLDATASTATE_REPROVISIONING PeeringProtocolDataState = "REPROVISIONING"
	PEERINGPROTOCOLDATASTATE_FAILED         PeeringProtocolDataState = "FAILED"
)

// All allowed values of PeeringProtocolDataState enum
var AllowedPeeringProtocolDataStateEnumValues = []PeeringProtocolDataState{
	"PROVISIONED",
	"DEPROVISIONED",
	"PROVISIONING",
	"DEPROVISIONING",
	"REPROVISIONING",
	"FAILED",
}

func (v *PeeringProtocolDataState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PeeringProtocolDataState(value)
	for _, existing := range AllowedPeeringProtocolDataStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PeeringProtocolDataState", value)
}

// NewPeeringProtocolDataStateFromValue returns a pointer to a valid PeeringProtocolDataState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPeeringProtocolDataStateFromValue(v string) (*PeeringProtocolDataState, error) {
	ev := PeeringProtocolDataState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PeeringProtocolDataState: valid values are %v", v, AllowedPeeringProtocolDataStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PeeringProtocolDataState) IsValid() bool {
	for _, existing := range AllowedPeeringProtocolDataStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PeeringProtocolData_state value
func (v PeeringProtocolDataState) Ptr() *PeeringProtocolDataState {
	return &v
}

type NullablePeeringProtocolDataState struct {
	value *PeeringProtocolDataState
	isSet bool
}

func (v NullablePeeringProtocolDataState) Get() *PeeringProtocolDataState {
	return v.value
}

func (v *NullablePeeringProtocolDataState) Set(val *PeeringProtocolDataState) {
	v.value = val
	v.isSet = true
}

func (v NullablePeeringProtocolDataState) IsSet() bool {
	return v.isSet
}

func (v *NullablePeeringProtocolDataState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePeeringProtocolDataState(val *PeeringProtocolDataState) *NullablePeeringProtocolDataState {
	return &NullablePeeringProtocolDataState{value: val, isSet: true}
}

func (v NullablePeeringProtocolDataState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePeeringProtocolDataState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
