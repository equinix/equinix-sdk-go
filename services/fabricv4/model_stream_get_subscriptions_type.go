/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// StreamGetSubscriptionsType Stream subscription type
type StreamGetSubscriptionsType string

// List of StreamGetSubscriptions_type
const (
	STREAMGETSUBSCRIPTIONSTYPE_STREAM_SUBSCRIPTION StreamGetSubscriptionsType = "STREAM_SUBSCRIPTION"
)

// All allowed values of StreamGetSubscriptionsType enum
var AllowedStreamGetSubscriptionsTypeEnumValues = []StreamGetSubscriptionsType{
	"STREAM_SUBSCRIPTION",
}

func (v *StreamGetSubscriptionsType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StreamGetSubscriptionsType(value)
	for _, existing := range AllowedStreamGetSubscriptionsTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StreamGetSubscriptionsType", value)
}

// NewStreamGetSubscriptionsTypeFromValue returns a pointer to a valid StreamGetSubscriptionsType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStreamGetSubscriptionsTypeFromValue(v string) (*StreamGetSubscriptionsType, error) {
	ev := StreamGetSubscriptionsType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StreamGetSubscriptionsType: valid values are %v", v, AllowedStreamGetSubscriptionsTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StreamGetSubscriptionsType) IsValid() bool {
	for _, existing := range AllowedStreamGetSubscriptionsTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StreamGetSubscriptions_type value
func (v StreamGetSubscriptionsType) Ptr() *StreamGetSubscriptionsType {
	return &v
}

type NullableStreamGetSubscriptionsType struct {
	value *StreamGetSubscriptionsType
	isSet bool
}

func (v NullableStreamGetSubscriptionsType) Get() *StreamGetSubscriptionsType {
	return v.value
}

func (v *NullableStreamGetSubscriptionsType) Set(val *StreamGetSubscriptionsType) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamGetSubscriptionsType) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamGetSubscriptionsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamGetSubscriptionsType(val *StreamGetSubscriptionsType) *NullableStreamGetSubscriptionsType {
	return &NullableStreamGetSubscriptionsType{value: val, isSet: true}
}

func (v NullableStreamGetSubscriptionsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamGetSubscriptionsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
