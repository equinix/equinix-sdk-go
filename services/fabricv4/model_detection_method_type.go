/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// DetectionMethodType * THRESHOLD - Alert when a metric crosses a defined threshold by user. * OUTLIER - Intelligent Alert that has an outlier behavior. This option is currently supported for metro latency metric.
type DetectionMethodType string

// List of DetectionMethod_type
const (
	DETECTIONMETHODTYPE_THRESHOLD DetectionMethodType = "THRESHOLD"
	DETECTIONMETHODTYPE_OUTLIER   DetectionMethodType = "OUTLIER"
)

// All allowed values of DetectionMethodType enum
var AllowedDetectionMethodTypeEnumValues = []DetectionMethodType{
	"THRESHOLD",
	"OUTLIER",
}

func (v *DetectionMethodType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DetectionMethodType(value)
	for _, existing := range AllowedDetectionMethodTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DetectionMethodType", value)
}

// NewDetectionMethodTypeFromValue returns a pointer to a valid DetectionMethodType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDetectionMethodTypeFromValue(v string) (*DetectionMethodType, error) {
	ev := DetectionMethodType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DetectionMethodType: valid values are %v", v, AllowedDetectionMethodTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DetectionMethodType) IsValid() bool {
	for _, existing := range AllowedDetectionMethodTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DetectionMethod_type value
func (v DetectionMethodType) Ptr() *DetectionMethodType {
	return &v
}

type NullableDetectionMethodType struct {
	value *DetectionMethodType
	isSet bool
}

func (v NullableDetectionMethodType) Get() *DetectionMethodType {
	return v.value
}

func (v *NullableDetectionMethodType) Set(val *DetectionMethodType) {
	v.value = val
	v.isSet = true
}

func (v NullableDetectionMethodType) IsSet() bool {
	return v.isSet
}

func (v *NullableDetectionMethodType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDetectionMethodType(val *DetectionMethodType) *NullableDetectionMethodType {
	return &NullableDetectionMethodType{value: val, isSet: true}
}

func (v NullableDetectionMethodType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDetectionMethodType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
