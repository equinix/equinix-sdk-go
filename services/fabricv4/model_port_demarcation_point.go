/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the PortDemarcationPoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PortDemarcationPoint{}

// PortDemarcationPoint Customer physical Port
type PortDemarcationPoint struct {
	// Port cabinet unique space id
	CabinetUniqueSpaceId *string `json:"cabinetUniqueSpaceId,omitempty"`
	// Port cage unique space id
	CageUniqueSpaceId *string `json:"cageUniqueSpaceId,omitempty"`
	// Port patch panel
	PatchPanel *string `json:"patchPanel,omitempty"`
	// Port patch panel
	// Deprecated
	PatchPanelName *string `json:"patchPanelName,omitempty"`
	// Port patch panel port A
	PatchPanelPortA *string `json:"patchPanelPortA,omitempty"`
	// Port patch panel port B
	PatchPanelPortB *string `json:"patchPanelPortB,omitempty"`
	// Port connector type
	ConnectorType *string `json:"connectorType,omitempty"`
	// Port ibx identifier
	Ibx                  *string `json:"ibx,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PortDemarcationPoint PortDemarcationPoint

// NewPortDemarcationPoint instantiates a new PortDemarcationPoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPortDemarcationPoint() *PortDemarcationPoint {
	this := PortDemarcationPoint{}
	return &this
}

// NewPortDemarcationPointWithDefaults instantiates a new PortDemarcationPoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortDemarcationPointWithDefaults() *PortDemarcationPoint {
	this := PortDemarcationPoint{}
	return &this
}

// GetCabinetUniqueSpaceId returns the CabinetUniqueSpaceId field value if set, zero value otherwise.
func (o *PortDemarcationPoint) GetCabinetUniqueSpaceId() string {
	if o == nil || IsNil(o.CabinetUniqueSpaceId) {
		var ret string
		return ret
	}
	return *o.CabinetUniqueSpaceId
}

// GetCabinetUniqueSpaceIdOk returns a tuple with the CabinetUniqueSpaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortDemarcationPoint) GetCabinetUniqueSpaceIdOk() (*string, bool) {
	if o == nil || IsNil(o.CabinetUniqueSpaceId) {
		return nil, false
	}
	return o.CabinetUniqueSpaceId, true
}

// HasCabinetUniqueSpaceId returns a boolean if a field has been set.
func (o *PortDemarcationPoint) HasCabinetUniqueSpaceId() bool {
	if o != nil && !IsNil(o.CabinetUniqueSpaceId) {
		return true
	}

	return false
}

// SetCabinetUniqueSpaceId gets a reference to the given string and assigns it to the CabinetUniqueSpaceId field.
func (o *PortDemarcationPoint) SetCabinetUniqueSpaceId(v string) {
	o.CabinetUniqueSpaceId = &v
}

// GetCageUniqueSpaceId returns the CageUniqueSpaceId field value if set, zero value otherwise.
func (o *PortDemarcationPoint) GetCageUniqueSpaceId() string {
	if o == nil || IsNil(o.CageUniqueSpaceId) {
		var ret string
		return ret
	}
	return *o.CageUniqueSpaceId
}

// GetCageUniqueSpaceIdOk returns a tuple with the CageUniqueSpaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortDemarcationPoint) GetCageUniqueSpaceIdOk() (*string, bool) {
	if o == nil || IsNil(o.CageUniqueSpaceId) {
		return nil, false
	}
	return o.CageUniqueSpaceId, true
}

// HasCageUniqueSpaceId returns a boolean if a field has been set.
func (o *PortDemarcationPoint) HasCageUniqueSpaceId() bool {
	if o != nil && !IsNil(o.CageUniqueSpaceId) {
		return true
	}

	return false
}

// SetCageUniqueSpaceId gets a reference to the given string and assigns it to the CageUniqueSpaceId field.
func (o *PortDemarcationPoint) SetCageUniqueSpaceId(v string) {
	o.CageUniqueSpaceId = &v
}

// GetPatchPanel returns the PatchPanel field value if set, zero value otherwise.
func (o *PortDemarcationPoint) GetPatchPanel() string {
	if o == nil || IsNil(o.PatchPanel) {
		var ret string
		return ret
	}
	return *o.PatchPanel
}

// GetPatchPanelOk returns a tuple with the PatchPanel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortDemarcationPoint) GetPatchPanelOk() (*string, bool) {
	if o == nil || IsNil(o.PatchPanel) {
		return nil, false
	}
	return o.PatchPanel, true
}

// HasPatchPanel returns a boolean if a field has been set.
func (o *PortDemarcationPoint) HasPatchPanel() bool {
	if o != nil && !IsNil(o.PatchPanel) {
		return true
	}

	return false
}

// SetPatchPanel gets a reference to the given string and assigns it to the PatchPanel field.
func (o *PortDemarcationPoint) SetPatchPanel(v string) {
	o.PatchPanel = &v
}

// GetPatchPanelName returns the PatchPanelName field value if set, zero value otherwise.
// Deprecated
func (o *PortDemarcationPoint) GetPatchPanelName() string {
	if o == nil || IsNil(o.PatchPanelName) {
		var ret string
		return ret
	}
	return *o.PatchPanelName
}

// GetPatchPanelNameOk returns a tuple with the PatchPanelName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *PortDemarcationPoint) GetPatchPanelNameOk() (*string, bool) {
	if o == nil || IsNil(o.PatchPanelName) {
		return nil, false
	}
	return o.PatchPanelName, true
}

// HasPatchPanelName returns a boolean if a field has been set.
func (o *PortDemarcationPoint) HasPatchPanelName() bool {
	if o != nil && !IsNil(o.PatchPanelName) {
		return true
	}

	return false
}

// SetPatchPanelName gets a reference to the given string and assigns it to the PatchPanelName field.
// Deprecated
func (o *PortDemarcationPoint) SetPatchPanelName(v string) {
	o.PatchPanelName = &v
}

// GetPatchPanelPortA returns the PatchPanelPortA field value if set, zero value otherwise.
func (o *PortDemarcationPoint) GetPatchPanelPortA() string {
	if o == nil || IsNil(o.PatchPanelPortA) {
		var ret string
		return ret
	}
	return *o.PatchPanelPortA
}

// GetPatchPanelPortAOk returns a tuple with the PatchPanelPortA field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortDemarcationPoint) GetPatchPanelPortAOk() (*string, bool) {
	if o == nil || IsNil(o.PatchPanelPortA) {
		return nil, false
	}
	return o.PatchPanelPortA, true
}

// HasPatchPanelPortA returns a boolean if a field has been set.
func (o *PortDemarcationPoint) HasPatchPanelPortA() bool {
	if o != nil && !IsNil(o.PatchPanelPortA) {
		return true
	}

	return false
}

// SetPatchPanelPortA gets a reference to the given string and assigns it to the PatchPanelPortA field.
func (o *PortDemarcationPoint) SetPatchPanelPortA(v string) {
	o.PatchPanelPortA = &v
}

// GetPatchPanelPortB returns the PatchPanelPortB field value if set, zero value otherwise.
func (o *PortDemarcationPoint) GetPatchPanelPortB() string {
	if o == nil || IsNil(o.PatchPanelPortB) {
		var ret string
		return ret
	}
	return *o.PatchPanelPortB
}

// GetPatchPanelPortBOk returns a tuple with the PatchPanelPortB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortDemarcationPoint) GetPatchPanelPortBOk() (*string, bool) {
	if o == nil || IsNil(o.PatchPanelPortB) {
		return nil, false
	}
	return o.PatchPanelPortB, true
}

// HasPatchPanelPortB returns a boolean if a field has been set.
func (o *PortDemarcationPoint) HasPatchPanelPortB() bool {
	if o != nil && !IsNil(o.PatchPanelPortB) {
		return true
	}

	return false
}

// SetPatchPanelPortB gets a reference to the given string and assigns it to the PatchPanelPortB field.
func (o *PortDemarcationPoint) SetPatchPanelPortB(v string) {
	o.PatchPanelPortB = &v
}

// GetConnectorType returns the ConnectorType field value if set, zero value otherwise.
func (o *PortDemarcationPoint) GetConnectorType() string {
	if o == nil || IsNil(o.ConnectorType) {
		var ret string
		return ret
	}
	return *o.ConnectorType
}

// GetConnectorTypeOk returns a tuple with the ConnectorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortDemarcationPoint) GetConnectorTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectorType) {
		return nil, false
	}
	return o.ConnectorType, true
}

// HasConnectorType returns a boolean if a field has been set.
func (o *PortDemarcationPoint) HasConnectorType() bool {
	if o != nil && !IsNil(o.ConnectorType) {
		return true
	}

	return false
}

// SetConnectorType gets a reference to the given string and assigns it to the ConnectorType field.
func (o *PortDemarcationPoint) SetConnectorType(v string) {
	o.ConnectorType = &v
}

// GetIbx returns the Ibx field value if set, zero value otherwise.
func (o *PortDemarcationPoint) GetIbx() string {
	if o == nil || IsNil(o.Ibx) {
		var ret string
		return ret
	}
	return *o.Ibx
}

// GetIbxOk returns a tuple with the Ibx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortDemarcationPoint) GetIbxOk() (*string, bool) {
	if o == nil || IsNil(o.Ibx) {
		return nil, false
	}
	return o.Ibx, true
}

// HasIbx returns a boolean if a field has been set.
func (o *PortDemarcationPoint) HasIbx() bool {
	if o != nil && !IsNil(o.Ibx) {
		return true
	}

	return false
}

// SetIbx gets a reference to the given string and assigns it to the Ibx field.
func (o *PortDemarcationPoint) SetIbx(v string) {
	o.Ibx = &v
}

func (o PortDemarcationPoint) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PortDemarcationPoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CabinetUniqueSpaceId) {
		toSerialize["cabinetUniqueSpaceId"] = o.CabinetUniqueSpaceId
	}
	if !IsNil(o.CageUniqueSpaceId) {
		toSerialize["cageUniqueSpaceId"] = o.CageUniqueSpaceId
	}
	if !IsNil(o.PatchPanel) {
		toSerialize["patchPanel"] = o.PatchPanel
	}
	if !IsNil(o.PatchPanelName) {
		toSerialize["patchPanelName"] = o.PatchPanelName
	}
	if !IsNil(o.PatchPanelPortA) {
		toSerialize["patchPanelPortA"] = o.PatchPanelPortA
	}
	if !IsNil(o.PatchPanelPortB) {
		toSerialize["patchPanelPortB"] = o.PatchPanelPortB
	}
	if !IsNil(o.ConnectorType) {
		toSerialize["connectorType"] = o.ConnectorType
	}
	if !IsNil(o.Ibx) {
		toSerialize["ibx"] = o.Ibx
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PortDemarcationPoint) UnmarshalJSON(data []byte) (err error) {
	varPortDemarcationPoint := _PortDemarcationPoint{}

	err = json.Unmarshal(data, &varPortDemarcationPoint)

	if err != nil {
		return err
	}

	*o = PortDemarcationPoint(varPortDemarcationPoint)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cabinetUniqueSpaceId")
		delete(additionalProperties, "cageUniqueSpaceId")
		delete(additionalProperties, "patchPanel")
		delete(additionalProperties, "patchPanelName")
		delete(additionalProperties, "patchPanelPortA")
		delete(additionalProperties, "patchPanelPortB")
		delete(additionalProperties, "connectorType")
		delete(additionalProperties, "ibx")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePortDemarcationPoint struct {
	value *PortDemarcationPoint
	isSet bool
}

func (v NullablePortDemarcationPoint) Get() *PortDemarcationPoint {
	return v.value
}

func (v *NullablePortDemarcationPoint) Set(val *PortDemarcationPoint) {
	v.value = val
	v.isSet = true
}

func (v NullablePortDemarcationPoint) IsSet() bool {
	return v.isSet
}

func (v *NullablePortDemarcationPoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortDemarcationPoint(val *PortDemarcationPoint) *NullablePortDemarcationPoint {
	return &NullablePortDemarcationPoint{value: val, isSet: true}
}

func (v NullablePortDemarcationPoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortDemarcationPoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
