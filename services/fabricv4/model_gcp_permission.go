/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// checks if the GCPPermission type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GCPPermission{}

// GCPPermission Provides the GCP permission configuration for the orchestrator. This permission is used to manage the GCP resources and their access control.
type GCPPermission struct {
	Type                 AWSPermissionType  `json:"type"`
	ProjectId            string             `json:"projectId"`
	ProviderId           string             `json:"providerId"`
	PoolId               string             `json:"poolId"`
	DeploymentProperties TopologyProperties `json:"deploymentProperties"`
	AdditionalProperties map[string]interface{}
}

type _GCPPermission GCPPermission

// NewGCPPermission instantiates a new GCPPermission object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGCPPermission(type_ AWSPermissionType, projectId string, providerId string, poolId string, deploymentProperties TopologyProperties) *GCPPermission {
	this := GCPPermission{}
	this.Type = type_
	this.ProjectId = projectId
	this.ProviderId = providerId
	this.PoolId = poolId
	this.DeploymentProperties = deploymentProperties
	return &this
}

// NewGCPPermissionWithDefaults instantiates a new GCPPermission object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGCPPermissionWithDefaults() *GCPPermission {
	this := GCPPermission{}
	return &this
}

// GetType returns the Type field value
func (o *GCPPermission) GetType() AWSPermissionType {
	if o == nil {
		var ret AWSPermissionType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *GCPPermission) GetTypeOk() (*AWSPermissionType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *GCPPermission) SetType(v AWSPermissionType) {
	o.Type = v
}

// GetProjectId returns the ProjectId field value
func (o *GCPPermission) GetProjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *GCPPermission) GetProjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *GCPPermission) SetProjectId(v string) {
	o.ProjectId = v
}

// GetProviderId returns the ProviderId field value
func (o *GCPPermission) GetProviderId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderId
}

// GetProviderIdOk returns a tuple with the ProviderId field value
// and a boolean to check if the value has been set.
func (o *GCPPermission) GetProviderIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderId, true
}

// SetProviderId sets field value
func (o *GCPPermission) SetProviderId(v string) {
	o.ProviderId = v
}

// GetPoolId returns the PoolId field value
func (o *GCPPermission) GetPoolId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PoolId
}

// GetPoolIdOk returns a tuple with the PoolId field value
// and a boolean to check if the value has been set.
func (o *GCPPermission) GetPoolIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PoolId, true
}

// SetPoolId sets field value
func (o *GCPPermission) SetPoolId(v string) {
	o.PoolId = v
}

// GetDeploymentProperties returns the DeploymentProperties field value
func (o *GCPPermission) GetDeploymentProperties() TopologyProperties {
	if o == nil {
		var ret TopologyProperties
		return ret
	}

	return o.DeploymentProperties
}

// GetDeploymentPropertiesOk returns a tuple with the DeploymentProperties field value
// and a boolean to check if the value has been set.
func (o *GCPPermission) GetDeploymentPropertiesOk() (*TopologyProperties, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeploymentProperties, true
}

// SetDeploymentProperties sets field value
func (o *GCPPermission) SetDeploymentProperties(v TopologyProperties) {
	o.DeploymentProperties = v
}

func (o GCPPermission) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GCPPermission) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["projectId"] = o.ProjectId
	toSerialize["providerId"] = o.ProviderId
	toSerialize["poolId"] = o.PoolId
	toSerialize["deploymentProperties"] = o.DeploymentProperties

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GCPPermission) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"projectId",
		"providerId",
		"poolId",
		"deploymentProperties",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGCPPermission := _GCPPermission{}

	err = json.Unmarshal(data, &varGCPPermission)

	if err != nil {
		return err
	}

	*o = GCPPermission(varGCPPermission)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "projectId")
		delete(additionalProperties, "providerId")
		delete(additionalProperties, "poolId")
		delete(additionalProperties, "deploymentProperties")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGCPPermission struct {
	value *GCPPermission
	isSet bool
}

func (v NullableGCPPermission) Get() *GCPPermission {
	return v.value
}

func (v *NullableGCPPermission) Set(val *GCPPermission) {
	v.value = val
	v.isSet = true
}

func (v NullableGCPPermission) IsSet() bool {
	return v.isSet
}

func (v *NullableGCPPermission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGCPPermission(val *GCPPermission) *NullableGCPPermission {
	return &NullableGCPPermission{value: val, isSet: true}
}

func (v NullableGCPPermission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGCPPermission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
