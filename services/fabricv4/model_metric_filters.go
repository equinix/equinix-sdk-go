/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the MetricFilters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetricFilters{}

// MetricFilters struct for MetricFilters
type MetricFilters struct {
	And                  []MetricFilter `json:"and,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MetricFilters MetricFilters

// NewMetricFilters instantiates a new MetricFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricFilters() *MetricFilters {
	this := MetricFilters{}
	return &this
}

// NewMetricFiltersWithDefaults instantiates a new MetricFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricFiltersWithDefaults() *MetricFilters {
	this := MetricFilters{}
	return &this
}

// GetAnd returns the And field value if set, zero value otherwise.
func (o *MetricFilters) GetAnd() []MetricFilter {
	if o == nil || IsNil(o.And) {
		var ret []MetricFilter
		return ret
	}
	return o.And
}

// GetAndOk returns a tuple with the And field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricFilters) GetAndOk() ([]MetricFilter, bool) {
	if o == nil || IsNil(o.And) {
		return nil, false
	}
	return o.And, true
}

// HasAnd returns a boolean if a field has been set.
func (o *MetricFilters) HasAnd() bool {
	if o != nil && !IsNil(o.And) {
		return true
	}

	return false
}

// SetAnd gets a reference to the given []MetricFilter and assigns it to the And field.
func (o *MetricFilters) SetAnd(v []MetricFilter) {
	o.And = v
}

func (o MetricFilters) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetricFilters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.And) {
		toSerialize["and"] = o.And
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MetricFilters) UnmarshalJSON(data []byte) (err error) {
	varMetricFilters := _MetricFilters{}

	err = json.Unmarshal(data, &varMetricFilters)

	if err != nil {
		return err
	}

	*o = MetricFilters(varMetricFilters)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "and")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMetricFilters struct {
	value *MetricFilters
	isSet bool
}

func (v NullableMetricFilters) Get() *MetricFilters {
	return v.value
}

func (v *NullableMetricFilters) Set(val *MetricFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricFilters(val *MetricFilters) *NullableMetricFilters {
	return &NullableMetricFilters{value: val, isSet: true}
}

func (v NullableMetricFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
