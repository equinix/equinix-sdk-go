/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the RouteFilterRulesChangeData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RouteFilterRulesChangeData{}

// RouteFilterRulesChangeData Current state of latest Route Filter Rules change
type RouteFilterRulesChangeData struct {
	// Current outcome of the change flow
	Status *string `json:"status,omitempty"`
	// Created by User Key
	CreatedBy *string `json:"createdBy,omitempty"`
	// Set when change flow starts
	CreatedDateTime *time.Time `json:"createdDateTime,omitempty"`
	// Updated by User Key
	UpdatedBy *string `json:"updatedBy,omitempty"`
	// Set when change object is updated
	UpdatedDateTime *time.Time                       `json:"updatedDateTime,omitempty"`
	Data            *RouteFilterRulesChangeOperation `json:"data,omitempty"`
	// Uniquely identifies a change
	Uuid string                     `json:"uuid"`
	Type RouteFilterRulesChangeType `json:"type"`
	// Route Filter Change URI
	Href                 *string `json:"href,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RouteFilterRulesChangeData RouteFilterRulesChangeData

// NewRouteFilterRulesChangeData instantiates a new RouteFilterRulesChangeData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRouteFilterRulesChangeData(uuid string, type_ RouteFilterRulesChangeType) *RouteFilterRulesChangeData {
	this := RouteFilterRulesChangeData{}
	this.Uuid = uuid
	this.Type = type_
	return &this
}

// NewRouteFilterRulesChangeDataWithDefaults instantiates a new RouteFilterRulesChangeData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteFilterRulesChangeDataWithDefaults() *RouteFilterRulesChangeData {
	this := RouteFilterRulesChangeData{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *RouteFilterRulesChangeData) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteFilterRulesChangeData) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *RouteFilterRulesChangeData) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *RouteFilterRulesChangeData) SetStatus(v string) {
	o.Status = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *RouteFilterRulesChangeData) GetCreatedBy() string {
	if o == nil || IsNil(o.CreatedBy) {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteFilterRulesChangeData) GetCreatedByOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *RouteFilterRulesChangeData) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *RouteFilterRulesChangeData) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

// GetCreatedDateTime returns the CreatedDateTime field value if set, zero value otherwise.
func (o *RouteFilterRulesChangeData) GetCreatedDateTime() time.Time {
	if o == nil || IsNil(o.CreatedDateTime) {
		var ret time.Time
		return ret
	}
	return *o.CreatedDateTime
}

// GetCreatedDateTimeOk returns a tuple with the CreatedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteFilterRulesChangeData) GetCreatedDateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedDateTime) {
		return nil, false
	}
	return o.CreatedDateTime, true
}

// HasCreatedDateTime returns a boolean if a field has been set.
func (o *RouteFilterRulesChangeData) HasCreatedDateTime() bool {
	if o != nil && !IsNil(o.CreatedDateTime) {
		return true
	}

	return false
}

// SetCreatedDateTime gets a reference to the given time.Time and assigns it to the CreatedDateTime field.
func (o *RouteFilterRulesChangeData) SetCreatedDateTime(v time.Time) {
	o.CreatedDateTime = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *RouteFilterRulesChangeData) GetUpdatedBy() string {
	if o == nil || IsNil(o.UpdatedBy) {
		var ret string
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteFilterRulesChangeData) GetUpdatedByOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedBy) {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *RouteFilterRulesChangeData) HasUpdatedBy() bool {
	if o != nil && !IsNil(o.UpdatedBy) {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given string and assigns it to the UpdatedBy field.
func (o *RouteFilterRulesChangeData) SetUpdatedBy(v string) {
	o.UpdatedBy = &v
}

// GetUpdatedDateTime returns the UpdatedDateTime field value if set, zero value otherwise.
func (o *RouteFilterRulesChangeData) GetUpdatedDateTime() time.Time {
	if o == nil || IsNil(o.UpdatedDateTime) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedDateTime
}

// GetUpdatedDateTimeOk returns a tuple with the UpdatedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteFilterRulesChangeData) GetUpdatedDateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedDateTime) {
		return nil, false
	}
	return o.UpdatedDateTime, true
}

// HasUpdatedDateTime returns a boolean if a field has been set.
func (o *RouteFilterRulesChangeData) HasUpdatedDateTime() bool {
	if o != nil && !IsNil(o.UpdatedDateTime) {
		return true
	}

	return false
}

// SetUpdatedDateTime gets a reference to the given time.Time and assigns it to the UpdatedDateTime field.
func (o *RouteFilterRulesChangeData) SetUpdatedDateTime(v time.Time) {
	o.UpdatedDateTime = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *RouteFilterRulesChangeData) GetData() RouteFilterRulesChangeOperation {
	if o == nil || IsNil(o.Data) {
		var ret RouteFilterRulesChangeOperation
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteFilterRulesChangeData) GetDataOk() (*RouteFilterRulesChangeOperation, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *RouteFilterRulesChangeData) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given RouteFilterRulesChangeOperation and assigns it to the Data field.
func (o *RouteFilterRulesChangeData) SetData(v RouteFilterRulesChangeOperation) {
	o.Data = &v
}

// GetUuid returns the Uuid field value
func (o *RouteFilterRulesChangeData) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *RouteFilterRulesChangeData) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *RouteFilterRulesChangeData) SetUuid(v string) {
	o.Uuid = v
}

// GetType returns the Type field value
func (o *RouteFilterRulesChangeData) GetType() RouteFilterRulesChangeType {
	if o == nil {
		var ret RouteFilterRulesChangeType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RouteFilterRulesChangeData) GetTypeOk() (*RouteFilterRulesChangeType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RouteFilterRulesChangeData) SetType(v RouteFilterRulesChangeType) {
	o.Type = v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *RouteFilterRulesChangeData) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteFilterRulesChangeData) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *RouteFilterRulesChangeData) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *RouteFilterRulesChangeData) SetHref(v string) {
	o.Href = &v
}

func (o RouteFilterRulesChangeData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RouteFilterRulesChangeData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.CreatedDateTime) {
		toSerialize["createdDateTime"] = o.CreatedDateTime
	}
	if !IsNil(o.UpdatedBy) {
		toSerialize["updatedBy"] = o.UpdatedBy
	}
	if !IsNil(o.UpdatedDateTime) {
		toSerialize["updatedDateTime"] = o.UpdatedDateTime
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	toSerialize["uuid"] = o.Uuid
	toSerialize["type"] = o.Type
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RouteFilterRulesChangeData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uuid",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRouteFilterRulesChangeData := _RouteFilterRulesChangeData{}

	err = json.Unmarshal(data, &varRouteFilterRulesChangeData)

	if err != nil {
		return err
	}

	*o = RouteFilterRulesChangeData(varRouteFilterRulesChangeData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "status")
		delete(additionalProperties, "createdBy")
		delete(additionalProperties, "createdDateTime")
		delete(additionalProperties, "updatedBy")
		delete(additionalProperties, "updatedDateTime")
		delete(additionalProperties, "data")
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "type")
		delete(additionalProperties, "href")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRouteFilterRulesChangeData struct {
	value *RouteFilterRulesChangeData
	isSet bool
}

func (v NullableRouteFilterRulesChangeData) Get() *RouteFilterRulesChangeData {
	return v.value
}

func (v *NullableRouteFilterRulesChangeData) Set(val *RouteFilterRulesChangeData) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteFilterRulesChangeData) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteFilterRulesChangeData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteFilterRulesChangeData(val *RouteFilterRulesChangeData) *NullableRouteFilterRulesChangeData {
	return &NullableRouteFilterRulesChangeData{value: val, isSet: true}
}

func (v NullableRouteFilterRulesChangeData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteFilterRulesChangeData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
