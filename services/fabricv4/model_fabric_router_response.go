/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// checks if the FabricRouterResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FabricRouterResponse{}

// FabricRouterResponse struct for FabricRouterResponse
type FabricRouterResponse struct {
	// Cloud Routers URI
	Href *string          `json:"href,omitempty"`
	Type FabricRouterType `json:"type"`
	// Equinix-assigned cloud router identifier
	Uuid                 *string                       `json:"uuid,omitempty"`
	State                DeploymentState               `json:"state"`
	Name                 string                        `json:"name"`
	Location             SimplifiedLocationWithoutIBX  `json:"location"`
	Package              CloudRouterPostRequestPackage `json:"package"`
	DeploymentProperties TopologyProperties            `json:"deploymentProperties"`
	AdditionalProperties map[string]interface{}
}

type _FabricRouterResponse FabricRouterResponse

// NewFabricRouterResponse instantiates a new FabricRouterResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFabricRouterResponse(type_ FabricRouterType, state DeploymentState, name string, location SimplifiedLocationWithoutIBX, package_ CloudRouterPostRequestPackage, deploymentProperties TopologyProperties) *FabricRouterResponse {
	this := FabricRouterResponse{}
	this.Type = type_
	this.State = state
	this.Name = name
	this.Location = location
	this.Package = package_
	this.DeploymentProperties = deploymentProperties
	return &this
}

// NewFabricRouterResponseWithDefaults instantiates a new FabricRouterResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFabricRouterResponseWithDefaults() *FabricRouterResponse {
	this := FabricRouterResponse{}
	return &this
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *FabricRouterResponse) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FabricRouterResponse) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *FabricRouterResponse) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *FabricRouterResponse) SetHref(v string) {
	o.Href = &v
}

// GetType returns the Type field value
func (o *FabricRouterResponse) GetType() FabricRouterType {
	if o == nil {
		var ret FabricRouterType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *FabricRouterResponse) GetTypeOk() (*FabricRouterType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *FabricRouterResponse) SetType(v FabricRouterType) {
	o.Type = v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *FabricRouterResponse) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FabricRouterResponse) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *FabricRouterResponse) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *FabricRouterResponse) SetUuid(v string) {
	o.Uuid = &v
}

// GetState returns the State field value
func (o *FabricRouterResponse) GetState() DeploymentState {
	if o == nil {
		var ret DeploymentState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *FabricRouterResponse) GetStateOk() (*DeploymentState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *FabricRouterResponse) SetState(v DeploymentState) {
	o.State = v
}

// GetName returns the Name field value
func (o *FabricRouterResponse) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FabricRouterResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FabricRouterResponse) SetName(v string) {
	o.Name = v
}

// GetLocation returns the Location field value
func (o *FabricRouterResponse) GetLocation() SimplifiedLocationWithoutIBX {
	if o == nil {
		var ret SimplifiedLocationWithoutIBX
		return ret
	}

	return o.Location
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
func (o *FabricRouterResponse) GetLocationOk() (*SimplifiedLocationWithoutIBX, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Location, true
}

// SetLocation sets field value
func (o *FabricRouterResponse) SetLocation(v SimplifiedLocationWithoutIBX) {
	o.Location = v
}

// GetPackage returns the Package field value
func (o *FabricRouterResponse) GetPackage() CloudRouterPostRequestPackage {
	if o == nil {
		var ret CloudRouterPostRequestPackage
		return ret
	}

	return o.Package
}

// GetPackageOk returns a tuple with the Package field value
// and a boolean to check if the value has been set.
func (o *FabricRouterResponse) GetPackageOk() (*CloudRouterPostRequestPackage, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Package, true
}

// SetPackage sets field value
func (o *FabricRouterResponse) SetPackage(v CloudRouterPostRequestPackage) {
	o.Package = v
}

// GetDeploymentProperties returns the DeploymentProperties field value
func (o *FabricRouterResponse) GetDeploymentProperties() TopologyProperties {
	if o == nil {
		var ret TopologyProperties
		return ret
	}

	return o.DeploymentProperties
}

// GetDeploymentPropertiesOk returns a tuple with the DeploymentProperties field value
// and a boolean to check if the value has been set.
func (o *FabricRouterResponse) GetDeploymentPropertiesOk() (*TopologyProperties, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeploymentProperties, true
}

// SetDeploymentProperties sets field value
func (o *FabricRouterResponse) SetDeploymentProperties(v TopologyProperties) {
	o.DeploymentProperties = v
}

func (o FabricRouterResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FabricRouterResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	toSerialize["state"] = o.State
	toSerialize["name"] = o.Name
	toSerialize["location"] = o.Location
	toSerialize["package"] = o.Package
	toSerialize["deploymentProperties"] = o.DeploymentProperties

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FabricRouterResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"state",
		"name",
		"location",
		"package",
		"deploymentProperties",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFabricRouterResponse := _FabricRouterResponse{}

	err = json.Unmarshal(data, &varFabricRouterResponse)

	if err != nil {
		return err
	}

	*o = FabricRouterResponse(varFabricRouterResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "href")
		delete(additionalProperties, "type")
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "state")
		delete(additionalProperties, "name")
		delete(additionalProperties, "location")
		delete(additionalProperties, "package")
		delete(additionalProperties, "deploymentProperties")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFabricRouterResponse struct {
	value *FabricRouterResponse
	isSet bool
}

func (v NullableFabricRouterResponse) Get() *FabricRouterResponse {
	return v.value
}

func (v *NullableFabricRouterResponse) Set(val *FabricRouterResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFabricRouterResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFabricRouterResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFabricRouterResponse(val *FabricRouterResponse) *NullableFabricRouterResponse {
	return &NullableFabricRouterResponse{value: val, isSet: true}
}

func (v NullableFabricRouterResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFabricRouterResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
