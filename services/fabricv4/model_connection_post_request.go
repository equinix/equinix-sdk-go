/*
Equinix Fabric API v4

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// checks if the ConnectionPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectionPostRequest{}

// ConnectionPostRequest Create connection post request
type ConnectionPostRequest struct {
	Type ConnectionType `json:"type"`
	// Customer-provided connection name
	Name  string `json:"name"`
	Order *Order `json:"order,omitempty"`
	// Preferences for notifications on connection configuration or status changes
	Notifications []SimplifiedNotification `json:"notifications"`
	// Connection bandwidth in Mbps
	Bandwidth  int32                 `json:"bandwidth"`
	GeoScope   *GeoScopeType         `json:"geoScope,omitempty"`
	Redundancy *ConnectionRedundancy `json:"redundancy,omitempty"`
	ASide      ConnectionSide        `json:"aSide"`
	ZSide      ConnectionSide        `json:"zSide"`
	Project    *Project              `json:"project,omitempty"`
	// Connection additional information
	AdditionalInfo          []ConnectionSideAdditionalInfo `json:"additionalInfo,omitempty"`
	MarketplaceSubscription *MarketplaceSubscription       `json:"marketplaceSubscription,omitempty"`
	AdditionalProperties    map[string]interface{}
}

type _ConnectionPostRequest ConnectionPostRequest

// NewConnectionPostRequest instantiates a new ConnectionPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionPostRequest(type_ ConnectionType, name string, notifications []SimplifiedNotification, bandwidth int32, aSide ConnectionSide, zSide ConnectionSide) *ConnectionPostRequest {
	this := ConnectionPostRequest{}
	this.Type = type_
	this.Name = name
	this.Notifications = notifications
	this.Bandwidth = bandwidth
	this.ASide = aSide
	this.ZSide = zSide
	return &this
}

// NewConnectionPostRequestWithDefaults instantiates a new ConnectionPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionPostRequestWithDefaults() *ConnectionPostRequest {
	this := ConnectionPostRequest{}
	return &this
}

// GetType returns the Type field value
func (o *ConnectionPostRequest) GetType() ConnectionType {
	if o == nil {
		var ret ConnectionType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ConnectionPostRequest) GetTypeOk() (*ConnectionType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ConnectionPostRequest) SetType(v ConnectionType) {
	o.Type = v
}

// GetName returns the Name field value
func (o *ConnectionPostRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ConnectionPostRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ConnectionPostRequest) SetName(v string) {
	o.Name = v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *ConnectionPostRequest) GetOrder() Order {
	if o == nil || IsNil(o.Order) {
		var ret Order
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionPostRequest) GetOrderOk() (*Order, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *ConnectionPostRequest) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given Order and assigns it to the Order field.
func (o *ConnectionPostRequest) SetOrder(v Order) {
	o.Order = &v
}

// GetNotifications returns the Notifications field value
func (o *ConnectionPostRequest) GetNotifications() []SimplifiedNotification {
	if o == nil {
		var ret []SimplifiedNotification
		return ret
	}

	return o.Notifications
}

// GetNotificationsOk returns a tuple with the Notifications field value
// and a boolean to check if the value has been set.
func (o *ConnectionPostRequest) GetNotificationsOk() ([]SimplifiedNotification, bool) {
	if o == nil {
		return nil, false
	}
	return o.Notifications, true
}

// SetNotifications sets field value
func (o *ConnectionPostRequest) SetNotifications(v []SimplifiedNotification) {
	o.Notifications = v
}

// GetBandwidth returns the Bandwidth field value
func (o *ConnectionPostRequest) GetBandwidth() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Bandwidth
}

// GetBandwidthOk returns a tuple with the Bandwidth field value
// and a boolean to check if the value has been set.
func (o *ConnectionPostRequest) GetBandwidthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bandwidth, true
}

// SetBandwidth sets field value
func (o *ConnectionPostRequest) SetBandwidth(v int32) {
	o.Bandwidth = v
}

// GetGeoScope returns the GeoScope field value if set, zero value otherwise.
func (o *ConnectionPostRequest) GetGeoScope() GeoScopeType {
	if o == nil || IsNil(o.GeoScope) {
		var ret GeoScopeType
		return ret
	}
	return *o.GeoScope
}

// GetGeoScopeOk returns a tuple with the GeoScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionPostRequest) GetGeoScopeOk() (*GeoScopeType, bool) {
	if o == nil || IsNil(o.GeoScope) {
		return nil, false
	}
	return o.GeoScope, true
}

// HasGeoScope returns a boolean if a field has been set.
func (o *ConnectionPostRequest) HasGeoScope() bool {
	if o != nil && !IsNil(o.GeoScope) {
		return true
	}

	return false
}

// SetGeoScope gets a reference to the given GeoScopeType and assigns it to the GeoScope field.
func (o *ConnectionPostRequest) SetGeoScope(v GeoScopeType) {
	o.GeoScope = &v
}

// GetRedundancy returns the Redundancy field value if set, zero value otherwise.
func (o *ConnectionPostRequest) GetRedundancy() ConnectionRedundancy {
	if o == nil || IsNil(o.Redundancy) {
		var ret ConnectionRedundancy
		return ret
	}
	return *o.Redundancy
}

// GetRedundancyOk returns a tuple with the Redundancy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionPostRequest) GetRedundancyOk() (*ConnectionRedundancy, bool) {
	if o == nil || IsNil(o.Redundancy) {
		return nil, false
	}
	return o.Redundancy, true
}

// HasRedundancy returns a boolean if a field has been set.
func (o *ConnectionPostRequest) HasRedundancy() bool {
	if o != nil && !IsNil(o.Redundancy) {
		return true
	}

	return false
}

// SetRedundancy gets a reference to the given ConnectionRedundancy and assigns it to the Redundancy field.
func (o *ConnectionPostRequest) SetRedundancy(v ConnectionRedundancy) {
	o.Redundancy = &v
}

// GetASide returns the ASide field value
func (o *ConnectionPostRequest) GetASide() ConnectionSide {
	if o == nil {
		var ret ConnectionSide
		return ret
	}

	return o.ASide
}

// GetASideOk returns a tuple with the ASide field value
// and a boolean to check if the value has been set.
func (o *ConnectionPostRequest) GetASideOk() (*ConnectionSide, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ASide, true
}

// SetASide sets field value
func (o *ConnectionPostRequest) SetASide(v ConnectionSide) {
	o.ASide = v
}

// GetZSide returns the ZSide field value
func (o *ConnectionPostRequest) GetZSide() ConnectionSide {
	if o == nil {
		var ret ConnectionSide
		return ret
	}

	return o.ZSide
}

// GetZSideOk returns a tuple with the ZSide field value
// and a boolean to check if the value has been set.
func (o *ConnectionPostRequest) GetZSideOk() (*ConnectionSide, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZSide, true
}

// SetZSide sets field value
func (o *ConnectionPostRequest) SetZSide(v ConnectionSide) {
	o.ZSide = v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *ConnectionPostRequest) GetProject() Project {
	if o == nil || IsNil(o.Project) {
		var ret Project
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionPostRequest) GetProjectOk() (*Project, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *ConnectionPostRequest) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given Project and assigns it to the Project field.
func (o *ConnectionPostRequest) SetProject(v Project) {
	o.Project = &v
}

// GetAdditionalInfo returns the AdditionalInfo field value if set, zero value otherwise.
func (o *ConnectionPostRequest) GetAdditionalInfo() []ConnectionSideAdditionalInfo {
	if o == nil || IsNil(o.AdditionalInfo) {
		var ret []ConnectionSideAdditionalInfo
		return ret
	}
	return o.AdditionalInfo
}

// GetAdditionalInfoOk returns a tuple with the AdditionalInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionPostRequest) GetAdditionalInfoOk() ([]ConnectionSideAdditionalInfo, bool) {
	if o == nil || IsNil(o.AdditionalInfo) {
		return nil, false
	}
	return o.AdditionalInfo, true
}

// HasAdditionalInfo returns a boolean if a field has been set.
func (o *ConnectionPostRequest) HasAdditionalInfo() bool {
	if o != nil && !IsNil(o.AdditionalInfo) {
		return true
	}

	return false
}

// SetAdditionalInfo gets a reference to the given []ConnectionSideAdditionalInfo and assigns it to the AdditionalInfo field.
func (o *ConnectionPostRequest) SetAdditionalInfo(v []ConnectionSideAdditionalInfo) {
	o.AdditionalInfo = v
}

// GetMarketplaceSubscription returns the MarketplaceSubscription field value if set, zero value otherwise.
func (o *ConnectionPostRequest) GetMarketplaceSubscription() MarketplaceSubscription {
	if o == nil || IsNil(o.MarketplaceSubscription) {
		var ret MarketplaceSubscription
		return ret
	}
	return *o.MarketplaceSubscription
}

// GetMarketplaceSubscriptionOk returns a tuple with the MarketplaceSubscription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionPostRequest) GetMarketplaceSubscriptionOk() (*MarketplaceSubscription, bool) {
	if o == nil || IsNil(o.MarketplaceSubscription) {
		return nil, false
	}
	return o.MarketplaceSubscription, true
}

// HasMarketplaceSubscription returns a boolean if a field has been set.
func (o *ConnectionPostRequest) HasMarketplaceSubscription() bool {
	if o != nil && !IsNil(o.MarketplaceSubscription) {
		return true
	}

	return false
}

// SetMarketplaceSubscription gets a reference to the given MarketplaceSubscription and assigns it to the MarketplaceSubscription field.
func (o *ConnectionPostRequest) SetMarketplaceSubscription(v MarketplaceSubscription) {
	o.MarketplaceSubscription = &v
}

func (o ConnectionPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectionPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["name"] = o.Name
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	toSerialize["notifications"] = o.Notifications
	toSerialize["bandwidth"] = o.Bandwidth
	if !IsNil(o.GeoScope) {
		toSerialize["geoScope"] = o.GeoScope
	}
	if !IsNil(o.Redundancy) {
		toSerialize["redundancy"] = o.Redundancy
	}
	toSerialize["aSide"] = o.ASide
	toSerialize["zSide"] = o.ZSide
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}
	if !IsNil(o.AdditionalInfo) {
		toSerialize["additionalInfo"] = o.AdditionalInfo
	}
	if !IsNil(o.MarketplaceSubscription) {
		toSerialize["marketplaceSubscription"] = o.MarketplaceSubscription
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ConnectionPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"name",
		"notifications",
		"bandwidth",
		"aSide",
		"zSide",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConnectionPostRequest := _ConnectionPostRequest{}

	err = json.Unmarshal(data, &varConnectionPostRequest)

	if err != nil {
		return err
	}

	*o = ConnectionPostRequest(varConnectionPostRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "name")
		delete(additionalProperties, "order")
		delete(additionalProperties, "notifications")
		delete(additionalProperties, "bandwidth")
		delete(additionalProperties, "geoScope")
		delete(additionalProperties, "redundancy")
		delete(additionalProperties, "aSide")
		delete(additionalProperties, "zSide")
		delete(additionalProperties, "project")
		delete(additionalProperties, "additionalInfo")
		delete(additionalProperties, "marketplaceSubscription")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableConnectionPostRequest struct {
	value *ConnectionPostRequest
	isSet bool
}

func (v NullableConnectionPostRequest) Get() *ConnectionPostRequest {
	return v.value
}

func (v *NullableConnectionPostRequest) Set(val *ConnectionPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionPostRequest(val *ConnectionPostRequest) *NullableConnectionPostRequest {
	return &NullableConnectionPostRequest{value: val, isSet: true}
}

func (v NullableConnectionPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
