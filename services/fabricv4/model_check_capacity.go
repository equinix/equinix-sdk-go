/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the CheckCapacity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckCapacity{}

// CheckCapacity Check capcaity Port specification
type CheckCapacity struct {
	// demarcation point IBX
	DemarcationPointIbx *string `json:"demarcationPointIbx,omitempty"`
	// cloud port ibx location
	TetherIbx *string `json:"tetherIbx,omitempty"`
	// metroConnect
	MetroConnectUsed *bool `json:"metroConnectUsed,omitempty"`
	// campusCrossConnect
	CampusCrossConnectUsed *bool `json:"campusCrossConnectUsed,omitempty"`
	// lag or non lag port
	LagEnabled *bool `json:"lagEnabled,omitempty"`
	// Physical Ports Speed in Mbps
	PhysicalPortsSpeed   *int32                       `json:"physicalPortsSpeed,omitempty"`
	Redundancy           *CheckCapacityPortRedundancy `json:"redundancy,omitempty"`
	PhysicalPortsType    *PortPhysicalPortsType       `json:"physicalPortsType,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CheckCapacity CheckCapacity

// NewCheckCapacity instantiates a new CheckCapacity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckCapacity() *CheckCapacity {
	this := CheckCapacity{}
	return &this
}

// NewCheckCapacityWithDefaults instantiates a new CheckCapacity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckCapacityWithDefaults() *CheckCapacity {
	this := CheckCapacity{}
	return &this
}

// GetDemarcationPointIbx returns the DemarcationPointIbx field value if set, zero value otherwise.
func (o *CheckCapacity) GetDemarcationPointIbx() string {
	if o == nil || IsNil(o.DemarcationPointIbx) {
		var ret string
		return ret
	}
	return *o.DemarcationPointIbx
}

// GetDemarcationPointIbxOk returns a tuple with the DemarcationPointIbx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckCapacity) GetDemarcationPointIbxOk() (*string, bool) {
	if o == nil || IsNil(o.DemarcationPointIbx) {
		return nil, false
	}
	return o.DemarcationPointIbx, true
}

// HasDemarcationPointIbx returns a boolean if a field has been set.
func (o *CheckCapacity) HasDemarcationPointIbx() bool {
	if o != nil && !IsNil(o.DemarcationPointIbx) {
		return true
	}

	return false
}

// SetDemarcationPointIbx gets a reference to the given string and assigns it to the DemarcationPointIbx field.
func (o *CheckCapacity) SetDemarcationPointIbx(v string) {
	o.DemarcationPointIbx = &v
}

// GetTetherIbx returns the TetherIbx field value if set, zero value otherwise.
func (o *CheckCapacity) GetTetherIbx() string {
	if o == nil || IsNil(o.TetherIbx) {
		var ret string
		return ret
	}
	return *o.TetherIbx
}

// GetTetherIbxOk returns a tuple with the TetherIbx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckCapacity) GetTetherIbxOk() (*string, bool) {
	if o == nil || IsNil(o.TetherIbx) {
		return nil, false
	}
	return o.TetherIbx, true
}

// HasTetherIbx returns a boolean if a field has been set.
func (o *CheckCapacity) HasTetherIbx() bool {
	if o != nil && !IsNil(o.TetherIbx) {
		return true
	}

	return false
}

// SetTetherIbx gets a reference to the given string and assigns it to the TetherIbx field.
func (o *CheckCapacity) SetTetherIbx(v string) {
	o.TetherIbx = &v
}

// GetMetroConnectUsed returns the MetroConnectUsed field value if set, zero value otherwise.
func (o *CheckCapacity) GetMetroConnectUsed() bool {
	if o == nil || IsNil(o.MetroConnectUsed) {
		var ret bool
		return ret
	}
	return *o.MetroConnectUsed
}

// GetMetroConnectUsedOk returns a tuple with the MetroConnectUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckCapacity) GetMetroConnectUsedOk() (*bool, bool) {
	if o == nil || IsNil(o.MetroConnectUsed) {
		return nil, false
	}
	return o.MetroConnectUsed, true
}

// HasMetroConnectUsed returns a boolean if a field has been set.
func (o *CheckCapacity) HasMetroConnectUsed() bool {
	if o != nil && !IsNil(o.MetroConnectUsed) {
		return true
	}

	return false
}

// SetMetroConnectUsed gets a reference to the given bool and assigns it to the MetroConnectUsed field.
func (o *CheckCapacity) SetMetroConnectUsed(v bool) {
	o.MetroConnectUsed = &v
}

// GetCampusCrossConnectUsed returns the CampusCrossConnectUsed field value if set, zero value otherwise.
func (o *CheckCapacity) GetCampusCrossConnectUsed() bool {
	if o == nil || IsNil(o.CampusCrossConnectUsed) {
		var ret bool
		return ret
	}
	return *o.CampusCrossConnectUsed
}

// GetCampusCrossConnectUsedOk returns a tuple with the CampusCrossConnectUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckCapacity) GetCampusCrossConnectUsedOk() (*bool, bool) {
	if o == nil || IsNil(o.CampusCrossConnectUsed) {
		return nil, false
	}
	return o.CampusCrossConnectUsed, true
}

// HasCampusCrossConnectUsed returns a boolean if a field has been set.
func (o *CheckCapacity) HasCampusCrossConnectUsed() bool {
	if o != nil && !IsNil(o.CampusCrossConnectUsed) {
		return true
	}

	return false
}

// SetCampusCrossConnectUsed gets a reference to the given bool and assigns it to the CampusCrossConnectUsed field.
func (o *CheckCapacity) SetCampusCrossConnectUsed(v bool) {
	o.CampusCrossConnectUsed = &v
}

// GetLagEnabled returns the LagEnabled field value if set, zero value otherwise.
func (o *CheckCapacity) GetLagEnabled() bool {
	if o == nil || IsNil(o.LagEnabled) {
		var ret bool
		return ret
	}
	return *o.LagEnabled
}

// GetLagEnabledOk returns a tuple with the LagEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckCapacity) GetLagEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.LagEnabled) {
		return nil, false
	}
	return o.LagEnabled, true
}

// HasLagEnabled returns a boolean if a field has been set.
func (o *CheckCapacity) HasLagEnabled() bool {
	if o != nil && !IsNil(o.LagEnabled) {
		return true
	}

	return false
}

// SetLagEnabled gets a reference to the given bool and assigns it to the LagEnabled field.
func (o *CheckCapacity) SetLagEnabled(v bool) {
	o.LagEnabled = &v
}

// GetPhysicalPortsSpeed returns the PhysicalPortsSpeed field value if set, zero value otherwise.
func (o *CheckCapacity) GetPhysicalPortsSpeed() int32 {
	if o == nil || IsNil(o.PhysicalPortsSpeed) {
		var ret int32
		return ret
	}
	return *o.PhysicalPortsSpeed
}

// GetPhysicalPortsSpeedOk returns a tuple with the PhysicalPortsSpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckCapacity) GetPhysicalPortsSpeedOk() (*int32, bool) {
	if o == nil || IsNil(o.PhysicalPortsSpeed) {
		return nil, false
	}
	return o.PhysicalPortsSpeed, true
}

// HasPhysicalPortsSpeed returns a boolean if a field has been set.
func (o *CheckCapacity) HasPhysicalPortsSpeed() bool {
	if o != nil && !IsNil(o.PhysicalPortsSpeed) {
		return true
	}

	return false
}

// SetPhysicalPortsSpeed gets a reference to the given int32 and assigns it to the PhysicalPortsSpeed field.
func (o *CheckCapacity) SetPhysicalPortsSpeed(v int32) {
	o.PhysicalPortsSpeed = &v
}

// GetRedundancy returns the Redundancy field value if set, zero value otherwise.
func (o *CheckCapacity) GetRedundancy() CheckCapacityPortRedundancy {
	if o == nil || IsNil(o.Redundancy) {
		var ret CheckCapacityPortRedundancy
		return ret
	}
	return *o.Redundancy
}

// GetRedundancyOk returns a tuple with the Redundancy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckCapacity) GetRedundancyOk() (*CheckCapacityPortRedundancy, bool) {
	if o == nil || IsNil(o.Redundancy) {
		return nil, false
	}
	return o.Redundancy, true
}

// HasRedundancy returns a boolean if a field has been set.
func (o *CheckCapacity) HasRedundancy() bool {
	if o != nil && !IsNil(o.Redundancy) {
		return true
	}

	return false
}

// SetRedundancy gets a reference to the given CheckCapacityPortRedundancy and assigns it to the Redundancy field.
func (o *CheckCapacity) SetRedundancy(v CheckCapacityPortRedundancy) {
	o.Redundancy = &v
}

// GetPhysicalPortsType returns the PhysicalPortsType field value if set, zero value otherwise.
func (o *CheckCapacity) GetPhysicalPortsType() PortPhysicalPortsType {
	if o == nil || IsNil(o.PhysicalPortsType) {
		var ret PortPhysicalPortsType
		return ret
	}
	return *o.PhysicalPortsType
}

// GetPhysicalPortsTypeOk returns a tuple with the PhysicalPortsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckCapacity) GetPhysicalPortsTypeOk() (*PortPhysicalPortsType, bool) {
	if o == nil || IsNil(o.PhysicalPortsType) {
		return nil, false
	}
	return o.PhysicalPortsType, true
}

// HasPhysicalPortsType returns a boolean if a field has been set.
func (o *CheckCapacity) HasPhysicalPortsType() bool {
	if o != nil && !IsNil(o.PhysicalPortsType) {
		return true
	}

	return false
}

// SetPhysicalPortsType gets a reference to the given PortPhysicalPortsType and assigns it to the PhysicalPortsType field.
func (o *CheckCapacity) SetPhysicalPortsType(v PortPhysicalPortsType) {
	o.PhysicalPortsType = &v
}

func (o CheckCapacity) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckCapacity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DemarcationPointIbx) {
		toSerialize["demarcationPointIbx"] = o.DemarcationPointIbx
	}
	if !IsNil(o.TetherIbx) {
		toSerialize["tetherIbx"] = o.TetherIbx
	}
	if !IsNil(o.MetroConnectUsed) {
		toSerialize["metroConnectUsed"] = o.MetroConnectUsed
	}
	if !IsNil(o.CampusCrossConnectUsed) {
		toSerialize["campusCrossConnectUsed"] = o.CampusCrossConnectUsed
	}
	if !IsNil(o.LagEnabled) {
		toSerialize["lagEnabled"] = o.LagEnabled
	}
	if !IsNil(o.PhysicalPortsSpeed) {
		toSerialize["physicalPortsSpeed"] = o.PhysicalPortsSpeed
	}
	if !IsNil(o.Redundancy) {
		toSerialize["redundancy"] = o.Redundancy
	}
	if !IsNil(o.PhysicalPortsType) {
		toSerialize["physicalPortsType"] = o.PhysicalPortsType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CheckCapacity) UnmarshalJSON(data []byte) (err error) {
	varCheckCapacity := _CheckCapacity{}

	err = json.Unmarshal(data, &varCheckCapacity)

	if err != nil {
		return err
	}

	*o = CheckCapacity(varCheckCapacity)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "demarcationPointIbx")
		delete(additionalProperties, "tetherIbx")
		delete(additionalProperties, "metroConnectUsed")
		delete(additionalProperties, "campusCrossConnectUsed")
		delete(additionalProperties, "lagEnabled")
		delete(additionalProperties, "physicalPortsSpeed")
		delete(additionalProperties, "redundancy")
		delete(additionalProperties, "physicalPortsType")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCheckCapacity struct {
	value *CheckCapacity
	isSet bool
}

func (v NullableCheckCapacity) Get() *CheckCapacity {
	return v.value
}

func (v *NullableCheckCapacity) Set(val *CheckCapacity) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckCapacity) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckCapacity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckCapacity(val *CheckCapacity) *NullableCheckCapacity {
	return &NullableCheckCapacity{value: val, isSet: true}
}

func (v NullableCheckCapacity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckCapacity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
