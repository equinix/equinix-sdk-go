/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the PeeringProtocolData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PeeringProtocolData{}

// PeeringProtocolData struct for PeeringProtocolData
type PeeringProtocolData struct {
	// Peering Protocol URI
	Href *string `json:"href,omitempty"`
	// Peering protocol identifier
	Uuid *string                  `json:"uuid,omitempty"`
	Type *PeeringProtocolDataType `json:"type,omitempty"`
	// Protocol Name
	Name *string `json:"name,omitempty"`
	// Protocol Description
	Description *string `json:"description,omitempty"`
	// Customer ASN
	CustomerAsn *int64 `json:"customerAsn,omitempty"`
	// Equinix ASN
	EquinixAsn *int64                    `json:"equinixAsn,omitempty"`
	State      *PeeringProtocolDataState `json:"state,omitempty"`
	// MAC Address of The Peering Protocol
	MacAddress           *string                             `json:"macAddress,omitempty"`
	BgpIpv4              *PeeringConnectionResIpv4           `json:"bgpIpv4,omitempty"`
	BgpIpv6              *PeeringConnectionResIpv6           `json:"bgpIpv6,omitempty"`
	RouteCollectors      *PeeringProtocolDataRouteCollectors `json:"routeCollectors,omitempty"`
	Changelog            *Changelog                          `json:"changelog,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PeeringProtocolData PeeringProtocolData

// NewPeeringProtocolData instantiates a new PeeringProtocolData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPeeringProtocolData() *PeeringProtocolData {
	this := PeeringProtocolData{}
	return &this
}

// NewPeeringProtocolDataWithDefaults instantiates a new PeeringProtocolData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPeeringProtocolDataWithDefaults() *PeeringProtocolData {
	this := PeeringProtocolData{}
	return &this
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *PeeringProtocolData) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeeringProtocolData) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *PeeringProtocolData) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *PeeringProtocolData) SetHref(v string) {
	o.Href = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *PeeringProtocolData) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeeringProtocolData) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *PeeringProtocolData) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *PeeringProtocolData) SetUuid(v string) {
	o.Uuid = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PeeringProtocolData) GetType() PeeringProtocolDataType {
	if o == nil || IsNil(o.Type) {
		var ret PeeringProtocolDataType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeeringProtocolData) GetTypeOk() (*PeeringProtocolDataType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PeeringProtocolData) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given PeeringProtocolDataType and assigns it to the Type field.
func (o *PeeringProtocolData) SetType(v PeeringProtocolDataType) {
	o.Type = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PeeringProtocolData) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeeringProtocolData) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PeeringProtocolData) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PeeringProtocolData) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PeeringProtocolData) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeeringProtocolData) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PeeringProtocolData) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PeeringProtocolData) SetDescription(v string) {
	o.Description = &v
}

// GetCustomerAsn returns the CustomerAsn field value if set, zero value otherwise.
func (o *PeeringProtocolData) GetCustomerAsn() int64 {
	if o == nil || IsNil(o.CustomerAsn) {
		var ret int64
		return ret
	}
	return *o.CustomerAsn
}

// GetCustomerAsnOk returns a tuple with the CustomerAsn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeeringProtocolData) GetCustomerAsnOk() (*int64, bool) {
	if o == nil || IsNil(o.CustomerAsn) {
		return nil, false
	}
	return o.CustomerAsn, true
}

// HasCustomerAsn returns a boolean if a field has been set.
func (o *PeeringProtocolData) HasCustomerAsn() bool {
	if o != nil && !IsNil(o.CustomerAsn) {
		return true
	}

	return false
}

// SetCustomerAsn gets a reference to the given int64 and assigns it to the CustomerAsn field.
func (o *PeeringProtocolData) SetCustomerAsn(v int64) {
	o.CustomerAsn = &v
}

// GetEquinixAsn returns the EquinixAsn field value if set, zero value otherwise.
func (o *PeeringProtocolData) GetEquinixAsn() int64 {
	if o == nil || IsNil(o.EquinixAsn) {
		var ret int64
		return ret
	}
	return *o.EquinixAsn
}

// GetEquinixAsnOk returns a tuple with the EquinixAsn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeeringProtocolData) GetEquinixAsnOk() (*int64, bool) {
	if o == nil || IsNil(o.EquinixAsn) {
		return nil, false
	}
	return o.EquinixAsn, true
}

// HasEquinixAsn returns a boolean if a field has been set.
func (o *PeeringProtocolData) HasEquinixAsn() bool {
	if o != nil && !IsNil(o.EquinixAsn) {
		return true
	}

	return false
}

// SetEquinixAsn gets a reference to the given int64 and assigns it to the EquinixAsn field.
func (o *PeeringProtocolData) SetEquinixAsn(v int64) {
	o.EquinixAsn = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *PeeringProtocolData) GetState() PeeringProtocolDataState {
	if o == nil || IsNil(o.State) {
		var ret PeeringProtocolDataState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeeringProtocolData) GetStateOk() (*PeeringProtocolDataState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *PeeringProtocolData) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given PeeringProtocolDataState and assigns it to the State field.
func (o *PeeringProtocolData) SetState(v PeeringProtocolDataState) {
	o.State = &v
}

// GetMacAddress returns the MacAddress field value if set, zero value otherwise.
func (o *PeeringProtocolData) GetMacAddress() string {
	if o == nil || IsNil(o.MacAddress) {
		var ret string
		return ret
	}
	return *o.MacAddress
}

// GetMacAddressOk returns a tuple with the MacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeeringProtocolData) GetMacAddressOk() (*string, bool) {
	if o == nil || IsNil(o.MacAddress) {
		return nil, false
	}
	return o.MacAddress, true
}

// HasMacAddress returns a boolean if a field has been set.
func (o *PeeringProtocolData) HasMacAddress() bool {
	if o != nil && !IsNil(o.MacAddress) {
		return true
	}

	return false
}

// SetMacAddress gets a reference to the given string and assigns it to the MacAddress field.
func (o *PeeringProtocolData) SetMacAddress(v string) {
	o.MacAddress = &v
}

// GetBgpIpv4 returns the BgpIpv4 field value if set, zero value otherwise.
func (o *PeeringProtocolData) GetBgpIpv4() PeeringConnectionResIpv4 {
	if o == nil || IsNil(o.BgpIpv4) {
		var ret PeeringConnectionResIpv4
		return ret
	}
	return *o.BgpIpv4
}

// GetBgpIpv4Ok returns a tuple with the BgpIpv4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeeringProtocolData) GetBgpIpv4Ok() (*PeeringConnectionResIpv4, bool) {
	if o == nil || IsNil(o.BgpIpv4) {
		return nil, false
	}
	return o.BgpIpv4, true
}

// HasBgpIpv4 returns a boolean if a field has been set.
func (o *PeeringProtocolData) HasBgpIpv4() bool {
	if o != nil && !IsNil(o.BgpIpv4) {
		return true
	}

	return false
}

// SetBgpIpv4 gets a reference to the given PeeringConnectionResIpv4 and assigns it to the BgpIpv4 field.
func (o *PeeringProtocolData) SetBgpIpv4(v PeeringConnectionResIpv4) {
	o.BgpIpv4 = &v
}

// GetBgpIpv6 returns the BgpIpv6 field value if set, zero value otherwise.
func (o *PeeringProtocolData) GetBgpIpv6() PeeringConnectionResIpv6 {
	if o == nil || IsNil(o.BgpIpv6) {
		var ret PeeringConnectionResIpv6
		return ret
	}
	return *o.BgpIpv6
}

// GetBgpIpv6Ok returns a tuple with the BgpIpv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeeringProtocolData) GetBgpIpv6Ok() (*PeeringConnectionResIpv6, bool) {
	if o == nil || IsNil(o.BgpIpv6) {
		return nil, false
	}
	return o.BgpIpv6, true
}

// HasBgpIpv6 returns a boolean if a field has been set.
func (o *PeeringProtocolData) HasBgpIpv6() bool {
	if o != nil && !IsNil(o.BgpIpv6) {
		return true
	}

	return false
}

// SetBgpIpv6 gets a reference to the given PeeringConnectionResIpv6 and assigns it to the BgpIpv6 field.
func (o *PeeringProtocolData) SetBgpIpv6(v PeeringConnectionResIpv6) {
	o.BgpIpv6 = &v
}

// GetRouteCollectors returns the RouteCollectors field value if set, zero value otherwise.
func (o *PeeringProtocolData) GetRouteCollectors() PeeringProtocolDataRouteCollectors {
	if o == nil || IsNil(o.RouteCollectors) {
		var ret PeeringProtocolDataRouteCollectors
		return ret
	}
	return *o.RouteCollectors
}

// GetRouteCollectorsOk returns a tuple with the RouteCollectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeeringProtocolData) GetRouteCollectorsOk() (*PeeringProtocolDataRouteCollectors, bool) {
	if o == nil || IsNil(o.RouteCollectors) {
		return nil, false
	}
	return o.RouteCollectors, true
}

// HasRouteCollectors returns a boolean if a field has been set.
func (o *PeeringProtocolData) HasRouteCollectors() bool {
	if o != nil && !IsNil(o.RouteCollectors) {
		return true
	}

	return false
}

// SetRouteCollectors gets a reference to the given PeeringProtocolDataRouteCollectors and assigns it to the RouteCollectors field.
func (o *PeeringProtocolData) SetRouteCollectors(v PeeringProtocolDataRouteCollectors) {
	o.RouteCollectors = &v
}

// GetChangelog returns the Changelog field value if set, zero value otherwise.
func (o *PeeringProtocolData) GetChangelog() Changelog {
	if o == nil || IsNil(o.Changelog) {
		var ret Changelog
		return ret
	}
	return *o.Changelog
}

// GetChangelogOk returns a tuple with the Changelog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeeringProtocolData) GetChangelogOk() (*Changelog, bool) {
	if o == nil || IsNil(o.Changelog) {
		return nil, false
	}
	return o.Changelog, true
}

// HasChangelog returns a boolean if a field has been set.
func (o *PeeringProtocolData) HasChangelog() bool {
	if o != nil && !IsNil(o.Changelog) {
		return true
	}

	return false
}

// SetChangelog gets a reference to the given Changelog and assigns it to the Changelog field.
func (o *PeeringProtocolData) SetChangelog(v Changelog) {
	o.Changelog = &v
}

func (o PeeringProtocolData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PeeringProtocolData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.CustomerAsn) {
		toSerialize["customerAsn"] = o.CustomerAsn
	}
	if !IsNil(o.EquinixAsn) {
		toSerialize["equinixAsn"] = o.EquinixAsn
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.MacAddress) {
		toSerialize["macAddress"] = o.MacAddress
	}
	if !IsNil(o.BgpIpv4) {
		toSerialize["bgpIpv4"] = o.BgpIpv4
	}
	if !IsNil(o.BgpIpv6) {
		toSerialize["bgpIpv6"] = o.BgpIpv6
	}
	if !IsNil(o.RouteCollectors) {
		toSerialize["routeCollectors"] = o.RouteCollectors
	}
	if !IsNil(o.Changelog) {
		toSerialize["changelog"] = o.Changelog
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PeeringProtocolData) UnmarshalJSON(data []byte) (err error) {
	varPeeringProtocolData := _PeeringProtocolData{}

	err = json.Unmarshal(data, &varPeeringProtocolData)

	if err != nil {
		return err
	}

	*o = PeeringProtocolData(varPeeringProtocolData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "href")
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "type")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "customerAsn")
		delete(additionalProperties, "equinixAsn")
		delete(additionalProperties, "state")
		delete(additionalProperties, "macAddress")
		delete(additionalProperties, "bgpIpv4")
		delete(additionalProperties, "bgpIpv6")
		delete(additionalProperties, "routeCollectors")
		delete(additionalProperties, "changelog")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePeeringProtocolData struct {
	value *PeeringProtocolData
	isSet bool
}

func (v NullablePeeringProtocolData) Get() *PeeringProtocolData {
	return v.value
}

func (v *NullablePeeringProtocolData) Set(val *PeeringProtocolData) {
	v.value = val
	v.isSet = true
}

func (v NullablePeeringProtocolData) IsSet() bool {
	return v.isSet
}

func (v *NullablePeeringProtocolData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePeeringProtocolData(val *PeeringProtocolData) *NullablePeeringProtocolData {
	return &NullablePeeringProtocolData{value: val, isSet: true}
}

func (v NullablePeeringProtocolData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePeeringProtocolData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
