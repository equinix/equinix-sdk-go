/*
Equinix Fabric API v4

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the TimeServiceOrFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimeServiceOrFilter{}

// TimeServiceOrFilter struct for TimeServiceOrFilter
type TimeServiceOrFilter struct {
	Or                   []TimeServiceSimpleExpression `json:"or,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TimeServiceOrFilter TimeServiceOrFilter

// NewTimeServiceOrFilter instantiates a new TimeServiceOrFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeServiceOrFilter() *TimeServiceOrFilter {
	this := TimeServiceOrFilter{}
	return &this
}

// NewTimeServiceOrFilterWithDefaults instantiates a new TimeServiceOrFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeServiceOrFilterWithDefaults() *TimeServiceOrFilter {
	this := TimeServiceOrFilter{}
	return &this
}

// GetOr returns the Or field value if set, zero value otherwise.
func (o *TimeServiceOrFilter) GetOr() []TimeServiceSimpleExpression {
	if o == nil || IsNil(o.Or) {
		var ret []TimeServiceSimpleExpression
		return ret
	}
	return o.Or
}

// GetOrOk returns a tuple with the Or field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeServiceOrFilter) GetOrOk() ([]TimeServiceSimpleExpression, bool) {
	if o == nil || IsNil(o.Or) {
		return nil, false
	}
	return o.Or, true
}

// HasOr returns a boolean if a field has been set.
func (o *TimeServiceOrFilter) HasOr() bool {
	if o != nil && !IsNil(o.Or) {
		return true
	}

	return false
}

// SetOr gets a reference to the given []TimeServiceSimpleExpression and assigns it to the Or field.
func (o *TimeServiceOrFilter) SetOr(v []TimeServiceSimpleExpression) {
	o.Or = v
}

func (o TimeServiceOrFilter) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimeServiceOrFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Or) {
		toSerialize["or"] = o.Or
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TimeServiceOrFilter) UnmarshalJSON(data []byte) (err error) {
	varTimeServiceOrFilter := _TimeServiceOrFilter{}

	err = json.Unmarshal(data, &varTimeServiceOrFilter)

	if err != nil {
		return err
	}

	*o = TimeServiceOrFilter(varTimeServiceOrFilter)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "or")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTimeServiceOrFilter struct {
	value *TimeServiceOrFilter
	isSet bool
}

func (v NullableTimeServiceOrFilter) Get() *TimeServiceOrFilter {
	return v.value
}

func (v *NullableTimeServiceOrFilter) Set(val *TimeServiceOrFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeServiceOrFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeServiceOrFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeServiceOrFilter(val *TimeServiceOrFilter) *NullableTimeServiceOrFilter {
	return &NullableTimeServiceOrFilter{value: val, isSet: true}
}

func (v NullableTimeServiceOrFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeServiceOrFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
