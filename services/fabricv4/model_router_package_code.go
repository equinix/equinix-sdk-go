/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// RouterPackageCode Router package code
type RouterPackageCode string

// List of RouterPackageCode
const (
	ROUTERPACKAGECODE_LAB      RouterPackageCode = "LAB"
	ROUTERPACKAGECODE_BASIC    RouterPackageCode = "BASIC"
	ROUTERPACKAGECODE_STANDARD RouterPackageCode = "STANDARD"
	ROUTERPACKAGECODE_ADVANCED RouterPackageCode = "ADVANCED"
	ROUTERPACKAGECODE_PREMIUM  RouterPackageCode = "PREMIUM"
)

// All allowed values of RouterPackageCode enum
var AllowedRouterPackageCodeEnumValues = []RouterPackageCode{
	"LAB",
	"BASIC",
	"STANDARD",
	"ADVANCED",
	"PREMIUM",
}

func (v *RouterPackageCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RouterPackageCode(value)
	for _, existing := range AllowedRouterPackageCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RouterPackageCode", value)
}

// NewRouterPackageCodeFromValue returns a pointer to a valid RouterPackageCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRouterPackageCodeFromValue(v string) (*RouterPackageCode, error) {
	ev := RouterPackageCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RouterPackageCode: valid values are %v", v, AllowedRouterPackageCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RouterPackageCode) IsValid() bool {
	for _, existing := range AllowedRouterPackageCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RouterPackageCode value
func (v RouterPackageCode) Ptr() *RouterPackageCode {
	return &v
}

type NullableRouterPackageCode struct {
	value *RouterPackageCode
	isSet bool
}

func (v NullableRouterPackageCode) Get() *RouterPackageCode {
	return v.value
}

func (v *NullableRouterPackageCode) Set(val *RouterPackageCode) {
	v.value = val
	v.isSet = true
}

func (v NullableRouterPackageCode) IsSet() bool {
	return v.isSet
}

func (v *NullableRouterPackageCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouterPackageCode(val *RouterPackageCode) *NullableRouterPackageCode {
	return &NullableRouterPackageCode{value: val, isSet: true}
}

func (v NullableRouterPackageCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouterPackageCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
