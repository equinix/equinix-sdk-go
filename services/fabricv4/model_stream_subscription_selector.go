/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the StreamSubscriptionSelector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StreamSubscriptionSelector{}

// StreamSubscriptionSelector struct for StreamSubscriptionSelector
type StreamSubscriptionSelector struct {
	Include              []string `json:"include,omitempty"`
	Except               []string `json:"except,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StreamSubscriptionSelector StreamSubscriptionSelector

// NewStreamSubscriptionSelector instantiates a new StreamSubscriptionSelector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStreamSubscriptionSelector() *StreamSubscriptionSelector {
	this := StreamSubscriptionSelector{}
	return &this
}

// NewStreamSubscriptionSelectorWithDefaults instantiates a new StreamSubscriptionSelector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStreamSubscriptionSelectorWithDefaults() *StreamSubscriptionSelector {
	this := StreamSubscriptionSelector{}
	return &this
}

// GetInclude returns the Include field value if set, zero value otherwise.
func (o *StreamSubscriptionSelector) GetInclude() []string {
	if o == nil || IsNil(o.Include) {
		var ret []string
		return ret
	}
	return o.Include
}

// GetIncludeOk returns a tuple with the Include field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscriptionSelector) GetIncludeOk() ([]string, bool) {
	if o == nil || IsNil(o.Include) {
		return nil, false
	}
	return o.Include, true
}

// HasInclude returns a boolean if a field has been set.
func (o *StreamSubscriptionSelector) HasInclude() bool {
	if o != nil && !IsNil(o.Include) {
		return true
	}

	return false
}

// SetInclude gets a reference to the given []string and assigns it to the Include field.
func (o *StreamSubscriptionSelector) SetInclude(v []string) {
	o.Include = v
}

// GetExcept returns the Except field value if set, zero value otherwise.
func (o *StreamSubscriptionSelector) GetExcept() []string {
	if o == nil || IsNil(o.Except) {
		var ret []string
		return ret
	}
	return o.Except
}

// GetExceptOk returns a tuple with the Except field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscriptionSelector) GetExceptOk() ([]string, bool) {
	if o == nil || IsNil(o.Except) {
		return nil, false
	}
	return o.Except, true
}

// HasExcept returns a boolean if a field has been set.
func (o *StreamSubscriptionSelector) HasExcept() bool {
	if o != nil && !IsNil(o.Except) {
		return true
	}

	return false
}

// SetExcept gets a reference to the given []string and assigns it to the Except field.
func (o *StreamSubscriptionSelector) SetExcept(v []string) {
	o.Except = v
}

func (o StreamSubscriptionSelector) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StreamSubscriptionSelector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Include) {
		toSerialize["include"] = o.Include
	}
	if !IsNil(o.Except) {
		toSerialize["except"] = o.Except
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StreamSubscriptionSelector) UnmarshalJSON(data []byte) (err error) {
	varStreamSubscriptionSelector := _StreamSubscriptionSelector{}

	err = json.Unmarshal(data, &varStreamSubscriptionSelector)

	if err != nil {
		return err
	}

	*o = StreamSubscriptionSelector(varStreamSubscriptionSelector)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "include")
		delete(additionalProperties, "except")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStreamSubscriptionSelector struct {
	value *StreamSubscriptionSelector
	isSet bool
}

func (v NullableStreamSubscriptionSelector) Get() *StreamSubscriptionSelector {
	return v.value
}

func (v *NullableStreamSubscriptionSelector) Set(val *StreamSubscriptionSelector) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamSubscriptionSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamSubscriptionSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamSubscriptionSelector(val *StreamSubscriptionSelector) *NullableStreamSubscriptionSelector {
	return &NullableStreamSubscriptionSelector{value: val, isSet: true}
}

func (v NullableStreamSubscriptionSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamSubscriptionSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
