/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// PortChangeType Type of change
type PortChangeType string

// List of PortChange_type
const (
	PORTCHANGETYPE_CREATION PortChangeType = "PORT_CREATION"
	PORTCHANGETYPE_UPDATE   PortChangeType = "PORT_UPDATE"
	PORTCHANGETYPE_DELETION PortChangeType = "PORT_DELETION"
)

// All allowed values of PortChangeType enum
var AllowedPortChangeTypeEnumValues = []PortChangeType{
	"PORT_CREATION",
	"PORT_UPDATE",
	"PORT_DELETION",
}

func (v *PortChangeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PortChangeType(value)
	for _, existing := range AllowedPortChangeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PortChangeType", value)
}

// NewPortChangeTypeFromValue returns a pointer to a valid PortChangeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPortChangeTypeFromValue(v string) (*PortChangeType, error) {
	ev := PortChangeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PortChangeType: valid values are %v", v, AllowedPortChangeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PortChangeType) IsValid() bool {
	for _, existing := range AllowedPortChangeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PortChange_type value
func (v PortChangeType) Ptr() *PortChangeType {
	return &v
}

type NullablePortChangeType struct {
	value *PortChangeType
	isSet bool
}

func (v NullablePortChangeType) Get() *PortChangeType {
	return v.value
}

func (v *NullablePortChangeType) Set(val *PortChangeType) {
	v.value = val
	v.isSet = true
}

func (v NullablePortChangeType) IsSet() bool {
	return v.isSet
}

func (v *NullablePortChangeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortChangeType(val *PortChangeType) *NullablePortChangeType {
	return &NullablePortChangeType{value: val, isSet: true}
}

func (v NullablePortChangeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortChangeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
