/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the MetalInterconnection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetalInterconnection{}

// MetalInterconnection Metal Interconnection
type MetalInterconnection struct {
	// Equinix Metal Interconnection
	Uuid                 *string `json:"uuid,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MetalInterconnection MetalInterconnection

// NewMetalInterconnection instantiates a new MetalInterconnection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetalInterconnection() *MetalInterconnection {
	this := MetalInterconnection{}
	return &this
}

// NewMetalInterconnectionWithDefaults instantiates a new MetalInterconnection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetalInterconnectionWithDefaults() *MetalInterconnection {
	this := MetalInterconnection{}
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *MetalInterconnection) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetalInterconnection) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *MetalInterconnection) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *MetalInterconnection) SetUuid(v string) {
	o.Uuid = &v
}

func (o MetalInterconnection) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetalInterconnection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MetalInterconnection) UnmarshalJSON(data []byte) (err error) {
	varMetalInterconnection := _MetalInterconnection{}

	err = json.Unmarshal(data, &varMetalInterconnection)

	if err != nil {
		return err
	}

	*o = MetalInterconnection(varMetalInterconnection)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "uuid")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMetalInterconnection struct {
	value *MetalInterconnection
	isSet bool
}

func (v NullableMetalInterconnection) Get() *MetalInterconnection {
	return v.value
}

func (v *NullableMetalInterconnection) Set(val *MetalInterconnection) {
	v.value = val
	v.isSet = true
}

func (v NullableMetalInterconnection) IsSet() bool {
	return v.isSet
}

func (v *NullableMetalInterconnection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetalInterconnection(val *MetalInterconnection) *NullableMetalInterconnection {
	return &NullableMetalInterconnection{value: val, isSet: true}
}

func (v NullableMetalInterconnection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetalInterconnection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
