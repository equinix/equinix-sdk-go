/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// PeeringConnectionResIpv4AuthKeysType Type of BGP authentication key
type PeeringConnectionResIpv4AuthKeysType string

// List of PeeringConnectionResIpv4_authKeys_type
const (
	PEERINGCONNECTIONRESIPV4AUTHKEYSTYPE_MD5    PeeringConnectionResIpv4AuthKeysType = "MD5"
	PEERINGCONNECTIONRESIPV4AUTHKEYSTYPE_RC_MD5 PeeringConnectionResIpv4AuthKeysType = "RC-MD5"
)

// All allowed values of PeeringConnectionResIpv4AuthKeysType enum
var AllowedPeeringConnectionResIpv4AuthKeysTypeEnumValues = []PeeringConnectionResIpv4AuthKeysType{
	"MD5",
	"RC-MD5",
}

func (v *PeeringConnectionResIpv4AuthKeysType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PeeringConnectionResIpv4AuthKeysType(value)
	for _, existing := range AllowedPeeringConnectionResIpv4AuthKeysTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PeeringConnectionResIpv4AuthKeysType", value)
}

// NewPeeringConnectionResIpv4AuthKeysTypeFromValue returns a pointer to a valid PeeringConnectionResIpv4AuthKeysType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPeeringConnectionResIpv4AuthKeysTypeFromValue(v string) (*PeeringConnectionResIpv4AuthKeysType, error) {
	ev := PeeringConnectionResIpv4AuthKeysType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PeeringConnectionResIpv4AuthKeysType: valid values are %v", v, AllowedPeeringConnectionResIpv4AuthKeysTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PeeringConnectionResIpv4AuthKeysType) IsValid() bool {
	for _, existing := range AllowedPeeringConnectionResIpv4AuthKeysTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PeeringConnectionResIpv4_authKeys_type value
func (v PeeringConnectionResIpv4AuthKeysType) Ptr() *PeeringConnectionResIpv4AuthKeysType {
	return &v
}

type NullablePeeringConnectionResIpv4AuthKeysType struct {
	value *PeeringConnectionResIpv4AuthKeysType
	isSet bool
}

func (v NullablePeeringConnectionResIpv4AuthKeysType) Get() *PeeringConnectionResIpv4AuthKeysType {
	return v.value
}

func (v *NullablePeeringConnectionResIpv4AuthKeysType) Set(val *PeeringConnectionResIpv4AuthKeysType) {
	v.value = val
	v.isSet = true
}

func (v NullablePeeringConnectionResIpv4AuthKeysType) IsSet() bool {
	return v.isSet
}

func (v *NullablePeeringConnectionResIpv4AuthKeysType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePeeringConnectionResIpv4AuthKeysType(val *PeeringConnectionResIpv4AuthKeysType) *NullablePeeringConnectionResIpv4AuthKeysType {
	return &NullablePeeringConnectionResIpv4AuthKeysType{value: val, isSet: true}
}

func (v NullablePeeringConnectionResIpv4AuthKeysType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePeeringConnectionResIpv4AuthKeysType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
