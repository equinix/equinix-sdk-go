/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the StreamSubscriptionSink type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StreamSubscriptionSink{}

// StreamSubscriptionSink Create Stream destination
type StreamSubscriptionSink struct {
	// any publicly reachable http endpoint
	Uri  *string                     `json:"uri,omitempty"`
	Type *StreamSubscriptionSinkType `json:"type,omitempty"`
	// batch mode on/off
	BatchEnabled *bool `json:"batchEnabled,omitempty"`
	// maximum batch size
	BatchSizeMax *int32 `json:"batchSizeMax,omitempty"`
	// maximum batch waiting time
	BatchWaitTimeMax *int32                            `json:"batchWaitTimeMax,omitempty"`
	Credential       *StreamSubscriptionSinkCredential `json:"credential,omitempty"`
	Settings         *StreamSubscriptionSinkSetting    `json:"settings,omitempty"`
	// sink host
	Host                 *string `json:"host,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StreamSubscriptionSink StreamSubscriptionSink

// NewStreamSubscriptionSink instantiates a new StreamSubscriptionSink object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStreamSubscriptionSink() *StreamSubscriptionSink {
	this := StreamSubscriptionSink{}
	return &this
}

// NewStreamSubscriptionSinkWithDefaults instantiates a new StreamSubscriptionSink object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStreamSubscriptionSinkWithDefaults() *StreamSubscriptionSink {
	this := StreamSubscriptionSink{}
	return &this
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *StreamSubscriptionSink) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscriptionSink) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *StreamSubscriptionSink) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *StreamSubscriptionSink) SetUri(v string) {
	o.Uri = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *StreamSubscriptionSink) GetType() StreamSubscriptionSinkType {
	if o == nil || IsNil(o.Type) {
		var ret StreamSubscriptionSinkType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscriptionSink) GetTypeOk() (*StreamSubscriptionSinkType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *StreamSubscriptionSink) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given StreamSubscriptionSinkType and assigns it to the Type field.
func (o *StreamSubscriptionSink) SetType(v StreamSubscriptionSinkType) {
	o.Type = &v
}

// GetBatchEnabled returns the BatchEnabled field value if set, zero value otherwise.
func (o *StreamSubscriptionSink) GetBatchEnabled() bool {
	if o == nil || IsNil(o.BatchEnabled) {
		var ret bool
		return ret
	}
	return *o.BatchEnabled
}

// GetBatchEnabledOk returns a tuple with the BatchEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscriptionSink) GetBatchEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.BatchEnabled) {
		return nil, false
	}
	return o.BatchEnabled, true
}

// HasBatchEnabled returns a boolean if a field has been set.
func (o *StreamSubscriptionSink) HasBatchEnabled() bool {
	if o != nil && !IsNil(o.BatchEnabled) {
		return true
	}

	return false
}

// SetBatchEnabled gets a reference to the given bool and assigns it to the BatchEnabled field.
func (o *StreamSubscriptionSink) SetBatchEnabled(v bool) {
	o.BatchEnabled = &v
}

// GetBatchSizeMax returns the BatchSizeMax field value if set, zero value otherwise.
func (o *StreamSubscriptionSink) GetBatchSizeMax() int32 {
	if o == nil || IsNil(o.BatchSizeMax) {
		var ret int32
		return ret
	}
	return *o.BatchSizeMax
}

// GetBatchSizeMaxOk returns a tuple with the BatchSizeMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscriptionSink) GetBatchSizeMaxOk() (*int32, bool) {
	if o == nil || IsNil(o.BatchSizeMax) {
		return nil, false
	}
	return o.BatchSizeMax, true
}

// HasBatchSizeMax returns a boolean if a field has been set.
func (o *StreamSubscriptionSink) HasBatchSizeMax() bool {
	if o != nil && !IsNil(o.BatchSizeMax) {
		return true
	}

	return false
}

// SetBatchSizeMax gets a reference to the given int32 and assigns it to the BatchSizeMax field.
func (o *StreamSubscriptionSink) SetBatchSizeMax(v int32) {
	o.BatchSizeMax = &v
}

// GetBatchWaitTimeMax returns the BatchWaitTimeMax field value if set, zero value otherwise.
func (o *StreamSubscriptionSink) GetBatchWaitTimeMax() int32 {
	if o == nil || IsNil(o.BatchWaitTimeMax) {
		var ret int32
		return ret
	}
	return *o.BatchWaitTimeMax
}

// GetBatchWaitTimeMaxOk returns a tuple with the BatchWaitTimeMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscriptionSink) GetBatchWaitTimeMaxOk() (*int32, bool) {
	if o == nil || IsNil(o.BatchWaitTimeMax) {
		return nil, false
	}
	return o.BatchWaitTimeMax, true
}

// HasBatchWaitTimeMax returns a boolean if a field has been set.
func (o *StreamSubscriptionSink) HasBatchWaitTimeMax() bool {
	if o != nil && !IsNil(o.BatchWaitTimeMax) {
		return true
	}

	return false
}

// SetBatchWaitTimeMax gets a reference to the given int32 and assigns it to the BatchWaitTimeMax field.
func (o *StreamSubscriptionSink) SetBatchWaitTimeMax(v int32) {
	o.BatchWaitTimeMax = &v
}

// GetCredential returns the Credential field value if set, zero value otherwise.
func (o *StreamSubscriptionSink) GetCredential() StreamSubscriptionSinkCredential {
	if o == nil || IsNil(o.Credential) {
		var ret StreamSubscriptionSinkCredential
		return ret
	}
	return *o.Credential
}

// GetCredentialOk returns a tuple with the Credential field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscriptionSink) GetCredentialOk() (*StreamSubscriptionSinkCredential, bool) {
	if o == nil || IsNil(o.Credential) {
		return nil, false
	}
	return o.Credential, true
}

// HasCredential returns a boolean if a field has been set.
func (o *StreamSubscriptionSink) HasCredential() bool {
	if o != nil && !IsNil(o.Credential) {
		return true
	}

	return false
}

// SetCredential gets a reference to the given StreamSubscriptionSinkCredential and assigns it to the Credential field.
func (o *StreamSubscriptionSink) SetCredential(v StreamSubscriptionSinkCredential) {
	o.Credential = &v
}

// GetSettings returns the Settings field value if set, zero value otherwise.
func (o *StreamSubscriptionSink) GetSettings() StreamSubscriptionSinkSetting {
	if o == nil || IsNil(o.Settings) {
		var ret StreamSubscriptionSinkSetting
		return ret
	}
	return *o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscriptionSink) GetSettingsOk() (*StreamSubscriptionSinkSetting, bool) {
	if o == nil || IsNil(o.Settings) {
		return nil, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *StreamSubscriptionSink) HasSettings() bool {
	if o != nil && !IsNil(o.Settings) {
		return true
	}

	return false
}

// SetSettings gets a reference to the given StreamSubscriptionSinkSetting and assigns it to the Settings field.
func (o *StreamSubscriptionSink) SetSettings(v StreamSubscriptionSinkSetting) {
	o.Settings = &v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *StreamSubscriptionSink) GetHost() string {
	if o == nil || IsNil(o.Host) {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscriptionSink) GetHostOk() (*string, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *StreamSubscriptionSink) HasHost() bool {
	if o != nil && !IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *StreamSubscriptionSink) SetHost(v string) {
	o.Host = &v
}

func (o StreamSubscriptionSink) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StreamSubscriptionSink) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.BatchEnabled) {
		toSerialize["batchEnabled"] = o.BatchEnabled
	}
	if !IsNil(o.BatchSizeMax) {
		toSerialize["batchSizeMax"] = o.BatchSizeMax
	}
	if !IsNil(o.BatchWaitTimeMax) {
		toSerialize["batchWaitTimeMax"] = o.BatchWaitTimeMax
	}
	if !IsNil(o.Credential) {
		toSerialize["credential"] = o.Credential
	}
	if !IsNil(o.Settings) {
		toSerialize["settings"] = o.Settings
	}
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StreamSubscriptionSink) UnmarshalJSON(data []byte) (err error) {
	varStreamSubscriptionSink := _StreamSubscriptionSink{}

	err = json.Unmarshal(data, &varStreamSubscriptionSink)

	if err != nil {
		return err
	}

	*o = StreamSubscriptionSink(varStreamSubscriptionSink)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "uri")
		delete(additionalProperties, "type")
		delete(additionalProperties, "batchEnabled")
		delete(additionalProperties, "batchSizeMax")
		delete(additionalProperties, "batchWaitTimeMax")
		delete(additionalProperties, "credential")
		delete(additionalProperties, "settings")
		delete(additionalProperties, "host")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStreamSubscriptionSink struct {
	value *StreamSubscriptionSink
	isSet bool
}

func (v NullableStreamSubscriptionSink) Get() *StreamSubscriptionSink {
	return v.value
}

func (v *NullableStreamSubscriptionSink) Set(val *StreamSubscriptionSink) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamSubscriptionSink) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamSubscriptionSink) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamSubscriptionSink(val *StreamSubscriptionSink) *NullableStreamSubscriptionSink {
	return &NullableStreamSubscriptionSink{value: val, isSet: true}
}

func (v NullableStreamSubscriptionSink) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamSubscriptionSink) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
