/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// checks if the ServiceProfileAccessPointVD type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceProfileAccessPointVD{}

// ServiceProfileAccessPointVD Virtual Device Point
type ServiceProfileAccessPointVD struct {
	Type                 ServiceProfileAccessPointVDType `json:"type"`
	Uuid                 string                          `json:"uuid"`
	Location             *SimplifiedLocation             `json:"location,omitempty"`
	InterfaceUuid        *string                         `json:"interfaceUuid,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServiceProfileAccessPointVD ServiceProfileAccessPointVD

// NewServiceProfileAccessPointVD instantiates a new ServiceProfileAccessPointVD object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceProfileAccessPointVD(type_ ServiceProfileAccessPointVDType, uuid string) *ServiceProfileAccessPointVD {
	this := ServiceProfileAccessPointVD{}
	this.Type = type_
	this.Uuid = uuid
	return &this
}

// NewServiceProfileAccessPointVDWithDefaults instantiates a new ServiceProfileAccessPointVD object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceProfileAccessPointVDWithDefaults() *ServiceProfileAccessPointVD {
	this := ServiceProfileAccessPointVD{}
	return &this
}

// GetType returns the Type field value
func (o *ServiceProfileAccessPointVD) GetType() ServiceProfileAccessPointVDType {
	if o == nil {
		var ret ServiceProfileAccessPointVDType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ServiceProfileAccessPointVD) GetTypeOk() (*ServiceProfileAccessPointVDType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ServiceProfileAccessPointVD) SetType(v ServiceProfileAccessPointVDType) {
	o.Type = v
}

// GetUuid returns the Uuid field value
func (o *ServiceProfileAccessPointVD) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *ServiceProfileAccessPointVD) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *ServiceProfileAccessPointVD) SetUuid(v string) {
	o.Uuid = v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *ServiceProfileAccessPointVD) GetLocation() SimplifiedLocation {
	if o == nil || IsNil(o.Location) {
		var ret SimplifiedLocation
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceProfileAccessPointVD) GetLocationOk() (*SimplifiedLocation, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *ServiceProfileAccessPointVD) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given SimplifiedLocation and assigns it to the Location field.
func (o *ServiceProfileAccessPointVD) SetLocation(v SimplifiedLocation) {
	o.Location = &v
}

// GetInterfaceUuid returns the InterfaceUuid field value if set, zero value otherwise.
func (o *ServiceProfileAccessPointVD) GetInterfaceUuid() string {
	if o == nil || IsNil(o.InterfaceUuid) {
		var ret string
		return ret
	}
	return *o.InterfaceUuid
}

// GetInterfaceUuidOk returns a tuple with the InterfaceUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceProfileAccessPointVD) GetInterfaceUuidOk() (*string, bool) {
	if o == nil || IsNil(o.InterfaceUuid) {
		return nil, false
	}
	return o.InterfaceUuid, true
}

// HasInterfaceUuid returns a boolean if a field has been set.
func (o *ServiceProfileAccessPointVD) HasInterfaceUuid() bool {
	if o != nil && !IsNil(o.InterfaceUuid) {
		return true
	}

	return false
}

// SetInterfaceUuid gets a reference to the given string and assigns it to the InterfaceUuid field.
func (o *ServiceProfileAccessPointVD) SetInterfaceUuid(v string) {
	o.InterfaceUuid = &v
}

func (o ServiceProfileAccessPointVD) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceProfileAccessPointVD) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["uuid"] = o.Uuid
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.InterfaceUuid) {
		toSerialize["interfaceUuid"] = o.InterfaceUuid
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServiceProfileAccessPointVD) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"uuid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServiceProfileAccessPointVD := _ServiceProfileAccessPointVD{}

	err = json.Unmarshal(data, &varServiceProfileAccessPointVD)

	if err != nil {
		return err
	}

	*o = ServiceProfileAccessPointVD(varServiceProfileAccessPointVD)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "location")
		delete(additionalProperties, "interfaceUuid")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServiceProfileAccessPointVD struct {
	value *ServiceProfileAccessPointVD
	isSet bool
}

func (v NullableServiceProfileAccessPointVD) Get() *ServiceProfileAccessPointVD {
	return v.value
}

func (v *NullableServiceProfileAccessPointVD) Set(val *ServiceProfileAccessPointVD) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceProfileAccessPointVD) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceProfileAccessPointVD) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceProfileAccessPointVD(val *ServiceProfileAccessPointVD) *NullableServiceProfileAccessPointVD {
	return &NullableServiceProfileAccessPointVD{value: val, isSet: true}
}

func (v NullableServiceProfileAccessPointVD) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceProfileAccessPointVD) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
