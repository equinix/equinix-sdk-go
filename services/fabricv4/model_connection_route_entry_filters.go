/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the ConnectionRouteEntryFilters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectionRouteEntryFilters{}

// ConnectionRouteEntryFilters struct for ConnectionRouteEntryFilters
type ConnectionRouteEntryFilters struct {
	And                  []ConnectionRouteEntryFilter `json:"and,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ConnectionRouteEntryFilters ConnectionRouteEntryFilters

// NewConnectionRouteEntryFilters instantiates a new ConnectionRouteEntryFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionRouteEntryFilters() *ConnectionRouteEntryFilters {
	this := ConnectionRouteEntryFilters{}
	return &this
}

// NewConnectionRouteEntryFiltersWithDefaults instantiates a new ConnectionRouteEntryFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionRouteEntryFiltersWithDefaults() *ConnectionRouteEntryFilters {
	this := ConnectionRouteEntryFilters{}
	return &this
}

// GetAnd returns the And field value if set, zero value otherwise.
func (o *ConnectionRouteEntryFilters) GetAnd() []ConnectionRouteEntryFilter {
	if o == nil || IsNil(o.And) {
		var ret []ConnectionRouteEntryFilter
		return ret
	}
	return o.And
}

// GetAndOk returns a tuple with the And field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionRouteEntryFilters) GetAndOk() ([]ConnectionRouteEntryFilter, bool) {
	if o == nil || IsNil(o.And) {
		return nil, false
	}
	return o.And, true
}

// HasAnd returns a boolean if a field has been set.
func (o *ConnectionRouteEntryFilters) HasAnd() bool {
	if o != nil && !IsNil(o.And) {
		return true
	}

	return false
}

// SetAnd gets a reference to the given []ConnectionRouteEntryFilter and assigns it to the And field.
func (o *ConnectionRouteEntryFilters) SetAnd(v []ConnectionRouteEntryFilter) {
	o.And = v
}

func (o ConnectionRouteEntryFilters) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectionRouteEntryFilters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.And) {
		toSerialize["and"] = o.And
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ConnectionRouteEntryFilters) UnmarshalJSON(data []byte) (err error) {
	varConnectionRouteEntryFilters := _ConnectionRouteEntryFilters{}

	err = json.Unmarshal(data, &varConnectionRouteEntryFilters)

	if err != nil {
		return err
	}

	*o = ConnectionRouteEntryFilters(varConnectionRouteEntryFilters)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "and")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableConnectionRouteEntryFilters struct {
	value *ConnectionRouteEntryFilters
	isSet bool
}

func (v NullableConnectionRouteEntryFilters) Get() *ConnectionRouteEntryFilters {
	return v.value
}

func (v *NullableConnectionRouteEntryFilters) Set(val *ConnectionRouteEntryFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionRouteEntryFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionRouteEntryFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionRouteEntryFilters(val *ConnectionRouteEntryFilters) *NullableConnectionRouteEntryFilters {
	return &NullableConnectionRouteEntryFilters{value: val, isSet: true}
}

func (v NullableConnectionRouteEntryFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionRouteEntryFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
