/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the Stream type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Stream{}

// Stream Stream object
type Stream struct {
	// Stream URI
	Href *string `json:"href,omitempty"`
	// Equinix-assigned access point identifier
	Uuid *string `json:"uuid,omitempty"`
	// Stream provision state
	State *string `json:"state,omitempty"`
	// Stream assets count
	AssetsCount *int32 `json:"assetsCount,omitempty"`
	// Stream subscriptions count
	StreamSubscriptionsCount *int32                 `json:"streamSubscriptionsCount,omitempty"`
	ChangeLog                *Changelog             `json:"changeLog,omitempty"`
	Type                     *StreamPostRequestType `json:"type,omitempty"`
	// Customer-provided stream name
	Name *string `json:"name,omitempty"`
	// Customer-provided stream description
	Description *string  `json:"description,omitempty"`
	Project     *Project `json:"project,omitempty"`
	// Stream enabled status
	Enabled              *bool `json:"enabled,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Stream Stream

// NewStream instantiates a new Stream object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStream() *Stream {
	this := Stream{}
	return &this
}

// NewStreamWithDefaults instantiates a new Stream object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStreamWithDefaults() *Stream {
	this := Stream{}
	return &this
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *Stream) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stream) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *Stream) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *Stream) SetHref(v string) {
	o.Href = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *Stream) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stream) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *Stream) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *Stream) SetUuid(v string) {
	o.Uuid = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Stream) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stream) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Stream) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *Stream) SetState(v string) {
	o.State = &v
}

// GetAssetsCount returns the AssetsCount field value if set, zero value otherwise.
func (o *Stream) GetAssetsCount() int32 {
	if o == nil || IsNil(o.AssetsCount) {
		var ret int32
		return ret
	}
	return *o.AssetsCount
}

// GetAssetsCountOk returns a tuple with the AssetsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stream) GetAssetsCountOk() (*int32, bool) {
	if o == nil || IsNil(o.AssetsCount) {
		return nil, false
	}
	return o.AssetsCount, true
}

// HasAssetsCount returns a boolean if a field has been set.
func (o *Stream) HasAssetsCount() bool {
	if o != nil && !IsNil(o.AssetsCount) {
		return true
	}

	return false
}

// SetAssetsCount gets a reference to the given int32 and assigns it to the AssetsCount field.
func (o *Stream) SetAssetsCount(v int32) {
	o.AssetsCount = &v
}

// GetStreamSubscriptionsCount returns the StreamSubscriptionsCount field value if set, zero value otherwise.
func (o *Stream) GetStreamSubscriptionsCount() int32 {
	if o == nil || IsNil(o.StreamSubscriptionsCount) {
		var ret int32
		return ret
	}
	return *o.StreamSubscriptionsCount
}

// GetStreamSubscriptionsCountOk returns a tuple with the StreamSubscriptionsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stream) GetStreamSubscriptionsCountOk() (*int32, bool) {
	if o == nil || IsNil(o.StreamSubscriptionsCount) {
		return nil, false
	}
	return o.StreamSubscriptionsCount, true
}

// HasStreamSubscriptionsCount returns a boolean if a field has been set.
func (o *Stream) HasStreamSubscriptionsCount() bool {
	if o != nil && !IsNil(o.StreamSubscriptionsCount) {
		return true
	}

	return false
}

// SetStreamSubscriptionsCount gets a reference to the given int32 and assigns it to the StreamSubscriptionsCount field.
func (o *Stream) SetStreamSubscriptionsCount(v int32) {
	o.StreamSubscriptionsCount = &v
}

// GetChangeLog returns the ChangeLog field value if set, zero value otherwise.
func (o *Stream) GetChangeLog() Changelog {
	if o == nil || IsNil(o.ChangeLog) {
		var ret Changelog
		return ret
	}
	return *o.ChangeLog
}

// GetChangeLogOk returns a tuple with the ChangeLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stream) GetChangeLogOk() (*Changelog, bool) {
	if o == nil || IsNil(o.ChangeLog) {
		return nil, false
	}
	return o.ChangeLog, true
}

// HasChangeLog returns a boolean if a field has been set.
func (o *Stream) HasChangeLog() bool {
	if o != nil && !IsNil(o.ChangeLog) {
		return true
	}

	return false
}

// SetChangeLog gets a reference to the given Changelog and assigns it to the ChangeLog field.
func (o *Stream) SetChangeLog(v Changelog) {
	o.ChangeLog = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Stream) GetType() StreamPostRequestType {
	if o == nil || IsNil(o.Type) {
		var ret StreamPostRequestType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stream) GetTypeOk() (*StreamPostRequestType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Stream) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given StreamPostRequestType and assigns it to the Type field.
func (o *Stream) SetType(v StreamPostRequestType) {
	o.Type = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Stream) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stream) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Stream) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Stream) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Stream) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stream) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Stream) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Stream) SetDescription(v string) {
	o.Description = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *Stream) GetProject() Project {
	if o == nil || IsNil(o.Project) {
		var ret Project
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stream) GetProjectOk() (*Project, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *Stream) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given Project and assigns it to the Project field.
func (o *Stream) SetProject(v Project) {
	o.Project = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *Stream) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stream) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *Stream) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *Stream) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o Stream) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Stream) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.AssetsCount) {
		toSerialize["assetsCount"] = o.AssetsCount
	}
	if !IsNil(o.StreamSubscriptionsCount) {
		toSerialize["streamSubscriptionsCount"] = o.StreamSubscriptionsCount
	}
	if !IsNil(o.ChangeLog) {
		toSerialize["changeLog"] = o.ChangeLog
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Stream) UnmarshalJSON(data []byte) (err error) {
	varStream := _Stream{}

	err = json.Unmarshal(data, &varStream)

	if err != nil {
		return err
	}

	*o = Stream(varStream)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "href")
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "state")
		delete(additionalProperties, "assetsCount")
		delete(additionalProperties, "streamSubscriptionsCount")
		delete(additionalProperties, "changeLog")
		delete(additionalProperties, "type")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "project")
		delete(additionalProperties, "enabled")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStream struct {
	value *Stream
	isSet bool
}

func (v NullableStream) Get() *Stream {
	return v.value
}

func (v *NullableStream) Set(val *Stream) {
	v.value = val
	v.isSet = true
}

func (v NullableStream) IsSet() bool {
	return v.isSet
}

func (v *NullableStream) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStream(val *Stream) *NullableStream {
	return &NullableStream{value: val, isSet: true}
}

func (v NullableStream) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStream) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
