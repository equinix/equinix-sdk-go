/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// PortBmmrType the model 'PortBmmrType'
type PortBmmrType string

// List of Port_bmmrType
const (
	PORTBMMRTYPE_SELF    PortBmmrType = "SELF"
	PORTBMMRTYPE_EQUINIX PortBmmrType = "EQUINIX"
)

// All allowed values of PortBmmrType enum
var AllowedPortBmmrTypeEnumValues = []PortBmmrType{
	"SELF",
	"EQUINIX",
}

func (v *PortBmmrType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PortBmmrType(value)
	for _, existing := range AllowedPortBmmrTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PortBmmrType", value)
}

// NewPortBmmrTypeFromValue returns a pointer to a valid PortBmmrType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPortBmmrTypeFromValue(v string) (*PortBmmrType, error) {
	ev := PortBmmrType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PortBmmrType: valid values are %v", v, AllowedPortBmmrTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PortBmmrType) IsValid() bool {
	for _, existing := range AllowedPortBmmrTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Port_bmmrType value
func (v PortBmmrType) Ptr() *PortBmmrType {
	return &v
}

type NullablePortBmmrType struct {
	value *PortBmmrType
	isSet bool
}

func (v NullablePortBmmrType) Get() *PortBmmrType {
	return v.value
}

func (v *NullablePortBmmrType) Set(val *PortBmmrType) {
	v.value = val
	v.isSet = true
}

func (v NullablePortBmmrType) IsSet() bool {
	return v.isSet
}

func (v *NullablePortBmmrType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortBmmrType(val *PortBmmrType) *NullablePortBmmrType {
	return &NullablePortBmmrType{value: val, isSet: true}
}

func (v NullablePortBmmrType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortBmmrType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
