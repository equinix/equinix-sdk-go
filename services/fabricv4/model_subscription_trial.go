/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"time"
)

// checks if the SubscriptionTrial type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionTrial{}

// SubscriptionTrial Free Trial Subscription
type SubscriptionTrial struct {
	// Free Trial Enabled
	Enabled *bool `json:"enabled,omitempty"`
	// Free Trial Expiry Date
	ExpiryDateTime       *time.Time `json:"expiryDateTime,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SubscriptionTrial SubscriptionTrial

// NewSubscriptionTrial instantiates a new SubscriptionTrial object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionTrial() *SubscriptionTrial {
	this := SubscriptionTrial{}
	return &this
}

// NewSubscriptionTrialWithDefaults instantiates a new SubscriptionTrial object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionTrialWithDefaults() *SubscriptionTrial {
	this := SubscriptionTrial{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *SubscriptionTrial) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionTrial) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *SubscriptionTrial) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *SubscriptionTrial) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetExpiryDateTime returns the ExpiryDateTime field value if set, zero value otherwise.
func (o *SubscriptionTrial) GetExpiryDateTime() time.Time {
	if o == nil || IsNil(o.ExpiryDateTime) {
		var ret time.Time
		return ret
	}
	return *o.ExpiryDateTime
}

// GetExpiryDateTimeOk returns a tuple with the ExpiryDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionTrial) GetExpiryDateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpiryDateTime) {
		return nil, false
	}
	return o.ExpiryDateTime, true
}

// HasExpiryDateTime returns a boolean if a field has been set.
func (o *SubscriptionTrial) HasExpiryDateTime() bool {
	if o != nil && !IsNil(o.ExpiryDateTime) {
		return true
	}

	return false
}

// SetExpiryDateTime gets a reference to the given time.Time and assigns it to the ExpiryDateTime field.
func (o *SubscriptionTrial) SetExpiryDateTime(v time.Time) {
	o.ExpiryDateTime = &v
}

func (o SubscriptionTrial) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionTrial) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.ExpiryDateTime) {
		toSerialize["expiryDateTime"] = o.ExpiryDateTime
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SubscriptionTrial) UnmarshalJSON(data []byte) (err error) {
	varSubscriptionTrial := _SubscriptionTrial{}

	err = json.Unmarshal(data, &varSubscriptionTrial)

	if err != nil {
		return err
	}

	*o = SubscriptionTrial(varSubscriptionTrial)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "expiryDateTime")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSubscriptionTrial struct {
	value *SubscriptionTrial
	isSet bool
}

func (v NullableSubscriptionTrial) Get() *SubscriptionTrial {
	return v.value
}

func (v *NullableSubscriptionTrial) Set(val *SubscriptionTrial) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionTrial) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionTrial) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionTrial(val *SubscriptionTrial) *NullableSubscriptionTrial {
	return &NullableSubscriptionTrial{value: val, isSet: true}
}

func (v NullableSubscriptionTrial) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionTrial) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
