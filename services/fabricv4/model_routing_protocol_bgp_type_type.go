/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// RoutingProtocolBGPTypeType Routing protocol type
type RoutingProtocolBGPTypeType string

// List of RoutingProtocolBGPType_type
const (
	ROUTINGPROTOCOLBGPTYPETYPE_BGP RoutingProtocolBGPTypeType = "BGP"
)

// All allowed values of RoutingProtocolBGPTypeType enum
var AllowedRoutingProtocolBGPTypeTypeEnumValues = []RoutingProtocolBGPTypeType{
	"BGP",
}

func (v *RoutingProtocolBGPTypeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RoutingProtocolBGPTypeType(value)
	for _, existing := range AllowedRoutingProtocolBGPTypeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RoutingProtocolBGPTypeType", value)
}

// NewRoutingProtocolBGPTypeTypeFromValue returns a pointer to a valid RoutingProtocolBGPTypeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRoutingProtocolBGPTypeTypeFromValue(v string) (*RoutingProtocolBGPTypeType, error) {
	ev := RoutingProtocolBGPTypeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RoutingProtocolBGPTypeType: valid values are %v", v, AllowedRoutingProtocolBGPTypeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RoutingProtocolBGPTypeType) IsValid() bool {
	for _, existing := range AllowedRoutingProtocolBGPTypeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RoutingProtocolBGPType_type value
func (v RoutingProtocolBGPTypeType) Ptr() *RoutingProtocolBGPTypeType {
	return &v
}

type NullableRoutingProtocolBGPTypeType struct {
	value *RoutingProtocolBGPTypeType
	isSet bool
}

func (v NullableRoutingProtocolBGPTypeType) Get() *RoutingProtocolBGPTypeType {
	return v.value
}

func (v *NullableRoutingProtocolBGPTypeType) Set(val *RoutingProtocolBGPTypeType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutingProtocolBGPTypeType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutingProtocolBGPTypeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutingProtocolBGPTypeType(val *RoutingProtocolBGPTypeType) *NullableRoutingProtocolBGPTypeType {
	return &NullableRoutingProtocolBGPTypeType{value: val, isSet: true}
}

func (v NullableRoutingProtocolBGPTypeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutingProtocolBGPTypeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
