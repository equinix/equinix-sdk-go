/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the IpBlockPrice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IpBlockPrice{}

// IpBlockPrice IP Block Product configuration
type IpBlockPrice struct {
	// Either uuid or rest of attributes are required
	Uuid                 *string        `json:"uuid,omitempty"`
	Type                 *IpBlockType   `json:"type,omitempty"`
	PrefixLength         *int32         `json:"prefixLength,omitempty"`
	Location             *PriceLocation `json:"location,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IpBlockPrice IpBlockPrice

// NewIpBlockPrice instantiates a new IpBlockPrice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpBlockPrice() *IpBlockPrice {
	this := IpBlockPrice{}
	return &this
}

// NewIpBlockPriceWithDefaults instantiates a new IpBlockPrice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpBlockPriceWithDefaults() *IpBlockPrice {
	this := IpBlockPrice{}
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *IpBlockPrice) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpBlockPrice) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *IpBlockPrice) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *IpBlockPrice) SetUuid(v string) {
	o.Uuid = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *IpBlockPrice) GetType() IpBlockType {
	if o == nil || IsNil(o.Type) {
		var ret IpBlockType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpBlockPrice) GetTypeOk() (*IpBlockType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *IpBlockPrice) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given IpBlockType and assigns it to the Type field.
func (o *IpBlockPrice) SetType(v IpBlockType) {
	o.Type = &v
}

// GetPrefixLength returns the PrefixLength field value if set, zero value otherwise.
func (o *IpBlockPrice) GetPrefixLength() int32 {
	if o == nil || IsNil(o.PrefixLength) {
		var ret int32
		return ret
	}
	return *o.PrefixLength
}

// GetPrefixLengthOk returns a tuple with the PrefixLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpBlockPrice) GetPrefixLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.PrefixLength) {
		return nil, false
	}
	return o.PrefixLength, true
}

// HasPrefixLength returns a boolean if a field has been set.
func (o *IpBlockPrice) HasPrefixLength() bool {
	if o != nil && !IsNil(o.PrefixLength) {
		return true
	}

	return false
}

// SetPrefixLength gets a reference to the given int32 and assigns it to the PrefixLength field.
func (o *IpBlockPrice) SetPrefixLength(v int32) {
	o.PrefixLength = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *IpBlockPrice) GetLocation() PriceLocation {
	if o == nil || IsNil(o.Location) {
		var ret PriceLocation
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpBlockPrice) GetLocationOk() (*PriceLocation, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *IpBlockPrice) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given PriceLocation and assigns it to the Location field.
func (o *IpBlockPrice) SetLocation(v PriceLocation) {
	o.Location = &v
}

func (o IpBlockPrice) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IpBlockPrice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.PrefixLength) {
		toSerialize["prefixLength"] = o.PrefixLength
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IpBlockPrice) UnmarshalJSON(data []byte) (err error) {
	varIpBlockPrice := _IpBlockPrice{}

	err = json.Unmarshal(data, &varIpBlockPrice)

	if err != nil {
		return err
	}

	*o = IpBlockPrice(varIpBlockPrice)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "type")
		delete(additionalProperties, "prefixLength")
		delete(additionalProperties, "location")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIpBlockPrice struct {
	value *IpBlockPrice
	isSet bool
}

func (v NullableIpBlockPrice) Get() *IpBlockPrice {
	return v.value
}

func (v *NullableIpBlockPrice) Set(val *IpBlockPrice) {
	v.value = val
	v.isSet = true
}

func (v NullableIpBlockPrice) IsSet() bool {
	return v.isSet
}

func (v *NullableIpBlockPrice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpBlockPrice(val *IpBlockPrice) *NullableIpBlockPrice {
	return &NullableIpBlockPrice{value: val, isSet: true}
}

func (v NullableIpBlockPrice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpBlockPrice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
