/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// RouteAggregationRulesDataType Route Aggregation type
type RouteAggregationRulesDataType string

// List of RouteAggregationRulesData_type
const (
	ROUTEAGGREGATIONRULESDATATYPE_BGP_IPV4_PREFIX_AGGREGATION_RULE RouteAggregationRulesDataType = "BGP_IPv4_PREFIX_AGGREGATION_RULE"
)

// All allowed values of RouteAggregationRulesDataType enum
var AllowedRouteAggregationRulesDataTypeEnumValues = []RouteAggregationRulesDataType{
	"BGP_IPv4_PREFIX_AGGREGATION_RULE",
}

func (v *RouteAggregationRulesDataType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RouteAggregationRulesDataType(value)
	for _, existing := range AllowedRouteAggregationRulesDataTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RouteAggregationRulesDataType", value)
}

// NewRouteAggregationRulesDataTypeFromValue returns a pointer to a valid RouteAggregationRulesDataType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRouteAggregationRulesDataTypeFromValue(v string) (*RouteAggregationRulesDataType, error) {
	ev := RouteAggregationRulesDataType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RouteAggregationRulesDataType: valid values are %v", v, AllowedRouteAggregationRulesDataTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RouteAggregationRulesDataType) IsValid() bool {
	for _, existing := range AllowedRouteAggregationRulesDataTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RouteAggregationRulesData_type value
func (v RouteAggregationRulesDataType) Ptr() *RouteAggregationRulesDataType {
	return &v
}

type NullableRouteAggregationRulesDataType struct {
	value *RouteAggregationRulesDataType
	isSet bool
}

func (v NullableRouteAggregationRulesDataType) Get() *RouteAggregationRulesDataType {
	return v.value
}

func (v *NullableRouteAggregationRulesDataType) Set(val *RouteAggregationRulesDataType) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteAggregationRulesDataType) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteAggregationRulesDataType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteAggregationRulesDataType(val *RouteAggregationRulesDataType) *NullableRouteAggregationRulesDataType {
	return &NullableRouteAggregationRulesDataType{value: val, isSet: true}
}

func (v NullableRouteAggregationRulesDataType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteAggregationRulesDataType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
