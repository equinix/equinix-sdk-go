/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// RouteFiltersBaseType Route Filter type
type RouteFiltersBaseType string

// List of RouteFiltersBase_type
const (
	ROUTEFILTERSBASETYPE_IPV4_PREFIX_FILTER RouteFiltersBaseType = "BGP_IPv4_PREFIX_FILTER"
	ROUTEFILTERSBASETYPE_IPV6_PREFIX_FILTER RouteFiltersBaseType = "BGP_IPv6_PREFIX_FILTER"
)

// All allowed values of RouteFiltersBaseType enum
var AllowedRouteFiltersBaseTypeEnumValues = []RouteFiltersBaseType{
	"BGP_IPv4_PREFIX_FILTER",
	"BGP_IPv6_PREFIX_FILTER",
}

func (v *RouteFiltersBaseType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RouteFiltersBaseType(value)
	for _, existing := range AllowedRouteFiltersBaseTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RouteFiltersBaseType", value)
}

// NewRouteFiltersBaseTypeFromValue returns a pointer to a valid RouteFiltersBaseType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRouteFiltersBaseTypeFromValue(v string) (*RouteFiltersBaseType, error) {
	ev := RouteFiltersBaseType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RouteFiltersBaseType: valid values are %v", v, AllowedRouteFiltersBaseTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RouteFiltersBaseType) IsValid() bool {
	for _, existing := range AllowedRouteFiltersBaseTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RouteFiltersBase_type value
func (v RouteFiltersBaseType) Ptr() *RouteFiltersBaseType {
	return &v
}

type NullableRouteFiltersBaseType struct {
	value *RouteFiltersBaseType
	isSet bool
}

func (v NullableRouteFiltersBaseType) Get() *RouteFiltersBaseType {
	return v.value
}

func (v *NullableRouteFiltersBaseType) Set(val *RouteFiltersBaseType) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteFiltersBaseType) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteFiltersBaseType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteFiltersBaseType(val *RouteFiltersBaseType) *NullableRouteFiltersBaseType {
	return &NullableRouteFiltersBaseType{value: val, isSet: true}
}

func (v NullableRouteFiltersBaseType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteFiltersBaseType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
