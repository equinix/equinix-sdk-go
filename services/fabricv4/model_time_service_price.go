/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the TimeServicePrice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimeServicePrice{}

// TimeServicePrice Time Service Product configuration
type TimeServicePrice struct {
	Type                 *PrecisionTimeServiceRequestType `json:"type,omitempty"`
	Package              *PrecisionTimePackageRequest     `json:"package,omitempty"`
	Connection           *TimeServicePriceConnection      `json:"connection,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TimeServicePrice TimeServicePrice

// NewTimeServicePrice instantiates a new TimeServicePrice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeServicePrice() *TimeServicePrice {
	this := TimeServicePrice{}
	return &this
}

// NewTimeServicePriceWithDefaults instantiates a new TimeServicePrice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeServicePriceWithDefaults() *TimeServicePrice {
	this := TimeServicePrice{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TimeServicePrice) GetType() PrecisionTimeServiceRequestType {
	if o == nil || IsNil(o.Type) {
		var ret PrecisionTimeServiceRequestType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeServicePrice) GetTypeOk() (*PrecisionTimeServiceRequestType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TimeServicePrice) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given PrecisionTimeServiceRequestType and assigns it to the Type field.
func (o *TimeServicePrice) SetType(v PrecisionTimeServiceRequestType) {
	o.Type = &v
}

// GetPackage returns the Package field value if set, zero value otherwise.
func (o *TimeServicePrice) GetPackage() PrecisionTimePackageRequest {
	if o == nil || IsNil(o.Package) {
		var ret PrecisionTimePackageRequest
		return ret
	}
	return *o.Package
}

// GetPackageOk returns a tuple with the Package field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeServicePrice) GetPackageOk() (*PrecisionTimePackageRequest, bool) {
	if o == nil || IsNil(o.Package) {
		return nil, false
	}
	return o.Package, true
}

// HasPackage returns a boolean if a field has been set.
func (o *TimeServicePrice) HasPackage() bool {
	if o != nil && !IsNil(o.Package) {
		return true
	}

	return false
}

// SetPackage gets a reference to the given PrecisionTimePackageRequest and assigns it to the Package field.
func (o *TimeServicePrice) SetPackage(v PrecisionTimePackageRequest) {
	o.Package = &v
}

// GetConnection returns the Connection field value if set, zero value otherwise.
func (o *TimeServicePrice) GetConnection() TimeServicePriceConnection {
	if o == nil || IsNil(o.Connection) {
		var ret TimeServicePriceConnection
		return ret
	}
	return *o.Connection
}

// GetConnectionOk returns a tuple with the Connection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeServicePrice) GetConnectionOk() (*TimeServicePriceConnection, bool) {
	if o == nil || IsNil(o.Connection) {
		return nil, false
	}
	return o.Connection, true
}

// HasConnection returns a boolean if a field has been set.
func (o *TimeServicePrice) HasConnection() bool {
	if o != nil && !IsNil(o.Connection) {
		return true
	}

	return false
}

// SetConnection gets a reference to the given TimeServicePriceConnection and assigns it to the Connection field.
func (o *TimeServicePrice) SetConnection(v TimeServicePriceConnection) {
	o.Connection = &v
}

func (o TimeServicePrice) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimeServicePrice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Package) {
		toSerialize["package"] = o.Package
	}
	if !IsNil(o.Connection) {
		toSerialize["connection"] = o.Connection
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TimeServicePrice) UnmarshalJSON(data []byte) (err error) {
	varTimeServicePrice := _TimeServicePrice{}

	err = json.Unmarshal(data, &varTimeServicePrice)

	if err != nil {
		return err
	}

	*o = TimeServicePrice(varTimeServicePrice)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "package")
		delete(additionalProperties, "connection")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTimeServicePrice struct {
	value *TimeServicePrice
	isSet bool
}

func (v NullableTimeServicePrice) Get() *TimeServicePrice {
	return v.value
}

func (v *NullableTimeServicePrice) Set(val *TimeServicePrice) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeServicePrice) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeServicePrice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeServicePrice(val *TimeServicePrice) *NullableTimeServicePrice {
	return &NullableTimeServicePrice{value: val, isSet: true}
}

func (v NullableTimeServicePrice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeServicePrice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
