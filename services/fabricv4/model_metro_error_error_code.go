/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// MetroErrorErrorCode the model 'MetroErrorErrorCode'
type MetroErrorErrorCode string

// List of MetroError_errorCode
const (
	METROERRORERRORCODE__3036001 MetroErrorErrorCode = "EQ-3036001"
	METROERRORERRORCODE__3036013 MetroErrorErrorCode = "EQ-3036013"
	METROERRORERRORCODE__3036030 MetroErrorErrorCode = "EQ-3036030"
	METROERRORERRORCODE__3036100 MetroErrorErrorCode = "EQ-3036100"
)

// All allowed values of MetroErrorErrorCode enum
var AllowedMetroErrorErrorCodeEnumValues = []MetroErrorErrorCode{
	"EQ-3036001",
	"EQ-3036013",
	"EQ-3036030",
	"EQ-3036100",
}

func (v *MetroErrorErrorCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MetroErrorErrorCode(value)
	for _, existing := range AllowedMetroErrorErrorCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MetroErrorErrorCode", value)
}

// NewMetroErrorErrorCodeFromValue returns a pointer to a valid MetroErrorErrorCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMetroErrorErrorCodeFromValue(v string) (*MetroErrorErrorCode, error) {
	ev := MetroErrorErrorCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MetroErrorErrorCode: valid values are %v", v, AllowedMetroErrorErrorCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MetroErrorErrorCode) IsValid() bool {
	for _, existing := range AllowedMetroErrorErrorCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MetroError_errorCode value
func (v MetroErrorErrorCode) Ptr() *MetroErrorErrorCode {
	return &v
}

type NullableMetroErrorErrorCode struct {
	value *MetroErrorErrorCode
	isSet bool
}

func (v NullableMetroErrorErrorCode) Get() *MetroErrorErrorCode {
	return v.value
}

func (v *NullableMetroErrorErrorCode) Set(val *MetroErrorErrorCode) {
	v.value = val
	v.isSet = true
}

func (v NullableMetroErrorErrorCode) IsSet() bool {
	return v.isSet
}

func (v *NullableMetroErrorErrorCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetroErrorErrorCode(val *MetroErrorErrorCode) *NullableMetroErrorErrorCode {
	return &NullableMetroErrorErrorCode{value: val, isSet: true}
}

func (v NullableMetroErrorErrorCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetroErrorErrorCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
