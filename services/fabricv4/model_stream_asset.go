/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the StreamAsset type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StreamAsset{}

// StreamAsset Stream object
type StreamAsset struct {
	// Stream Asset URI
	Href *string `json:"href,omitempty"`
	// Equinix-assigned access point identifier
	Uuid *string          `json:"uuid,omitempty"`
	Type *StreamAssetType `json:"type,omitempty"`
	// enable metric
	MetricsEnabled       *bool                        `json:"metricsEnabled,omitempty"`
	AttachmentStatus     *StreamAssetAttachmentStatus `json:"attachmentStatus,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StreamAsset StreamAsset

// NewStreamAsset instantiates a new StreamAsset object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStreamAsset() *StreamAsset {
	this := StreamAsset{}
	return &this
}

// NewStreamAssetWithDefaults instantiates a new StreamAsset object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStreamAssetWithDefaults() *StreamAsset {
	this := StreamAsset{}
	return &this
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *StreamAsset) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamAsset) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *StreamAsset) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *StreamAsset) SetHref(v string) {
	o.Href = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *StreamAsset) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamAsset) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *StreamAsset) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *StreamAsset) SetUuid(v string) {
	o.Uuid = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *StreamAsset) GetType() StreamAssetType {
	if o == nil || IsNil(o.Type) {
		var ret StreamAssetType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamAsset) GetTypeOk() (*StreamAssetType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *StreamAsset) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given StreamAssetType and assigns it to the Type field.
func (o *StreamAsset) SetType(v StreamAssetType) {
	o.Type = &v
}

// GetMetricsEnabled returns the MetricsEnabled field value if set, zero value otherwise.
func (o *StreamAsset) GetMetricsEnabled() bool {
	if o == nil || IsNil(o.MetricsEnabled) {
		var ret bool
		return ret
	}
	return *o.MetricsEnabled
}

// GetMetricsEnabledOk returns a tuple with the MetricsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamAsset) GetMetricsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.MetricsEnabled) {
		return nil, false
	}
	return o.MetricsEnabled, true
}

// HasMetricsEnabled returns a boolean if a field has been set.
func (o *StreamAsset) HasMetricsEnabled() bool {
	if o != nil && !IsNil(o.MetricsEnabled) {
		return true
	}

	return false
}

// SetMetricsEnabled gets a reference to the given bool and assigns it to the MetricsEnabled field.
func (o *StreamAsset) SetMetricsEnabled(v bool) {
	o.MetricsEnabled = &v
}

// GetAttachmentStatus returns the AttachmentStatus field value if set, zero value otherwise.
func (o *StreamAsset) GetAttachmentStatus() StreamAssetAttachmentStatus {
	if o == nil || IsNil(o.AttachmentStatus) {
		var ret StreamAssetAttachmentStatus
		return ret
	}
	return *o.AttachmentStatus
}

// GetAttachmentStatusOk returns a tuple with the AttachmentStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamAsset) GetAttachmentStatusOk() (*StreamAssetAttachmentStatus, bool) {
	if o == nil || IsNil(o.AttachmentStatus) {
		return nil, false
	}
	return o.AttachmentStatus, true
}

// HasAttachmentStatus returns a boolean if a field has been set.
func (o *StreamAsset) HasAttachmentStatus() bool {
	if o != nil && !IsNil(o.AttachmentStatus) {
		return true
	}

	return false
}

// SetAttachmentStatus gets a reference to the given StreamAssetAttachmentStatus and assigns it to the AttachmentStatus field.
func (o *StreamAsset) SetAttachmentStatus(v StreamAssetAttachmentStatus) {
	o.AttachmentStatus = &v
}

func (o StreamAsset) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StreamAsset) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.MetricsEnabled) {
		toSerialize["metricsEnabled"] = o.MetricsEnabled
	}
	if !IsNil(o.AttachmentStatus) {
		toSerialize["attachmentStatus"] = o.AttachmentStatus
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StreamAsset) UnmarshalJSON(data []byte) (err error) {
	varStreamAsset := _StreamAsset{}

	err = json.Unmarshal(data, &varStreamAsset)

	if err != nil {
		return err
	}

	*o = StreamAsset(varStreamAsset)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "href")
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "type")
		delete(additionalProperties, "metricsEnabled")
		delete(additionalProperties, "attachmentStatus")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStreamAsset struct {
	value *StreamAsset
	isSet bool
}

func (v NullableStreamAsset) Get() *StreamAsset {
	return v.value
}

func (v *NullableStreamAsset) Set(val *StreamAsset) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamAsset) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamAsset) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamAsset(val *StreamAsset) *NullableStreamAsset {
	return &NullableStreamAsset{value: val, isSet: true}
}

func (v NullableStreamAsset) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamAsset) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
