/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// NetworkSortByResponse Possible field names to use on sorting
type NetworkSortByResponse string

// List of NetworkSortByResponse
const (
	NETWORKSORTBYRESPONSE_NAME                         NetworkSortByResponse = "/name"
	NETWORKSORTBYRESPONSE_TYPE                         NetworkSortByResponse = "/type"
	NETWORKSORTBYRESPONSE_UUID                         NetworkSortByResponse = "/uuid"
	NETWORKSORTBYRESPONSE_STATE                        NetworkSortByResponse = "/state"
	NETWORKSORTBYRESPONSE_SCOPE                        NetworkSortByResponse = "/scope"
	NETWORKSORTBYRESPONSE_LOCATION_REGION              NetworkSortByResponse = "/location/region"
	NETWORKSORTBYRESPONSE_CHANGE_LOG_CREATED_DATE_TIME NetworkSortByResponse = "/changeLog/createdDateTime"
	NETWORKSORTBYRESPONSE_CHANGE_LOG_UPDATED_DATE_TIME NetworkSortByResponse = "/changeLog/updatedDateTime"
)

// All allowed values of NetworkSortByResponse enum
var AllowedNetworkSortByResponseEnumValues = []NetworkSortByResponse{
	"/name",
	"/type",
	"/uuid",
	"/state",
	"/scope",
	"/location/region",
	"/changeLog/createdDateTime",
	"/changeLog/updatedDateTime",
}

func (v *NetworkSortByResponse) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NetworkSortByResponse(value)
	for _, existing := range AllowedNetworkSortByResponseEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NetworkSortByResponse", value)
}

// NewNetworkSortByResponseFromValue returns a pointer to a valid NetworkSortByResponse
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNetworkSortByResponseFromValue(v string) (*NetworkSortByResponse, error) {
	ev := NetworkSortByResponse(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NetworkSortByResponse: valid values are %v", v, AllowedNetworkSortByResponseEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NetworkSortByResponse) IsValid() bool {
	for _, existing := range AllowedNetworkSortByResponseEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NetworkSortByResponse value
func (v NetworkSortByResponse) Ptr() *NetworkSortByResponse {
	return &v
}

type NullableNetworkSortByResponse struct {
	value *NetworkSortByResponse
	isSet bool
}

func (v NullableNetworkSortByResponse) Get() *NetworkSortByResponse {
	return v.value
}

func (v *NullableNetworkSortByResponse) Set(val *NetworkSortByResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkSortByResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkSortByResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkSortByResponse(val *NetworkSortByResponse) *NullableNetworkSortByResponse {
	return &NullableNetworkSortByResponse{value: val, isSet: true}
}

func (v NullableNetworkSortByResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkSortByResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
