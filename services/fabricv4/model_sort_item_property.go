/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// SortItemProperty Possible field names to use on sorting
type SortItemProperty string

// List of SortItem_property
const (
	SORTITEMPROPERTY_TYPE                         SortItemProperty = "/type"
	SORTITEMPROPERTY_UUID                         SortItemProperty = "/uuid"
	SORTITEMPROPERTY_NAME                         SortItemProperty = "/name"
	SORTITEMPROPERTY_PROJECT_PROJECT_ID           SortItemProperty = "/project/projectId"
	SORTITEMPROPERTY_STATE                        SortItemProperty = "/state"
	SORTITEMPROPERTY_NOT_MATCHED_RULE_ACTION      SortItemProperty = "/notMatchedRuleAction"
	SORTITEMPROPERTY_CONNECTIONS_COUNT            SortItemProperty = "/connectionsCount"
	SORTITEMPROPERTY_CHANGE_LOG_CREATED_DATE_TIME SortItemProperty = "/changeLog/createdDateTime"
	SORTITEMPROPERTY_CHANGE_LOG_UPDATED_DATE_TIME SortItemProperty = "/changeLog/updatedDateTime"
)

// All allowed values of SortItemProperty enum
var AllowedSortItemPropertyEnumValues = []SortItemProperty{
	"/type",
	"/uuid",
	"/name",
	"/project/projectId",
	"/state",
	"/notMatchedRuleAction",
	"/connectionsCount",
	"/changeLog/createdDateTime",
	"/changeLog/updatedDateTime",
}

func (v *SortItemProperty) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SortItemProperty(value)
	for _, existing := range AllowedSortItemPropertyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SortItemProperty", value)
}

// NewSortItemPropertyFromValue returns a pointer to a valid SortItemProperty
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSortItemPropertyFromValue(v string) (*SortItemProperty, error) {
	ev := SortItemProperty(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SortItemProperty: valid values are %v", v, AllowedSortItemPropertyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SortItemProperty) IsValid() bool {
	for _, existing := range AllowedSortItemPropertyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SortItem_property value
func (v SortItemProperty) Ptr() *SortItemProperty {
	return &v
}

type NullableSortItemProperty struct {
	value *SortItemProperty
	isSet bool
}

func (v NullableSortItemProperty) Get() *SortItemProperty {
	return v.value
}

func (v *NullableSortItemProperty) Set(val *SortItemProperty) {
	v.value = val
	v.isSet = true
}

func (v NullableSortItemProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableSortItemProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSortItemProperty(val *SortItemProperty) *NullableSortItemProperty {
	return &NullableSortItemProperty{value: val, isSet: true}
}

func (v NullableSortItemProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSortItemProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
