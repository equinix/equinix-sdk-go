/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// ConnectionRouteAggregationDataAttachmentStatus the model 'ConnectionRouteAggregationDataAttachmentStatus'
type ConnectionRouteAggregationDataAttachmentStatus string

// List of ConnectionRouteAggregationData_attachmentStatus
const (
	CONNECTIONROUTEAGGREGATIONDATAATTACHMENTSTATUS_ATTACHING                 ConnectionRouteAggregationDataAttachmentStatus = "ATTACHING"
	CONNECTIONROUTEAGGREGATIONDATAATTACHMENTSTATUS_ATTACHED                  ConnectionRouteAggregationDataAttachmentStatus = "ATTACHED"
	CONNECTIONROUTEAGGREGATIONDATAATTACHMENTSTATUS_DETACHED                  ConnectionRouteAggregationDataAttachmentStatus = "DETACHED"
	CONNECTIONROUTEAGGREGATIONDATAATTACHMENTSTATUS_DETACHING                 ConnectionRouteAggregationDataAttachmentStatus = "DETACHING"
	CONNECTIONROUTEAGGREGATIONDATAATTACHMENTSTATUS_FAILED                    ConnectionRouteAggregationDataAttachmentStatus = "FAILED"
	CONNECTIONROUTEAGGREGATIONDATAATTACHMENTSTATUS_PENDING_BGP_CONFIGURATION ConnectionRouteAggregationDataAttachmentStatus = "PENDING_BGP_CONFIGURATION"
)

// All allowed values of ConnectionRouteAggregationDataAttachmentStatus enum
var AllowedConnectionRouteAggregationDataAttachmentStatusEnumValues = []ConnectionRouteAggregationDataAttachmentStatus{
	"ATTACHING",
	"ATTACHED",
	"DETACHED",
	"DETACHING",
	"FAILED",
	"PENDING_BGP_CONFIGURATION",
}

func (v *ConnectionRouteAggregationDataAttachmentStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConnectionRouteAggregationDataAttachmentStatus(value)
	for _, existing := range AllowedConnectionRouteAggregationDataAttachmentStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConnectionRouteAggregationDataAttachmentStatus", value)
}

// NewConnectionRouteAggregationDataAttachmentStatusFromValue returns a pointer to a valid ConnectionRouteAggregationDataAttachmentStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConnectionRouteAggregationDataAttachmentStatusFromValue(v string) (*ConnectionRouteAggregationDataAttachmentStatus, error) {
	ev := ConnectionRouteAggregationDataAttachmentStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConnectionRouteAggregationDataAttachmentStatus: valid values are %v", v, AllowedConnectionRouteAggregationDataAttachmentStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConnectionRouteAggregationDataAttachmentStatus) IsValid() bool {
	for _, existing := range AllowedConnectionRouteAggregationDataAttachmentStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConnectionRouteAggregationData_attachmentStatus value
func (v ConnectionRouteAggregationDataAttachmentStatus) Ptr() *ConnectionRouteAggregationDataAttachmentStatus {
	return &v
}

type NullableConnectionRouteAggregationDataAttachmentStatus struct {
	value *ConnectionRouteAggregationDataAttachmentStatus
	isSet bool
}

func (v NullableConnectionRouteAggregationDataAttachmentStatus) Get() *ConnectionRouteAggregationDataAttachmentStatus {
	return v.value
}

func (v *NullableConnectionRouteAggregationDataAttachmentStatus) Set(val *ConnectionRouteAggregationDataAttachmentStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionRouteAggregationDataAttachmentStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionRouteAggregationDataAttachmentStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionRouteAggregationDataAttachmentStatus(val *ConnectionRouteAggregationDataAttachmentStatus) *NullableConnectionRouteAggregationDataAttachmentStatus {
	return &NullableConnectionRouteAggregationDataAttachmentStatus{value: val, isSet: true}
}

func (v NullableConnectionRouteAggregationDataAttachmentStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionRouteAggregationDataAttachmentStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
