/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// checks if the SubscriptionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionResponse{}

// SubscriptionResponse Subscription Response
type SubscriptionResponse struct {
	// Subscription URL
	Href *string `json:"href,omitempty"`
	// Unique identifier of the Subscription
	Uuid        *string                         `json:"uuid,omitempty"`
	State       SubscriptionState               `json:"state"`
	Marketplace SubscriptionResponseMarketplace `json:"marketplace"`
	OfferType   *SubscriptionResponseOfferType  `json:"offerType,omitempty"`
	// Is Auto Renewal Enabled
	IsAutoRenew *bool `json:"isAutoRenew,omitempty"`
	// Marketplace Offer Id
	OfferId *string            `json:"offerId,omitempty"`
	Trial   *SubscriptionTrial `json:"trial,omitempty"`
	// Subscription Key
	SubscriptionKey *string `json:"subscriptionKey,omitempty"`
	// List of entitlements associated with the subscription
	Entitlements         []SubscriptionEntitlementResponse `json:"entitlements"`
	Changelog            *Changelog                        `json:"changelog,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SubscriptionResponse SubscriptionResponse

// NewSubscriptionResponse instantiates a new SubscriptionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionResponse(state SubscriptionState, marketplace SubscriptionResponseMarketplace, entitlements []SubscriptionEntitlementResponse) *SubscriptionResponse {
	this := SubscriptionResponse{}
	this.State = state
	this.Marketplace = marketplace
	this.Entitlements = entitlements
	return &this
}

// NewSubscriptionResponseWithDefaults instantiates a new SubscriptionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionResponseWithDefaults() *SubscriptionResponse {
	this := SubscriptionResponse{}
	return &this
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *SubscriptionResponse) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionResponse) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *SubscriptionResponse) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *SubscriptionResponse) SetHref(v string) {
	o.Href = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *SubscriptionResponse) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionResponse) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *SubscriptionResponse) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *SubscriptionResponse) SetUuid(v string) {
	o.Uuid = &v
}

// GetState returns the State field value
func (o *SubscriptionResponse) GetState() SubscriptionState {
	if o == nil {
		var ret SubscriptionState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *SubscriptionResponse) GetStateOk() (*SubscriptionState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *SubscriptionResponse) SetState(v SubscriptionState) {
	o.State = v
}

// GetMarketplace returns the Marketplace field value
func (o *SubscriptionResponse) GetMarketplace() SubscriptionResponseMarketplace {
	if o == nil {
		var ret SubscriptionResponseMarketplace
		return ret
	}

	return o.Marketplace
}

// GetMarketplaceOk returns a tuple with the Marketplace field value
// and a boolean to check if the value has been set.
func (o *SubscriptionResponse) GetMarketplaceOk() (*SubscriptionResponseMarketplace, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Marketplace, true
}

// SetMarketplace sets field value
func (o *SubscriptionResponse) SetMarketplace(v SubscriptionResponseMarketplace) {
	o.Marketplace = v
}

// GetOfferType returns the OfferType field value if set, zero value otherwise.
func (o *SubscriptionResponse) GetOfferType() SubscriptionResponseOfferType {
	if o == nil || IsNil(o.OfferType) {
		var ret SubscriptionResponseOfferType
		return ret
	}
	return *o.OfferType
}

// GetOfferTypeOk returns a tuple with the OfferType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionResponse) GetOfferTypeOk() (*SubscriptionResponseOfferType, bool) {
	if o == nil || IsNil(o.OfferType) {
		return nil, false
	}
	return o.OfferType, true
}

// HasOfferType returns a boolean if a field has been set.
func (o *SubscriptionResponse) HasOfferType() bool {
	if o != nil && !IsNil(o.OfferType) {
		return true
	}

	return false
}

// SetOfferType gets a reference to the given SubscriptionResponseOfferType and assigns it to the OfferType field.
func (o *SubscriptionResponse) SetOfferType(v SubscriptionResponseOfferType) {
	o.OfferType = &v
}

// GetIsAutoRenew returns the IsAutoRenew field value if set, zero value otherwise.
func (o *SubscriptionResponse) GetIsAutoRenew() bool {
	if o == nil || IsNil(o.IsAutoRenew) {
		var ret bool
		return ret
	}
	return *o.IsAutoRenew
}

// GetIsAutoRenewOk returns a tuple with the IsAutoRenew field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionResponse) GetIsAutoRenewOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAutoRenew) {
		return nil, false
	}
	return o.IsAutoRenew, true
}

// HasIsAutoRenew returns a boolean if a field has been set.
func (o *SubscriptionResponse) HasIsAutoRenew() bool {
	if o != nil && !IsNil(o.IsAutoRenew) {
		return true
	}

	return false
}

// SetIsAutoRenew gets a reference to the given bool and assigns it to the IsAutoRenew field.
func (o *SubscriptionResponse) SetIsAutoRenew(v bool) {
	o.IsAutoRenew = &v
}

// GetOfferId returns the OfferId field value if set, zero value otherwise.
func (o *SubscriptionResponse) GetOfferId() string {
	if o == nil || IsNil(o.OfferId) {
		var ret string
		return ret
	}
	return *o.OfferId
}

// GetOfferIdOk returns a tuple with the OfferId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionResponse) GetOfferIdOk() (*string, bool) {
	if o == nil || IsNil(o.OfferId) {
		return nil, false
	}
	return o.OfferId, true
}

// HasOfferId returns a boolean if a field has been set.
func (o *SubscriptionResponse) HasOfferId() bool {
	if o != nil && !IsNil(o.OfferId) {
		return true
	}

	return false
}

// SetOfferId gets a reference to the given string and assigns it to the OfferId field.
func (o *SubscriptionResponse) SetOfferId(v string) {
	o.OfferId = &v
}

// GetTrial returns the Trial field value if set, zero value otherwise.
func (o *SubscriptionResponse) GetTrial() SubscriptionTrial {
	if o == nil || IsNil(o.Trial) {
		var ret SubscriptionTrial
		return ret
	}
	return *o.Trial
}

// GetTrialOk returns a tuple with the Trial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionResponse) GetTrialOk() (*SubscriptionTrial, bool) {
	if o == nil || IsNil(o.Trial) {
		return nil, false
	}
	return o.Trial, true
}

// HasTrial returns a boolean if a field has been set.
func (o *SubscriptionResponse) HasTrial() bool {
	if o != nil && !IsNil(o.Trial) {
		return true
	}

	return false
}

// SetTrial gets a reference to the given SubscriptionTrial and assigns it to the Trial field.
func (o *SubscriptionResponse) SetTrial(v SubscriptionTrial) {
	o.Trial = &v
}

// GetSubscriptionKey returns the SubscriptionKey field value if set, zero value otherwise.
func (o *SubscriptionResponse) GetSubscriptionKey() string {
	if o == nil || IsNil(o.SubscriptionKey) {
		var ret string
		return ret
	}
	return *o.SubscriptionKey
}

// GetSubscriptionKeyOk returns a tuple with the SubscriptionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionResponse) GetSubscriptionKeyOk() (*string, bool) {
	if o == nil || IsNil(o.SubscriptionKey) {
		return nil, false
	}
	return o.SubscriptionKey, true
}

// HasSubscriptionKey returns a boolean if a field has been set.
func (o *SubscriptionResponse) HasSubscriptionKey() bool {
	if o != nil && !IsNil(o.SubscriptionKey) {
		return true
	}

	return false
}

// SetSubscriptionKey gets a reference to the given string and assigns it to the SubscriptionKey field.
func (o *SubscriptionResponse) SetSubscriptionKey(v string) {
	o.SubscriptionKey = &v
}

// GetEntitlements returns the Entitlements field value
func (o *SubscriptionResponse) GetEntitlements() []SubscriptionEntitlementResponse {
	if o == nil {
		var ret []SubscriptionEntitlementResponse
		return ret
	}

	return o.Entitlements
}

// GetEntitlementsOk returns a tuple with the Entitlements field value
// and a boolean to check if the value has been set.
func (o *SubscriptionResponse) GetEntitlementsOk() ([]SubscriptionEntitlementResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.Entitlements, true
}

// SetEntitlements sets field value
func (o *SubscriptionResponse) SetEntitlements(v []SubscriptionEntitlementResponse) {
	o.Entitlements = v
}

// GetChangelog returns the Changelog field value if set, zero value otherwise.
func (o *SubscriptionResponse) GetChangelog() Changelog {
	if o == nil || IsNil(o.Changelog) {
		var ret Changelog
		return ret
	}
	return *o.Changelog
}

// GetChangelogOk returns a tuple with the Changelog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionResponse) GetChangelogOk() (*Changelog, bool) {
	if o == nil || IsNil(o.Changelog) {
		return nil, false
	}
	return o.Changelog, true
}

// HasChangelog returns a boolean if a field has been set.
func (o *SubscriptionResponse) HasChangelog() bool {
	if o != nil && !IsNil(o.Changelog) {
		return true
	}

	return false
}

// SetChangelog gets a reference to the given Changelog and assigns it to the Changelog field.
func (o *SubscriptionResponse) SetChangelog(v Changelog) {
	o.Changelog = &v
}

func (o SubscriptionResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	toSerialize["state"] = o.State
	toSerialize["marketplace"] = o.Marketplace
	if !IsNil(o.OfferType) {
		toSerialize["offerType"] = o.OfferType
	}
	if !IsNil(o.IsAutoRenew) {
		toSerialize["isAutoRenew"] = o.IsAutoRenew
	}
	if !IsNil(o.OfferId) {
		toSerialize["offerId"] = o.OfferId
	}
	if !IsNil(o.Trial) {
		toSerialize["trial"] = o.Trial
	}
	if !IsNil(o.SubscriptionKey) {
		toSerialize["subscriptionKey"] = o.SubscriptionKey
	}
	toSerialize["entitlements"] = o.Entitlements
	if !IsNil(o.Changelog) {
		toSerialize["changelog"] = o.Changelog
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SubscriptionResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"state",
		"marketplace",
		"entitlements",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubscriptionResponse := _SubscriptionResponse{}

	err = json.Unmarshal(data, &varSubscriptionResponse)

	if err != nil {
		return err
	}

	*o = SubscriptionResponse(varSubscriptionResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "href")
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "state")
		delete(additionalProperties, "marketplace")
		delete(additionalProperties, "offerType")
		delete(additionalProperties, "isAutoRenew")
		delete(additionalProperties, "offerId")
		delete(additionalProperties, "trial")
		delete(additionalProperties, "subscriptionKey")
		delete(additionalProperties, "entitlements")
		delete(additionalProperties, "changelog")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSubscriptionResponse struct {
	value *SubscriptionResponse
	isSet bool
}

func (v NullableSubscriptionResponse) Get() *SubscriptionResponse {
	return v.value
}

func (v *NullableSubscriptionResponse) Set(val *SubscriptionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionResponse(val *SubscriptionResponse) *NullableSubscriptionResponse {
	return &NullableSubscriptionResponse{value: val, isSet: true}
}

func (v NullableSubscriptionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
