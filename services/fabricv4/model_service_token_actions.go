/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// ServiceTokenActions Service Token action type
type ServiceTokenActions string

// List of ServiceTokenActions
const (
	SERVICETOKENACTIONS_RESEND_EMAIL_NOTIFICATION ServiceTokenActions = "RESEND_EMAIL_NOTIFICATION"
)

// All allowed values of ServiceTokenActions enum
var AllowedServiceTokenActionsEnumValues = []ServiceTokenActions{
	"RESEND_EMAIL_NOTIFICATION",
}

func (v *ServiceTokenActions) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ServiceTokenActions(value)
	for _, existing := range AllowedServiceTokenActionsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServiceTokenActions", value)
}

// NewServiceTokenActionsFromValue returns a pointer to a valid ServiceTokenActions
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServiceTokenActionsFromValue(v string) (*ServiceTokenActions, error) {
	ev := ServiceTokenActions(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServiceTokenActions: valid values are %v", v, AllowedServiceTokenActionsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServiceTokenActions) IsValid() bool {
	for _, existing := range AllowedServiceTokenActionsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ServiceTokenActions value
func (v ServiceTokenActions) Ptr() *ServiceTokenActions {
	return &v
}

type NullableServiceTokenActions struct {
	value *ServiceTokenActions
	isSet bool
}

func (v NullableServiceTokenActions) Get() *ServiceTokenActions {
	return v.value
}

func (v *NullableServiceTokenActions) Set(val *ServiceTokenActions) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceTokenActions) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceTokenActions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceTokenActions(val *ServiceTokenActions) *NullableServiceTokenActions {
	return &NullableServiceTokenActions{value: val, isSet: true}
}

func (v NullableServiceTokenActions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceTokenActions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
