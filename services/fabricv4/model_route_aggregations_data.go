/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the RouteAggregationsData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RouteAggregationsData{}

// RouteAggregationsData struct for RouteAggregationsData
type RouteAggregationsData struct {
	// Route Aggregation URI
	Href *string                    `json:"href,omitempty"`
	Type *RouteAggregationsBaseType `json:"type,omitempty"`
	// Route Aggregation identifier
	Uuid *string `json:"uuid,omitempty"`
	Name *string `json:"name,omitempty"`
	// Customer-provided connection description
	Description          *string                       `json:"description,omitempty"`
	State                *RouteAggregationState        `json:"state,omitempty"`
	Change               *RouteAggregationsChange      `json:"change,omitempty"`
	ConnectionsCount     *int32                        `json:"connectionsCount,omitempty"`
	RulesCount           *int32                        `json:"rulesCount,omitempty"`
	Project              *RouteAggregationsDataProject `json:"project,omitempty"`
	ChangeLog            *Changelog                    `json:"changeLog,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RouteAggregationsData RouteAggregationsData

// NewRouteAggregationsData instantiates a new RouteAggregationsData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRouteAggregationsData() *RouteAggregationsData {
	this := RouteAggregationsData{}
	return &this
}

// NewRouteAggregationsDataWithDefaults instantiates a new RouteAggregationsData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteAggregationsDataWithDefaults() *RouteAggregationsData {
	this := RouteAggregationsData{}
	return &this
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *RouteAggregationsData) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteAggregationsData) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *RouteAggregationsData) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *RouteAggregationsData) SetHref(v string) {
	o.Href = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RouteAggregationsData) GetType() RouteAggregationsBaseType {
	if o == nil || IsNil(o.Type) {
		var ret RouteAggregationsBaseType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteAggregationsData) GetTypeOk() (*RouteAggregationsBaseType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RouteAggregationsData) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given RouteAggregationsBaseType and assigns it to the Type field.
func (o *RouteAggregationsData) SetType(v RouteAggregationsBaseType) {
	o.Type = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *RouteAggregationsData) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteAggregationsData) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *RouteAggregationsData) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *RouteAggregationsData) SetUuid(v string) {
	o.Uuid = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RouteAggregationsData) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteAggregationsData) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RouteAggregationsData) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RouteAggregationsData) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RouteAggregationsData) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteAggregationsData) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RouteAggregationsData) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RouteAggregationsData) SetDescription(v string) {
	o.Description = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *RouteAggregationsData) GetState() RouteAggregationState {
	if o == nil || IsNil(o.State) {
		var ret RouteAggregationState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteAggregationsData) GetStateOk() (*RouteAggregationState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *RouteAggregationsData) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given RouteAggregationState and assigns it to the State field.
func (o *RouteAggregationsData) SetState(v RouteAggregationState) {
	o.State = &v
}

// GetChange returns the Change field value if set, zero value otherwise.
func (o *RouteAggregationsData) GetChange() RouteAggregationsChange {
	if o == nil || IsNil(o.Change) {
		var ret RouteAggregationsChange
		return ret
	}
	return *o.Change
}

// GetChangeOk returns a tuple with the Change field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteAggregationsData) GetChangeOk() (*RouteAggregationsChange, bool) {
	if o == nil || IsNil(o.Change) {
		return nil, false
	}
	return o.Change, true
}

// HasChange returns a boolean if a field has been set.
func (o *RouteAggregationsData) HasChange() bool {
	if o != nil && !IsNil(o.Change) {
		return true
	}

	return false
}

// SetChange gets a reference to the given RouteAggregationsChange and assigns it to the Change field.
func (o *RouteAggregationsData) SetChange(v RouteAggregationsChange) {
	o.Change = &v
}

// GetConnectionsCount returns the ConnectionsCount field value if set, zero value otherwise.
func (o *RouteAggregationsData) GetConnectionsCount() int32 {
	if o == nil || IsNil(o.ConnectionsCount) {
		var ret int32
		return ret
	}
	return *o.ConnectionsCount
}

// GetConnectionsCountOk returns a tuple with the ConnectionsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteAggregationsData) GetConnectionsCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ConnectionsCount) {
		return nil, false
	}
	return o.ConnectionsCount, true
}

// HasConnectionsCount returns a boolean if a field has been set.
func (o *RouteAggregationsData) HasConnectionsCount() bool {
	if o != nil && !IsNil(o.ConnectionsCount) {
		return true
	}

	return false
}

// SetConnectionsCount gets a reference to the given int32 and assigns it to the ConnectionsCount field.
func (o *RouteAggregationsData) SetConnectionsCount(v int32) {
	o.ConnectionsCount = &v
}

// GetRulesCount returns the RulesCount field value if set, zero value otherwise.
func (o *RouteAggregationsData) GetRulesCount() int32 {
	if o == nil || IsNil(o.RulesCount) {
		var ret int32
		return ret
	}
	return *o.RulesCount
}

// GetRulesCountOk returns a tuple with the RulesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteAggregationsData) GetRulesCountOk() (*int32, bool) {
	if o == nil || IsNil(o.RulesCount) {
		return nil, false
	}
	return o.RulesCount, true
}

// HasRulesCount returns a boolean if a field has been set.
func (o *RouteAggregationsData) HasRulesCount() bool {
	if o != nil && !IsNil(o.RulesCount) {
		return true
	}

	return false
}

// SetRulesCount gets a reference to the given int32 and assigns it to the RulesCount field.
func (o *RouteAggregationsData) SetRulesCount(v int32) {
	o.RulesCount = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *RouteAggregationsData) GetProject() RouteAggregationsDataProject {
	if o == nil || IsNil(o.Project) {
		var ret RouteAggregationsDataProject
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteAggregationsData) GetProjectOk() (*RouteAggregationsDataProject, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *RouteAggregationsData) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given RouteAggregationsDataProject and assigns it to the Project field.
func (o *RouteAggregationsData) SetProject(v RouteAggregationsDataProject) {
	o.Project = &v
}

// GetChangeLog returns the ChangeLog field value if set, zero value otherwise.
func (o *RouteAggregationsData) GetChangeLog() Changelog {
	if o == nil || IsNil(o.ChangeLog) {
		var ret Changelog
		return ret
	}
	return *o.ChangeLog
}

// GetChangeLogOk returns a tuple with the ChangeLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteAggregationsData) GetChangeLogOk() (*Changelog, bool) {
	if o == nil || IsNil(o.ChangeLog) {
		return nil, false
	}
	return o.ChangeLog, true
}

// HasChangeLog returns a boolean if a field has been set.
func (o *RouteAggregationsData) HasChangeLog() bool {
	if o != nil && !IsNil(o.ChangeLog) {
		return true
	}

	return false
}

// SetChangeLog gets a reference to the given Changelog and assigns it to the ChangeLog field.
func (o *RouteAggregationsData) SetChangeLog(v Changelog) {
	o.ChangeLog = &v
}

func (o RouteAggregationsData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RouteAggregationsData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Change) {
		toSerialize["change"] = o.Change
	}
	if !IsNil(o.ConnectionsCount) {
		toSerialize["connectionsCount"] = o.ConnectionsCount
	}
	if !IsNil(o.RulesCount) {
		toSerialize["rulesCount"] = o.RulesCount
	}
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}
	if !IsNil(o.ChangeLog) {
		toSerialize["changeLog"] = o.ChangeLog
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RouteAggregationsData) UnmarshalJSON(data []byte) (err error) {
	varRouteAggregationsData := _RouteAggregationsData{}

	err = json.Unmarshal(data, &varRouteAggregationsData)

	if err != nil {
		return err
	}

	*o = RouteAggregationsData(varRouteAggregationsData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "href")
		delete(additionalProperties, "type")
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "state")
		delete(additionalProperties, "change")
		delete(additionalProperties, "connectionsCount")
		delete(additionalProperties, "rulesCount")
		delete(additionalProperties, "project")
		delete(additionalProperties, "changeLog")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRouteAggregationsData struct {
	value *RouteAggregationsData
	isSet bool
}

func (v NullableRouteAggregationsData) Get() *RouteAggregationsData {
	return v.value
}

func (v *NullableRouteAggregationsData) Set(val *RouteAggregationsData) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteAggregationsData) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteAggregationsData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteAggregationsData(val *RouteAggregationsData) *NullableRouteAggregationsData {
	return &NullableRouteAggregationsData{value: val, isSet: true}
}

func (v NullableRouteAggregationsData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteAggregationsData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
