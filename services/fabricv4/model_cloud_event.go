/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the CloudEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CloudEvent{}

// CloudEvent Cloud Event object
type CloudEvent struct {
	// Cloud Event Open Telemetry specification
	Spec *string `json:"spec,omitempty"`
	// Cloud Event source
	Source *string `json:"source,omitempty"`
	// Cloud Event identifier
	Id *string `json:"id,omitempty"`
	// Equinix supported event type
	Type *string `json:"type,omitempty"`
	// Cloud Event subject
	Subject *string `json:"subject,omitempty"`
	// Cloud Event dataschema reference
	Dataschema *string `json:"dataschema,omitempty"`
	// Cloud Event data content type
	Datacontenttype *string `json:"datacontenttype,omitempty"`
	// Cloud Event severity number
	Severitynumber *string `json:"severitynumber,omitempty"`
	// Cloud Event severity text
	Severitytext *string `json:"severitytext,omitempty"`
	// Equinix project identifier
	Equinixproject *string `json:"equinixproject,omitempty"`
	// Cloud Event auth type
	Authtype *string `json:"authtype,omitempty"`
	// Cloud Event user identifier
	Authid               *string         `json:"authid,omitempty"`
	Data                 *CloudEventData `json:"data,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CloudEvent CloudEvent

// NewCloudEvent instantiates a new CloudEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloudEvent() *CloudEvent {
	this := CloudEvent{}
	return &this
}

// NewCloudEventWithDefaults instantiates a new CloudEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloudEventWithDefaults() *CloudEvent {
	this := CloudEvent{}
	return &this
}

// GetSpec returns the Spec field value if set, zero value otherwise.
func (o *CloudEvent) GetSpec() string {
	if o == nil || IsNil(o.Spec) {
		var ret string
		return ret
	}
	return *o.Spec
}

// GetSpecOk returns a tuple with the Spec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudEvent) GetSpecOk() (*string, bool) {
	if o == nil || IsNil(o.Spec) {
		return nil, false
	}
	return o.Spec, true
}

// HasSpec returns a boolean if a field has been set.
func (o *CloudEvent) HasSpec() bool {
	if o != nil && !IsNil(o.Spec) {
		return true
	}

	return false
}

// SetSpec gets a reference to the given string and assigns it to the Spec field.
func (o *CloudEvent) SetSpec(v string) {
	o.Spec = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *CloudEvent) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudEvent) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *CloudEvent) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *CloudEvent) SetSource(v string) {
	o.Source = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CloudEvent) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudEvent) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CloudEvent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CloudEvent) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CloudEvent) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudEvent) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CloudEvent) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CloudEvent) SetType(v string) {
	o.Type = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *CloudEvent) GetSubject() string {
	if o == nil || IsNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudEvent) GetSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *CloudEvent) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *CloudEvent) SetSubject(v string) {
	o.Subject = &v
}

// GetDataschema returns the Dataschema field value if set, zero value otherwise.
func (o *CloudEvent) GetDataschema() string {
	if o == nil || IsNil(o.Dataschema) {
		var ret string
		return ret
	}
	return *o.Dataschema
}

// GetDataschemaOk returns a tuple with the Dataschema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudEvent) GetDataschemaOk() (*string, bool) {
	if o == nil || IsNil(o.Dataschema) {
		return nil, false
	}
	return o.Dataschema, true
}

// HasDataschema returns a boolean if a field has been set.
func (o *CloudEvent) HasDataschema() bool {
	if o != nil && !IsNil(o.Dataschema) {
		return true
	}

	return false
}

// SetDataschema gets a reference to the given string and assigns it to the Dataschema field.
func (o *CloudEvent) SetDataschema(v string) {
	o.Dataschema = &v
}

// GetDatacontenttype returns the Datacontenttype field value if set, zero value otherwise.
func (o *CloudEvent) GetDatacontenttype() string {
	if o == nil || IsNil(o.Datacontenttype) {
		var ret string
		return ret
	}
	return *o.Datacontenttype
}

// GetDatacontenttypeOk returns a tuple with the Datacontenttype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudEvent) GetDatacontenttypeOk() (*string, bool) {
	if o == nil || IsNil(o.Datacontenttype) {
		return nil, false
	}
	return o.Datacontenttype, true
}

// HasDatacontenttype returns a boolean if a field has been set.
func (o *CloudEvent) HasDatacontenttype() bool {
	if o != nil && !IsNil(o.Datacontenttype) {
		return true
	}

	return false
}

// SetDatacontenttype gets a reference to the given string and assigns it to the Datacontenttype field.
func (o *CloudEvent) SetDatacontenttype(v string) {
	o.Datacontenttype = &v
}

// GetSeveritynumber returns the Severitynumber field value if set, zero value otherwise.
func (o *CloudEvent) GetSeveritynumber() string {
	if o == nil || IsNil(o.Severitynumber) {
		var ret string
		return ret
	}
	return *o.Severitynumber
}

// GetSeveritynumberOk returns a tuple with the Severitynumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudEvent) GetSeveritynumberOk() (*string, bool) {
	if o == nil || IsNil(o.Severitynumber) {
		return nil, false
	}
	return o.Severitynumber, true
}

// HasSeveritynumber returns a boolean if a field has been set.
func (o *CloudEvent) HasSeveritynumber() bool {
	if o != nil && !IsNil(o.Severitynumber) {
		return true
	}

	return false
}

// SetSeveritynumber gets a reference to the given string and assigns it to the Severitynumber field.
func (o *CloudEvent) SetSeveritynumber(v string) {
	o.Severitynumber = &v
}

// GetSeveritytext returns the Severitytext field value if set, zero value otherwise.
func (o *CloudEvent) GetSeveritytext() string {
	if o == nil || IsNil(o.Severitytext) {
		var ret string
		return ret
	}
	return *o.Severitytext
}

// GetSeveritytextOk returns a tuple with the Severitytext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudEvent) GetSeveritytextOk() (*string, bool) {
	if o == nil || IsNil(o.Severitytext) {
		return nil, false
	}
	return o.Severitytext, true
}

// HasSeveritytext returns a boolean if a field has been set.
func (o *CloudEvent) HasSeveritytext() bool {
	if o != nil && !IsNil(o.Severitytext) {
		return true
	}

	return false
}

// SetSeveritytext gets a reference to the given string and assigns it to the Severitytext field.
func (o *CloudEvent) SetSeveritytext(v string) {
	o.Severitytext = &v
}

// GetEquinixproject returns the Equinixproject field value if set, zero value otherwise.
func (o *CloudEvent) GetEquinixproject() string {
	if o == nil || IsNil(o.Equinixproject) {
		var ret string
		return ret
	}
	return *o.Equinixproject
}

// GetEquinixprojectOk returns a tuple with the Equinixproject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudEvent) GetEquinixprojectOk() (*string, bool) {
	if o == nil || IsNil(o.Equinixproject) {
		return nil, false
	}
	return o.Equinixproject, true
}

// HasEquinixproject returns a boolean if a field has been set.
func (o *CloudEvent) HasEquinixproject() bool {
	if o != nil && !IsNil(o.Equinixproject) {
		return true
	}

	return false
}

// SetEquinixproject gets a reference to the given string and assigns it to the Equinixproject field.
func (o *CloudEvent) SetEquinixproject(v string) {
	o.Equinixproject = &v
}

// GetAuthtype returns the Authtype field value if set, zero value otherwise.
func (o *CloudEvent) GetAuthtype() string {
	if o == nil || IsNil(o.Authtype) {
		var ret string
		return ret
	}
	return *o.Authtype
}

// GetAuthtypeOk returns a tuple with the Authtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudEvent) GetAuthtypeOk() (*string, bool) {
	if o == nil || IsNil(o.Authtype) {
		return nil, false
	}
	return o.Authtype, true
}

// HasAuthtype returns a boolean if a field has been set.
func (o *CloudEvent) HasAuthtype() bool {
	if o != nil && !IsNil(o.Authtype) {
		return true
	}

	return false
}

// SetAuthtype gets a reference to the given string and assigns it to the Authtype field.
func (o *CloudEvent) SetAuthtype(v string) {
	o.Authtype = &v
}

// GetAuthid returns the Authid field value if set, zero value otherwise.
func (o *CloudEvent) GetAuthid() string {
	if o == nil || IsNil(o.Authid) {
		var ret string
		return ret
	}
	return *o.Authid
}

// GetAuthidOk returns a tuple with the Authid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudEvent) GetAuthidOk() (*string, bool) {
	if o == nil || IsNil(o.Authid) {
		return nil, false
	}
	return o.Authid, true
}

// HasAuthid returns a boolean if a field has been set.
func (o *CloudEvent) HasAuthid() bool {
	if o != nil && !IsNil(o.Authid) {
		return true
	}

	return false
}

// SetAuthid gets a reference to the given string and assigns it to the Authid field.
func (o *CloudEvent) SetAuthid(v string) {
	o.Authid = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *CloudEvent) GetData() CloudEventData {
	if o == nil || IsNil(o.Data) {
		var ret CloudEventData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudEvent) GetDataOk() (*CloudEventData, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *CloudEvent) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given CloudEventData and assigns it to the Data field.
func (o *CloudEvent) SetData(v CloudEventData) {
	o.Data = &v
}

func (o CloudEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CloudEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Spec) {
		toSerialize["spec"] = o.Spec
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !IsNil(o.Dataschema) {
		toSerialize["dataschema"] = o.Dataschema
	}
	if !IsNil(o.Datacontenttype) {
		toSerialize["datacontenttype"] = o.Datacontenttype
	}
	if !IsNil(o.Severitynumber) {
		toSerialize["severitynumber"] = o.Severitynumber
	}
	if !IsNil(o.Severitytext) {
		toSerialize["severitytext"] = o.Severitytext
	}
	if !IsNil(o.Equinixproject) {
		toSerialize["equinixproject"] = o.Equinixproject
	}
	if !IsNil(o.Authtype) {
		toSerialize["authtype"] = o.Authtype
	}
	if !IsNil(o.Authid) {
		toSerialize["authid"] = o.Authid
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CloudEvent) UnmarshalJSON(data []byte) (err error) {
	varCloudEvent := _CloudEvent{}

	err = json.Unmarshal(data, &varCloudEvent)

	if err != nil {
		return err
	}

	*o = CloudEvent(varCloudEvent)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "spec")
		delete(additionalProperties, "source")
		delete(additionalProperties, "id")
		delete(additionalProperties, "type")
		delete(additionalProperties, "subject")
		delete(additionalProperties, "dataschema")
		delete(additionalProperties, "datacontenttype")
		delete(additionalProperties, "severitynumber")
		delete(additionalProperties, "severitytext")
		delete(additionalProperties, "equinixproject")
		delete(additionalProperties, "authtype")
		delete(additionalProperties, "authid")
		delete(additionalProperties, "data")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCloudEvent struct {
	value *CloudEvent
	isSet bool
}

func (v NullableCloudEvent) Get() *CloudEvent {
	return v.value
}

func (v *NullableCloudEvent) Set(val *CloudEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudEvent(val *CloudEvent) *NullableCloudEvent {
	return &NullableCloudEvent{value: val, isSet: true}
}

func (v NullableCloudEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
