/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// RouteAggregationRulesChangeType Type of change
type RouteAggregationRulesChangeType string

// List of RouteAggregationRulesChange_type
const (
	ROUTEAGGREGATIONRULESCHANGETYPE_UPDATE   RouteAggregationRulesChangeType = "BGP_IPv4_PREFIX_AGGREGATION_RULE_UPDATE"
	ROUTEAGGREGATIONRULESCHANGETYPE_CREATION RouteAggregationRulesChangeType = "BGP_IPv4_PREFIX_AGGREGATION_RULE_CREATION"
	ROUTEAGGREGATIONRULESCHANGETYPE_DELETION RouteAggregationRulesChangeType = "BGP_IPv4_PREFIX_AGGREGATION_RULE_DELETION"
)

// All allowed values of RouteAggregationRulesChangeType enum
var AllowedRouteAggregationRulesChangeTypeEnumValues = []RouteAggregationRulesChangeType{
	"BGP_IPv4_PREFIX_AGGREGATION_RULE_UPDATE",
	"BGP_IPv4_PREFIX_AGGREGATION_RULE_CREATION",
	"BGP_IPv4_PREFIX_AGGREGATION_RULE_DELETION",
}

func (v *RouteAggregationRulesChangeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RouteAggregationRulesChangeType(value)
	for _, existing := range AllowedRouteAggregationRulesChangeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RouteAggregationRulesChangeType", value)
}

// NewRouteAggregationRulesChangeTypeFromValue returns a pointer to a valid RouteAggregationRulesChangeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRouteAggregationRulesChangeTypeFromValue(v string) (*RouteAggregationRulesChangeType, error) {
	ev := RouteAggregationRulesChangeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RouteAggregationRulesChangeType: valid values are %v", v, AllowedRouteAggregationRulesChangeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RouteAggregationRulesChangeType) IsValid() bool {
	for _, existing := range AllowedRouteAggregationRulesChangeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RouteAggregationRulesChange_type value
func (v RouteAggregationRulesChangeType) Ptr() *RouteAggregationRulesChangeType {
	return &v
}

type NullableRouteAggregationRulesChangeType struct {
	value *RouteAggregationRulesChangeType
	isSet bool
}

func (v NullableRouteAggregationRulesChangeType) Get() *RouteAggregationRulesChangeType {
	return v.value
}

func (v *NullableRouteAggregationRulesChangeType) Set(val *RouteAggregationRulesChangeType) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteAggregationRulesChangeType) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteAggregationRulesChangeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteAggregationRulesChangeType(val *RouteAggregationRulesChangeType) *NullableRouteAggregationRulesChangeType {
	return &NullableRouteAggregationRulesChangeType{value: val, isSet: true}
}

func (v NullableRouteAggregationRulesChangeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteAggregationRulesChangeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
