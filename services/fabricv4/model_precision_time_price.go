/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the PrecisionTimePrice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrecisionTimePrice{}

// PrecisionTimePrice Precision Time Price
type PrecisionTimePrice struct {
	// offering price currency
	Currency             *string       `json:"currency,omitempty"`
	Charges              []PriceCharge `json:"charges,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PrecisionTimePrice PrecisionTimePrice

// NewPrecisionTimePrice instantiates a new PrecisionTimePrice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrecisionTimePrice() *PrecisionTimePrice {
	this := PrecisionTimePrice{}
	return &this
}

// NewPrecisionTimePriceWithDefaults instantiates a new PrecisionTimePrice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrecisionTimePriceWithDefaults() *PrecisionTimePrice {
	this := PrecisionTimePrice{}
	return &this
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *PrecisionTimePrice) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrecisionTimePrice) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *PrecisionTimePrice) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *PrecisionTimePrice) SetCurrency(v string) {
	o.Currency = &v
}

// GetCharges returns the Charges field value if set, zero value otherwise.
func (o *PrecisionTimePrice) GetCharges() []PriceCharge {
	if o == nil || IsNil(o.Charges) {
		var ret []PriceCharge
		return ret
	}
	return o.Charges
}

// GetChargesOk returns a tuple with the Charges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrecisionTimePrice) GetChargesOk() ([]PriceCharge, bool) {
	if o == nil || IsNil(o.Charges) {
		return nil, false
	}
	return o.Charges, true
}

// HasCharges returns a boolean if a field has been set.
func (o *PrecisionTimePrice) HasCharges() bool {
	if o != nil && !IsNil(o.Charges) {
		return true
	}

	return false
}

// SetCharges gets a reference to the given []PriceCharge and assigns it to the Charges field.
func (o *PrecisionTimePrice) SetCharges(v []PriceCharge) {
	o.Charges = v
}

func (o PrecisionTimePrice) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrecisionTimePrice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Charges) {
		toSerialize["charges"] = o.Charges
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PrecisionTimePrice) UnmarshalJSON(data []byte) (err error) {
	varPrecisionTimePrice := _PrecisionTimePrice{}

	err = json.Unmarshal(data, &varPrecisionTimePrice)

	if err != nil {
		return err
	}

	*o = PrecisionTimePrice(varPrecisionTimePrice)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "currency")
		delete(additionalProperties, "charges")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePrecisionTimePrice struct {
	value *PrecisionTimePrice
	isSet bool
}

func (v NullablePrecisionTimePrice) Get() *PrecisionTimePrice {
	return v.value
}

func (v *NullablePrecisionTimePrice) Set(val *PrecisionTimePrice) {
	v.value = val
	v.isSet = true
}

func (v NullablePrecisionTimePrice) IsSet() bool {
	return v.isSet
}

func (v *NullablePrecisionTimePrice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrecisionTimePrice(val *PrecisionTimePrice) *NullablePrecisionTimePrice {
	return &NullablePrecisionTimePrice{value: val, isSet: true}
}

func (v NullablePrecisionTimePrice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrecisionTimePrice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
