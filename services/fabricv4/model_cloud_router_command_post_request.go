/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// checks if the CloudRouterCommandPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CloudRouterCommandPostRequest{}

// CloudRouterCommandPostRequest Execute Cloud Router Command Request
type CloudRouterCommandPostRequest struct {
	Type CloudRouterCommandType `json:"type"`
	// Customer-provided Cloud Router Command name
	Name *string `json:"name,omitempty"`
	// Customer-provided Cloud Router Command description
	Description          *string                   `json:"description,omitempty"`
	Project              Project                   `json:"project"`
	Request              CloudRouterCommandRequest `json:"request"`
	AdditionalProperties map[string]interface{}
}

type _CloudRouterCommandPostRequest CloudRouterCommandPostRequest

// NewCloudRouterCommandPostRequest instantiates a new CloudRouterCommandPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloudRouterCommandPostRequest(type_ CloudRouterCommandType, project Project, request CloudRouterCommandRequest) *CloudRouterCommandPostRequest {
	this := CloudRouterCommandPostRequest{}
	this.Type = type_
	this.Project = project
	this.Request = request
	return &this
}

// NewCloudRouterCommandPostRequestWithDefaults instantiates a new CloudRouterCommandPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloudRouterCommandPostRequestWithDefaults() *CloudRouterCommandPostRequest {
	this := CloudRouterCommandPostRequest{}
	return &this
}

// GetType returns the Type field value
func (o *CloudRouterCommandPostRequest) GetType() CloudRouterCommandType {
	if o == nil {
		var ret CloudRouterCommandType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CloudRouterCommandPostRequest) GetTypeOk() (*CloudRouterCommandType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CloudRouterCommandPostRequest) SetType(v CloudRouterCommandType) {
	o.Type = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CloudRouterCommandPostRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudRouterCommandPostRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CloudRouterCommandPostRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CloudRouterCommandPostRequest) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CloudRouterCommandPostRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudRouterCommandPostRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CloudRouterCommandPostRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CloudRouterCommandPostRequest) SetDescription(v string) {
	o.Description = &v
}

// GetProject returns the Project field value
func (o *CloudRouterCommandPostRequest) GetProject() Project {
	if o == nil {
		var ret Project
		return ret
	}

	return o.Project
}

// GetProjectOk returns a tuple with the Project field value
// and a boolean to check if the value has been set.
func (o *CloudRouterCommandPostRequest) GetProjectOk() (*Project, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Project, true
}

// SetProject sets field value
func (o *CloudRouterCommandPostRequest) SetProject(v Project) {
	o.Project = v
}

// GetRequest returns the Request field value
func (o *CloudRouterCommandPostRequest) GetRequest() CloudRouterCommandRequest {
	if o == nil {
		var ret CloudRouterCommandRequest
		return ret
	}

	return o.Request
}

// GetRequestOk returns a tuple with the Request field value
// and a boolean to check if the value has been set.
func (o *CloudRouterCommandPostRequest) GetRequestOk() (*CloudRouterCommandRequest, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Request, true
}

// SetRequest sets field value
func (o *CloudRouterCommandPostRequest) SetRequest(v CloudRouterCommandRequest) {
	o.Request = v
}

func (o CloudRouterCommandPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CloudRouterCommandPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["project"] = o.Project
	toSerialize["request"] = o.Request

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CloudRouterCommandPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"project",
		"request",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCloudRouterCommandPostRequest := _CloudRouterCommandPostRequest{}

	err = json.Unmarshal(data, &varCloudRouterCommandPostRequest)

	if err != nil {
		return err
	}

	*o = CloudRouterCommandPostRequest(varCloudRouterCommandPostRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "project")
		delete(additionalProperties, "request")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCloudRouterCommandPostRequest struct {
	value *CloudRouterCommandPostRequest
	isSet bool
}

func (v NullableCloudRouterCommandPostRequest) Get() *CloudRouterCommandPostRequest {
	return v.value
}

func (v *NullableCloudRouterCommandPostRequest) Set(val *CloudRouterCommandPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudRouterCommandPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudRouterCommandPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudRouterCommandPostRequest(val *CloudRouterCommandPostRequest) *NullableCloudRouterCommandPostRequest {
	return &NullableCloudRouterCommandPostRequest{value: val, isSet: true}
}

func (v NullableCloudRouterCommandPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudRouterCommandPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
