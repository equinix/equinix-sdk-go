/*
Equinix Fabric API v4

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// SubscriptionRouterPackageTypeCode Cloud Router package code
type SubscriptionRouterPackageTypeCode string

// List of SubscriptionRouterPackageType_code
const (
	SUBSCRIPTIONROUTERPACKAGETYPECODE_ADVANCED SubscriptionRouterPackageTypeCode = "ADVANCED"
	SUBSCRIPTIONROUTERPACKAGETYPECODE_STANDARD SubscriptionRouterPackageTypeCode = "STANDARD"
)

// All allowed values of SubscriptionRouterPackageTypeCode enum
var AllowedSubscriptionRouterPackageTypeCodeEnumValues = []SubscriptionRouterPackageTypeCode{
	"ADVANCED",
	"STANDARD",
}

func (v *SubscriptionRouterPackageTypeCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SubscriptionRouterPackageTypeCode(value)
	for _, existing := range AllowedSubscriptionRouterPackageTypeCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SubscriptionRouterPackageTypeCode", value)
}

// NewSubscriptionRouterPackageTypeCodeFromValue returns a pointer to a valid SubscriptionRouterPackageTypeCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSubscriptionRouterPackageTypeCodeFromValue(v string) (*SubscriptionRouterPackageTypeCode, error) {
	ev := SubscriptionRouterPackageTypeCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SubscriptionRouterPackageTypeCode: valid values are %v", v, AllowedSubscriptionRouterPackageTypeCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SubscriptionRouterPackageTypeCode) IsValid() bool {
	for _, existing := range AllowedSubscriptionRouterPackageTypeCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SubscriptionRouterPackageType_code value
func (v SubscriptionRouterPackageTypeCode) Ptr() *SubscriptionRouterPackageTypeCode {
	return &v
}

type NullableSubscriptionRouterPackageTypeCode struct {
	value *SubscriptionRouterPackageTypeCode
	isSet bool
}

func (v NullableSubscriptionRouterPackageTypeCode) Get() *SubscriptionRouterPackageTypeCode {
	return v.value
}

func (v *NullableSubscriptionRouterPackageTypeCode) Set(val *SubscriptionRouterPackageTypeCode) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionRouterPackageTypeCode) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionRouterPackageTypeCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionRouterPackageTypeCode(val *SubscriptionRouterPackageTypeCode) *NullableSubscriptionRouterPackageTypeCode {
	return &NullableSubscriptionRouterPackageTypeCode{value: val, isSet: true}
}

func (v NullableSubscriptionRouterPackageTypeCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionRouterPackageTypeCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
