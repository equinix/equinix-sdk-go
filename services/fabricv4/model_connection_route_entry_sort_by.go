/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// ConnectionRouteEntrySortBy Possible field names to use on sorting
type ConnectionRouteEntrySortBy string

// List of ConnectionRouteEntrySortBy
const (
	CONNECTIONROUTEENTRYSORTBY_CHANGE_LOG_CREATED_DATE_TIME ConnectionRouteEntrySortBy = "/changeLog/createdDateTime"
	CONNECTIONROUTEENTRYSORTBY_CHANGE_LOG_UPDATED_DATE_TIME ConnectionRouteEntrySortBy = "/changeLog/updatedDateTime"
	CONNECTIONROUTEENTRYSORTBY_MED                          ConnectionRouteEntrySortBy = "/med"
	CONNECTIONROUTEENTRYSORTBY_CONNECTION_NAME              ConnectionRouteEntrySortBy = "/connection/name"
	CONNECTIONROUTEENTRYSORTBY_TYPE                         ConnectionRouteEntrySortBy = "/type"
	CONNECTIONROUTEENTRYSORTBY_PREFIX                       ConnectionRouteEntrySortBy = "/prefix"
	CONNECTIONROUTEENTRYSORTBY_NEXT_HOP                     ConnectionRouteEntrySortBy = "/nextHop"
)

// All allowed values of ConnectionRouteEntrySortBy enum
var AllowedConnectionRouteEntrySortByEnumValues = []ConnectionRouteEntrySortBy{
	"/changeLog/createdDateTime",
	"/changeLog/updatedDateTime",
	"/med",
	"/connection/name",
	"/type",
	"/prefix",
	"/nextHop",
}

func (v *ConnectionRouteEntrySortBy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConnectionRouteEntrySortBy(value)
	for _, existing := range AllowedConnectionRouteEntrySortByEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConnectionRouteEntrySortBy", value)
}

// NewConnectionRouteEntrySortByFromValue returns a pointer to a valid ConnectionRouteEntrySortBy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConnectionRouteEntrySortByFromValue(v string) (*ConnectionRouteEntrySortBy, error) {
	ev := ConnectionRouteEntrySortBy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConnectionRouteEntrySortBy: valid values are %v", v, AllowedConnectionRouteEntrySortByEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConnectionRouteEntrySortBy) IsValid() bool {
	for _, existing := range AllowedConnectionRouteEntrySortByEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConnectionRouteEntrySortBy value
func (v ConnectionRouteEntrySortBy) Ptr() *ConnectionRouteEntrySortBy {
	return &v
}

type NullableConnectionRouteEntrySortBy struct {
	value *ConnectionRouteEntrySortBy
	isSet bool
}

func (v NullableConnectionRouteEntrySortBy) Get() *ConnectionRouteEntrySortBy {
	return v.value
}

func (v *NullableConnectionRouteEntrySortBy) Set(val *ConnectionRouteEntrySortBy) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionRouteEntrySortBy) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionRouteEntrySortBy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionRouteEntrySortBy(val *ConnectionRouteEntrySortBy) *NullableConnectionRouteEntrySortBy {
	return &NullableConnectionRouteEntrySortBy{value: val, isSet: true}
}

func (v NullableConnectionRouteEntrySortBy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionRouteEntrySortBy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
