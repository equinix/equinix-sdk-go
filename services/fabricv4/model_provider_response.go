/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ProviderResponse - Describes the response structure for different orchestrator provider types, including their specific configuration details.
type ProviderResponse struct {
	AWSProviderResponse    *AWSProviderResponse
	FabricProviderResponse *FabricProviderResponse
	GCPProviderResponse    *GCPProviderResponse
}

// AWSProviderResponseAsProviderResponse is a convenience function that returns AWSProviderResponse wrapped in ProviderResponse
func AWSProviderResponseAsProviderResponse(v *AWSProviderResponse) ProviderResponse {
	return ProviderResponse{
		AWSProviderResponse: v,
	}
}

// FabricProviderResponseAsProviderResponse is a convenience function that returns FabricProviderResponse wrapped in ProviderResponse
func FabricProviderResponseAsProviderResponse(v *FabricProviderResponse) ProviderResponse {
	return ProviderResponse{
		FabricProviderResponse: v,
	}
}

// GCPProviderResponseAsProviderResponse is a convenience function that returns GCPProviderResponse wrapped in ProviderResponse
func GCPProviderResponseAsProviderResponse(v *GCPProviderResponse) ProviderResponse {
	return ProviderResponse{
		GCPProviderResponse: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ProviderResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AWSProviderResponse
	err = newStrictDecoder(data).Decode(&dst.AWSProviderResponse)
	if err == nil {
		jsonAWSProviderResponse, _ := json.Marshal(dst.AWSProviderResponse)
		if string(jsonAWSProviderResponse) == "{}" { // empty struct
			dst.AWSProviderResponse = nil
		} else {
			if err = validator.Validate(dst.AWSProviderResponse); err != nil {
				dst.AWSProviderResponse = nil
			} else {
				match++
			}
		}
	} else {
		dst.AWSProviderResponse = nil
	}

	// try to unmarshal data into FabricProviderResponse
	err = newStrictDecoder(data).Decode(&dst.FabricProviderResponse)
	if err == nil {
		jsonFabricProviderResponse, _ := json.Marshal(dst.FabricProviderResponse)
		if string(jsonFabricProviderResponse) == "{}" { // empty struct
			dst.FabricProviderResponse = nil
		} else {
			if err = validator.Validate(dst.FabricProviderResponse); err != nil {
				dst.FabricProviderResponse = nil
			} else {
				match++
			}
		}
	} else {
		dst.FabricProviderResponse = nil
	}

	// try to unmarshal data into GCPProviderResponse
	err = newStrictDecoder(data).Decode(&dst.GCPProviderResponse)
	if err == nil {
		jsonGCPProviderResponse, _ := json.Marshal(dst.GCPProviderResponse)
		if string(jsonGCPProviderResponse) == "{}" { // empty struct
			dst.GCPProviderResponse = nil
		} else {
			if err = validator.Validate(dst.GCPProviderResponse); err != nil {
				dst.GCPProviderResponse = nil
			} else {
				match++
			}
		}
	} else {
		dst.GCPProviderResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AWSProviderResponse = nil
		dst.FabricProviderResponse = nil
		dst.GCPProviderResponse = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ProviderResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ProviderResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ProviderResponse) MarshalJSON() ([]byte, error) {
	if src.AWSProviderResponse != nil {
		return json.Marshal(&src.AWSProviderResponse)
	}

	if src.FabricProviderResponse != nil {
		return json.Marshal(&src.FabricProviderResponse)
	}

	if src.GCPProviderResponse != nil {
		return json.Marshal(&src.GCPProviderResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ProviderResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.AWSProviderResponse != nil {
		return obj.AWSProviderResponse
	}

	if obj.FabricProviderResponse != nil {
		return obj.FabricProviderResponse
	}

	if obj.GCPProviderResponse != nil {
		return obj.GCPProviderResponse
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ProviderResponse) GetActualInstanceValue() interface{} {
	if obj.AWSProviderResponse != nil {
		return *obj.AWSProviderResponse
	}

	if obj.FabricProviderResponse != nil {
		return *obj.FabricProviderResponse
	}

	if obj.GCPProviderResponse != nil {
		return *obj.GCPProviderResponse
	}

	// all schemas are nil
	return nil
}

type NullableProviderResponse struct {
	value *ProviderResponse
	isSet bool
}

func (v NullableProviderResponse) Get() *ProviderResponse {
	return v.value
}

func (v *NullableProviderResponse) Set(val *ProviderResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableProviderResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableProviderResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProviderResponse(val *ProviderResponse) *NullableProviderResponse {
	return &NullableProviderResponse{value: val, isSet: true}
}

func (v NullableProviderResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProviderResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
