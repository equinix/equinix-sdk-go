/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// StreamAlertRuleState Steam subscription provision state
type StreamAlertRuleState string

// List of StreamAlertRule_state
const (
	STREAMALERTRULESTATE_ACTIVE   StreamAlertRuleState = "ACTIVE"
	STREAMALERTRULESTATE_INACTIVE StreamAlertRuleState = "INACTIVE"
)

// All allowed values of StreamAlertRuleState enum
var AllowedStreamAlertRuleStateEnumValues = []StreamAlertRuleState{
	"ACTIVE",
	"INACTIVE",
}

func (v *StreamAlertRuleState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StreamAlertRuleState(value)
	for _, existing := range AllowedStreamAlertRuleStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StreamAlertRuleState", value)
}

// NewStreamAlertRuleStateFromValue returns a pointer to a valid StreamAlertRuleState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStreamAlertRuleStateFromValue(v string) (*StreamAlertRuleState, error) {
	ev := StreamAlertRuleState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StreamAlertRuleState: valid values are %v", v, AllowedStreamAlertRuleStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StreamAlertRuleState) IsValid() bool {
	for _, existing := range AllowedStreamAlertRuleStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StreamAlertRule_state value
func (v StreamAlertRuleState) Ptr() *StreamAlertRuleState {
	return &v
}

type NullableStreamAlertRuleState struct {
	value *StreamAlertRuleState
	isSet bool
}

func (v NullableStreamAlertRuleState) Get() *StreamAlertRuleState {
	return v.value
}

func (v *NullableStreamAlertRuleState) Set(val *StreamAlertRuleState) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamAlertRuleState) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamAlertRuleState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamAlertRuleState(val *StreamAlertRuleState) *NullableStreamAlertRuleState {
	return &NullableStreamAlertRuleState{value: val, isSet: true}
}

func (v NullableStreamAlertRuleState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamAlertRuleState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
