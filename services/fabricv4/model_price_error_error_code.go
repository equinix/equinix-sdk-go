/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// PriceErrorErrorCode the model 'PriceErrorErrorCode'
type PriceErrorErrorCode string

// List of PriceError_errorCode
const (
	PRICEERRORERRORCODE__3038010 PriceErrorErrorCode = "EQ-3038010"
	PRICEERRORERRORCODE__3038022 PriceErrorErrorCode = "EQ-3038022"
	PRICEERRORERRORCODE__3038030 PriceErrorErrorCode = "EQ-3038030"
)

// All allowed values of PriceErrorErrorCode enum
var AllowedPriceErrorErrorCodeEnumValues = []PriceErrorErrorCode{
	"EQ-3038010",
	"EQ-3038022",
	"EQ-3038030",
}

func (v *PriceErrorErrorCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PriceErrorErrorCode(value)
	for _, existing := range AllowedPriceErrorErrorCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PriceErrorErrorCode", value)
}

// NewPriceErrorErrorCodeFromValue returns a pointer to a valid PriceErrorErrorCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPriceErrorErrorCodeFromValue(v string) (*PriceErrorErrorCode, error) {
	ev := PriceErrorErrorCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PriceErrorErrorCode: valid values are %v", v, AllowedPriceErrorErrorCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PriceErrorErrorCode) IsValid() bool {
	for _, existing := range AllowedPriceErrorErrorCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PriceError_errorCode value
func (v PriceErrorErrorCode) Ptr() *PriceErrorErrorCode {
	return &v
}

type NullablePriceErrorErrorCode struct {
	value *PriceErrorErrorCode
	isSet bool
}

func (v NullablePriceErrorErrorCode) Get() *PriceErrorErrorCode {
	return v.value
}

func (v *NullablePriceErrorErrorCode) Set(val *PriceErrorErrorCode) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceErrorErrorCode) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceErrorErrorCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceErrorErrorCode(val *PriceErrorErrorCode) *NullablePriceErrorErrorCode {
	return &NullablePriceErrorErrorCode{value: val, isSet: true}
}

func (v NullablePriceErrorErrorCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceErrorErrorCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
