/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the RouteTableEntryConnection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RouteTableEntryConnection{}

// RouteTableEntryConnection struct for RouteTableEntryConnection
type RouteTableEntryConnection struct {
	Uuid                 *string `json:"uuid,omitempty"`
	Name                 *string `json:"name,omitempty"`
	Href                 *string `json:"href,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RouteTableEntryConnection RouteTableEntryConnection

// NewRouteTableEntryConnection instantiates a new RouteTableEntryConnection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRouteTableEntryConnection() *RouteTableEntryConnection {
	this := RouteTableEntryConnection{}
	return &this
}

// NewRouteTableEntryConnectionWithDefaults instantiates a new RouteTableEntryConnection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteTableEntryConnectionWithDefaults() *RouteTableEntryConnection {
	this := RouteTableEntryConnection{}
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *RouteTableEntryConnection) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteTableEntryConnection) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *RouteTableEntryConnection) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *RouteTableEntryConnection) SetUuid(v string) {
	o.Uuid = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RouteTableEntryConnection) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteTableEntryConnection) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RouteTableEntryConnection) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RouteTableEntryConnection) SetName(v string) {
	o.Name = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *RouteTableEntryConnection) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteTableEntryConnection) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *RouteTableEntryConnection) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *RouteTableEntryConnection) SetHref(v string) {
	o.Href = &v
}

func (o RouteTableEntryConnection) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RouteTableEntryConnection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RouteTableEntryConnection) UnmarshalJSON(data []byte) (err error) {
	varRouteTableEntryConnection := _RouteTableEntryConnection{}

	err = json.Unmarshal(data, &varRouteTableEntryConnection)

	if err != nil {
		return err
	}

	*o = RouteTableEntryConnection(varRouteTableEntryConnection)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "name")
		delete(additionalProperties, "href")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRouteTableEntryConnection struct {
	value *RouteTableEntryConnection
	isSet bool
}

func (v NullableRouteTableEntryConnection) Get() *RouteTableEntryConnection {
	return v.value
}

func (v *NullableRouteTableEntryConnection) Set(val *RouteTableEntryConnection) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteTableEntryConnection) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteTableEntryConnection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteTableEntryConnection(val *RouteTableEntryConnection) *NullableRouteTableEntryConnection {
	return &NullableRouteTableEntryConnection{value: val, isSet: true}
}

func (v NullableRouteTableEntryConnection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteTableEntryConnection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
