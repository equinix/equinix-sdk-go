/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// CloudEventFilter struct for CloudEventFilter
type CloudEventFilter struct {
	CloudEventSimpleExpression *CloudEventSimpleExpression
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *CloudEventFilter) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into CloudEventSimpleExpression
	err = json.Unmarshal(data, &dst.CloudEventSimpleExpression)
	if err == nil {
		jsonCloudEventSimpleExpression, _ := json.Marshal(dst.CloudEventSimpleExpression)
		if string(jsonCloudEventSimpleExpression) == "{}" { // empty struct
			dst.CloudEventSimpleExpression = nil
		} else {
			return nil // data stored in dst.CloudEventSimpleExpression, return on the first match
		}
	} else {
		dst.CloudEventSimpleExpression = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(CloudEventFilter)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CloudEventFilter) MarshalJSON() ([]byte, error) {
	if src.CloudEventSimpleExpression != nil {
		return json.Marshal(&src.CloudEventSimpleExpression)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableCloudEventFilter struct {
	value *CloudEventFilter
	isSet bool
}

func (v NullableCloudEventFilter) Get() *CloudEventFilter {
	return v.value
}

func (v *NullableCloudEventFilter) Set(val *CloudEventFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudEventFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudEventFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudEventFilter(val *CloudEventFilter) *NullableCloudEventFilter {
	return &NullableCloudEventFilter{value: val, isSet: true}
}

func (v NullableCloudEventFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudEventFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
