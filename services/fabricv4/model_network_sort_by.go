/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// NetworkSortBy Possible field names to use on sorting
type NetworkSortBy string

// List of NetworkSortBy
const (
	NETWORKSORTBY_NAME                         NetworkSortBy = "/name"
	NETWORKSORTBY_UUID                         NetworkSortBy = "/uuid"
	NETWORKSORTBY_SCOPE                        NetworkSortBy = "/scope"
	NETWORKSORTBY_OPERATION_EQUINIX_STATUS     NetworkSortBy = "/operation/equinixStatus"
	NETWORKSORTBY_LOCATION_REGION              NetworkSortBy = "/location/region"
	NETWORKSORTBY_CHANGE_LOG_CREATED_DATE_TIME NetworkSortBy = "/changeLog/createdDateTime"
	NETWORKSORTBY_CHANGE_LOG_UPDATED_DATE_TIME NetworkSortBy = "/changeLog/updatedDateTime"
)

// All allowed values of NetworkSortBy enum
var AllowedNetworkSortByEnumValues = []NetworkSortBy{
	"/name",
	"/uuid",
	"/scope",
	"/operation/equinixStatus",
	"/location/region",
	"/changeLog/createdDateTime",
	"/changeLog/updatedDateTime",
}

func (v *NetworkSortBy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NetworkSortBy(value)
	for _, existing := range AllowedNetworkSortByEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NetworkSortBy", value)
}

// NewNetworkSortByFromValue returns a pointer to a valid NetworkSortBy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNetworkSortByFromValue(v string) (*NetworkSortBy, error) {
	ev := NetworkSortBy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NetworkSortBy: valid values are %v", v, AllowedNetworkSortByEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NetworkSortBy) IsValid() bool {
	for _, existing := range AllowedNetworkSortByEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NetworkSortBy value
func (v NetworkSortBy) Ptr() *NetworkSortBy {
	return &v
}

type NullableNetworkSortBy struct {
	value *NetworkSortBy
	isSet bool
}

func (v NullableNetworkSortBy) Get() *NetworkSortBy {
	return v.value
}

func (v *NullableNetworkSortBy) Set(val *NetworkSortBy) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkSortBy) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkSortBy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkSortBy(val *NetworkSortBy) *NullableNetworkSortBy {
	return &NullableNetworkSortBy{value: val, isSet: true}
}

func (v NullableNetworkSortBy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkSortBy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
