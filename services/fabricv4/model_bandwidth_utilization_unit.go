/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// BandwidthUtilizationUnit Aggregated data transfer capacity. Possible values- Mbps, megabits (1 million bits) per second; Gbps, gigabits (1 billion bits) per second.
type BandwidthUtilizationUnit string

// List of BandwidthUtilization_unit
const (
	BANDWIDTHUTILIZATIONUNIT_MBPS BandwidthUtilizationUnit = "Mbps"
)

// All allowed values of BandwidthUtilizationUnit enum
var AllowedBandwidthUtilizationUnitEnumValues = []BandwidthUtilizationUnit{
	"Mbps",
}

func (v *BandwidthUtilizationUnit) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BandwidthUtilizationUnit(value)
	for _, existing := range AllowedBandwidthUtilizationUnitEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BandwidthUtilizationUnit", value)
}

// NewBandwidthUtilizationUnitFromValue returns a pointer to a valid BandwidthUtilizationUnit
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBandwidthUtilizationUnitFromValue(v string) (*BandwidthUtilizationUnit, error) {
	ev := BandwidthUtilizationUnit(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BandwidthUtilizationUnit: valid values are %v", v, AllowedBandwidthUtilizationUnitEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BandwidthUtilizationUnit) IsValid() bool {
	for _, existing := range AllowedBandwidthUtilizationUnitEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BandwidthUtilization_unit value
func (v BandwidthUtilizationUnit) Ptr() *BandwidthUtilizationUnit {
	return &v
}

type NullableBandwidthUtilizationUnit struct {
	value *BandwidthUtilizationUnit
	isSet bool
}

func (v NullableBandwidthUtilizationUnit) Get() *BandwidthUtilizationUnit {
	return v.value
}

func (v *NullableBandwidthUtilizationUnit) Set(val *BandwidthUtilizationUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableBandwidthUtilizationUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableBandwidthUtilizationUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBandwidthUtilizationUnit(val *BandwidthUtilizationUnit) *NullableBandwidthUtilizationUnit {
	return &NullableBandwidthUtilizationUnit{value: val, isSet: true}
}

func (v NullableBandwidthUtilizationUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBandwidthUtilizationUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
