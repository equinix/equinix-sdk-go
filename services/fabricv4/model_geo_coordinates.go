/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the GeoCoordinates type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GeoCoordinates{}

// GeoCoordinates Geographic location data of Fabric Metro
type GeoCoordinates struct {
	// Latitude of a Fabric Metro
	Latitude *float64 `json:"latitude,omitempty"`
	// Longitude of a Fabric Metro
	Longitude            *float64 `json:"longitude,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GeoCoordinates GeoCoordinates

// NewGeoCoordinates instantiates a new GeoCoordinates object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeoCoordinates() *GeoCoordinates {
	this := GeoCoordinates{}
	return &this
}

// NewGeoCoordinatesWithDefaults instantiates a new GeoCoordinates object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeoCoordinatesWithDefaults() *GeoCoordinates {
	this := GeoCoordinates{}
	return &this
}

// GetLatitude returns the Latitude field value if set, zero value otherwise.
func (o *GeoCoordinates) GetLatitude() float64 {
	if o == nil || IsNil(o.Latitude) {
		var ret float64
		return ret
	}
	return *o.Latitude
}

// GetLatitudeOk returns a tuple with the Latitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoCoordinates) GetLatitudeOk() (*float64, bool) {
	if o == nil || IsNil(o.Latitude) {
		return nil, false
	}
	return o.Latitude, true
}

// HasLatitude returns a boolean if a field has been set.
func (o *GeoCoordinates) HasLatitude() bool {
	if o != nil && !IsNil(o.Latitude) {
		return true
	}

	return false
}

// SetLatitude gets a reference to the given float64 and assigns it to the Latitude field.
func (o *GeoCoordinates) SetLatitude(v float64) {
	o.Latitude = &v
}

// GetLongitude returns the Longitude field value if set, zero value otherwise.
func (o *GeoCoordinates) GetLongitude() float64 {
	if o == nil || IsNil(o.Longitude) {
		var ret float64
		return ret
	}
	return *o.Longitude
}

// GetLongitudeOk returns a tuple with the Longitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoCoordinates) GetLongitudeOk() (*float64, bool) {
	if o == nil || IsNil(o.Longitude) {
		return nil, false
	}
	return o.Longitude, true
}

// HasLongitude returns a boolean if a field has been set.
func (o *GeoCoordinates) HasLongitude() bool {
	if o != nil && !IsNil(o.Longitude) {
		return true
	}

	return false
}

// SetLongitude gets a reference to the given float64 and assigns it to the Longitude field.
func (o *GeoCoordinates) SetLongitude(v float64) {
	o.Longitude = &v
}

func (o GeoCoordinates) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GeoCoordinates) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Latitude) {
		toSerialize["latitude"] = o.Latitude
	}
	if !IsNil(o.Longitude) {
		toSerialize["longitude"] = o.Longitude
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GeoCoordinates) UnmarshalJSON(data []byte) (err error) {
	varGeoCoordinates := _GeoCoordinates{}

	err = json.Unmarshal(data, &varGeoCoordinates)

	if err != nil {
		return err
	}

	*o = GeoCoordinates(varGeoCoordinates)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "latitude")
		delete(additionalProperties, "longitude")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGeoCoordinates struct {
	value *GeoCoordinates
	isSet bool
}

func (v NullableGeoCoordinates) Get() *GeoCoordinates {
	return v.value
}

func (v *NullableGeoCoordinates) Set(val *GeoCoordinates) {
	v.value = val
	v.isSet = true
}

func (v NullableGeoCoordinates) IsSet() bool {
	return v.isSet
}

func (v *NullableGeoCoordinates) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeoCoordinates(val *GeoCoordinates) *NullableGeoCoordinates {
	return &NullableGeoCoordinates{value: val, isSet: true}
}

func (v NullableGeoCoordinates) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeoCoordinates) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
