/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// GCPProviderResourceResponse - struct for GCPProviderResourceResponse
type GCPProviderResourceResponse struct {
	GCPCloudRouterResponse *GCPCloudRouterResponse
	GCPPermission          *GCPPermission
}

// GCPCloudRouterResponseAsGCPProviderResourceResponse is a convenience function that returns GCPCloudRouterResponse wrapped in GCPProviderResourceResponse
func GCPCloudRouterResponseAsGCPProviderResourceResponse(v *GCPCloudRouterResponse) GCPProviderResourceResponse {
	return GCPProviderResourceResponse{
		GCPCloudRouterResponse: v,
	}
}

// GCPPermissionAsGCPProviderResourceResponse is a convenience function that returns GCPPermission wrapped in GCPProviderResourceResponse
func GCPPermissionAsGCPProviderResourceResponse(v *GCPPermission) GCPProviderResourceResponse {
	return GCPProviderResourceResponse{
		GCPPermission: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GCPProviderResourceResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GCPCloudRouterResponse
	err = newStrictDecoder(data).Decode(&dst.GCPCloudRouterResponse)
	if err == nil {
		jsonGCPCloudRouterResponse, _ := json.Marshal(dst.GCPCloudRouterResponse)
		if string(jsonGCPCloudRouterResponse) == "{}" { // empty struct
			dst.GCPCloudRouterResponse = nil
		} else {
			if err = validator.Validate(dst.GCPCloudRouterResponse); err != nil {
				dst.GCPCloudRouterResponse = nil
			} else {
				match++
			}
		}
	} else {
		dst.GCPCloudRouterResponse = nil
	}

	// try to unmarshal data into GCPPermission
	err = newStrictDecoder(data).Decode(&dst.GCPPermission)
	if err == nil {
		jsonGCPPermission, _ := json.Marshal(dst.GCPPermission)
		if string(jsonGCPPermission) == "{}" { // empty struct
			dst.GCPPermission = nil
		} else {
			if err = validator.Validate(dst.GCPPermission); err != nil {
				dst.GCPPermission = nil
			} else {
				match++
			}
		}
	} else {
		dst.GCPPermission = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GCPCloudRouterResponse = nil
		dst.GCPPermission = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GCPProviderResourceResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GCPProviderResourceResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GCPProviderResourceResponse) MarshalJSON() ([]byte, error) {
	if src.GCPCloudRouterResponse != nil {
		return json.Marshal(&src.GCPCloudRouterResponse)
	}

	if src.GCPPermission != nil {
		return json.Marshal(&src.GCPPermission)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GCPProviderResourceResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GCPCloudRouterResponse != nil {
		return obj.GCPCloudRouterResponse
	}

	if obj.GCPPermission != nil {
		return obj.GCPPermission
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj GCPProviderResourceResponse) GetActualInstanceValue() interface{} {
	if obj.GCPCloudRouterResponse != nil {
		return *obj.GCPCloudRouterResponse
	}

	if obj.GCPPermission != nil {
		return *obj.GCPPermission
	}

	// all schemas are nil
	return nil
}

type NullableGCPProviderResourceResponse struct {
	value *GCPProviderResourceResponse
	isSet bool
}

func (v NullableGCPProviderResourceResponse) Get() *GCPProviderResourceResponse {
	return v.value
}

func (v *NullableGCPProviderResourceResponse) Set(val *GCPProviderResourceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGCPProviderResourceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGCPProviderResourceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGCPProviderResourceResponse(val *GCPProviderResourceResponse) *NullableGCPProviderResourceResponse {
	return &NullableGCPProviderResourceResponse{value: val, isSet: true}
}

func (v NullableGCPProviderResourceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGCPProviderResourceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
