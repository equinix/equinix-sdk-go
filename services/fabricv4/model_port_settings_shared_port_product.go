/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// PortSettingsSharedPortProduct the model 'PortSettingsSharedPortProduct'
type PortSettingsSharedPortProduct string

// List of PortSettings_sharedPortProduct
const (
	PORTSETTINGSSHAREDPORTPRODUCT_NETWORK_EDGE    PortSettingsSharedPortProduct = "NETWORK_EDGE"
	PORTSETTINGSSHAREDPORTPRODUCT_VIRTUAL_GATEWAY PortSettingsSharedPortProduct = "VIRTUAL_GATEWAY"
	PORTSETTINGSSHAREDPORTPRODUCT_SMARTKEY        PortSettingsSharedPortProduct = "SMARTKEY"
	PORTSETTINGSSHAREDPORTPRODUCT_EDGE_METAL      PortSettingsSharedPortProduct = "EDGE_METAL"
)

// All allowed values of PortSettingsSharedPortProduct enum
var AllowedPortSettingsSharedPortProductEnumValues = []PortSettingsSharedPortProduct{
	"NETWORK_EDGE",
	"VIRTUAL_GATEWAY",
	"SMARTKEY",
	"EDGE_METAL",
}

func (v *PortSettingsSharedPortProduct) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PortSettingsSharedPortProduct(value)
	for _, existing := range AllowedPortSettingsSharedPortProductEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PortSettingsSharedPortProduct", value)
}

// NewPortSettingsSharedPortProductFromValue returns a pointer to a valid PortSettingsSharedPortProduct
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPortSettingsSharedPortProductFromValue(v string) (*PortSettingsSharedPortProduct, error) {
	ev := PortSettingsSharedPortProduct(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PortSettingsSharedPortProduct: valid values are %v", v, AllowedPortSettingsSharedPortProductEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PortSettingsSharedPortProduct) IsValid() bool {
	for _, existing := range AllowedPortSettingsSharedPortProductEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PortSettings_sharedPortProduct value
func (v PortSettingsSharedPortProduct) Ptr() *PortSettingsSharedPortProduct {
	return &v
}

type NullablePortSettingsSharedPortProduct struct {
	value *PortSettingsSharedPortProduct
	isSet bool
}

func (v NullablePortSettingsSharedPortProduct) Get() *PortSettingsSharedPortProduct {
	return v.value
}

func (v *NullablePortSettingsSharedPortProduct) Set(val *PortSettingsSharedPortProduct) {
	v.value = val
	v.isSet = true
}

func (v NullablePortSettingsSharedPortProduct) IsSet() bool {
	return v.isSet
}

func (v *NullablePortSettingsSharedPortProduct) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortSettingsSharedPortProduct(val *PortSettingsSharedPortProduct) *NullablePortSettingsSharedPortProduct {
	return &NullablePortSettingsSharedPortProduct{value: val, isSet: true}
}

func (v NullablePortSettingsSharedPortProduct) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortSettingsSharedPortProduct) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
