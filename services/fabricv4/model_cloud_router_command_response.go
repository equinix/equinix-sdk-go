/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// CloudRouterCommandResponse - struct for CloudRouterCommandResponse
type CloudRouterCommandResponse struct {
	CloudRouterCommandPingResponse       *CloudRouterCommandPingResponse
	CloudRouterCommandTracerouteResponse *CloudRouterCommandTracerouteResponse
}

// CloudRouterCommandPingResponseAsCloudRouterCommandResponse is a convenience function that returns CloudRouterCommandPingResponse wrapped in CloudRouterCommandResponse
func CloudRouterCommandPingResponseAsCloudRouterCommandResponse(v *CloudRouterCommandPingResponse) CloudRouterCommandResponse {
	return CloudRouterCommandResponse{
		CloudRouterCommandPingResponse: v,
	}
}

// CloudRouterCommandTracerouteResponseAsCloudRouterCommandResponse is a convenience function that returns CloudRouterCommandTracerouteResponse wrapped in CloudRouterCommandResponse
func CloudRouterCommandTracerouteResponseAsCloudRouterCommandResponse(v *CloudRouterCommandTracerouteResponse) CloudRouterCommandResponse {
	return CloudRouterCommandResponse{
		CloudRouterCommandTracerouteResponse: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *CloudRouterCommandResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CloudRouterCommandPingResponse
	err = newStrictDecoder(data).Decode(&dst.CloudRouterCommandPingResponse)
	if err == nil {
		jsonCloudRouterCommandPingResponse, _ := json.Marshal(dst.CloudRouterCommandPingResponse)
		if string(jsonCloudRouterCommandPingResponse) == "{}" { // empty struct
			dst.CloudRouterCommandPingResponse = nil
		} else {
			if err = validator.Validate(dst.CloudRouterCommandPingResponse); err != nil {
				dst.CloudRouterCommandPingResponse = nil
			} else {
				match++
			}
		}
	} else {
		dst.CloudRouterCommandPingResponse = nil
	}

	// try to unmarshal data into CloudRouterCommandTracerouteResponse
	err = newStrictDecoder(data).Decode(&dst.CloudRouterCommandTracerouteResponse)
	if err == nil {
		jsonCloudRouterCommandTracerouteResponse, _ := json.Marshal(dst.CloudRouterCommandTracerouteResponse)
		if string(jsonCloudRouterCommandTracerouteResponse) == "{}" { // empty struct
			dst.CloudRouterCommandTracerouteResponse = nil
		} else {
			if err = validator.Validate(dst.CloudRouterCommandTracerouteResponse); err != nil {
				dst.CloudRouterCommandTracerouteResponse = nil
			} else {
				match++
			}
		}
	} else {
		dst.CloudRouterCommandTracerouteResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CloudRouterCommandPingResponse = nil
		dst.CloudRouterCommandTracerouteResponse = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CloudRouterCommandResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CloudRouterCommandResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CloudRouterCommandResponse) MarshalJSON() ([]byte, error) {
	if src.CloudRouterCommandPingResponse != nil {
		return json.Marshal(&src.CloudRouterCommandPingResponse)
	}

	if src.CloudRouterCommandTracerouteResponse != nil {
		return json.Marshal(&src.CloudRouterCommandTracerouteResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CloudRouterCommandResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CloudRouterCommandPingResponse != nil {
		return obj.CloudRouterCommandPingResponse
	}

	if obj.CloudRouterCommandTracerouteResponse != nil {
		return obj.CloudRouterCommandTracerouteResponse
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj CloudRouterCommandResponse) GetActualInstanceValue() interface{} {
	if obj.CloudRouterCommandPingResponse != nil {
		return *obj.CloudRouterCommandPingResponse
	}

	if obj.CloudRouterCommandTracerouteResponse != nil {
		return *obj.CloudRouterCommandTracerouteResponse
	}

	// all schemas are nil
	return nil
}

type NullableCloudRouterCommandResponse struct {
	value *CloudRouterCommandResponse
	isSet bool
}

func (v NullableCloudRouterCommandResponse) Get() *CloudRouterCommandResponse {
	return v.value
}

func (v *NullableCloudRouterCommandResponse) Set(val *CloudRouterCommandResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudRouterCommandResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudRouterCommandResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudRouterCommandResponse(val *CloudRouterCommandResponse) *NullableCloudRouterCommandResponse {
	return &NullableCloudRouterCommandResponse{value: val, isSet: true}
}

func (v NullableCloudRouterCommandResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudRouterCommandResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
