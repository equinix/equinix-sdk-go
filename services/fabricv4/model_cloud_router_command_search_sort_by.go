/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// CloudRouterCommandSearchSortBy Possible field names to use on sorting
type CloudRouterCommandSearchSortBy string

// List of CloudRouterCommandSearchSortBy
const (
	CLOUDROUTERCOMMANDSEARCHSORTBY_CHANGE_LOG_CREATED_DATE_TIME CloudRouterCommandSearchSortBy = "/changeLog/createdDateTime"
	CLOUDROUTERCOMMANDSEARCHSORTBY_CHANGE_LOG_UPDATED_DATE_TIME CloudRouterCommandSearchSortBy = "/changeLog/updatedDateTime"
	CLOUDROUTERCOMMANDSEARCHSORTBY_NAME                         CloudRouterCommandSearchSortBy = "/name"
	CLOUDROUTERCOMMANDSEARCHSORTBY_TYPE                         CloudRouterCommandSearchSortBy = "/type"
)

// All allowed values of CloudRouterCommandSearchSortBy enum
var AllowedCloudRouterCommandSearchSortByEnumValues = []CloudRouterCommandSearchSortBy{
	"/changeLog/createdDateTime",
	"/changeLog/updatedDateTime",
	"/name",
	"/type",
}

func (v *CloudRouterCommandSearchSortBy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CloudRouterCommandSearchSortBy(value)
	for _, existing := range AllowedCloudRouterCommandSearchSortByEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CloudRouterCommandSearchSortBy", value)
}

// NewCloudRouterCommandSearchSortByFromValue returns a pointer to a valid CloudRouterCommandSearchSortBy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCloudRouterCommandSearchSortByFromValue(v string) (*CloudRouterCommandSearchSortBy, error) {
	ev := CloudRouterCommandSearchSortBy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CloudRouterCommandSearchSortBy: valid values are %v", v, AllowedCloudRouterCommandSearchSortByEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CloudRouterCommandSearchSortBy) IsValid() bool {
	for _, existing := range AllowedCloudRouterCommandSearchSortByEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CloudRouterCommandSearchSortBy value
func (v CloudRouterCommandSearchSortBy) Ptr() *CloudRouterCommandSearchSortBy {
	return &v
}

type NullableCloudRouterCommandSearchSortBy struct {
	value *CloudRouterCommandSearchSortBy
	isSet bool
}

func (v NullableCloudRouterCommandSearchSortBy) Get() *CloudRouterCommandSearchSortBy {
	return v.value
}

func (v *NullableCloudRouterCommandSearchSortBy) Set(val *CloudRouterCommandSearchSortBy) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudRouterCommandSearchSortBy) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudRouterCommandSearchSortBy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudRouterCommandSearchSortBy(val *CloudRouterCommandSearchSortBy) *NullableCloudRouterCommandSearchSortBy {
	return &NullableCloudRouterCommandSearchSortBy{value: val, isSet: true}
}

func (v NullableCloudRouterCommandSearchSortBy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudRouterCommandSearchSortBy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
