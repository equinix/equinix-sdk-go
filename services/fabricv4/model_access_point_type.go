/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// AccessPointType Access point type
type AccessPointType string

// List of AccessPointType
const (
	ACCESSPOINTTYPE_VD             AccessPointType = "VD"
	ACCESSPOINTTYPE_VG             AccessPointType = "VG"
	ACCESSPOINTTYPE_SP             AccessPointType = "SP"
	ACCESSPOINTTYPE_IGW            AccessPointType = "IGW"
	ACCESSPOINTTYPE_COLO           AccessPointType = "COLO"
	ACCESSPOINTTYPE_SUBNET         AccessPointType = "SUBNET"
	ACCESSPOINTTYPE_CLOUD_ROUTER   AccessPointType = "CLOUD_ROUTER"
	ACCESSPOINTTYPE_NETWORK        AccessPointType = "NETWORK"
	ACCESSPOINTTYPE_METAL_NETWORK  AccessPointType = "METAL_NETWORK"
	ACCESSPOINTTYPE_VPIC_INTERFACE AccessPointType = "VPIC_INTERFACE"
)

// All allowed values of AccessPointType enum
var AllowedAccessPointTypeEnumValues = []AccessPointType{
	"VD",
	"VG",
	"SP",
	"IGW",
	"COLO",
	"SUBNET",
	"CLOUD_ROUTER",
	"NETWORK",
	"METAL_NETWORK",
	"VPIC_INTERFACE",
}

func (v *AccessPointType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccessPointType(value)
	for _, existing := range AllowedAccessPointTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AccessPointType", value)
}

// NewAccessPointTypeFromValue returns a pointer to a valid AccessPointType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccessPointTypeFromValue(v string) (*AccessPointType, error) {
	ev := AccessPointType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AccessPointType: valid values are %v", v, AllowedAccessPointTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccessPointType) IsValid() bool {
	for _, existing := range AllowedAccessPointTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AccessPointType value
func (v AccessPointType) Ptr() *AccessPointType {
	return &v
}

type NullableAccessPointType struct {
	value *AccessPointType
	isSet bool
}

func (v NullableAccessPointType) Get() *AccessPointType {
	return v.value
}

func (v *NullableAccessPointType) Set(val *AccessPointType) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessPointType) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessPointType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessPointType(val *AccessPointType) *NullableAccessPointType {
	return &NullableAccessPointType{value: val, isSet: true}
}

func (v NullableAccessPointType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessPointType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
