/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the GCPCloudRouterResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GCPCloudRouterResponse{}

// GCPCloudRouterResponse struct for GCPCloudRouterResponse
type GCPCloudRouterResponse struct {
	// Cloud Router id.
	Id                   *string             `json:"id,omitempty"`
	State                *DeploymentState    `json:"state,omitempty"`
	Type                 *GCPCloudRouterType `json:"type,omitempty"`
	VpcId                *string             `json:"vpcId,omitempty"`
	SubnetId             *string             `json:"subnetId,omitempty"`
	DeploymentProperties *TopologyProperties `json:"deploymentProperties,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GCPCloudRouterResponse GCPCloudRouterResponse

// NewGCPCloudRouterResponse instantiates a new GCPCloudRouterResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGCPCloudRouterResponse() *GCPCloudRouterResponse {
	this := GCPCloudRouterResponse{}
	return &this
}

// NewGCPCloudRouterResponseWithDefaults instantiates a new GCPCloudRouterResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGCPCloudRouterResponseWithDefaults() *GCPCloudRouterResponse {
	this := GCPCloudRouterResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GCPCloudRouterResponse) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GCPCloudRouterResponse) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GCPCloudRouterResponse) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *GCPCloudRouterResponse) SetId(v string) {
	o.Id = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *GCPCloudRouterResponse) GetState() DeploymentState {
	if o == nil || IsNil(o.State) {
		var ret DeploymentState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GCPCloudRouterResponse) GetStateOk() (*DeploymentState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *GCPCloudRouterResponse) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given DeploymentState and assigns it to the State field.
func (o *GCPCloudRouterResponse) SetState(v DeploymentState) {
	o.State = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GCPCloudRouterResponse) GetType() GCPCloudRouterType {
	if o == nil || IsNil(o.Type) {
		var ret GCPCloudRouterType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GCPCloudRouterResponse) GetTypeOk() (*GCPCloudRouterType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GCPCloudRouterResponse) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given GCPCloudRouterType and assigns it to the Type field.
func (o *GCPCloudRouterResponse) SetType(v GCPCloudRouterType) {
	o.Type = &v
}

// GetVpcId returns the VpcId field value if set, zero value otherwise.
func (o *GCPCloudRouterResponse) GetVpcId() string {
	if o == nil || IsNil(o.VpcId) {
		var ret string
		return ret
	}
	return *o.VpcId
}

// GetVpcIdOk returns a tuple with the VpcId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GCPCloudRouterResponse) GetVpcIdOk() (*string, bool) {
	if o == nil || IsNil(o.VpcId) {
		return nil, false
	}
	return o.VpcId, true
}

// HasVpcId returns a boolean if a field has been set.
func (o *GCPCloudRouterResponse) HasVpcId() bool {
	if o != nil && !IsNil(o.VpcId) {
		return true
	}

	return false
}

// SetVpcId gets a reference to the given string and assigns it to the VpcId field.
func (o *GCPCloudRouterResponse) SetVpcId(v string) {
	o.VpcId = &v
}

// GetSubnetId returns the SubnetId field value if set, zero value otherwise.
func (o *GCPCloudRouterResponse) GetSubnetId() string {
	if o == nil || IsNil(o.SubnetId) {
		var ret string
		return ret
	}
	return *o.SubnetId
}

// GetSubnetIdOk returns a tuple with the SubnetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GCPCloudRouterResponse) GetSubnetIdOk() (*string, bool) {
	if o == nil || IsNil(o.SubnetId) {
		return nil, false
	}
	return o.SubnetId, true
}

// HasSubnetId returns a boolean if a field has been set.
func (o *GCPCloudRouterResponse) HasSubnetId() bool {
	if o != nil && !IsNil(o.SubnetId) {
		return true
	}

	return false
}

// SetSubnetId gets a reference to the given string and assigns it to the SubnetId field.
func (o *GCPCloudRouterResponse) SetSubnetId(v string) {
	o.SubnetId = &v
}

// GetDeploymentProperties returns the DeploymentProperties field value if set, zero value otherwise.
func (o *GCPCloudRouterResponse) GetDeploymentProperties() TopologyProperties {
	if o == nil || IsNil(o.DeploymentProperties) {
		var ret TopologyProperties
		return ret
	}
	return *o.DeploymentProperties
}

// GetDeploymentPropertiesOk returns a tuple with the DeploymentProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GCPCloudRouterResponse) GetDeploymentPropertiesOk() (*TopologyProperties, bool) {
	if o == nil || IsNil(o.DeploymentProperties) {
		return nil, false
	}
	return o.DeploymentProperties, true
}

// HasDeploymentProperties returns a boolean if a field has been set.
func (o *GCPCloudRouterResponse) HasDeploymentProperties() bool {
	if o != nil && !IsNil(o.DeploymentProperties) {
		return true
	}

	return false
}

// SetDeploymentProperties gets a reference to the given TopologyProperties and assigns it to the DeploymentProperties field.
func (o *GCPCloudRouterResponse) SetDeploymentProperties(v TopologyProperties) {
	o.DeploymentProperties = &v
}

func (o GCPCloudRouterResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GCPCloudRouterResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.VpcId) {
		toSerialize["vpcId"] = o.VpcId
	}
	if !IsNil(o.SubnetId) {
		toSerialize["subnetId"] = o.SubnetId
	}
	if !IsNil(o.DeploymentProperties) {
		toSerialize["deploymentProperties"] = o.DeploymentProperties
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GCPCloudRouterResponse) UnmarshalJSON(data []byte) (err error) {
	varGCPCloudRouterResponse := _GCPCloudRouterResponse{}

	err = json.Unmarshal(data, &varGCPCloudRouterResponse)

	if err != nil {
		return err
	}

	*o = GCPCloudRouterResponse(varGCPCloudRouterResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "state")
		delete(additionalProperties, "type")
		delete(additionalProperties, "vpcId")
		delete(additionalProperties, "subnetId")
		delete(additionalProperties, "deploymentProperties")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGCPCloudRouterResponse struct {
	value *GCPCloudRouterResponse
	isSet bool
}

func (v NullableGCPCloudRouterResponse) Get() *GCPCloudRouterResponse {
	return v.value
}

func (v *NullableGCPCloudRouterResponse) Set(val *GCPCloudRouterResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGCPCloudRouterResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGCPCloudRouterResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGCPCloudRouterResponse(val *GCPCloudRouterResponse) *NullableGCPCloudRouterResponse {
	return &NullableGCPCloudRouterResponse{value: val, isSet: true}
}

func (v NullableGCPCloudRouterResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGCPCloudRouterResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
