/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the StreamSubscriptionSinkSetting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StreamSubscriptionSinkSetting{}

// StreamSubscriptionSinkSetting Stream subscription sink settings
type StreamSubscriptionSinkSetting struct {
	// event index
	EventIndex *string `json:"eventIndex,omitempty"`
	// metric index
	MetricIndex *string `json:"metricIndex,omitempty"`
	// source
	Source *string `json:"source,omitempty"`
	// Application key
	ApplicationKey       *string `json:"applicationKey,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StreamSubscriptionSinkSetting StreamSubscriptionSinkSetting

// NewStreamSubscriptionSinkSetting instantiates a new StreamSubscriptionSinkSetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStreamSubscriptionSinkSetting() *StreamSubscriptionSinkSetting {
	this := StreamSubscriptionSinkSetting{}
	return &this
}

// NewStreamSubscriptionSinkSettingWithDefaults instantiates a new StreamSubscriptionSinkSetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStreamSubscriptionSinkSettingWithDefaults() *StreamSubscriptionSinkSetting {
	this := StreamSubscriptionSinkSetting{}
	return &this
}

// GetEventIndex returns the EventIndex field value if set, zero value otherwise.
func (o *StreamSubscriptionSinkSetting) GetEventIndex() string {
	if o == nil || IsNil(o.EventIndex) {
		var ret string
		return ret
	}
	return *o.EventIndex
}

// GetEventIndexOk returns a tuple with the EventIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscriptionSinkSetting) GetEventIndexOk() (*string, bool) {
	if o == nil || IsNil(o.EventIndex) {
		return nil, false
	}
	return o.EventIndex, true
}

// HasEventIndex returns a boolean if a field has been set.
func (o *StreamSubscriptionSinkSetting) HasEventIndex() bool {
	if o != nil && !IsNil(o.EventIndex) {
		return true
	}

	return false
}

// SetEventIndex gets a reference to the given string and assigns it to the EventIndex field.
func (o *StreamSubscriptionSinkSetting) SetEventIndex(v string) {
	o.EventIndex = &v
}

// GetMetricIndex returns the MetricIndex field value if set, zero value otherwise.
func (o *StreamSubscriptionSinkSetting) GetMetricIndex() string {
	if o == nil || IsNil(o.MetricIndex) {
		var ret string
		return ret
	}
	return *o.MetricIndex
}

// GetMetricIndexOk returns a tuple with the MetricIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscriptionSinkSetting) GetMetricIndexOk() (*string, bool) {
	if o == nil || IsNil(o.MetricIndex) {
		return nil, false
	}
	return o.MetricIndex, true
}

// HasMetricIndex returns a boolean if a field has been set.
func (o *StreamSubscriptionSinkSetting) HasMetricIndex() bool {
	if o != nil && !IsNil(o.MetricIndex) {
		return true
	}

	return false
}

// SetMetricIndex gets a reference to the given string and assigns it to the MetricIndex field.
func (o *StreamSubscriptionSinkSetting) SetMetricIndex(v string) {
	o.MetricIndex = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *StreamSubscriptionSinkSetting) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscriptionSinkSetting) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *StreamSubscriptionSinkSetting) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *StreamSubscriptionSinkSetting) SetSource(v string) {
	o.Source = &v
}

// GetApplicationKey returns the ApplicationKey field value if set, zero value otherwise.
func (o *StreamSubscriptionSinkSetting) GetApplicationKey() string {
	if o == nil || IsNil(o.ApplicationKey) {
		var ret string
		return ret
	}
	return *o.ApplicationKey
}

// GetApplicationKeyOk returns a tuple with the ApplicationKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscriptionSinkSetting) GetApplicationKeyOk() (*string, bool) {
	if o == nil || IsNil(o.ApplicationKey) {
		return nil, false
	}
	return o.ApplicationKey, true
}

// HasApplicationKey returns a boolean if a field has been set.
func (o *StreamSubscriptionSinkSetting) HasApplicationKey() bool {
	if o != nil && !IsNil(o.ApplicationKey) {
		return true
	}

	return false
}

// SetApplicationKey gets a reference to the given string and assigns it to the ApplicationKey field.
func (o *StreamSubscriptionSinkSetting) SetApplicationKey(v string) {
	o.ApplicationKey = &v
}

func (o StreamSubscriptionSinkSetting) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StreamSubscriptionSinkSetting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventIndex) {
		toSerialize["eventIndex"] = o.EventIndex
	}
	if !IsNil(o.MetricIndex) {
		toSerialize["metricIndex"] = o.MetricIndex
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.ApplicationKey) {
		toSerialize["applicationKey"] = o.ApplicationKey
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StreamSubscriptionSinkSetting) UnmarshalJSON(data []byte) (err error) {
	varStreamSubscriptionSinkSetting := _StreamSubscriptionSinkSetting{}

	err = json.Unmarshal(data, &varStreamSubscriptionSinkSetting)

	if err != nil {
		return err
	}

	*o = StreamSubscriptionSinkSetting(varStreamSubscriptionSinkSetting)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "eventIndex")
		delete(additionalProperties, "metricIndex")
		delete(additionalProperties, "source")
		delete(additionalProperties, "applicationKey")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStreamSubscriptionSinkSetting struct {
	value *StreamSubscriptionSinkSetting
	isSet bool
}

func (v NullableStreamSubscriptionSinkSetting) Get() *StreamSubscriptionSinkSetting {
	return v.value
}

func (v *NullableStreamSubscriptionSinkSetting) Set(val *StreamSubscriptionSinkSetting) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamSubscriptionSinkSetting) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamSubscriptionSinkSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamSubscriptionSinkSetting(val *StreamSubscriptionSinkSetting) *NullableStreamSubscriptionSinkSetting {
	return &NullableStreamSubscriptionSinkSetting{value: val, isSet: true}
}

func (v NullableStreamSubscriptionSinkSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamSubscriptionSinkSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
