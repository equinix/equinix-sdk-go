/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// SubscriptionState Subscription State
type SubscriptionState string

// List of SubscriptionState
const (
	SUBSCRIPTIONSTATE_ACTIVE       SubscriptionState = "ACTIVE"
	SUBSCRIPTIONSTATE_EXPIRED      SubscriptionState = "EXPIRED"
	SUBSCRIPTIONSTATE_CANCELLED    SubscriptionState = "CANCELLED"
	SUBSCRIPTIONSTATE_GRACE_PERIOD SubscriptionState = "GRACE_PERIOD"
)

// All allowed values of SubscriptionState enum
var AllowedSubscriptionStateEnumValues = []SubscriptionState{
	"ACTIVE",
	"EXPIRED",
	"CANCELLED",
	"GRACE_PERIOD",
}

func (v *SubscriptionState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SubscriptionState(value)
	for _, existing := range AllowedSubscriptionStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SubscriptionState", value)
}

// NewSubscriptionStateFromValue returns a pointer to a valid SubscriptionState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSubscriptionStateFromValue(v string) (*SubscriptionState, error) {
	ev := SubscriptionState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SubscriptionState: valid values are %v", v, AllowedSubscriptionStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SubscriptionState) IsValid() bool {
	for _, existing := range AllowedSubscriptionStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SubscriptionState value
func (v SubscriptionState) Ptr() *SubscriptionState {
	return &v
}

type NullableSubscriptionState struct {
	value *SubscriptionState
	isSet bool
}

func (v NullableSubscriptionState) Get() *SubscriptionState {
	return v.value
}

func (v *NullableSubscriptionState) Set(val *SubscriptionState) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionState) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionState(val *SubscriptionState) *NullableSubscriptionState {
	return &NullableSubscriptionState{value: val, isSet: true}
}

func (v NullableSubscriptionState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
