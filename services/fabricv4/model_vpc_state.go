/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// VPCState the model 'VPCState'
type VPCState string

// List of VPC_state
const (
	VPCSTATE_AVAILABLE VPCState = "Available"
	VPCSTATE_PENDING   VPCState = "Pending"
	VPCSTATE_DELETEING VPCState = "Deleteing"
	VPCSTATE_DELETED   VPCState = "Deleted"
	VPCSTATE_FAILED    VPCState = "Failed"
	VPCSTATE_READY     VPCState = "Ready"
	VPCSTATE_CREATING  VPCState = "Creating"
)

// All allowed values of VPCState enum
var AllowedVPCStateEnumValues = []VPCState{
	"Available",
	"Pending",
	"Deleteing",
	"Deleted",
	"Failed",
	"Ready",
	"Creating",
}

func (v *VPCState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VPCState(value)
	for _, existing := range AllowedVPCStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VPCState", value)
}

// NewVPCStateFromValue returns a pointer to a valid VPCState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVPCStateFromValue(v string) (*VPCState, error) {
	ev := VPCState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VPCState: valid values are %v", v, AllowedVPCStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VPCState) IsValid() bool {
	for _, existing := range AllowedVPCStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VPC_state value
func (v VPCState) Ptr() *VPCState {
	return &v
}

type NullableVPCState struct {
	value *VPCState
	isSet bool
}

func (v NullableVPCState) Get() *VPCState {
	return v.value
}

func (v *NullableVPCState) Set(val *VPCState) {
	v.value = val
	v.isSet = true
}

func (v NullableVPCState) IsSet() bool {
	return v.isSet
}

func (v *NullableVPCState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVPCState(val *VPCState) *NullableVPCState {
	return &NullableVPCState{value: val, isSet: true}
}

func (v NullableVPCState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVPCState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
