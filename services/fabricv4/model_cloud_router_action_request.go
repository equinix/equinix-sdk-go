/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// checks if the CloudRouterActionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CloudRouterActionRequest{}

// CloudRouterActionRequest Cloud router action request
type CloudRouterActionRequest struct {
	Type                 CloudRouterActionType    `json:"type"`
	Connection           *RouterActionsConnection `json:"connection,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CloudRouterActionRequest CloudRouterActionRequest

// NewCloudRouterActionRequest instantiates a new CloudRouterActionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloudRouterActionRequest(type_ CloudRouterActionType) *CloudRouterActionRequest {
	this := CloudRouterActionRequest{}
	this.Type = type_
	return &this
}

// NewCloudRouterActionRequestWithDefaults instantiates a new CloudRouterActionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloudRouterActionRequestWithDefaults() *CloudRouterActionRequest {
	this := CloudRouterActionRequest{}
	return &this
}

// GetType returns the Type field value
func (o *CloudRouterActionRequest) GetType() CloudRouterActionType {
	if o == nil {
		var ret CloudRouterActionType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CloudRouterActionRequest) GetTypeOk() (*CloudRouterActionType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CloudRouterActionRequest) SetType(v CloudRouterActionType) {
	o.Type = v
}

// GetConnection returns the Connection field value if set, zero value otherwise.
func (o *CloudRouterActionRequest) GetConnection() RouterActionsConnection {
	if o == nil || IsNil(o.Connection) {
		var ret RouterActionsConnection
		return ret
	}
	return *o.Connection
}

// GetConnectionOk returns a tuple with the Connection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudRouterActionRequest) GetConnectionOk() (*RouterActionsConnection, bool) {
	if o == nil || IsNil(o.Connection) {
		return nil, false
	}
	return o.Connection, true
}

// HasConnection returns a boolean if a field has been set.
func (o *CloudRouterActionRequest) HasConnection() bool {
	if o != nil && !IsNil(o.Connection) {
		return true
	}

	return false
}

// SetConnection gets a reference to the given RouterActionsConnection and assigns it to the Connection field.
func (o *CloudRouterActionRequest) SetConnection(v RouterActionsConnection) {
	o.Connection = &v
}

func (o CloudRouterActionRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CloudRouterActionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Connection) {
		toSerialize["connection"] = o.Connection
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CloudRouterActionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCloudRouterActionRequest := _CloudRouterActionRequest{}

	err = json.Unmarshal(data, &varCloudRouterActionRequest)

	if err != nil {
		return err
	}

	*o = CloudRouterActionRequest(varCloudRouterActionRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "connection")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCloudRouterActionRequest struct {
	value *CloudRouterActionRequest
	isSet bool
}

func (v NullableCloudRouterActionRequest) Get() *CloudRouterActionRequest {
	return v.value
}

func (v *NullableCloudRouterActionRequest) Set(val *CloudRouterActionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudRouterActionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudRouterActionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudRouterActionRequest(val *CloudRouterActionRequest) *NullableCloudRouterActionRequest {
	return &NullableCloudRouterActionRequest{value: val, isSet: true}
}

func (v NullableCloudRouterActionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudRouterActionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
