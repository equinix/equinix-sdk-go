/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// StreamState Stream provision state
type StreamState string

// List of Stream_state
const (
	STREAMSTATE_PROVISIONING   StreamState = "PROVISIONING"
	STREAMSTATE_PROVISIONED    StreamState = "PROVISIONED"
	STREAMSTATE_REPROVISIONING StreamState = "REPROVISIONING"
	STREAMSTATE_DEPROVISIONING StreamState = "DEPROVISIONING"
	STREAMSTATE_DEPROVISIONED  StreamState = "DEPROVISIONED"
	STREAMSTATE_FAILED         StreamState = "FAILED"
)

// All allowed values of StreamState enum
var AllowedStreamStateEnumValues = []StreamState{
	"PROVISIONING",
	"PROVISIONED",
	"REPROVISIONING",
	"DEPROVISIONING",
	"DEPROVISIONED",
	"FAILED",
}

func (v *StreamState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StreamState(value)
	for _, existing := range AllowedStreamStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StreamState", value)
}

// NewStreamStateFromValue returns a pointer to a valid StreamState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStreamStateFromValue(v string) (*StreamState, error) {
	ev := StreamState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StreamState: valid values are %v", v, AllowedStreamStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StreamState) IsValid() bool {
	for _, existing := range AllowedStreamStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Stream_state value
func (v StreamState) Ptr() *StreamState {
	return &v
}

type NullableStreamState struct {
	value *StreamState
	isSet bool
}

func (v NullableStreamState) Get() *StreamState {
	return v.value
}

func (v *NullableStreamState) Set(val *StreamState) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamState) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamState(val *StreamState) *NullableStreamState {
	return &NullableStreamState{value: val, isSet: true}
}

func (v NullableStreamState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
