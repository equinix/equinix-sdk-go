/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the RouteAggregationRulesData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RouteAggregationRulesData{}

// RouteAggregationRulesData struct for RouteAggregationRulesData
type RouteAggregationRulesData struct {
	// Route Aggregation Rules URI
	Href *string                        `json:"href,omitempty"`
	Type *RouteAggregationRulesDataType `json:"type,omitempty"`
	// Route Aggregation Rule identifier
	Uuid *string `json:"uuid,omitempty"`
	Name *string `json:"name,omitempty"`
	// Customer-provided Route Aggregation Rule description
	Description          *string                      `json:"description,omitempty"`
	State                *RouteAggregationRuleState   `json:"state,omitempty"`
	Change               *RouteAggregationRulesChange `json:"change,omitempty"`
	Prefix               *string                      `json:"prefix,omitempty"`
	ChangeLog            *Changelog                   `json:"changeLog,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RouteAggregationRulesData RouteAggregationRulesData

// NewRouteAggregationRulesData instantiates a new RouteAggregationRulesData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRouteAggregationRulesData() *RouteAggregationRulesData {
	this := RouteAggregationRulesData{}
	return &this
}

// NewRouteAggregationRulesDataWithDefaults instantiates a new RouteAggregationRulesData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteAggregationRulesDataWithDefaults() *RouteAggregationRulesData {
	this := RouteAggregationRulesData{}
	return &this
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *RouteAggregationRulesData) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteAggregationRulesData) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *RouteAggregationRulesData) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *RouteAggregationRulesData) SetHref(v string) {
	o.Href = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RouteAggregationRulesData) GetType() RouteAggregationRulesDataType {
	if o == nil || IsNil(o.Type) {
		var ret RouteAggregationRulesDataType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteAggregationRulesData) GetTypeOk() (*RouteAggregationRulesDataType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RouteAggregationRulesData) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given RouteAggregationRulesDataType and assigns it to the Type field.
func (o *RouteAggregationRulesData) SetType(v RouteAggregationRulesDataType) {
	o.Type = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *RouteAggregationRulesData) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteAggregationRulesData) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *RouteAggregationRulesData) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *RouteAggregationRulesData) SetUuid(v string) {
	o.Uuid = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RouteAggregationRulesData) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteAggregationRulesData) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RouteAggregationRulesData) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RouteAggregationRulesData) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RouteAggregationRulesData) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteAggregationRulesData) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RouteAggregationRulesData) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RouteAggregationRulesData) SetDescription(v string) {
	o.Description = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *RouteAggregationRulesData) GetState() RouteAggregationRuleState {
	if o == nil || IsNil(o.State) {
		var ret RouteAggregationRuleState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteAggregationRulesData) GetStateOk() (*RouteAggregationRuleState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *RouteAggregationRulesData) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given RouteAggregationRuleState and assigns it to the State field.
func (o *RouteAggregationRulesData) SetState(v RouteAggregationRuleState) {
	o.State = &v
}

// GetChange returns the Change field value if set, zero value otherwise.
func (o *RouteAggregationRulesData) GetChange() RouteAggregationRulesChange {
	if o == nil || IsNil(o.Change) {
		var ret RouteAggregationRulesChange
		return ret
	}
	return *o.Change
}

// GetChangeOk returns a tuple with the Change field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteAggregationRulesData) GetChangeOk() (*RouteAggregationRulesChange, bool) {
	if o == nil || IsNil(o.Change) {
		return nil, false
	}
	return o.Change, true
}

// HasChange returns a boolean if a field has been set.
func (o *RouteAggregationRulesData) HasChange() bool {
	if o != nil && !IsNil(o.Change) {
		return true
	}

	return false
}

// SetChange gets a reference to the given RouteAggregationRulesChange and assigns it to the Change field.
func (o *RouteAggregationRulesData) SetChange(v RouteAggregationRulesChange) {
	o.Change = &v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *RouteAggregationRulesData) GetPrefix() string {
	if o == nil || IsNil(o.Prefix) {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteAggregationRulesData) GetPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.Prefix) {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *RouteAggregationRulesData) HasPrefix() bool {
	if o != nil && !IsNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *RouteAggregationRulesData) SetPrefix(v string) {
	o.Prefix = &v
}

// GetChangeLog returns the ChangeLog field value if set, zero value otherwise.
func (o *RouteAggregationRulesData) GetChangeLog() Changelog {
	if o == nil || IsNil(o.ChangeLog) {
		var ret Changelog
		return ret
	}
	return *o.ChangeLog
}

// GetChangeLogOk returns a tuple with the ChangeLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteAggregationRulesData) GetChangeLogOk() (*Changelog, bool) {
	if o == nil || IsNil(o.ChangeLog) {
		return nil, false
	}
	return o.ChangeLog, true
}

// HasChangeLog returns a boolean if a field has been set.
func (o *RouteAggregationRulesData) HasChangeLog() bool {
	if o != nil && !IsNil(o.ChangeLog) {
		return true
	}

	return false
}

// SetChangeLog gets a reference to the given Changelog and assigns it to the ChangeLog field.
func (o *RouteAggregationRulesData) SetChangeLog(v Changelog) {
	o.ChangeLog = &v
}

func (o RouteAggregationRulesData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RouteAggregationRulesData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Change) {
		toSerialize["change"] = o.Change
	}
	if !IsNil(o.Prefix) {
		toSerialize["prefix"] = o.Prefix
	}
	if !IsNil(o.ChangeLog) {
		toSerialize["changeLog"] = o.ChangeLog
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RouteAggregationRulesData) UnmarshalJSON(data []byte) (err error) {
	varRouteAggregationRulesData := _RouteAggregationRulesData{}

	err = json.Unmarshal(data, &varRouteAggregationRulesData)

	if err != nil {
		return err
	}

	*o = RouteAggregationRulesData(varRouteAggregationRulesData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "href")
		delete(additionalProperties, "type")
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "state")
		delete(additionalProperties, "change")
		delete(additionalProperties, "prefix")
		delete(additionalProperties, "changeLog")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRouteAggregationRulesData struct {
	value *RouteAggregationRulesData
	isSet bool
}

func (v NullableRouteAggregationRulesData) Get() *RouteAggregationRulesData {
	return v.value
}

func (v *NullableRouteAggregationRulesData) Set(val *RouteAggregationRulesData) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteAggregationRulesData) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteAggregationRulesData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteAggregationRulesData(val *RouteAggregationRulesData) *NullableRouteAggregationRulesData {
	return &NullableRouteAggregationRulesData{value: val, isSet: true}
}

func (v NullableRouteAggregationRulesData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteAggregationRulesData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
