/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the StreamAssetOrFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StreamAssetOrFilter{}

// StreamAssetOrFilter struct for StreamAssetOrFilter
type StreamAssetOrFilter struct {
	Or                   []StreamAssetSimpleExpression `json:"or,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StreamAssetOrFilter StreamAssetOrFilter

// NewStreamAssetOrFilter instantiates a new StreamAssetOrFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStreamAssetOrFilter() *StreamAssetOrFilter {
	this := StreamAssetOrFilter{}
	return &this
}

// NewStreamAssetOrFilterWithDefaults instantiates a new StreamAssetOrFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStreamAssetOrFilterWithDefaults() *StreamAssetOrFilter {
	this := StreamAssetOrFilter{}
	return &this
}

// GetOr returns the Or field value if set, zero value otherwise.
func (o *StreamAssetOrFilter) GetOr() []StreamAssetSimpleExpression {
	if o == nil || IsNil(o.Or) {
		var ret []StreamAssetSimpleExpression
		return ret
	}
	return o.Or
}

// GetOrOk returns a tuple with the Or field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamAssetOrFilter) GetOrOk() ([]StreamAssetSimpleExpression, bool) {
	if o == nil || IsNil(o.Or) {
		return nil, false
	}
	return o.Or, true
}

// HasOr returns a boolean if a field has been set.
func (o *StreamAssetOrFilter) HasOr() bool {
	if o != nil && !IsNil(o.Or) {
		return true
	}

	return false
}

// SetOr gets a reference to the given []StreamAssetSimpleExpression and assigns it to the Or field.
func (o *StreamAssetOrFilter) SetOr(v []StreamAssetSimpleExpression) {
	o.Or = v
}

func (o StreamAssetOrFilter) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StreamAssetOrFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Or) {
		toSerialize["or"] = o.Or
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StreamAssetOrFilter) UnmarshalJSON(data []byte) (err error) {
	varStreamAssetOrFilter := _StreamAssetOrFilter{}

	err = json.Unmarshal(data, &varStreamAssetOrFilter)

	if err != nil {
		return err
	}

	*o = StreamAssetOrFilter(varStreamAssetOrFilter)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "or")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStreamAssetOrFilter struct {
	value *StreamAssetOrFilter
	isSet bool
}

func (v NullableStreamAssetOrFilter) Get() *StreamAssetOrFilter {
	return v.value
}

func (v *NullableStreamAssetOrFilter) Set(val *StreamAssetOrFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamAssetOrFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamAssetOrFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamAssetOrFilter(val *StreamAssetOrFilter) *NullableStreamAssetOrFilter {
	return &NullableStreamAssetOrFilter{value: val, isSet: true}
}

func (v NullableStreamAssetOrFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamAssetOrFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
