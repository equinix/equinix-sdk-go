/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// checks if the Network type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Network{}

// Network Network specification
type Network struct {
	Type NetworkType `json:"type"`
	// Customer-provided network name
	Name     string              `json:"name"`
	Scope    NetworkScope        `json:"scope"`
	Location *SimplifiedLocation `json:"location,omitempty"`
	Project  *Project            `json:"project,omitempty"`
	// Preferences for notifications on network configuration or status changes
	Notifications []SimplifiedNotification `json:"notifications"`
	// Network URI
	Href string `json:"href"`
	// Equinix-assigned network identifier
	Uuid  string       `json:"uuid"`
	State NetworkState `json:"state"`
	// number of connections created on the network
	ConnectionsCount *float32                 `json:"connectionsCount,omitempty"`
	Account          *SimplifiedAccount       `json:"account,omitempty"`
	Change           *SimplifiedNetworkChange `json:"change,omitempty"`
	Operation        *NetworkOperation        `json:"operation,omitempty"`
	ChangeLog        Changelog                `json:"changeLog"`
	// Network sub-resources links
	Links                []Link `json:"links,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Network Network

// NewNetwork instantiates a new Network object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetwork(type_ NetworkType, name string, scope NetworkScope, notifications []SimplifiedNotification, href string, uuid string, state NetworkState, changeLog Changelog) *Network {
	this := Network{}
	this.Type = type_
	this.Name = name
	this.Scope = scope
	this.Notifications = notifications
	this.Href = href
	this.Uuid = uuid
	this.State = state
	this.ChangeLog = changeLog
	return &this
}

// NewNetworkWithDefaults instantiates a new Network object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkWithDefaults() *Network {
	this := Network{}
	return &this
}

// GetType returns the Type field value
func (o *Network) GetType() NetworkType {
	if o == nil {
		var ret NetworkType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Network) GetTypeOk() (*NetworkType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Network) SetType(v NetworkType) {
	o.Type = v
}

// GetName returns the Name field value
func (o *Network) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Network) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Network) SetName(v string) {
	o.Name = v
}

// GetScope returns the Scope field value
func (o *Network) GetScope() NetworkScope {
	if o == nil {
		var ret NetworkScope
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *Network) GetScopeOk() (*NetworkScope, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scope, true
}

// SetScope sets field value
func (o *Network) SetScope(v NetworkScope) {
	o.Scope = v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *Network) GetLocation() SimplifiedLocation {
	if o == nil || IsNil(o.Location) {
		var ret SimplifiedLocation
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Network) GetLocationOk() (*SimplifiedLocation, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *Network) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given SimplifiedLocation and assigns it to the Location field.
func (o *Network) SetLocation(v SimplifiedLocation) {
	o.Location = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *Network) GetProject() Project {
	if o == nil || IsNil(o.Project) {
		var ret Project
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Network) GetProjectOk() (*Project, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *Network) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given Project and assigns it to the Project field.
func (o *Network) SetProject(v Project) {
	o.Project = &v
}

// GetNotifications returns the Notifications field value
func (o *Network) GetNotifications() []SimplifiedNotification {
	if o == nil {
		var ret []SimplifiedNotification
		return ret
	}

	return o.Notifications
}

// GetNotificationsOk returns a tuple with the Notifications field value
// and a boolean to check if the value has been set.
func (o *Network) GetNotificationsOk() ([]SimplifiedNotification, bool) {
	if o == nil {
		return nil, false
	}
	return o.Notifications, true
}

// SetNotifications sets field value
func (o *Network) SetNotifications(v []SimplifiedNotification) {
	o.Notifications = v
}

// GetHref returns the Href field value
func (o *Network) GetHref() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Href
}

// GetHrefOk returns a tuple with the Href field value
// and a boolean to check if the value has been set.
func (o *Network) GetHrefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Href, true
}

// SetHref sets field value
func (o *Network) SetHref(v string) {
	o.Href = v
}

// GetUuid returns the Uuid field value
func (o *Network) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *Network) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *Network) SetUuid(v string) {
	o.Uuid = v
}

// GetState returns the State field value
func (o *Network) GetState() NetworkState {
	if o == nil {
		var ret NetworkState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *Network) GetStateOk() (*NetworkState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *Network) SetState(v NetworkState) {
	o.State = v
}

// GetConnectionsCount returns the ConnectionsCount field value if set, zero value otherwise.
func (o *Network) GetConnectionsCount() float32 {
	if o == nil || IsNil(o.ConnectionsCount) {
		var ret float32
		return ret
	}
	return *o.ConnectionsCount
}

// GetConnectionsCountOk returns a tuple with the ConnectionsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Network) GetConnectionsCountOk() (*float32, bool) {
	if o == nil || IsNil(o.ConnectionsCount) {
		return nil, false
	}
	return o.ConnectionsCount, true
}

// HasConnectionsCount returns a boolean if a field has been set.
func (o *Network) HasConnectionsCount() bool {
	if o != nil && !IsNil(o.ConnectionsCount) {
		return true
	}

	return false
}

// SetConnectionsCount gets a reference to the given float32 and assigns it to the ConnectionsCount field.
func (o *Network) SetConnectionsCount(v float32) {
	o.ConnectionsCount = &v
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *Network) GetAccount() SimplifiedAccount {
	if o == nil || IsNil(o.Account) {
		var ret SimplifiedAccount
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Network) GetAccountOk() (*SimplifiedAccount, bool) {
	if o == nil || IsNil(o.Account) {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *Network) HasAccount() bool {
	if o != nil && !IsNil(o.Account) {
		return true
	}

	return false
}

// SetAccount gets a reference to the given SimplifiedAccount and assigns it to the Account field.
func (o *Network) SetAccount(v SimplifiedAccount) {
	o.Account = &v
}

// GetChange returns the Change field value if set, zero value otherwise.
func (o *Network) GetChange() SimplifiedNetworkChange {
	if o == nil || IsNil(o.Change) {
		var ret SimplifiedNetworkChange
		return ret
	}
	return *o.Change
}

// GetChangeOk returns a tuple with the Change field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Network) GetChangeOk() (*SimplifiedNetworkChange, bool) {
	if o == nil || IsNil(o.Change) {
		return nil, false
	}
	return o.Change, true
}

// HasChange returns a boolean if a field has been set.
func (o *Network) HasChange() bool {
	if o != nil && !IsNil(o.Change) {
		return true
	}

	return false
}

// SetChange gets a reference to the given SimplifiedNetworkChange and assigns it to the Change field.
func (o *Network) SetChange(v SimplifiedNetworkChange) {
	o.Change = &v
}

// GetOperation returns the Operation field value if set, zero value otherwise.
func (o *Network) GetOperation() NetworkOperation {
	if o == nil || IsNil(o.Operation) {
		var ret NetworkOperation
		return ret
	}
	return *o.Operation
}

// GetOperationOk returns a tuple with the Operation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Network) GetOperationOk() (*NetworkOperation, bool) {
	if o == nil || IsNil(o.Operation) {
		return nil, false
	}
	return o.Operation, true
}

// HasOperation returns a boolean if a field has been set.
func (o *Network) HasOperation() bool {
	if o != nil && !IsNil(o.Operation) {
		return true
	}

	return false
}

// SetOperation gets a reference to the given NetworkOperation and assigns it to the Operation field.
func (o *Network) SetOperation(v NetworkOperation) {
	o.Operation = &v
}

// GetChangeLog returns the ChangeLog field value
func (o *Network) GetChangeLog() Changelog {
	if o == nil {
		var ret Changelog
		return ret
	}

	return o.ChangeLog
}

// GetChangeLogOk returns a tuple with the ChangeLog field value
// and a boolean to check if the value has been set.
func (o *Network) GetChangeLogOk() (*Changelog, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChangeLog, true
}

// SetChangeLog sets field value
func (o *Network) SetChangeLog(v Changelog) {
	o.ChangeLog = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *Network) GetLinks() []Link {
	if o == nil || IsNil(o.Links) {
		var ret []Link
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Network) GetLinksOk() ([]Link, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *Network) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []Link and assigns it to the Links field.
func (o *Network) SetLinks(v []Link) {
	o.Links = v
}

func (o Network) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Network) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["name"] = o.Name
	toSerialize["scope"] = o.Scope
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}
	toSerialize["notifications"] = o.Notifications
	toSerialize["href"] = o.Href
	toSerialize["uuid"] = o.Uuid
	toSerialize["state"] = o.State
	if !IsNil(o.ConnectionsCount) {
		toSerialize["connectionsCount"] = o.ConnectionsCount
	}
	if !IsNil(o.Account) {
		toSerialize["account"] = o.Account
	}
	if !IsNil(o.Change) {
		toSerialize["change"] = o.Change
	}
	if !IsNil(o.Operation) {
		toSerialize["operation"] = o.Operation
	}
	toSerialize["changeLog"] = o.ChangeLog
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Network) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"name",
		"scope",
		"notifications",
		"href",
		"uuid",
		"state",
		"changeLog",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNetwork := _Network{}

	err = json.Unmarshal(data, &varNetwork)

	if err != nil {
		return err
	}

	*o = Network(varNetwork)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "name")
		delete(additionalProperties, "scope")
		delete(additionalProperties, "location")
		delete(additionalProperties, "project")
		delete(additionalProperties, "notifications")
		delete(additionalProperties, "href")
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "state")
		delete(additionalProperties, "connectionsCount")
		delete(additionalProperties, "account")
		delete(additionalProperties, "change")
		delete(additionalProperties, "operation")
		delete(additionalProperties, "changeLog")
		delete(additionalProperties, "links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNetwork struct {
	value *Network
	isSet bool
}

func (v NullableNetwork) Get() *Network {
	return v.value
}

func (v *NullableNetwork) Set(val *Network) {
	v.value = val
	v.isSet = true
}

func (v NullableNetwork) IsSet() bool {
	return v.isSet
}

func (v *NullableNetwork) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetwork(val *Network) *NullableNetwork {
	return &NullableNetwork{value: val, isSet: true}
}

func (v NullableNetwork) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetwork) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
