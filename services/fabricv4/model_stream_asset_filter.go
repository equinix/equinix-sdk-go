/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// StreamAssetFilter struct for StreamAssetFilter
type StreamAssetFilter struct {
	StreamAssetOrFilter         *StreamAssetOrFilter
	StreamAssetSimpleExpression *StreamAssetSimpleExpression
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *StreamAssetFilter) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into StreamAssetOrFilter
	err = json.Unmarshal(data, &dst.StreamAssetOrFilter)
	if err == nil {
		jsonStreamAssetOrFilter, _ := json.Marshal(dst.StreamAssetOrFilter)
		if string(jsonStreamAssetOrFilter) == "{}" { // empty struct
			dst.StreamAssetOrFilter = nil
		} else {
			return nil // data stored in dst.StreamAssetOrFilter, return on the first match
		}
	} else {
		dst.StreamAssetOrFilter = nil
	}

	// try to unmarshal JSON data into StreamAssetSimpleExpression
	err = json.Unmarshal(data, &dst.StreamAssetSimpleExpression)
	if err == nil {
		jsonStreamAssetSimpleExpression, _ := json.Marshal(dst.StreamAssetSimpleExpression)
		if string(jsonStreamAssetSimpleExpression) == "{}" { // empty struct
			dst.StreamAssetSimpleExpression = nil
		} else {
			return nil // data stored in dst.StreamAssetSimpleExpression, return on the first match
		}
	} else {
		dst.StreamAssetSimpleExpression = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(StreamAssetFilter)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *StreamAssetFilter) MarshalJSON() ([]byte, error) {
	if src.StreamAssetOrFilter != nil {
		return json.Marshal(&src.StreamAssetOrFilter)
	}

	if src.StreamAssetSimpleExpression != nil {
		return json.Marshal(&src.StreamAssetSimpleExpression)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableStreamAssetFilter struct {
	value *StreamAssetFilter
	isSet bool
}

func (v NullableStreamAssetFilter) Get() *StreamAssetFilter {
	return v.value
}

func (v *NullableStreamAssetFilter) Set(val *StreamAssetFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamAssetFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamAssetFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamAssetFilter(val *StreamAssetFilter) *NullableStreamAssetFilter {
	return &NullableStreamAssetFilter{value: val, isSet: true}
}

func (v NullableStreamAssetFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamAssetFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
