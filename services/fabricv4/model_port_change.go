/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"time"
)

// checks if the PortChange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PortChange{}

// PortChange Current state of latest port change
type PortChange struct {
	// Uniquely identifies a change
	Uuid   *string           `json:"uuid,omitempty"`
	Type   *PortChangeType   `json:"type,omitempty"`
	Status *PortChangeStatus `json:"status,omitempty"`
	// Additional information
	Information *string              `json:"information,omitempty"`
	Data        *PortChangeOperation `json:"data,omitempty"`
	// Set when change flow starts
	CreatedDateTime *time.Time `json:"createdDateTime,omitempty"`
	// Set when change object is updated
	UpdatedDateTime      *time.Time `json:"updatedDateTime,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PortChange PortChange

// NewPortChange instantiates a new PortChange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPortChange() *PortChange {
	this := PortChange{}
	return &this
}

// NewPortChangeWithDefaults instantiates a new PortChange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortChangeWithDefaults() *PortChange {
	this := PortChange{}
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *PortChange) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortChange) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *PortChange) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *PortChange) SetUuid(v string) {
	o.Uuid = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PortChange) GetType() PortChangeType {
	if o == nil || IsNil(o.Type) {
		var ret PortChangeType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortChange) GetTypeOk() (*PortChangeType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PortChange) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given PortChangeType and assigns it to the Type field.
func (o *PortChange) SetType(v PortChangeType) {
	o.Type = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *PortChange) GetStatus() PortChangeStatus {
	if o == nil || IsNil(o.Status) {
		var ret PortChangeStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortChange) GetStatusOk() (*PortChangeStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *PortChange) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given PortChangeStatus and assigns it to the Status field.
func (o *PortChange) SetStatus(v PortChangeStatus) {
	o.Status = &v
}

// GetInformation returns the Information field value if set, zero value otherwise.
func (o *PortChange) GetInformation() string {
	if o == nil || IsNil(o.Information) {
		var ret string
		return ret
	}
	return *o.Information
}

// GetInformationOk returns a tuple with the Information field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortChange) GetInformationOk() (*string, bool) {
	if o == nil || IsNil(o.Information) {
		return nil, false
	}
	return o.Information, true
}

// HasInformation returns a boolean if a field has been set.
func (o *PortChange) HasInformation() bool {
	if o != nil && !IsNil(o.Information) {
		return true
	}

	return false
}

// SetInformation gets a reference to the given string and assigns it to the Information field.
func (o *PortChange) SetInformation(v string) {
	o.Information = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *PortChange) GetData() PortChangeOperation {
	if o == nil || IsNil(o.Data) {
		var ret PortChangeOperation
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortChange) GetDataOk() (*PortChangeOperation, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *PortChange) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given PortChangeOperation and assigns it to the Data field.
func (o *PortChange) SetData(v PortChangeOperation) {
	o.Data = &v
}

// GetCreatedDateTime returns the CreatedDateTime field value if set, zero value otherwise.
func (o *PortChange) GetCreatedDateTime() time.Time {
	if o == nil || IsNil(o.CreatedDateTime) {
		var ret time.Time
		return ret
	}
	return *o.CreatedDateTime
}

// GetCreatedDateTimeOk returns a tuple with the CreatedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortChange) GetCreatedDateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedDateTime) {
		return nil, false
	}
	return o.CreatedDateTime, true
}

// HasCreatedDateTime returns a boolean if a field has been set.
func (o *PortChange) HasCreatedDateTime() bool {
	if o != nil && !IsNil(o.CreatedDateTime) {
		return true
	}

	return false
}

// SetCreatedDateTime gets a reference to the given time.Time and assigns it to the CreatedDateTime field.
func (o *PortChange) SetCreatedDateTime(v time.Time) {
	o.CreatedDateTime = &v
}

// GetUpdatedDateTime returns the UpdatedDateTime field value if set, zero value otherwise.
func (o *PortChange) GetUpdatedDateTime() time.Time {
	if o == nil || IsNil(o.UpdatedDateTime) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedDateTime
}

// GetUpdatedDateTimeOk returns a tuple with the UpdatedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortChange) GetUpdatedDateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedDateTime) {
		return nil, false
	}
	return o.UpdatedDateTime, true
}

// HasUpdatedDateTime returns a boolean if a field has been set.
func (o *PortChange) HasUpdatedDateTime() bool {
	if o != nil && !IsNil(o.UpdatedDateTime) {
		return true
	}

	return false
}

// SetUpdatedDateTime gets a reference to the given time.Time and assigns it to the UpdatedDateTime field.
func (o *PortChange) SetUpdatedDateTime(v time.Time) {
	o.UpdatedDateTime = &v
}

func (o PortChange) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PortChange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Information) {
		toSerialize["information"] = o.Information
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.CreatedDateTime) {
		toSerialize["createdDateTime"] = o.CreatedDateTime
	}
	if !IsNil(o.UpdatedDateTime) {
		toSerialize["updatedDateTime"] = o.UpdatedDateTime
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PortChange) UnmarshalJSON(data []byte) (err error) {
	varPortChange := _PortChange{}

	err = json.Unmarshal(data, &varPortChange)

	if err != nil {
		return err
	}

	*o = PortChange(varPortChange)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "type")
		delete(additionalProperties, "status")
		delete(additionalProperties, "information")
		delete(additionalProperties, "data")
		delete(additionalProperties, "createdDateTime")
		delete(additionalProperties, "updatedDateTime")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePortChange struct {
	value *PortChange
	isSet bool
}

func (v NullablePortChange) Get() *PortChange {
	return v.value
}

func (v *NullablePortChange) Set(val *PortChange) {
	v.value = val
	v.isSet = true
}

func (v NullablePortChange) IsSet() bool {
	return v.isSet
}

func (v *NullablePortChange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortChange(val *PortChange) *NullablePortChange {
	return &NullablePortChange{value: val, isSet: true}
}

func (v NullablePortChange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortChange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
