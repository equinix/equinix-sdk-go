/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// FabricProviderResource - struct for FabricProviderResource
type FabricProviderResource struct {
	FabricConnection             *FabricConnection
	FabricIPWAN                  *FabricIPWAN
	FabricIPWANConnection        *FabricIPWANConnection
	FabricRouter                 *FabricRouter
	FabricRoutingProtocolBGPType *FabricRoutingProtocolBGPType
}

// FabricConnectionAsFabricProviderResource is a convenience function that returns FabricConnection wrapped in FabricProviderResource
func FabricConnectionAsFabricProviderResource(v *FabricConnection) FabricProviderResource {
	return FabricProviderResource{
		FabricConnection: v,
	}
}

// FabricIPWANAsFabricProviderResource is a convenience function that returns FabricIPWAN wrapped in FabricProviderResource
func FabricIPWANAsFabricProviderResource(v *FabricIPWAN) FabricProviderResource {
	return FabricProviderResource{
		FabricIPWAN: v,
	}
}

// FabricIPWANConnectionAsFabricProviderResource is a convenience function that returns FabricIPWANConnection wrapped in FabricProviderResource
func FabricIPWANConnectionAsFabricProviderResource(v *FabricIPWANConnection) FabricProviderResource {
	return FabricProviderResource{
		FabricIPWANConnection: v,
	}
}

// FabricRouterAsFabricProviderResource is a convenience function that returns FabricRouter wrapped in FabricProviderResource
func FabricRouterAsFabricProviderResource(v *FabricRouter) FabricProviderResource {
	return FabricProviderResource{
		FabricRouter: v,
	}
}

// FabricRoutingProtocolBGPTypeAsFabricProviderResource is a convenience function that returns FabricRoutingProtocolBGPType wrapped in FabricProviderResource
func FabricRoutingProtocolBGPTypeAsFabricProviderResource(v *FabricRoutingProtocolBGPType) FabricProviderResource {
	return FabricProviderResource{
		FabricRoutingProtocolBGPType: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *FabricProviderResource) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into FabricConnection
	err = newStrictDecoder(data).Decode(&dst.FabricConnection)
	if err == nil {
		jsonFabricConnection, _ := json.Marshal(dst.FabricConnection)
		if string(jsonFabricConnection) == "{}" { // empty struct
			dst.FabricConnection = nil
		} else {
			if err = validator.Validate(dst.FabricConnection); err != nil {
				dst.FabricConnection = nil
			} else {
				match++
			}
		}
	} else {
		dst.FabricConnection = nil
	}

	// try to unmarshal data into FabricIPWAN
	err = newStrictDecoder(data).Decode(&dst.FabricIPWAN)
	if err == nil {
		jsonFabricIPWAN, _ := json.Marshal(dst.FabricIPWAN)
		if string(jsonFabricIPWAN) == "{}" { // empty struct
			dst.FabricIPWAN = nil
		} else {
			if err = validator.Validate(dst.FabricIPWAN); err != nil {
				dst.FabricIPWAN = nil
			} else {
				match++
			}
		}
	} else {
		dst.FabricIPWAN = nil
	}

	// try to unmarshal data into FabricIPWANConnection
	err = newStrictDecoder(data).Decode(&dst.FabricIPWANConnection)
	if err == nil {
		jsonFabricIPWANConnection, _ := json.Marshal(dst.FabricIPWANConnection)
		if string(jsonFabricIPWANConnection) == "{}" { // empty struct
			dst.FabricIPWANConnection = nil
		} else {
			if err = validator.Validate(dst.FabricIPWANConnection); err != nil {
				dst.FabricIPWANConnection = nil
			} else {
				match++
			}
		}
	} else {
		dst.FabricIPWANConnection = nil
	}

	// try to unmarshal data into FabricRouter
	err = newStrictDecoder(data).Decode(&dst.FabricRouter)
	if err == nil {
		jsonFabricRouter, _ := json.Marshal(dst.FabricRouter)
		if string(jsonFabricRouter) == "{}" { // empty struct
			dst.FabricRouter = nil
		} else {
			if err = validator.Validate(dst.FabricRouter); err != nil {
				dst.FabricRouter = nil
			} else {
				match++
			}
		}
	} else {
		dst.FabricRouter = nil
	}

	// try to unmarshal data into FabricRoutingProtocolBGPType
	err = newStrictDecoder(data).Decode(&dst.FabricRoutingProtocolBGPType)
	if err == nil {
		jsonFabricRoutingProtocolBGPType, _ := json.Marshal(dst.FabricRoutingProtocolBGPType)
		if string(jsonFabricRoutingProtocolBGPType) == "{}" { // empty struct
			dst.FabricRoutingProtocolBGPType = nil
		} else {
			if err = validator.Validate(dst.FabricRoutingProtocolBGPType); err != nil {
				dst.FabricRoutingProtocolBGPType = nil
			} else {
				match++
			}
		}
	} else {
		dst.FabricRoutingProtocolBGPType = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.FabricConnection = nil
		dst.FabricIPWAN = nil
		dst.FabricIPWANConnection = nil
		dst.FabricRouter = nil
		dst.FabricRoutingProtocolBGPType = nil

		return fmt.Errorf("data matches more than one schema in oneOf(FabricProviderResource)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(FabricProviderResource)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src FabricProviderResource) MarshalJSON() ([]byte, error) {
	if src.FabricConnection != nil {
		return json.Marshal(&src.FabricConnection)
	}

	if src.FabricIPWAN != nil {
		return json.Marshal(&src.FabricIPWAN)
	}

	if src.FabricIPWANConnection != nil {
		return json.Marshal(&src.FabricIPWANConnection)
	}

	if src.FabricRouter != nil {
		return json.Marshal(&src.FabricRouter)
	}

	if src.FabricRoutingProtocolBGPType != nil {
		return json.Marshal(&src.FabricRoutingProtocolBGPType)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *FabricProviderResource) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.FabricConnection != nil {
		return obj.FabricConnection
	}

	if obj.FabricIPWAN != nil {
		return obj.FabricIPWAN
	}

	if obj.FabricIPWANConnection != nil {
		return obj.FabricIPWANConnection
	}

	if obj.FabricRouter != nil {
		return obj.FabricRouter
	}

	if obj.FabricRoutingProtocolBGPType != nil {
		return obj.FabricRoutingProtocolBGPType
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj FabricProviderResource) GetActualInstanceValue() interface{} {
	if obj.FabricConnection != nil {
		return *obj.FabricConnection
	}

	if obj.FabricIPWAN != nil {
		return *obj.FabricIPWAN
	}

	if obj.FabricIPWANConnection != nil {
		return *obj.FabricIPWANConnection
	}

	if obj.FabricRouter != nil {
		return *obj.FabricRouter
	}

	if obj.FabricRoutingProtocolBGPType != nil {
		return *obj.FabricRoutingProtocolBGPType
	}

	// all schemas are nil
	return nil
}

type NullableFabricProviderResource struct {
	value *FabricProviderResource
	isSet bool
}

func (v NullableFabricProviderResource) Get() *FabricProviderResource {
	return v.value
}

func (v *NullableFabricProviderResource) Set(val *FabricProviderResource) {
	v.value = val
	v.isSet = true
}

func (v NullableFabricProviderResource) IsSet() bool {
	return v.isSet
}

func (v *NullableFabricProviderResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFabricProviderResource(val *FabricProviderResource) *NullableFabricProviderResource {
	return &NullableFabricProviderResource{value: val, isSet: true}
}

func (v NullableFabricProviderResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFabricProviderResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
