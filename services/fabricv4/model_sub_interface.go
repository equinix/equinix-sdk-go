/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the SubInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubInterface{}

// SubInterface Sub Interface information
type SubInterface struct {
	// name of subinterafce of a port
	Name                 *string `json:"name,omitempty"`
	Unit                 *int32  `json:"unit,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SubInterface SubInterface

// NewSubInterface instantiates a new SubInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubInterface() *SubInterface {
	this := SubInterface{}
	return &this
}

// NewSubInterfaceWithDefaults instantiates a new SubInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubInterfaceWithDefaults() *SubInterface {
	this := SubInterface{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SubInterface) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubInterface) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SubInterface) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SubInterface) SetName(v string) {
	o.Name = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *SubInterface) GetUnit() int32 {
	if o == nil || IsNil(o.Unit) {
		var ret int32
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubInterface) GetUnitOk() (*int32, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *SubInterface) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given int32 and assigns it to the Unit field.
func (o *SubInterface) SetUnit(v int32) {
	o.Unit = &v
}

func (o SubInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SubInterface) UnmarshalJSON(data []byte) (err error) {
	varSubInterface := _SubInterface{}

	err = json.Unmarshal(data, &varSubInterface)

	if err != nil {
		return err
	}

	*o = SubInterface(varSubInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "unit")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSubInterface struct {
	value *SubInterface
	isSet bool
}

func (v NullableSubInterface) Get() *SubInterface {
	return v.value
}

func (v *NullableSubInterface) Set(val *SubInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableSubInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableSubInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubInterface(val *SubInterface) *NullableSubInterface {
	return &NullableSubInterface{value: val, isSet: true}
}

func (v NullableSubInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
