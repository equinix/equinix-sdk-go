/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// OrchestratorProviders - The OrchestratorProvider schema defines the structure for the orchestrator provider configuration. It includes details about the provider type and its specific configurations.
type OrchestratorProviders struct {
	AWSProvider    *AWSProvider
	FabricProvider *FabricProvider
	GCPProvider    *GCPProvider
}

// AWSProviderAsOrchestratorProviders is a convenience function that returns AWSProvider wrapped in OrchestratorProviders
func AWSProviderAsOrchestratorProviders(v *AWSProvider) OrchestratorProviders {
	return OrchestratorProviders{
		AWSProvider: v,
	}
}

// FabricProviderAsOrchestratorProviders is a convenience function that returns FabricProvider wrapped in OrchestratorProviders
func FabricProviderAsOrchestratorProviders(v *FabricProvider) OrchestratorProviders {
	return OrchestratorProviders{
		FabricProvider: v,
	}
}

// GCPProviderAsOrchestratorProviders is a convenience function that returns GCPProvider wrapped in OrchestratorProviders
func GCPProviderAsOrchestratorProviders(v *GCPProvider) OrchestratorProviders {
	return OrchestratorProviders{
		GCPProvider: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *OrchestratorProviders) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AWSProvider
	err = newStrictDecoder(data).Decode(&dst.AWSProvider)
	if err == nil {
		jsonAWSProvider, _ := json.Marshal(dst.AWSProvider)
		if string(jsonAWSProvider) == "{}" { // empty struct
			dst.AWSProvider = nil
		} else {
			if err = validator.Validate(dst.AWSProvider); err != nil {
				dst.AWSProvider = nil
			} else {
				match++
			}
		}
	} else {
		dst.AWSProvider = nil
	}

	// try to unmarshal data into FabricProvider
	err = newStrictDecoder(data).Decode(&dst.FabricProvider)
	if err == nil {
		jsonFabricProvider, _ := json.Marshal(dst.FabricProvider)
		if string(jsonFabricProvider) == "{}" { // empty struct
			dst.FabricProvider = nil
		} else {
			if err = validator.Validate(dst.FabricProvider); err != nil {
				dst.FabricProvider = nil
			} else {
				match++
			}
		}
	} else {
		dst.FabricProvider = nil
	}

	// try to unmarshal data into GCPProvider
	err = newStrictDecoder(data).Decode(&dst.GCPProvider)
	if err == nil {
		jsonGCPProvider, _ := json.Marshal(dst.GCPProvider)
		if string(jsonGCPProvider) == "{}" { // empty struct
			dst.GCPProvider = nil
		} else {
			if err = validator.Validate(dst.GCPProvider); err != nil {
				dst.GCPProvider = nil
			} else {
				match++
			}
		}
	} else {
		dst.GCPProvider = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AWSProvider = nil
		dst.FabricProvider = nil
		dst.GCPProvider = nil

		return fmt.Errorf("data matches more than one schema in oneOf(OrchestratorProviders)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(OrchestratorProviders)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src OrchestratorProviders) MarshalJSON() ([]byte, error) {
	if src.AWSProvider != nil {
		return json.Marshal(&src.AWSProvider)
	}

	if src.FabricProvider != nil {
		return json.Marshal(&src.FabricProvider)
	}

	if src.GCPProvider != nil {
		return json.Marshal(&src.GCPProvider)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *OrchestratorProviders) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.AWSProvider != nil {
		return obj.AWSProvider
	}

	if obj.FabricProvider != nil {
		return obj.FabricProvider
	}

	if obj.GCPProvider != nil {
		return obj.GCPProvider
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj OrchestratorProviders) GetActualInstanceValue() interface{} {
	if obj.AWSProvider != nil {
		return *obj.AWSProvider
	}

	if obj.FabricProvider != nil {
		return *obj.FabricProvider
	}

	if obj.GCPProvider != nil {
		return *obj.GCPProvider
	}

	// all schemas are nil
	return nil
}

type NullableOrchestratorProviders struct {
	value *OrchestratorProviders
	isSet bool
}

func (v NullableOrchestratorProviders) Get() *OrchestratorProviders {
	return v.value
}

func (v *NullableOrchestratorProviders) Set(val *OrchestratorProviders) {
	v.value = val
	v.isSet = true
}

func (v NullableOrchestratorProviders) IsSet() bool {
	return v.isSet
}

func (v *NullableOrchestratorProviders) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrchestratorProviders(val *OrchestratorProviders) *NullableOrchestratorProviders {
	return &NullableOrchestratorProviders{value: val, isSet: true}
}

func (v NullableOrchestratorProviders) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrchestratorProviders) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
