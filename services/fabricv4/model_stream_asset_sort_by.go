/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// StreamAssetSortBy Possible field names to use on sorting
type StreamAssetSortBy string

// List of StreamAssetSortBy
const (
	STREAMASSETSORTBY_UUID StreamAssetSortBy = "/uuid"
)

// All allowed values of StreamAssetSortBy enum
var AllowedStreamAssetSortByEnumValues = []StreamAssetSortBy{
	"/uuid",
}

func (v *StreamAssetSortBy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StreamAssetSortBy(value)
	for _, existing := range AllowedStreamAssetSortByEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StreamAssetSortBy", value)
}

// NewStreamAssetSortByFromValue returns a pointer to a valid StreamAssetSortBy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStreamAssetSortByFromValue(v string) (*StreamAssetSortBy, error) {
	ev := StreamAssetSortBy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StreamAssetSortBy: valid values are %v", v, AllowedStreamAssetSortByEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StreamAssetSortBy) IsValid() bool {
	for _, existing := range AllowedStreamAssetSortByEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StreamAssetSortBy value
func (v StreamAssetSortBy) Ptr() *StreamAssetSortBy {
	return &v
}

type NullableStreamAssetSortBy struct {
	value *StreamAssetSortBy
	isSet bool
}

func (v NullableStreamAssetSortBy) Get() *StreamAssetSortBy {
	return v.value
}

func (v *NullableStreamAssetSortBy) Set(val *StreamAssetSortBy) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamAssetSortBy) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamAssetSortBy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamAssetSortBy(val *StreamAssetSortBy) *NullableStreamAssetSortBy {
	return &NullableStreamAssetSortBy{value: val, isSet: true}
}

func (v NullableStreamAssetSortBy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamAssetSortBy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
