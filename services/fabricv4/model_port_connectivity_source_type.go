/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// PortConnectivitySourceType Port connectivity type
type PortConnectivitySourceType string

// List of Port_connectivitySourceType
const (
	PORTCONNECTIVITYSOURCETYPE_COLO   PortConnectivitySourceType = "COLO"
	PORTCONNECTIVITYSOURCETYPE_BMMR   PortConnectivitySourceType = "BMMR"
	PORTCONNECTIVITYSOURCETYPE_REMOTE PortConnectivitySourceType = "REMOTE"
)

// All allowed values of PortConnectivitySourceType enum
var AllowedPortConnectivitySourceTypeEnumValues = []PortConnectivitySourceType{
	"COLO",
	"BMMR",
	"REMOTE",
}

func (v *PortConnectivitySourceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PortConnectivitySourceType(value)
	for _, existing := range AllowedPortConnectivitySourceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PortConnectivitySourceType", value)
}

// NewPortConnectivitySourceTypeFromValue returns a pointer to a valid PortConnectivitySourceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPortConnectivitySourceTypeFromValue(v string) (*PortConnectivitySourceType, error) {
	ev := PortConnectivitySourceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PortConnectivitySourceType: valid values are %v", v, AllowedPortConnectivitySourceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PortConnectivitySourceType) IsValid() bool {
	for _, existing := range AllowedPortConnectivitySourceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Port_connectivitySourceType value
func (v PortConnectivitySourceType) Ptr() *PortConnectivitySourceType {
	return &v
}

type NullablePortConnectivitySourceType struct {
	value *PortConnectivitySourceType
	isSet bool
}

func (v NullablePortConnectivitySourceType) Get() *PortConnectivitySourceType {
	return v.value
}

func (v *NullablePortConnectivitySourceType) Set(val *PortConnectivitySourceType) {
	v.value = val
	v.isSet = true
}

func (v NullablePortConnectivitySourceType) IsSet() bool {
	return v.isSet
}

func (v *NullablePortConnectivitySourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortConnectivitySourceType(val *PortConnectivitySourceType) *NullablePortConnectivitySourceType {
	return &NullablePortConnectivitySourceType{value: val, isSet: true}
}

func (v NullablePortConnectivitySourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortConnectivitySourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
