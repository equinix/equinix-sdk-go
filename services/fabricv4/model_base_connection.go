/*
Equinix Fabric API v4

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the BaseConnection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseConnection{}

// BaseConnection Connection base specification
type BaseConnection struct {
	Type *ConnectionType `json:"type,omitempty"`
	// Connection URI
	Href *string `json:"href,omitempty"`
	// Equinix-assigned connection identifier
	Uuid *string `json:"uuid,omitempty"`
	// Customer-provided connection name
	Name *string `json:"name,omitempty"`
	// Customer-provided connection description
	Description *string              `json:"description,omitempty"`
	State       *ConnectionState     `json:"state,omitempty"`
	Change      *Change              `json:"change,omitempty"`
	Operation   *ConnectionOperation `json:"operation,omitempty"`
	Order       *Order               `json:"order,omitempty"`
	// Preferences for notifications on connection configuration or status changes
	Notifications []SimplifiedNotification `json:"notifications,omitempty"`
	Account       *SimplifiedAccount       `json:"account,omitempty"`
	ChangeLog     *Changelog               `json:"changeLog,omitempty"`
	// Connection bandwidth in Mbps
	Bandwidth  *int32                `json:"bandwidth,omitempty"`
	GeoScope   *GeoScopeType         `json:"geoScope,omitempty"`
	Redundancy *ConnectionRedundancy `json:"redundancy,omitempty"`
	// Connection property derived from access point locations
	IsRemote                *bool                    `json:"isRemote,omitempty"`
	Direction               *ConnectionDirection     `json:"direction,omitempty"`
	ASide                   *ConnectionSide          `json:"aSide,omitempty"`
	ZSide                   *ConnectionSide          `json:"zSide,omitempty"`
	MarketplaceSubscription *MarketplaceSubscription `json:"marketplaceSubscription,omitempty"`
	// Connection additional information
	AdditionalInfo       []ConnectionSideAdditionalInfo `json:"additionalInfo,omitempty"`
	Project              *Project                       `json:"project,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _BaseConnection BaseConnection

// NewBaseConnection instantiates a new BaseConnection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseConnection() *BaseConnection {
	this := BaseConnection{}
	return &this
}

// NewBaseConnectionWithDefaults instantiates a new BaseConnection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseConnectionWithDefaults() *BaseConnection {
	this := BaseConnection{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *BaseConnection) GetType() ConnectionType {
	if o == nil || IsNil(o.Type) {
		var ret ConnectionType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseConnection) GetTypeOk() (*ConnectionType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *BaseConnection) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ConnectionType and assigns it to the Type field.
func (o *BaseConnection) SetType(v ConnectionType) {
	o.Type = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *BaseConnection) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseConnection) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *BaseConnection) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *BaseConnection) SetHref(v string) {
	o.Href = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *BaseConnection) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseConnection) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *BaseConnection) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *BaseConnection) SetUuid(v string) {
	o.Uuid = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *BaseConnection) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseConnection) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *BaseConnection) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *BaseConnection) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *BaseConnection) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseConnection) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *BaseConnection) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *BaseConnection) SetDescription(v string) {
	o.Description = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *BaseConnection) GetState() ConnectionState {
	if o == nil || IsNil(o.State) {
		var ret ConnectionState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseConnection) GetStateOk() (*ConnectionState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *BaseConnection) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given ConnectionState and assigns it to the State field.
func (o *BaseConnection) SetState(v ConnectionState) {
	o.State = &v
}

// GetChange returns the Change field value if set, zero value otherwise.
func (o *BaseConnection) GetChange() Change {
	if o == nil || IsNil(o.Change) {
		var ret Change
		return ret
	}
	return *o.Change
}

// GetChangeOk returns a tuple with the Change field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseConnection) GetChangeOk() (*Change, bool) {
	if o == nil || IsNil(o.Change) {
		return nil, false
	}
	return o.Change, true
}

// HasChange returns a boolean if a field has been set.
func (o *BaseConnection) HasChange() bool {
	if o != nil && !IsNil(o.Change) {
		return true
	}

	return false
}

// SetChange gets a reference to the given Change and assigns it to the Change field.
func (o *BaseConnection) SetChange(v Change) {
	o.Change = &v
}

// GetOperation returns the Operation field value if set, zero value otherwise.
func (o *BaseConnection) GetOperation() ConnectionOperation {
	if o == nil || IsNil(o.Operation) {
		var ret ConnectionOperation
		return ret
	}
	return *o.Operation
}

// GetOperationOk returns a tuple with the Operation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseConnection) GetOperationOk() (*ConnectionOperation, bool) {
	if o == nil || IsNil(o.Operation) {
		return nil, false
	}
	return o.Operation, true
}

// HasOperation returns a boolean if a field has been set.
func (o *BaseConnection) HasOperation() bool {
	if o != nil && !IsNil(o.Operation) {
		return true
	}

	return false
}

// SetOperation gets a reference to the given ConnectionOperation and assigns it to the Operation field.
func (o *BaseConnection) SetOperation(v ConnectionOperation) {
	o.Operation = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *BaseConnection) GetOrder() Order {
	if o == nil || IsNil(o.Order) {
		var ret Order
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseConnection) GetOrderOk() (*Order, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *BaseConnection) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given Order and assigns it to the Order field.
func (o *BaseConnection) SetOrder(v Order) {
	o.Order = &v
}

// GetNotifications returns the Notifications field value if set, zero value otherwise.
func (o *BaseConnection) GetNotifications() []SimplifiedNotification {
	if o == nil || IsNil(o.Notifications) {
		var ret []SimplifiedNotification
		return ret
	}
	return o.Notifications
}

// GetNotificationsOk returns a tuple with the Notifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseConnection) GetNotificationsOk() ([]SimplifiedNotification, bool) {
	if o == nil || IsNil(o.Notifications) {
		return nil, false
	}
	return o.Notifications, true
}

// HasNotifications returns a boolean if a field has been set.
func (o *BaseConnection) HasNotifications() bool {
	if o != nil && !IsNil(o.Notifications) {
		return true
	}

	return false
}

// SetNotifications gets a reference to the given []SimplifiedNotification and assigns it to the Notifications field.
func (o *BaseConnection) SetNotifications(v []SimplifiedNotification) {
	o.Notifications = v
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *BaseConnection) GetAccount() SimplifiedAccount {
	if o == nil || IsNil(o.Account) {
		var ret SimplifiedAccount
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseConnection) GetAccountOk() (*SimplifiedAccount, bool) {
	if o == nil || IsNil(o.Account) {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *BaseConnection) HasAccount() bool {
	if o != nil && !IsNil(o.Account) {
		return true
	}

	return false
}

// SetAccount gets a reference to the given SimplifiedAccount and assigns it to the Account field.
func (o *BaseConnection) SetAccount(v SimplifiedAccount) {
	o.Account = &v
}

// GetChangeLog returns the ChangeLog field value if set, zero value otherwise.
func (o *BaseConnection) GetChangeLog() Changelog {
	if o == nil || IsNil(o.ChangeLog) {
		var ret Changelog
		return ret
	}
	return *o.ChangeLog
}

// GetChangeLogOk returns a tuple with the ChangeLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseConnection) GetChangeLogOk() (*Changelog, bool) {
	if o == nil || IsNil(o.ChangeLog) {
		return nil, false
	}
	return o.ChangeLog, true
}

// HasChangeLog returns a boolean if a field has been set.
func (o *BaseConnection) HasChangeLog() bool {
	if o != nil && !IsNil(o.ChangeLog) {
		return true
	}

	return false
}

// SetChangeLog gets a reference to the given Changelog and assigns it to the ChangeLog field.
func (o *BaseConnection) SetChangeLog(v Changelog) {
	o.ChangeLog = &v
}

// GetBandwidth returns the Bandwidth field value if set, zero value otherwise.
func (o *BaseConnection) GetBandwidth() int32 {
	if o == nil || IsNil(o.Bandwidth) {
		var ret int32
		return ret
	}
	return *o.Bandwidth
}

// GetBandwidthOk returns a tuple with the Bandwidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseConnection) GetBandwidthOk() (*int32, bool) {
	if o == nil || IsNil(o.Bandwidth) {
		return nil, false
	}
	return o.Bandwidth, true
}

// HasBandwidth returns a boolean if a field has been set.
func (o *BaseConnection) HasBandwidth() bool {
	if o != nil && !IsNil(o.Bandwidth) {
		return true
	}

	return false
}

// SetBandwidth gets a reference to the given int32 and assigns it to the Bandwidth field.
func (o *BaseConnection) SetBandwidth(v int32) {
	o.Bandwidth = &v
}

// GetGeoScope returns the GeoScope field value if set, zero value otherwise.
func (o *BaseConnection) GetGeoScope() GeoScopeType {
	if o == nil || IsNil(o.GeoScope) {
		var ret GeoScopeType
		return ret
	}
	return *o.GeoScope
}

// GetGeoScopeOk returns a tuple with the GeoScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseConnection) GetGeoScopeOk() (*GeoScopeType, bool) {
	if o == nil || IsNil(o.GeoScope) {
		return nil, false
	}
	return o.GeoScope, true
}

// HasGeoScope returns a boolean if a field has been set.
func (o *BaseConnection) HasGeoScope() bool {
	if o != nil && !IsNil(o.GeoScope) {
		return true
	}

	return false
}

// SetGeoScope gets a reference to the given GeoScopeType and assigns it to the GeoScope field.
func (o *BaseConnection) SetGeoScope(v GeoScopeType) {
	o.GeoScope = &v
}

// GetRedundancy returns the Redundancy field value if set, zero value otherwise.
func (o *BaseConnection) GetRedundancy() ConnectionRedundancy {
	if o == nil || IsNil(o.Redundancy) {
		var ret ConnectionRedundancy
		return ret
	}
	return *o.Redundancy
}

// GetRedundancyOk returns a tuple with the Redundancy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseConnection) GetRedundancyOk() (*ConnectionRedundancy, bool) {
	if o == nil || IsNil(o.Redundancy) {
		return nil, false
	}
	return o.Redundancy, true
}

// HasRedundancy returns a boolean if a field has been set.
func (o *BaseConnection) HasRedundancy() bool {
	if o != nil && !IsNil(o.Redundancy) {
		return true
	}

	return false
}

// SetRedundancy gets a reference to the given ConnectionRedundancy and assigns it to the Redundancy field.
func (o *BaseConnection) SetRedundancy(v ConnectionRedundancy) {
	o.Redundancy = &v
}

// GetIsRemote returns the IsRemote field value if set, zero value otherwise.
func (o *BaseConnection) GetIsRemote() bool {
	if o == nil || IsNil(o.IsRemote) {
		var ret bool
		return ret
	}
	return *o.IsRemote
}

// GetIsRemoteOk returns a tuple with the IsRemote field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseConnection) GetIsRemoteOk() (*bool, bool) {
	if o == nil || IsNil(o.IsRemote) {
		return nil, false
	}
	return o.IsRemote, true
}

// HasIsRemote returns a boolean if a field has been set.
func (o *BaseConnection) HasIsRemote() bool {
	if o != nil && !IsNil(o.IsRemote) {
		return true
	}

	return false
}

// SetIsRemote gets a reference to the given bool and assigns it to the IsRemote field.
func (o *BaseConnection) SetIsRemote(v bool) {
	o.IsRemote = &v
}

// GetDirection returns the Direction field value if set, zero value otherwise.
func (o *BaseConnection) GetDirection() ConnectionDirection {
	if o == nil || IsNil(o.Direction) {
		var ret ConnectionDirection
		return ret
	}
	return *o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseConnection) GetDirectionOk() (*ConnectionDirection, bool) {
	if o == nil || IsNil(o.Direction) {
		return nil, false
	}
	return o.Direction, true
}

// HasDirection returns a boolean if a field has been set.
func (o *BaseConnection) HasDirection() bool {
	if o != nil && !IsNil(o.Direction) {
		return true
	}

	return false
}

// SetDirection gets a reference to the given ConnectionDirection and assigns it to the Direction field.
func (o *BaseConnection) SetDirection(v ConnectionDirection) {
	o.Direction = &v
}

// GetASide returns the ASide field value if set, zero value otherwise.
func (o *BaseConnection) GetASide() ConnectionSide {
	if o == nil || IsNil(o.ASide) {
		var ret ConnectionSide
		return ret
	}
	return *o.ASide
}

// GetASideOk returns a tuple with the ASide field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseConnection) GetASideOk() (*ConnectionSide, bool) {
	if o == nil || IsNil(o.ASide) {
		return nil, false
	}
	return o.ASide, true
}

// HasASide returns a boolean if a field has been set.
func (o *BaseConnection) HasASide() bool {
	if o != nil && !IsNil(o.ASide) {
		return true
	}

	return false
}

// SetASide gets a reference to the given ConnectionSide and assigns it to the ASide field.
func (o *BaseConnection) SetASide(v ConnectionSide) {
	o.ASide = &v
}

// GetZSide returns the ZSide field value if set, zero value otherwise.
func (o *BaseConnection) GetZSide() ConnectionSide {
	if o == nil || IsNil(o.ZSide) {
		var ret ConnectionSide
		return ret
	}
	return *o.ZSide
}

// GetZSideOk returns a tuple with the ZSide field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseConnection) GetZSideOk() (*ConnectionSide, bool) {
	if o == nil || IsNil(o.ZSide) {
		return nil, false
	}
	return o.ZSide, true
}

// HasZSide returns a boolean if a field has been set.
func (o *BaseConnection) HasZSide() bool {
	if o != nil && !IsNil(o.ZSide) {
		return true
	}

	return false
}

// SetZSide gets a reference to the given ConnectionSide and assigns it to the ZSide field.
func (o *BaseConnection) SetZSide(v ConnectionSide) {
	o.ZSide = &v
}

// GetMarketplaceSubscription returns the MarketplaceSubscription field value if set, zero value otherwise.
func (o *BaseConnection) GetMarketplaceSubscription() MarketplaceSubscription {
	if o == nil || IsNil(o.MarketplaceSubscription) {
		var ret MarketplaceSubscription
		return ret
	}
	return *o.MarketplaceSubscription
}

// GetMarketplaceSubscriptionOk returns a tuple with the MarketplaceSubscription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseConnection) GetMarketplaceSubscriptionOk() (*MarketplaceSubscription, bool) {
	if o == nil || IsNil(o.MarketplaceSubscription) {
		return nil, false
	}
	return o.MarketplaceSubscription, true
}

// HasMarketplaceSubscription returns a boolean if a field has been set.
func (o *BaseConnection) HasMarketplaceSubscription() bool {
	if o != nil && !IsNil(o.MarketplaceSubscription) {
		return true
	}

	return false
}

// SetMarketplaceSubscription gets a reference to the given MarketplaceSubscription and assigns it to the MarketplaceSubscription field.
func (o *BaseConnection) SetMarketplaceSubscription(v MarketplaceSubscription) {
	o.MarketplaceSubscription = &v
}

// GetAdditionalInfo returns the AdditionalInfo field value if set, zero value otherwise.
func (o *BaseConnection) GetAdditionalInfo() []ConnectionSideAdditionalInfo {
	if o == nil || IsNil(o.AdditionalInfo) {
		var ret []ConnectionSideAdditionalInfo
		return ret
	}
	return o.AdditionalInfo
}

// GetAdditionalInfoOk returns a tuple with the AdditionalInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseConnection) GetAdditionalInfoOk() ([]ConnectionSideAdditionalInfo, bool) {
	if o == nil || IsNil(o.AdditionalInfo) {
		return nil, false
	}
	return o.AdditionalInfo, true
}

// HasAdditionalInfo returns a boolean if a field has been set.
func (o *BaseConnection) HasAdditionalInfo() bool {
	if o != nil && !IsNil(o.AdditionalInfo) {
		return true
	}

	return false
}

// SetAdditionalInfo gets a reference to the given []ConnectionSideAdditionalInfo and assigns it to the AdditionalInfo field.
func (o *BaseConnection) SetAdditionalInfo(v []ConnectionSideAdditionalInfo) {
	o.AdditionalInfo = v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *BaseConnection) GetProject() Project {
	if o == nil || IsNil(o.Project) {
		var ret Project
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseConnection) GetProjectOk() (*Project, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *BaseConnection) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given Project and assigns it to the Project field.
func (o *BaseConnection) SetProject(v Project) {
	o.Project = &v
}

func (o BaseConnection) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseConnection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Change) {
		toSerialize["change"] = o.Change
	}
	if !IsNil(o.Operation) {
		toSerialize["operation"] = o.Operation
	}
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	if !IsNil(o.Notifications) {
		toSerialize["notifications"] = o.Notifications
	}
	if !IsNil(o.Account) {
		toSerialize["account"] = o.Account
	}
	if !IsNil(o.ChangeLog) {
		toSerialize["changeLog"] = o.ChangeLog
	}
	if !IsNil(o.Bandwidth) {
		toSerialize["bandwidth"] = o.Bandwidth
	}
	if !IsNil(o.GeoScope) {
		toSerialize["geoScope"] = o.GeoScope
	}
	if !IsNil(o.Redundancy) {
		toSerialize["redundancy"] = o.Redundancy
	}
	if !IsNil(o.IsRemote) {
		toSerialize["isRemote"] = o.IsRemote
	}
	if !IsNil(o.Direction) {
		toSerialize["direction"] = o.Direction
	}
	if !IsNil(o.ASide) {
		toSerialize["aSide"] = o.ASide
	}
	if !IsNil(o.ZSide) {
		toSerialize["zSide"] = o.ZSide
	}
	if !IsNil(o.MarketplaceSubscription) {
		toSerialize["marketplaceSubscription"] = o.MarketplaceSubscription
	}
	if !IsNil(o.AdditionalInfo) {
		toSerialize["additionalInfo"] = o.AdditionalInfo
	}
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BaseConnection) UnmarshalJSON(data []byte) (err error) {
	varBaseConnection := _BaseConnection{}

	err = json.Unmarshal(data, &varBaseConnection)

	if err != nil {
		return err
	}

	*o = BaseConnection(varBaseConnection)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "href")
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "state")
		delete(additionalProperties, "change")
		delete(additionalProperties, "operation")
		delete(additionalProperties, "order")
		delete(additionalProperties, "notifications")
		delete(additionalProperties, "account")
		delete(additionalProperties, "changeLog")
		delete(additionalProperties, "bandwidth")
		delete(additionalProperties, "geoScope")
		delete(additionalProperties, "redundancy")
		delete(additionalProperties, "isRemote")
		delete(additionalProperties, "direction")
		delete(additionalProperties, "aSide")
		delete(additionalProperties, "zSide")
		delete(additionalProperties, "marketplaceSubscription")
		delete(additionalProperties, "additionalInfo")
		delete(additionalProperties, "project")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBaseConnection struct {
	value *BaseConnection
	isSet bool
}

func (v NullableBaseConnection) Get() *BaseConnection {
	return v.value
}

func (v *NullableBaseConnection) Set(val *BaseConnection) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseConnection) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseConnection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseConnection(val *BaseConnection) *NullableBaseConnection {
	return &NullableBaseConnection{value: val, isSet: true}
}

func (v NullableBaseConnection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseConnection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
