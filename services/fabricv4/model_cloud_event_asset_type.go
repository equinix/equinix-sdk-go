/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// CloudEventAssetType the model 'CloudEventAssetType'
type CloudEventAssetType string

// List of CloudEventAssetType
const (
	CLOUDEVENTASSETTYPE_PORTS       CloudEventAssetType = "ports"
	CLOUDEVENTASSETTYPE_CONNECTIONS CloudEventAssetType = "connections"
	CLOUDEVENTASSETTYPE_ROUTERS     CloudEventAssetType = "routers"
)

// All allowed values of CloudEventAssetType enum
var AllowedCloudEventAssetTypeEnumValues = []CloudEventAssetType{
	"ports",
	"connections",
	"routers",
}

func (v *CloudEventAssetType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CloudEventAssetType(value)
	for _, existing := range AllowedCloudEventAssetTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CloudEventAssetType", value)
}

// NewCloudEventAssetTypeFromValue returns a pointer to a valid CloudEventAssetType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCloudEventAssetTypeFromValue(v string) (*CloudEventAssetType, error) {
	ev := CloudEventAssetType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CloudEventAssetType: valid values are %v", v, AllowedCloudEventAssetTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CloudEventAssetType) IsValid() bool {
	for _, existing := range AllowedCloudEventAssetTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CloudEventAssetType value
func (v CloudEventAssetType) Ptr() *CloudEventAssetType {
	return &v
}

type NullableCloudEventAssetType struct {
	value *CloudEventAssetType
	isSet bool
}

func (v NullableCloudEventAssetType) Get() *CloudEventAssetType {
	return v.value
}

func (v *NullableCloudEventAssetType) Set(val *CloudEventAssetType) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudEventAssetType) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudEventAssetType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudEventAssetType(val *CloudEventAssetType) *NullableCloudEventAssetType {
	return &NullableCloudEventAssetType{value: val, isSet: true}
}

func (v NullableCloudEventAssetType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudEventAssetType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
