/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// RouteAggregationState Route Aggregation status
type RouteAggregationState string

// List of RouteAggregationState
const (
	ROUTEAGGREGATIONSTATE_PROVISIONING      RouteAggregationState = "PROVISIONING"
	ROUTEAGGREGATIONSTATE_REPROVISIONING    RouteAggregationState = "REPROVISIONING"
	ROUTEAGGREGATIONSTATE_DEPROVISIONING    RouteAggregationState = "DEPROVISIONING"
	ROUTEAGGREGATIONSTATE_PROVISIONED       RouteAggregationState = "PROVISIONED"
	ROUTEAGGREGATIONSTATE_DEPROVISIONED     RouteAggregationState = "DEPROVISIONED"
	ROUTEAGGREGATIONSTATE_NOT_PROVISIONED   RouteAggregationState = "NOT_PROVISIONED"
	ROUTEAGGREGATIONSTATE_NOT_DEPROVISIONED RouteAggregationState = "NOT_DEPROVISIONED"
)

// All allowed values of RouteAggregationState enum
var AllowedRouteAggregationStateEnumValues = []RouteAggregationState{
	"PROVISIONING",
	"REPROVISIONING",
	"DEPROVISIONING",
	"PROVISIONED",
	"DEPROVISIONED",
	"NOT_PROVISIONED",
	"NOT_DEPROVISIONED",
}

func (v *RouteAggregationState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RouteAggregationState(value)
	for _, existing := range AllowedRouteAggregationStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RouteAggregationState", value)
}

// NewRouteAggregationStateFromValue returns a pointer to a valid RouteAggregationState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRouteAggregationStateFromValue(v string) (*RouteAggregationState, error) {
	ev := RouteAggregationState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RouteAggregationState: valid values are %v", v, AllowedRouteAggregationStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RouteAggregationState) IsValid() bool {
	for _, existing := range AllowedRouteAggregationStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RouteAggregationState value
func (v RouteAggregationState) Ptr() *RouteAggregationState {
	return &v
}

type NullableRouteAggregationState struct {
	value *RouteAggregationState
	isSet bool
}

func (v NullableRouteAggregationState) Get() *RouteAggregationState {
	return v.value
}

func (v *NullableRouteAggregationState) Set(val *RouteAggregationState) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteAggregationState) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteAggregationState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteAggregationState(val *RouteAggregationState) *NullableRouteAggregationState {
	return &NullableRouteAggregationState{value: val, isSet: true}
}

func (v NullableRouteAggregationState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteAggregationState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
