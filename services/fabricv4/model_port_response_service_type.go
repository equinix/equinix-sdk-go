/*
Equinix Fabric API v4

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.12
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// PortResponseServiceType Port service Type
type PortResponseServiceType string

// List of PortResponse_serviceType
const (
	PORTRESPONSESERVICETYPE_EPL PortResponseServiceType = "EPL"
	PORTRESPONSESERVICETYPE_MSP PortResponseServiceType = "MSP"
)

// All allowed values of PortResponseServiceType enum
var AllowedPortResponseServiceTypeEnumValues = []PortResponseServiceType{
	"EPL",
	"MSP",
}

func (v *PortResponseServiceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PortResponseServiceType(value)
	for _, existing := range AllowedPortResponseServiceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PortResponseServiceType", value)
}

// NewPortResponseServiceTypeFromValue returns a pointer to a valid PortResponseServiceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPortResponseServiceTypeFromValue(v string) (*PortResponseServiceType, error) {
	ev := PortResponseServiceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PortResponseServiceType: valid values are %v", v, AllowedPortResponseServiceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PortResponseServiceType) IsValid() bool {
	for _, existing := range AllowedPortResponseServiceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PortResponse_serviceType value
func (v PortResponseServiceType) Ptr() *PortResponseServiceType {
	return &v
}

type NullablePortResponseServiceType struct {
	value *PortResponseServiceType
	isSet bool
}

func (v NullablePortResponseServiceType) Get() *PortResponseServiceType {
	return v.value
}

func (v *NullablePortResponseServiceType) Set(val *PortResponseServiceType) {
	v.value = val
	v.isSet = true
}

func (v NullablePortResponseServiceType) IsSet() bool {
	return v.isSet
}

func (v *NullablePortResponseServiceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortResponseServiceType(val *PortResponseServiceType) *NullablePortResponseServiceType {
	return &NullablePortResponseServiceType{value: val, isSet: true}
}

func (v NullablePortResponseServiceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortResponseServiceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
