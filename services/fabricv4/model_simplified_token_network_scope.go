/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// SimplifiedTokenNetworkScope scope of Network
type SimplifiedTokenNetworkScope string

// List of SimplifiedTokenNetwork_scope
const (
	SIMPLIFIEDTOKENNETWORKSCOPE_LOCAL    SimplifiedTokenNetworkScope = "LOCAL"
	SIMPLIFIEDTOKENNETWORKSCOPE_REGIONAL SimplifiedTokenNetworkScope = "REGIONAL"
	SIMPLIFIEDTOKENNETWORKSCOPE_GLOBAL   SimplifiedTokenNetworkScope = "GLOBAL"
)

// All allowed values of SimplifiedTokenNetworkScope enum
var AllowedSimplifiedTokenNetworkScopeEnumValues = []SimplifiedTokenNetworkScope{
	"LOCAL",
	"REGIONAL",
	"GLOBAL",
}

func (v *SimplifiedTokenNetworkScope) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SimplifiedTokenNetworkScope(value)
	for _, existing := range AllowedSimplifiedTokenNetworkScopeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SimplifiedTokenNetworkScope", value)
}

// NewSimplifiedTokenNetworkScopeFromValue returns a pointer to a valid SimplifiedTokenNetworkScope
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSimplifiedTokenNetworkScopeFromValue(v string) (*SimplifiedTokenNetworkScope, error) {
	ev := SimplifiedTokenNetworkScope(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SimplifiedTokenNetworkScope: valid values are %v", v, AllowedSimplifiedTokenNetworkScopeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SimplifiedTokenNetworkScope) IsValid() bool {
	for _, existing := range AllowedSimplifiedTokenNetworkScopeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SimplifiedTokenNetwork_scope value
func (v SimplifiedTokenNetworkScope) Ptr() *SimplifiedTokenNetworkScope {
	return &v
}

type NullableSimplifiedTokenNetworkScope struct {
	value *SimplifiedTokenNetworkScope
	isSet bool
}

func (v NullableSimplifiedTokenNetworkScope) Get() *SimplifiedTokenNetworkScope {
	return v.value
}

func (v *NullableSimplifiedTokenNetworkScope) Set(val *SimplifiedTokenNetworkScope) {
	v.value = val
	v.isSet = true
}

func (v NullableSimplifiedTokenNetworkScope) IsSet() bool {
	return v.isSet
}

func (v *NullableSimplifiedTokenNetworkScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSimplifiedTokenNetworkScope(val *SimplifiedTokenNetworkScope) *NullableSimplifiedTokenNetworkScope {
	return &NullableSimplifiedTokenNetworkScope{value: val, isSet: true}
}

func (v NullableSimplifiedTokenNetworkScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSimplifiedTokenNetworkScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
