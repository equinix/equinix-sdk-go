/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// LinkProtocolType Type of Link Protocol
type LinkProtocolType string

// List of LinkProtocolType
const (
	LINKPROTOCOLTYPE_UNTAGGED   LinkProtocolType = "UNTAGGED"
	LINKPROTOCOLTYPE_DOT1_Q     LinkProtocolType = "DOT1Q"
	LINKPROTOCOLTYPE_QINQ       LinkProtocolType = "QINQ"
	LINKPROTOCOLTYPE_EVPN_VXLAN LinkProtocolType = "EVPN_VXLAN"
	LINKPROTOCOLTYPE_VXLAN      LinkProtocolType = "VXLAN"
)

// All allowed values of LinkProtocolType enum
var AllowedLinkProtocolTypeEnumValues = []LinkProtocolType{
	"UNTAGGED",
	"DOT1Q",
	"QINQ",
	"EVPN_VXLAN",
	"VXLAN",
}

func (v *LinkProtocolType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LinkProtocolType(value)
	for _, existing := range AllowedLinkProtocolTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LinkProtocolType", value)
}

// NewLinkProtocolTypeFromValue returns a pointer to a valid LinkProtocolType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLinkProtocolTypeFromValue(v string) (*LinkProtocolType, error) {
	ev := LinkProtocolType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LinkProtocolType: valid values are %v", v, AllowedLinkProtocolTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LinkProtocolType) IsValid() bool {
	for _, existing := range AllowedLinkProtocolTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LinkProtocolType value
func (v LinkProtocolType) Ptr() *LinkProtocolType {
	return &v
}

type NullableLinkProtocolType struct {
	value *LinkProtocolType
	isSet bool
}

func (v NullableLinkProtocolType) Get() *LinkProtocolType {
	return v.value
}

func (v *NullableLinkProtocolType) Set(val *LinkProtocolType) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkProtocolType) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkProtocolType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkProtocolType(val *LinkProtocolType) *NullableLinkProtocolType {
	return &NullableLinkProtocolType{value: val, isSet: true}
}

func (v NullableLinkProtocolType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkProtocolType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
