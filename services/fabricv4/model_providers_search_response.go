/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ProvidersSearchResponse - struct for ProvidersSearchResponse
type ProvidersSearchResponse struct {
	SearchDirectConnect *SearchDirectConnect
	Subnet              *Subnet
	VPC                 *VPC
}

// SearchDirectConnectAsProvidersSearchResponse is a convenience function that returns SearchDirectConnect wrapped in ProvidersSearchResponse
func SearchDirectConnectAsProvidersSearchResponse(v *SearchDirectConnect) ProvidersSearchResponse {
	return ProvidersSearchResponse{
		SearchDirectConnect: v,
	}
}

// SubnetAsProvidersSearchResponse is a convenience function that returns Subnet wrapped in ProvidersSearchResponse
func SubnetAsProvidersSearchResponse(v *Subnet) ProvidersSearchResponse {
	return ProvidersSearchResponse{
		Subnet: v,
	}
}

// VPCAsProvidersSearchResponse is a convenience function that returns VPC wrapped in ProvidersSearchResponse
func VPCAsProvidersSearchResponse(v *VPC) ProvidersSearchResponse {
	return ProvidersSearchResponse{
		VPC: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ProvidersSearchResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SearchDirectConnect
	err = newStrictDecoder(data).Decode(&dst.SearchDirectConnect)
	if err == nil {
		jsonSearchDirectConnect, _ := json.Marshal(dst.SearchDirectConnect)
		if string(jsonSearchDirectConnect) == "{}" { // empty struct
			dst.SearchDirectConnect = nil
		} else {
			if err = validator.Validate(dst.SearchDirectConnect); err != nil {
				dst.SearchDirectConnect = nil
			} else {
				match++
			}
		}
	} else {
		dst.SearchDirectConnect = nil
	}

	// try to unmarshal data into Subnet
	err = newStrictDecoder(data).Decode(&dst.Subnet)
	if err == nil {
		jsonSubnet, _ := json.Marshal(dst.Subnet)
		if string(jsonSubnet) == "{}" { // empty struct
			dst.Subnet = nil
		} else {
			if err = validator.Validate(dst.Subnet); err != nil {
				dst.Subnet = nil
			} else {
				match++
			}
		}
	} else {
		dst.Subnet = nil
	}

	// try to unmarshal data into VPC
	err = newStrictDecoder(data).Decode(&dst.VPC)
	if err == nil {
		jsonVPC, _ := json.Marshal(dst.VPC)
		if string(jsonVPC) == "{}" { // empty struct
			dst.VPC = nil
		} else {
			if err = validator.Validate(dst.VPC); err != nil {
				dst.VPC = nil
			} else {
				match++
			}
		}
	} else {
		dst.VPC = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SearchDirectConnect = nil
		dst.Subnet = nil
		dst.VPC = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ProvidersSearchResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ProvidersSearchResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ProvidersSearchResponse) MarshalJSON() ([]byte, error) {
	if src.SearchDirectConnect != nil {
		return json.Marshal(&src.SearchDirectConnect)
	}

	if src.Subnet != nil {
		return json.Marshal(&src.Subnet)
	}

	if src.VPC != nil {
		return json.Marshal(&src.VPC)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ProvidersSearchResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.SearchDirectConnect != nil {
		return obj.SearchDirectConnect
	}

	if obj.Subnet != nil {
		return obj.Subnet
	}

	if obj.VPC != nil {
		return obj.VPC
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ProvidersSearchResponse) GetActualInstanceValue() interface{} {
	if obj.SearchDirectConnect != nil {
		return *obj.SearchDirectConnect
	}

	if obj.Subnet != nil {
		return *obj.Subnet
	}

	if obj.VPC != nil {
		return *obj.VPC
	}

	// all schemas are nil
	return nil
}

type NullableProvidersSearchResponse struct {
	value *ProvidersSearchResponse
	isSet bool
}

func (v NullableProvidersSearchResponse) Get() *ProvidersSearchResponse {
	return v.value
}

func (v *NullableProvidersSearchResponse) Set(val *ProvidersSearchResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableProvidersSearchResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableProvidersSearchResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProvidersSearchResponse(val *ProvidersSearchResponse) *NullableProvidersSearchResponse {
	return &NullableProvidersSearchResponse{value: val, isSet: true}
}

func (v NullableProvidersSearchResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProvidersSearchResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
