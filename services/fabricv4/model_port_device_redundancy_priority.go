/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// PortDeviceRedundancyPriority Device redundancy priority
type PortDeviceRedundancyPriority string

// List of PortDeviceRedundancy_priority
const (
	PORTDEVICEREDUNDANCYPRIORITY_PRIMARY   PortDeviceRedundancyPriority = "PRIMARY"
	PORTDEVICEREDUNDANCYPRIORITY_SECONDARY PortDeviceRedundancyPriority = "SECONDARY"
)

// All allowed values of PortDeviceRedundancyPriority enum
var AllowedPortDeviceRedundancyPriorityEnumValues = []PortDeviceRedundancyPriority{
	"PRIMARY",
	"SECONDARY",
}

func (v *PortDeviceRedundancyPriority) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PortDeviceRedundancyPriority(value)
	for _, existing := range AllowedPortDeviceRedundancyPriorityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PortDeviceRedundancyPriority", value)
}

// NewPortDeviceRedundancyPriorityFromValue returns a pointer to a valid PortDeviceRedundancyPriority
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPortDeviceRedundancyPriorityFromValue(v string) (*PortDeviceRedundancyPriority, error) {
	ev := PortDeviceRedundancyPriority(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PortDeviceRedundancyPriority: valid values are %v", v, AllowedPortDeviceRedundancyPriorityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PortDeviceRedundancyPriority) IsValid() bool {
	for _, existing := range AllowedPortDeviceRedundancyPriorityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PortDeviceRedundancy_priority value
func (v PortDeviceRedundancyPriority) Ptr() *PortDeviceRedundancyPriority {
	return &v
}

type NullablePortDeviceRedundancyPriority struct {
	value *PortDeviceRedundancyPriority
	isSet bool
}

func (v NullablePortDeviceRedundancyPriority) Get() *PortDeviceRedundancyPriority {
	return v.value
}

func (v *NullablePortDeviceRedundancyPriority) Set(val *PortDeviceRedundancyPriority) {
	v.value = val
	v.isSet = true
}

func (v NullablePortDeviceRedundancyPriority) IsSet() bool {
	return v.isSet
}

func (v *NullablePortDeviceRedundancyPriority) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortDeviceRedundancyPriority(val *PortDeviceRedundancyPriority) *NullablePortDeviceRedundancyPriority {
	return &NullablePortDeviceRedundancyPriority{value: val, isSet: true}
}

func (v NullablePortDeviceRedundancyPriority) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortDeviceRedundancyPriority) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
