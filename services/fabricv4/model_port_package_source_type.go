/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// PortPackageSourceType Port Package Source Type
type PortPackageSourceType string

// List of PortPackageSourceType
const (
	PORTPACKAGESOURCETYPE_COLO   PortPackageSourceType = "COLO"
	PORTPACKAGESOURCETYPE_REMOTE PortPackageSourceType = "REMOTE"
	PORTPACKAGESOURCETYPE_BMMR   PortPackageSourceType = "BMMR"
)

// All allowed values of PortPackageSourceType enum
var AllowedPortPackageSourceTypeEnumValues = []PortPackageSourceType{
	"COLO",
	"REMOTE",
	"BMMR",
}

func (v *PortPackageSourceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PortPackageSourceType(value)
	for _, existing := range AllowedPortPackageSourceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PortPackageSourceType", value)
}

// NewPortPackageSourceTypeFromValue returns a pointer to a valid PortPackageSourceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPortPackageSourceTypeFromValue(v string) (*PortPackageSourceType, error) {
	ev := PortPackageSourceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PortPackageSourceType: valid values are %v", v, AllowedPortPackageSourceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PortPackageSourceType) IsValid() bool {
	for _, existing := range AllowedPortPackageSourceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PortPackageSourceType value
func (v PortPackageSourceType) Ptr() *PortPackageSourceType {
	return &v
}

type NullablePortPackageSourceType struct {
	value *PortPackageSourceType
	isSet bool
}

func (v NullablePortPackageSourceType) Get() *PortPackageSourceType {
	return v.value
}

func (v *NullablePortPackageSourceType) Set(val *PortPackageSourceType) {
	v.value = val
	v.isSet = true
}

func (v NullablePortPackageSourceType) IsSet() bool {
	return v.isSet
}

func (v *NullablePortPackageSourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortPackageSourceType(val *PortPackageSourceType) *NullablePortPackageSourceType {
	return &NullablePortPackageSourceType{value: val, isSet: true}
}

func (v NullablePortPackageSourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortPackageSourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
