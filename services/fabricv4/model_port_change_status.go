/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// PortChangeStatus Current outcome of the change flow
type PortChangeStatus string

// List of PortChange_status
const (
	PORTCHANGESTATUS_COMPLETED PortChangeStatus = "COMPLETED"
	PORTCHANGESTATUS_FAILED    PortChangeStatus = "FAILED"
	PORTCHANGESTATUS_REQUESTED PortChangeStatus = "REQUESTED"
)

// All allowed values of PortChangeStatus enum
var AllowedPortChangeStatusEnumValues = []PortChangeStatus{
	"COMPLETED",
	"FAILED",
	"REQUESTED",
}

func (v *PortChangeStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PortChangeStatus(value)
	for _, existing := range AllowedPortChangeStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PortChangeStatus", value)
}

// NewPortChangeStatusFromValue returns a pointer to a valid PortChangeStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPortChangeStatusFromValue(v string) (*PortChangeStatus, error) {
	ev := PortChangeStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PortChangeStatus: valid values are %v", v, AllowedPortChangeStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PortChangeStatus) IsValid() bool {
	for _, existing := range AllowedPortChangeStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PortChange_status value
func (v PortChangeStatus) Ptr() *PortChangeStatus {
	return &v
}

type NullablePortChangeStatus struct {
	value *PortChangeStatus
	isSet bool
}

func (v NullablePortChangeStatus) Get() *PortChangeStatus {
	return v.value
}

func (v *NullablePortChangeStatus) Set(val *PortChangeStatus) {
	v.value = val
	v.isSet = true
}

func (v NullablePortChangeStatus) IsSet() bool {
	return v.isSet
}

func (v *NullablePortChangeStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortChangeStatus(val *PortChangeStatus) *NullablePortChangeStatus {
	return &NullablePortChangeStatus{value: val, isSet: true}
}

func (v NullablePortChangeStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortChangeStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
