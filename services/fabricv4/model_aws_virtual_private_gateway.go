/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// checks if the AWSVirtualPrivateGateway type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AWSVirtualPrivateGateway{}

// AWSVirtualPrivateGateway The VirtualPrivateGateway schema defines the structure for the virtual private gateway configuration. It includes details about the gateway type, required flag, VPC and subnet IDs, and deployment properties.
type AWSVirtualPrivateGateway struct {
	Type                 AWSVirtualPrivateGatewayType `json:"type"`
	Required             bool                         `json:"required"`
	VpcId                *string                      `json:"vpcId,omitempty"`
	SubnetId             *string                      `json:"subnetId,omitempty"`
	DeploymentProperties TopologyProperties           `json:"deploymentProperties"`
	AdditionalProperties map[string]interface{}
}

type _AWSVirtualPrivateGateway AWSVirtualPrivateGateway

// NewAWSVirtualPrivateGateway instantiates a new AWSVirtualPrivateGateway object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAWSVirtualPrivateGateway(type_ AWSVirtualPrivateGatewayType, required bool, deploymentProperties TopologyProperties) *AWSVirtualPrivateGateway {
	this := AWSVirtualPrivateGateway{}
	this.Type = type_
	this.Required = required
	this.DeploymentProperties = deploymentProperties
	return &this
}

// NewAWSVirtualPrivateGatewayWithDefaults instantiates a new AWSVirtualPrivateGateway object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAWSVirtualPrivateGatewayWithDefaults() *AWSVirtualPrivateGateway {
	this := AWSVirtualPrivateGateway{}
	return &this
}

// GetType returns the Type field value
func (o *AWSVirtualPrivateGateway) GetType() AWSVirtualPrivateGatewayType {
	if o == nil {
		var ret AWSVirtualPrivateGatewayType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AWSVirtualPrivateGateway) GetTypeOk() (*AWSVirtualPrivateGatewayType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AWSVirtualPrivateGateway) SetType(v AWSVirtualPrivateGatewayType) {
	o.Type = v
}

// GetRequired returns the Required field value
func (o *AWSVirtualPrivateGateway) GetRequired() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Required
}

// GetRequiredOk returns a tuple with the Required field value
// and a boolean to check if the value has been set.
func (o *AWSVirtualPrivateGateway) GetRequiredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Required, true
}

// SetRequired sets field value
func (o *AWSVirtualPrivateGateway) SetRequired(v bool) {
	o.Required = v
}

// GetVpcId returns the VpcId field value if set, zero value otherwise.
func (o *AWSVirtualPrivateGateway) GetVpcId() string {
	if o == nil || IsNil(o.VpcId) {
		var ret string
		return ret
	}
	return *o.VpcId
}

// GetVpcIdOk returns a tuple with the VpcId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AWSVirtualPrivateGateway) GetVpcIdOk() (*string, bool) {
	if o == nil || IsNil(o.VpcId) {
		return nil, false
	}
	return o.VpcId, true
}

// HasVpcId returns a boolean if a field has been set.
func (o *AWSVirtualPrivateGateway) HasVpcId() bool {
	if o != nil && !IsNil(o.VpcId) {
		return true
	}

	return false
}

// SetVpcId gets a reference to the given string and assigns it to the VpcId field.
func (o *AWSVirtualPrivateGateway) SetVpcId(v string) {
	o.VpcId = &v
}

// GetSubnetId returns the SubnetId field value if set, zero value otherwise.
func (o *AWSVirtualPrivateGateway) GetSubnetId() string {
	if o == nil || IsNil(o.SubnetId) {
		var ret string
		return ret
	}
	return *o.SubnetId
}

// GetSubnetIdOk returns a tuple with the SubnetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AWSVirtualPrivateGateway) GetSubnetIdOk() (*string, bool) {
	if o == nil || IsNil(o.SubnetId) {
		return nil, false
	}
	return o.SubnetId, true
}

// HasSubnetId returns a boolean if a field has been set.
func (o *AWSVirtualPrivateGateway) HasSubnetId() bool {
	if o != nil && !IsNil(o.SubnetId) {
		return true
	}

	return false
}

// SetSubnetId gets a reference to the given string and assigns it to the SubnetId field.
func (o *AWSVirtualPrivateGateway) SetSubnetId(v string) {
	o.SubnetId = &v
}

// GetDeploymentProperties returns the DeploymentProperties field value
func (o *AWSVirtualPrivateGateway) GetDeploymentProperties() TopologyProperties {
	if o == nil {
		var ret TopologyProperties
		return ret
	}

	return o.DeploymentProperties
}

// GetDeploymentPropertiesOk returns a tuple with the DeploymentProperties field value
// and a boolean to check if the value has been set.
func (o *AWSVirtualPrivateGateway) GetDeploymentPropertiesOk() (*TopologyProperties, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeploymentProperties, true
}

// SetDeploymentProperties sets field value
func (o *AWSVirtualPrivateGateway) SetDeploymentProperties(v TopologyProperties) {
	o.DeploymentProperties = v
}

func (o AWSVirtualPrivateGateway) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AWSVirtualPrivateGateway) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["required"] = o.Required
	if !IsNil(o.VpcId) {
		toSerialize["vpcId"] = o.VpcId
	}
	if !IsNil(o.SubnetId) {
		toSerialize["subnetId"] = o.SubnetId
	}
	toSerialize["deploymentProperties"] = o.DeploymentProperties

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AWSVirtualPrivateGateway) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"required",
		"deploymentProperties",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAWSVirtualPrivateGateway := _AWSVirtualPrivateGateway{}

	err = json.Unmarshal(data, &varAWSVirtualPrivateGateway)

	if err != nil {
		return err
	}

	*o = AWSVirtualPrivateGateway(varAWSVirtualPrivateGateway)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "required")
		delete(additionalProperties, "vpcId")
		delete(additionalProperties, "subnetId")
		delete(additionalProperties, "deploymentProperties")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAWSVirtualPrivateGateway struct {
	value *AWSVirtualPrivateGateway
	isSet bool
}

func (v NullableAWSVirtualPrivateGateway) Get() *AWSVirtualPrivateGateway {
	return v.value
}

func (v *NullableAWSVirtualPrivateGateway) Set(val *AWSVirtualPrivateGateway) {
	v.value = val
	v.isSet = true
}

func (v NullableAWSVirtualPrivateGateway) IsSet() bool {
	return v.isSet
}

func (v *NullableAWSVirtualPrivateGateway) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAWSVirtualPrivateGateway(val *AWSVirtualPrivateGateway) *NullableAWSVirtualPrivateGateway {
	return &NullableAWSVirtualPrivateGateway{value: val, isSet: true}
}

func (v NullableAWSVirtualPrivateGateway) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAWSVirtualPrivateGateway) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
