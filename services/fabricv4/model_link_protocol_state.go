/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// LinkProtocolState Network status
type LinkProtocolState string

// List of LinkProtocolState
const (
	LINKPROTOCOLSTATE_RESERVED LinkProtocolState = "RESERVED"
	LINKPROTOCOLSTATE_RELEASED LinkProtocolState = "RELEASED"
)

// All allowed values of LinkProtocolState enum
var AllowedLinkProtocolStateEnumValues = []LinkProtocolState{
	"RESERVED",
	"RELEASED",
}

func (v *LinkProtocolState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LinkProtocolState(value)
	for _, existing := range AllowedLinkProtocolStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LinkProtocolState", value)
}

// NewLinkProtocolStateFromValue returns a pointer to a valid LinkProtocolState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLinkProtocolStateFromValue(v string) (*LinkProtocolState, error) {
	ev := LinkProtocolState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LinkProtocolState: valid values are %v", v, AllowedLinkProtocolStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LinkProtocolState) IsValid() bool {
	for _, existing := range AllowedLinkProtocolStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LinkProtocolState value
func (v LinkProtocolState) Ptr() *LinkProtocolState {
	return &v
}

type NullableLinkProtocolState struct {
	value *LinkProtocolState
	isSet bool
}

func (v NullableLinkProtocolState) Get() *LinkProtocolState {
	return v.value
}

func (v *NullableLinkProtocolState) Set(val *LinkProtocolState) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkProtocolState) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkProtocolState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkProtocolState(val *LinkProtocolState) *NullableLinkProtocolState {
	return &NullableLinkProtocolState{value: val, isSet: true}
}

func (v NullableLinkProtocolState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkProtocolState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
