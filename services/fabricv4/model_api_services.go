/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the ApiServices type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiServices{}

// ApiServices Available services details
type ApiServices struct {
	// service routes
	Route *string `json:"route,omitempty"`
	// service status
	Status *string `json:"status,omitempty"`
	// service status change date
	ChangedDateTime      *string `json:"changedDateTime,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ApiServices ApiServices

// NewApiServices instantiates a new ApiServices object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiServices() *ApiServices {
	this := ApiServices{}
	return &this
}

// NewApiServicesWithDefaults instantiates a new ApiServices object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiServicesWithDefaults() *ApiServices {
	this := ApiServices{}
	return &this
}

// GetRoute returns the Route field value if set, zero value otherwise.
func (o *ApiServices) GetRoute() string {
	if o == nil || IsNil(o.Route) {
		var ret string
		return ret
	}
	return *o.Route
}

// GetRouteOk returns a tuple with the Route field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiServices) GetRouteOk() (*string, bool) {
	if o == nil || IsNil(o.Route) {
		return nil, false
	}
	return o.Route, true
}

// HasRoute returns a boolean if a field has been set.
func (o *ApiServices) HasRoute() bool {
	if o != nil && !IsNil(o.Route) {
		return true
	}

	return false
}

// SetRoute gets a reference to the given string and assigns it to the Route field.
func (o *ApiServices) SetRoute(v string) {
	o.Route = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ApiServices) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiServices) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ApiServices) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ApiServices) SetStatus(v string) {
	o.Status = &v
}

// GetChangedDateTime returns the ChangedDateTime field value if set, zero value otherwise.
func (o *ApiServices) GetChangedDateTime() string {
	if o == nil || IsNil(o.ChangedDateTime) {
		var ret string
		return ret
	}
	return *o.ChangedDateTime
}

// GetChangedDateTimeOk returns a tuple with the ChangedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiServices) GetChangedDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ChangedDateTime) {
		return nil, false
	}
	return o.ChangedDateTime, true
}

// HasChangedDateTime returns a boolean if a field has been set.
func (o *ApiServices) HasChangedDateTime() bool {
	if o != nil && !IsNil(o.ChangedDateTime) {
		return true
	}

	return false
}

// SetChangedDateTime gets a reference to the given string and assigns it to the ChangedDateTime field.
func (o *ApiServices) SetChangedDateTime(v string) {
	o.ChangedDateTime = &v
}

func (o ApiServices) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiServices) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Route) {
		toSerialize["route"] = o.Route
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.ChangedDateTime) {
		toSerialize["changedDateTime"] = o.ChangedDateTime
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApiServices) UnmarshalJSON(data []byte) (err error) {
	varApiServices := _ApiServices{}

	err = json.Unmarshal(data, &varApiServices)

	if err != nil {
		return err
	}

	*o = ApiServices(varApiServices)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "route")
		delete(additionalProperties, "status")
		delete(additionalProperties, "changedDateTime")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApiServices struct {
	value *ApiServices
	isSet bool
}

func (v NullableApiServices) Get() *ApiServices {
	return v.value
}

func (v *NullableApiServices) Set(val *ApiServices) {
	v.value = val
	v.isSet = true
}

func (v NullableApiServices) IsSet() bool {
	return v.isSet
}

func (v *NullableApiServices) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiServices(val *ApiServices) *NullableApiServices {
	return &NullableApiServices{value: val, isSet: true}
}

func (v NullableApiServices) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiServices) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
