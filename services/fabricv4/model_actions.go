/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// Actions Connection action type
type Actions string

// List of Actions
const (
	ACTIONS_CONNECTION_CREATION_ACCEPTANCE        Actions = "CONNECTION_CREATION_ACCEPTANCE"
	ACTIONS_CONNECTION_CREATION_REJECTION         Actions = "CONNECTION_CREATION_REJECTION"
	ACTIONS_CONNECTION_UPDATE_ACCEPTANCE          Actions = "CONNECTION_UPDATE_ACCEPTANCE"
	ACTIONS_CONNECTION_UPDATE_REJECTION           Actions = "CONNECTION_UPDATE_REJECTION"
	ACTIONS_CONNECTION_DELETION_ACCEPTANCE        Actions = "CONNECTION_DELETION_ACCEPTANCE"
	ACTIONS_CONNECTION_REJECTION_ACCEPTANCE       Actions = "CONNECTION_REJECTION_ACCEPTANCE"
	ACTIONS_CONNECTION_UPDATE_REQUEST             Actions = "CONNECTION_UPDATE_REQUEST"
	ACTIONS_MIGRATION_EVPL_VC                     Actions = "MIGRATION_EVPL_VC"
	ACTIONS_CONNECTION_PROVIDER_STATUS_REQUEST    Actions = "CONNECTION_PROVIDER_STATUS_REQUEST"
	ACTIONS_CONNECTION_PROVIDER_BANDWIDTH_REQUEST Actions = "CONNECTION_PROVIDER_BANDWIDTH_REQUEST"
	ACTIONS_ACCEPT_HOSTED_CONNECTION              Actions = "ACCEPT_HOSTED_CONNECTION"
	ACTIONS_CANCEL_EVPL_VC_DRAFT_ORDERS           Actions = "CANCEL_EVPL_VC_DRAFT_ORDERS"
)

// All allowed values of Actions enum
var AllowedActionsEnumValues = []Actions{
	"CONNECTION_CREATION_ACCEPTANCE",
	"CONNECTION_CREATION_REJECTION",
	"CONNECTION_UPDATE_ACCEPTANCE",
	"CONNECTION_UPDATE_REJECTION",
	"CONNECTION_DELETION_ACCEPTANCE",
	"CONNECTION_REJECTION_ACCEPTANCE",
	"CONNECTION_UPDATE_REQUEST",
	"MIGRATION_EVPL_VC",
	"CONNECTION_PROVIDER_STATUS_REQUEST",
	"CONNECTION_PROVIDER_BANDWIDTH_REQUEST",
	"ACCEPT_HOSTED_CONNECTION",
	"CANCEL_EVPL_VC_DRAFT_ORDERS",
}

func (v *Actions) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Actions(value)
	for _, existing := range AllowedActionsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Actions", value)
}

// NewActionsFromValue returns a pointer to a valid Actions
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewActionsFromValue(v string) (*Actions, error) {
	ev := Actions(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Actions: valid values are %v", v, AllowedActionsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Actions) IsValid() bool {
	for _, existing := range AllowedActionsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Actions value
func (v Actions) Ptr() *Actions {
	return &v
}

type NullableActions struct {
	value *Actions
	isSet bool
}

func (v NullableActions) Get() *Actions {
	return v.value
}

func (v *NullableActions) Set(val *Actions) {
	v.value = val
	v.isSet = true
}

func (v NullableActions) IsSet() bool {
	return v.isSet
}

func (v *NullableActions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActions(val *Actions) *NullableActions {
	return &NullableActions{value: val, isSet: true}
}

func (v NullableActions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
