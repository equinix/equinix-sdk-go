/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// checks if the FabricConnectionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FabricConnectionResponse{}

// FabricConnectionResponse struct for FabricConnectionResponse
type FabricConnectionResponse struct {
	// Connection URI
	Href *string              `json:"href,omitempty"`
	Type FabricConnectionType `json:"type"`
	// Equinix-assigned connection identifier
	Uuid                 *string              `json:"uuid,omitempty"`
	State                DeploymentState      `json:"state"`
	Bandwidth            int32                `json:"bandwidth"`
	Name                 string               `json:"name"`
	Redundancy           ConnectionRedundancy `json:"redundancy"`
	ASide                ConnectionSide       `json:"aSide"`
	ZSide                ConnectionSide       `json:"zSide"`
	DeploymentProperties TopologyProperties   `json:"deploymentProperties"`
	AdditionalProperties map[string]interface{}
}

type _FabricConnectionResponse FabricConnectionResponse

// NewFabricConnectionResponse instantiates a new FabricConnectionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFabricConnectionResponse(type_ FabricConnectionType, state DeploymentState, bandwidth int32, name string, redundancy ConnectionRedundancy, aSide ConnectionSide, zSide ConnectionSide, deploymentProperties TopologyProperties) *FabricConnectionResponse {
	this := FabricConnectionResponse{}
	this.Type = type_
	this.State = state
	this.Bandwidth = bandwidth
	this.Name = name
	this.Redundancy = redundancy
	this.ASide = aSide
	this.ZSide = zSide
	this.DeploymentProperties = deploymentProperties
	return &this
}

// NewFabricConnectionResponseWithDefaults instantiates a new FabricConnectionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFabricConnectionResponseWithDefaults() *FabricConnectionResponse {
	this := FabricConnectionResponse{}
	return &this
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *FabricConnectionResponse) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FabricConnectionResponse) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *FabricConnectionResponse) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *FabricConnectionResponse) SetHref(v string) {
	o.Href = &v
}

// GetType returns the Type field value
func (o *FabricConnectionResponse) GetType() FabricConnectionType {
	if o == nil {
		var ret FabricConnectionType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *FabricConnectionResponse) GetTypeOk() (*FabricConnectionType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *FabricConnectionResponse) SetType(v FabricConnectionType) {
	o.Type = v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *FabricConnectionResponse) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FabricConnectionResponse) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *FabricConnectionResponse) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *FabricConnectionResponse) SetUuid(v string) {
	o.Uuid = &v
}

// GetState returns the State field value
func (o *FabricConnectionResponse) GetState() DeploymentState {
	if o == nil {
		var ret DeploymentState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *FabricConnectionResponse) GetStateOk() (*DeploymentState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *FabricConnectionResponse) SetState(v DeploymentState) {
	o.State = v
}

// GetBandwidth returns the Bandwidth field value
func (o *FabricConnectionResponse) GetBandwidth() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Bandwidth
}

// GetBandwidthOk returns a tuple with the Bandwidth field value
// and a boolean to check if the value has been set.
func (o *FabricConnectionResponse) GetBandwidthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bandwidth, true
}

// SetBandwidth sets field value
func (o *FabricConnectionResponse) SetBandwidth(v int32) {
	o.Bandwidth = v
}

// GetName returns the Name field value
func (o *FabricConnectionResponse) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FabricConnectionResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FabricConnectionResponse) SetName(v string) {
	o.Name = v
}

// GetRedundancy returns the Redundancy field value
func (o *FabricConnectionResponse) GetRedundancy() ConnectionRedundancy {
	if o == nil {
		var ret ConnectionRedundancy
		return ret
	}

	return o.Redundancy
}

// GetRedundancyOk returns a tuple with the Redundancy field value
// and a boolean to check if the value has been set.
func (o *FabricConnectionResponse) GetRedundancyOk() (*ConnectionRedundancy, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Redundancy, true
}

// SetRedundancy sets field value
func (o *FabricConnectionResponse) SetRedundancy(v ConnectionRedundancy) {
	o.Redundancy = v
}

// GetASide returns the ASide field value
func (o *FabricConnectionResponse) GetASide() ConnectionSide {
	if o == nil {
		var ret ConnectionSide
		return ret
	}

	return o.ASide
}

// GetASideOk returns a tuple with the ASide field value
// and a boolean to check if the value has been set.
func (o *FabricConnectionResponse) GetASideOk() (*ConnectionSide, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ASide, true
}

// SetASide sets field value
func (o *FabricConnectionResponse) SetASide(v ConnectionSide) {
	o.ASide = v
}

// GetZSide returns the ZSide field value
func (o *FabricConnectionResponse) GetZSide() ConnectionSide {
	if o == nil {
		var ret ConnectionSide
		return ret
	}

	return o.ZSide
}

// GetZSideOk returns a tuple with the ZSide field value
// and a boolean to check if the value has been set.
func (o *FabricConnectionResponse) GetZSideOk() (*ConnectionSide, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZSide, true
}

// SetZSide sets field value
func (o *FabricConnectionResponse) SetZSide(v ConnectionSide) {
	o.ZSide = v
}

// GetDeploymentProperties returns the DeploymentProperties field value
func (o *FabricConnectionResponse) GetDeploymentProperties() TopologyProperties {
	if o == nil {
		var ret TopologyProperties
		return ret
	}

	return o.DeploymentProperties
}

// GetDeploymentPropertiesOk returns a tuple with the DeploymentProperties field value
// and a boolean to check if the value has been set.
func (o *FabricConnectionResponse) GetDeploymentPropertiesOk() (*TopologyProperties, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeploymentProperties, true
}

// SetDeploymentProperties sets field value
func (o *FabricConnectionResponse) SetDeploymentProperties(v TopologyProperties) {
	o.DeploymentProperties = v
}

func (o FabricConnectionResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FabricConnectionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	toSerialize["state"] = o.State
	toSerialize["bandwidth"] = o.Bandwidth
	toSerialize["name"] = o.Name
	toSerialize["redundancy"] = o.Redundancy
	toSerialize["aSide"] = o.ASide
	toSerialize["zSide"] = o.ZSide
	toSerialize["deploymentProperties"] = o.DeploymentProperties

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FabricConnectionResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"state",
		"bandwidth",
		"name",
		"redundancy",
		"aSide",
		"zSide",
		"deploymentProperties",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFabricConnectionResponse := _FabricConnectionResponse{}

	err = json.Unmarshal(data, &varFabricConnectionResponse)

	if err != nil {
		return err
	}

	*o = FabricConnectionResponse(varFabricConnectionResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "href")
		delete(additionalProperties, "type")
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "state")
		delete(additionalProperties, "bandwidth")
		delete(additionalProperties, "name")
		delete(additionalProperties, "redundancy")
		delete(additionalProperties, "aSide")
		delete(additionalProperties, "zSide")
		delete(additionalProperties, "deploymentProperties")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFabricConnectionResponse struct {
	value *FabricConnectionResponse
	isSet bool
}

func (v NullableFabricConnectionResponse) Get() *FabricConnectionResponse {
	return v.value
}

func (v *NullableFabricConnectionResponse) Set(val *FabricConnectionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFabricConnectionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFabricConnectionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFabricConnectionResponse(val *FabricConnectionResponse) *NullableFabricConnectionResponse {
	return &NullableFabricConnectionResponse{value: val, isSet: true}
}

func (v NullableFabricConnectionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFabricConnectionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
