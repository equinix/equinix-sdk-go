/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// SearchFieldName Possible field names to use on filters
type SearchFieldName string

// List of SearchFieldName
const (
	SEARCHFIELDNAME_IS_REMOTE                                      SearchFieldName = "/isRemote"
	SEARCHFIELDNAME_NAME                                           SearchFieldName = "/name"
	SEARCHFIELDNAME_UUID                                           SearchFieldName = "/uuid"
	SEARCHFIELDNAME_TYPE                                           SearchFieldName = "/type"
	SEARCHFIELDNAME_GEO_SCOPE                                      SearchFieldName = "/geoScope"
	SEARCHFIELDNAME_ACCOUNT_ORG_ID                                 SearchFieldName = "/account/orgId"
	SEARCHFIELDNAME_A_SIDE_ACCESS_POINT_ACCOUNT_ACCOUNT_NAME       SearchFieldName = "/aSide/accessPoint/account/accountName"
	SEARCHFIELDNAME_A_SIDE_ACCESS_POINT_ACCOUNT_ACCOUNT_NUMBER     SearchFieldName = "/aSide/accessPoint/account/accountNumber"
	SEARCHFIELDNAME_A_SIDE_ACCESS_POINT_ROUTER_UUID                SearchFieldName = "/aSide/accessPoint/router/uuid"
	SEARCHFIELDNAME_A_SIDE_ACCESS_POINT_LINK_PROTOCOL_VLAN_C_TAG   SearchFieldName = "/aSide/accessPoint/linkProtocol/vlanCTag"
	SEARCHFIELDNAME_A_SIDE_ACCESS_POINT_LINK_PROTOCOL_VLAN_S_TAG   SearchFieldName = "/aSide/accessPoint/linkProtocol/vlanSTag"
	SEARCHFIELDNAME_A_SIDE_ACCESS_POINT_LINK_PROTOCOL_VLAN_TAG_MIN SearchFieldName = "/aSide/accessPoint/linkProtocol/vlanTagMin"
	SEARCHFIELDNAME_A_SIDE_ACCESS_POINT_LINK_PROTOCOL_VLAN_TAG_MAX SearchFieldName = "/aSide/accessPoint/linkProtocol/vlanTagMax"
	SEARCHFIELDNAME_A_SIDE_ACCESS_POINT_LOCATION_METRO_CODE        SearchFieldName = "/aSide/accessPoint/location/metroCode"
	SEARCHFIELDNAME_A_SIDE_ACCESS_POINT_LOCATION_METRO_NAME        SearchFieldName = "/aSide/accessPoint/location/metroName"
	SEARCHFIELDNAME_A_SIDE_ACCESS_POINT_NAME                       SearchFieldName = "/aSide/accessPoint/name"
	SEARCHFIELDNAME_A_SIDE_ACCESS_POINT_PORT_UUID                  SearchFieldName = "/aSide/accessPoint/port/uuid"
	SEARCHFIELDNAME_A_SIDE_ACCESS_POINT_PORT_NAME                  SearchFieldName = "/aSide/accessPoint/port/name"
	SEARCHFIELDNAME_A_SIDE_ACCESS_POINT_TYPE                       SearchFieldName = "/aSide/accessPoint/type"
	SEARCHFIELDNAME_A_SIDE_ACCESS_POINT_VIRTUAL_DEVICE_NAME        SearchFieldName = "/aSide/accessPoint/virtualDevice/name"
	SEARCHFIELDNAME_A_SIDE_ACCESS_POINT_VIRTUAL_DEVICE_UUID        SearchFieldName = "/aSide/accessPoint/virtualDevice/uuid"
	SEARCHFIELDNAME_A_SIDE_SERVICE_TOKEN_UUID                      SearchFieldName = "/aSide/serviceToken/uuid"
	SEARCHFIELDNAME_CHANGE_STATUS                                  SearchFieldName = "/change/status"
	SEARCHFIELDNAME_OPERATION_EQUINIX_STATUS                       SearchFieldName = "/operation/equinixStatus"
	SEARCHFIELDNAME_OPERATION_PROVIDER_STATUS                      SearchFieldName = "/operation/providerStatus"
	SEARCHFIELDNAME_PROJECT_PROJECT_ID                             SearchFieldName = "/project/projectId"
	SEARCHFIELDNAME_REDUNDANCY_GROUP                               SearchFieldName = "/redundancy/group"
	SEARCHFIELDNAME_REDUNDANCY_PRIORITY                            SearchFieldName = "/redundancy/priority"
	SEARCHFIELDNAME_Z_SIDE_ACCESS_POINT_ACCOUNT_ACCOUNT_NAME       SearchFieldName = "/zSide/accessPoint/account/accountName"
	SEARCHFIELDNAME_Z_SIDE_ACCESS_POINT_AUTHENTICATION_KEY         SearchFieldName = "/zSide/accessPoint/authenticationKey"
	SEARCHFIELDNAME_Z_SIDE_ACCESS_POINT_LINK_PROTOCOL_VLAN_C_TAG   SearchFieldName = "/zSide/accessPoint/linkProtocol/vlanCTag"
	SEARCHFIELDNAME_Z_SIDE_ACCESS_POINT_LINK_PROTOCOL_VLAN_S_TAG   SearchFieldName = "/zSide/accessPoint/linkProtocol/vlanSTag"
	SEARCHFIELDNAME_Z_SIDE_ACCESS_POINT_LINK_PROTOCOL_VLAN_TAG_MIN SearchFieldName = "/zSide/accessPoint/linkProtocol/vlanTagMin"
	SEARCHFIELDNAME_Z_SIDE_ACCESS_POINT_LINK_PROTOCOL_VLAN_TAG_MAX SearchFieldName = "/zSide/accessPoint/linkProtocol/vlanTagMax"
	SEARCHFIELDNAME_Z_SIDE_ACCESS_POINT_LOCATION_METRO_CODE        SearchFieldName = "/zSide/accessPoint/location/metroCode"
	SEARCHFIELDNAME_Z_SIDE_ACCESS_POINT_LOCATION_METRO_NAME        SearchFieldName = "/zSide/accessPoint/location/metroName"
	SEARCHFIELDNAME_Z_SIDE_ACCESS_POINT_NAME                       SearchFieldName = "/zSide/accessPoint/name"
	SEARCHFIELDNAME_Z_SIDE_ACCESS_POINT_PORT_UUID                  SearchFieldName = "/zSide/accessPoint/port/uuid"
	SEARCHFIELDNAME_Z_SIDE_ACCESS_POINT_NETWORK_UUID               SearchFieldName = "/zSide/accessPoint/network/uuid"
	SEARCHFIELDNAME_Z_SIDE_ACCESS_POINT_PORT_NAME                  SearchFieldName = "/zSide/accessPoint/port/name"
	SEARCHFIELDNAME_Z_SIDE_ACCESS_POINT_PROFILE_UUID               SearchFieldName = "/zSide/accessPoint/profile/uuid"
	SEARCHFIELDNAME_Z_SIDE_ACCESS_POINT_TYPE                       SearchFieldName = "/zSide/accessPoint/type"
	SEARCHFIELDNAME_Z_SIDE_ACCESS_POINT_VIRTUAL_DEVICE_NAME        SearchFieldName = "/zSide/accessPoint/virtualDevice/name"
	SEARCHFIELDNAME_Z_SIDE_ACCESS_POINT_VIRTUAL_DEVICE_UUID        SearchFieldName = "/zSide/accessPoint/virtualDevice/uuid"
	SEARCHFIELDNAME_Z_SIDE_SERVICE_TOKEN_UUID                      SearchFieldName = "/zSide/serviceToken/uuid"
	SEARCHFIELDNAME_Z_SIDE_INTERNET_ACCESS_UUID                    SearchFieldName = "/zSide/internetAccess/uuid"
	SEARCHFIELDNAME_STAR                                           SearchFieldName = "*"
)

// All allowed values of SearchFieldName enum
var AllowedSearchFieldNameEnumValues = []SearchFieldName{
	"/isRemote",
	"/name",
	"/uuid",
	"/type",
	"/geoScope",
	"/account/orgId",
	"/aSide/accessPoint/account/accountName",
	"/aSide/accessPoint/account/accountNumber",
	"/aSide/accessPoint/router/uuid",
	"/aSide/accessPoint/linkProtocol/vlanCTag",
	"/aSide/accessPoint/linkProtocol/vlanSTag",
	"/aSide/accessPoint/linkProtocol/vlanTagMin",
	"/aSide/accessPoint/linkProtocol/vlanTagMax",
	"/aSide/accessPoint/location/metroCode",
	"/aSide/accessPoint/location/metroName",
	"/aSide/accessPoint/name",
	"/aSide/accessPoint/port/uuid",
	"/aSide/accessPoint/port/name",
	"/aSide/accessPoint/type",
	"/aSide/accessPoint/virtualDevice/name",
	"/aSide/accessPoint/virtualDevice/uuid",
	"/aSide/serviceToken/uuid",
	"/change/status",
	"/operation/equinixStatus",
	"/operation/providerStatus",
	"/project/projectId",
	"/redundancy/group",
	"/redundancy/priority",
	"/zSide/accessPoint/account/accountName",
	"/zSide/accessPoint/authenticationKey",
	"/zSide/accessPoint/linkProtocol/vlanCTag",
	"/zSide/accessPoint/linkProtocol/vlanSTag",
	"/zSide/accessPoint/linkProtocol/vlanTagMin",
	"/zSide/accessPoint/linkProtocol/vlanTagMax",
	"/zSide/accessPoint/location/metroCode",
	"/zSide/accessPoint/location/metroName",
	"/zSide/accessPoint/name",
	"/zSide/accessPoint/port/uuid",
	"/zSide/accessPoint/network/uuid",
	"/zSide/accessPoint/port/name",
	"/zSide/accessPoint/profile/uuid",
	"/zSide/accessPoint/type",
	"/zSide/accessPoint/virtualDevice/name",
	"/zSide/accessPoint/virtualDevice/uuid",
	"/zSide/serviceToken/uuid",
	"/zSide/internetAccess/uuid",
	"*",
}

func (v *SearchFieldName) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SearchFieldName(value)
	for _, existing := range AllowedSearchFieldNameEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SearchFieldName", value)
}

// NewSearchFieldNameFromValue returns a pointer to a valid SearchFieldName
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSearchFieldNameFromValue(v string) (*SearchFieldName, error) {
	ev := SearchFieldName(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SearchFieldName: valid values are %v", v, AllowedSearchFieldNameEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SearchFieldName) IsValid() bool {
	for _, existing := range AllowedSearchFieldNameEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SearchFieldName value
func (v SearchFieldName) Ptr() *SearchFieldName {
	return &v
}

type NullableSearchFieldName struct {
	value *SearchFieldName
	isSet bool
}

func (v NullableSearchFieldName) Get() *SearchFieldName {
	return v.value
}

func (v *NullableSearchFieldName) Set(val *SearchFieldName) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchFieldName) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchFieldName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchFieldName(val *SearchFieldName) *NullableSearchFieldName {
	return &NullableSearchFieldName{value: val, isSet: true}
}

func (v NullableSearchFieldName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchFieldName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
