/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// StreamSubscriptionState Steam subscription provision state
type StreamSubscriptionState string

// List of StreamSubscription_state
const (
	STREAMSUBSCRIPTIONSTATE_PROVISIONING   StreamSubscriptionState = "PROVISIONING"
	STREAMSUBSCRIPTIONSTATE_PROVISIONED    StreamSubscriptionState = "PROVISIONED"
	STREAMSUBSCRIPTIONSTATE_REPROVISIONING StreamSubscriptionState = "REPROVISIONING"
	STREAMSUBSCRIPTIONSTATE_DEPROVISIONING StreamSubscriptionState = "DEPROVISIONING"
	STREAMSUBSCRIPTIONSTATE_DEPROVISIONED  StreamSubscriptionState = "DEPROVISIONED"
	STREAMSUBSCRIPTIONSTATE_FAILED         StreamSubscriptionState = "FAILED"
)

// All allowed values of StreamSubscriptionState enum
var AllowedStreamSubscriptionStateEnumValues = []StreamSubscriptionState{
	"PROVISIONING",
	"PROVISIONED",
	"REPROVISIONING",
	"DEPROVISIONING",
	"DEPROVISIONED",
	"FAILED",
}

func (v *StreamSubscriptionState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StreamSubscriptionState(value)
	for _, existing := range AllowedStreamSubscriptionStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StreamSubscriptionState", value)
}

// NewStreamSubscriptionStateFromValue returns a pointer to a valid StreamSubscriptionState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStreamSubscriptionStateFromValue(v string) (*StreamSubscriptionState, error) {
	ev := StreamSubscriptionState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StreamSubscriptionState: valid values are %v", v, AllowedStreamSubscriptionStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StreamSubscriptionState) IsValid() bool {
	for _, existing := range AllowedStreamSubscriptionStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StreamSubscription_state value
func (v StreamSubscriptionState) Ptr() *StreamSubscriptionState {
	return &v
}

type NullableStreamSubscriptionState struct {
	value *StreamSubscriptionState
	isSet bool
}

func (v NullableStreamSubscriptionState) Get() *StreamSubscriptionState {
	return v.value
}

func (v *NullableStreamSubscriptionState) Set(val *StreamSubscriptionState) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamSubscriptionState) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamSubscriptionState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamSubscriptionState(val *StreamSubscriptionState) *NullableStreamSubscriptionState {
	return &NullableStreamSubscriptionState{value: val, isSet: true}
}

func (v NullableStreamSubscriptionState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamSubscriptionState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
