/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// ConnectionRouteEntrySortDirection Sorting direction
type ConnectionRouteEntrySortDirection string

// List of ConnectionRouteEntrySortDirection
const (
	CONNECTIONROUTEENTRYSORTDIRECTION_DESC ConnectionRouteEntrySortDirection = "DESC"
	CONNECTIONROUTEENTRYSORTDIRECTION_ASC  ConnectionRouteEntrySortDirection = "ASC"
)

// All allowed values of ConnectionRouteEntrySortDirection enum
var AllowedConnectionRouteEntrySortDirectionEnumValues = []ConnectionRouteEntrySortDirection{
	"DESC",
	"ASC",
}

func (v *ConnectionRouteEntrySortDirection) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConnectionRouteEntrySortDirection(value)
	for _, existing := range AllowedConnectionRouteEntrySortDirectionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConnectionRouteEntrySortDirection", value)
}

// NewConnectionRouteEntrySortDirectionFromValue returns a pointer to a valid ConnectionRouteEntrySortDirection
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConnectionRouteEntrySortDirectionFromValue(v string) (*ConnectionRouteEntrySortDirection, error) {
	ev := ConnectionRouteEntrySortDirection(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConnectionRouteEntrySortDirection: valid values are %v", v, AllowedConnectionRouteEntrySortDirectionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConnectionRouteEntrySortDirection) IsValid() bool {
	for _, existing := range AllowedConnectionRouteEntrySortDirectionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConnectionRouteEntrySortDirection value
func (v ConnectionRouteEntrySortDirection) Ptr() *ConnectionRouteEntrySortDirection {
	return &v
}

type NullableConnectionRouteEntrySortDirection struct {
	value *ConnectionRouteEntrySortDirection
	isSet bool
}

func (v NullableConnectionRouteEntrySortDirection) Get() *ConnectionRouteEntrySortDirection {
	return v.value
}

func (v *NullableConnectionRouteEntrySortDirection) Set(val *ConnectionRouteEntrySortDirection) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionRouteEntrySortDirection) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionRouteEntrySortDirection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionRouteEntrySortDirection(val *ConnectionRouteEntrySortDirection) *NullableConnectionRouteEntrySortDirection {
	return &NullableConnectionRouteEntrySortDirection{value: val, isSet: true}
}

func (v NullableConnectionRouteEntrySortDirection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionRouteEntrySortDirection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
