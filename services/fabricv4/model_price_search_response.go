/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the PriceSearchResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PriceSearchResponse{}

// PriceSearchResponse struct for PriceSearchResponse
type PriceSearchResponse struct {
	Data                 []Price     `json:"data,omitempty"`
	Pagination           *Pagination `json:"pagination,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PriceSearchResponse PriceSearchResponse

// NewPriceSearchResponse instantiates a new PriceSearchResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPriceSearchResponse() *PriceSearchResponse {
	this := PriceSearchResponse{}
	return &this
}

// NewPriceSearchResponseWithDefaults instantiates a new PriceSearchResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPriceSearchResponseWithDefaults() *PriceSearchResponse {
	this := PriceSearchResponse{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *PriceSearchResponse) GetData() []Price {
	if o == nil || IsNil(o.Data) {
		var ret []Price
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceSearchResponse) GetDataOk() ([]Price, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *PriceSearchResponse) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []Price and assigns it to the Data field.
func (o *PriceSearchResponse) SetData(v []Price) {
	o.Data = v
}

// GetPagination returns the Pagination field value if set, zero value otherwise.
func (o *PriceSearchResponse) GetPagination() Pagination {
	if o == nil || IsNil(o.Pagination) {
		var ret Pagination
		return ret
	}
	return *o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceSearchResponse) GetPaginationOk() (*Pagination, bool) {
	if o == nil || IsNil(o.Pagination) {
		return nil, false
	}
	return o.Pagination, true
}

// HasPagination returns a boolean if a field has been set.
func (o *PriceSearchResponse) HasPagination() bool {
	if o != nil && !IsNil(o.Pagination) {
		return true
	}

	return false
}

// SetPagination gets a reference to the given Pagination and assigns it to the Pagination field.
func (o *PriceSearchResponse) SetPagination(v Pagination) {
	o.Pagination = &v
}

func (o PriceSearchResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PriceSearchResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Pagination) {
		toSerialize["pagination"] = o.Pagination
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PriceSearchResponse) UnmarshalJSON(data []byte) (err error) {
	varPriceSearchResponse := _PriceSearchResponse{}

	err = json.Unmarshal(data, &varPriceSearchResponse)

	if err != nil {
		return err
	}

	*o = PriceSearchResponse(varPriceSearchResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "data")
		delete(additionalProperties, "pagination")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePriceSearchResponse struct {
	value *PriceSearchResponse
	isSet bool
}

func (v NullablePriceSearchResponse) Get() *PriceSearchResponse {
	return v.value
}

func (v *NullablePriceSearchResponse) Set(val *PriceSearchResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceSearchResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceSearchResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceSearchResponse(val *PriceSearchResponse) *NullablePriceSearchResponse {
	return &NullablePriceSearchResponse{value: val, isSet: true}
}

func (v NullablePriceSearchResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceSearchResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
