/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// GCPCloudRouterType the model 'GCPCloudRouterType'
type GCPCloudRouterType string

// List of GCPCloudRouter_type
const (
	GCPCLOUDROUTERTYPE_GCP_CLOUD_ROUTER GCPCloudRouterType = "GCP_CLOUD_ROUTER"
)

// All allowed values of GCPCloudRouterType enum
var AllowedGCPCloudRouterTypeEnumValues = []GCPCloudRouterType{
	"GCP_CLOUD_ROUTER",
}

func (v *GCPCloudRouterType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GCPCloudRouterType(value)
	for _, existing := range AllowedGCPCloudRouterTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GCPCloudRouterType", value)
}

// NewGCPCloudRouterTypeFromValue returns a pointer to a valid GCPCloudRouterType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGCPCloudRouterTypeFromValue(v string) (*GCPCloudRouterType, error) {
	ev := GCPCloudRouterType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GCPCloudRouterType: valid values are %v", v, AllowedGCPCloudRouterTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GCPCloudRouterType) IsValid() bool {
	for _, existing := range AllowedGCPCloudRouterTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GCPCloudRouter_type value
func (v GCPCloudRouterType) Ptr() *GCPCloudRouterType {
	return &v
}

type NullableGCPCloudRouterType struct {
	value *GCPCloudRouterType
	isSet bool
}

func (v NullableGCPCloudRouterType) Get() *GCPCloudRouterType {
	return v.value
}

func (v *NullableGCPCloudRouterType) Set(val *GCPCloudRouterType) {
	v.value = val
	v.isSet = true
}

func (v NullableGCPCloudRouterType) IsSet() bool {
	return v.isSet
}

func (v *NullableGCPCloudRouterType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGCPCloudRouterType(val *GCPCloudRouterType) *NullableGCPCloudRouterType {
	return &NullableGCPCloudRouterType{value: val, isSet: true}
}

func (v NullableGCPCloudRouterType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGCPCloudRouterType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
