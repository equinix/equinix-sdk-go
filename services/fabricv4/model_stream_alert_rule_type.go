/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// StreamAlertRuleType Stream subscription type
type StreamAlertRuleType string

// List of StreamAlertRule_type
const (
	STREAMALERTRULETYPE_METRIC_ALERT StreamAlertRuleType = "METRIC_ALERT"
)

// All allowed values of StreamAlertRuleType enum
var AllowedStreamAlertRuleTypeEnumValues = []StreamAlertRuleType{
	"METRIC_ALERT",
}

func (v *StreamAlertRuleType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StreamAlertRuleType(value)
	for _, existing := range AllowedStreamAlertRuleTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StreamAlertRuleType", value)
}

// NewStreamAlertRuleTypeFromValue returns a pointer to a valid StreamAlertRuleType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStreamAlertRuleTypeFromValue(v string) (*StreamAlertRuleType, error) {
	ev := StreamAlertRuleType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StreamAlertRuleType: valid values are %v", v, AllowedStreamAlertRuleTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StreamAlertRuleType) IsValid() bool {
	for _, existing := range AllowedStreamAlertRuleTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StreamAlertRule_type value
func (v StreamAlertRuleType) Ptr() *StreamAlertRuleType {
	return &v
}

type NullableStreamAlertRuleType struct {
	value *StreamAlertRuleType
	isSet bool
}

func (v NullableStreamAlertRuleType) Get() *StreamAlertRuleType {
	return v.value
}

func (v *NullableStreamAlertRuleType) Set(val *StreamAlertRuleType) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamAlertRuleType) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamAlertRuleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamAlertRuleType(val *StreamAlertRuleType) *NullableStreamAlertRuleType {
	return &NullableStreamAlertRuleType{value: val, isSet: true}
}

func (v NullableStreamAlertRuleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamAlertRuleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
