/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the Md5 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Md5{}

// Md5 struct for Md5
type Md5 struct {
	Type *Md5Type `json:"type,omitempty"`
	// The authentication Key ID.
	KeyNumber *int32 `json:"keyNumber,omitempty"`
	// The plaintext authentication key. Must be Base64 encoded. For ASCII type, the key must contain printable ASCII characters, range 10-20 characters. For HEX type, range should be 10-40 characters.
	Key                  *string `json:"key,omitempty" validate:"regexp=^(?:[A-Za-z0-9+\\/]{4})*(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\\/]{3}=)?$"`
	AdditionalProperties map[string]interface{}
}

type _Md5 Md5

// NewMd5 instantiates a new Md5 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMd5() *Md5 {
	this := Md5{}
	return &this
}

// NewMd5WithDefaults instantiates a new Md5 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMd5WithDefaults() *Md5 {
	this := Md5{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Md5) GetType() Md5Type {
	if o == nil || IsNil(o.Type) {
		var ret Md5Type
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Md5) GetTypeOk() (*Md5Type, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Md5) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given Md5Type and assigns it to the Type field.
func (o *Md5) SetType(v Md5Type) {
	o.Type = &v
}

// GetKeyNumber returns the KeyNumber field value if set, zero value otherwise.
func (o *Md5) GetKeyNumber() int32 {
	if o == nil || IsNil(o.KeyNumber) {
		var ret int32
		return ret
	}
	return *o.KeyNumber
}

// GetKeyNumberOk returns a tuple with the KeyNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Md5) GetKeyNumberOk() (*int32, bool) {
	if o == nil || IsNil(o.KeyNumber) {
		return nil, false
	}
	return o.KeyNumber, true
}

// HasKeyNumber returns a boolean if a field has been set.
func (o *Md5) HasKeyNumber() bool {
	if o != nil && !IsNil(o.KeyNumber) {
		return true
	}

	return false
}

// SetKeyNumber gets a reference to the given int32 and assigns it to the KeyNumber field.
func (o *Md5) SetKeyNumber(v int32) {
	o.KeyNumber = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *Md5) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Md5) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *Md5) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *Md5) SetKey(v string) {
	o.Key = &v
}

func (o Md5) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Md5) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.KeyNumber) {
		toSerialize["keyNumber"] = o.KeyNumber
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Md5) UnmarshalJSON(data []byte) (err error) {
	varMd5 := _Md5{}

	err = json.Unmarshal(data, &varMd5)

	if err != nil {
		return err
	}

	*o = Md5(varMd5)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "keyNumber")
		delete(additionalProperties, "key")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMd5 struct {
	value *Md5
	isSet bool
}

func (v NullableMd5) Get() *Md5 {
	return v.value
}

func (v *NullableMd5) Set(val *Md5) {
	v.value = val
	v.isSet = true
}

func (v NullableMd5) IsSet() bool {
	return v.isSet
}

func (v *NullableMd5) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMd5(val *Md5) *NullableMd5 {
	return &NullableMd5{value: val, isSet: true}
}

func (v NullableMd5) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMd5) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
