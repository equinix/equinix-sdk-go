/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the VirtualPortConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VirtualPortConfiguration{}

// VirtualPortConfiguration Port configuration.
type VirtualPortConfiguration struct {
	// Buyout (true) or standard (false) configuration of the port at this access point. <br> Buyout ports offer free, unlimited connections. Standard ports do not. The default is false.
	Buyout               *bool `json:"buyout,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VirtualPortConfiguration VirtualPortConfiguration

// NewVirtualPortConfiguration instantiates a new VirtualPortConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualPortConfiguration() *VirtualPortConfiguration {
	this := VirtualPortConfiguration{}
	var buyout bool = false
	this.Buyout = &buyout
	return &this
}

// NewVirtualPortConfigurationWithDefaults instantiates a new VirtualPortConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualPortConfigurationWithDefaults() *VirtualPortConfiguration {
	this := VirtualPortConfiguration{}
	var buyout bool = false
	this.Buyout = &buyout
	return &this
}

// GetBuyout returns the Buyout field value if set, zero value otherwise.
func (o *VirtualPortConfiguration) GetBuyout() bool {
	if o == nil || IsNil(o.Buyout) {
		var ret bool
		return ret
	}
	return *o.Buyout
}

// GetBuyoutOk returns a tuple with the Buyout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualPortConfiguration) GetBuyoutOk() (*bool, bool) {
	if o == nil || IsNil(o.Buyout) {
		return nil, false
	}
	return o.Buyout, true
}

// HasBuyout returns a boolean if a field has been set.
func (o *VirtualPortConfiguration) HasBuyout() bool {
	if o != nil && !IsNil(o.Buyout) {
		return true
	}

	return false
}

// SetBuyout gets a reference to the given bool and assigns it to the Buyout field.
func (o *VirtualPortConfiguration) SetBuyout(v bool) {
	o.Buyout = &v
}

func (o VirtualPortConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VirtualPortConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Buyout) {
		toSerialize["buyout"] = o.Buyout
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VirtualPortConfiguration) UnmarshalJSON(data []byte) (err error) {
	varVirtualPortConfiguration := _VirtualPortConfiguration{}

	err = json.Unmarshal(data, &varVirtualPortConfiguration)

	if err != nil {
		return err
	}

	*o = VirtualPortConfiguration(varVirtualPortConfiguration)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "buyout")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVirtualPortConfiguration struct {
	value *VirtualPortConfiguration
	isSet bool
}

func (v NullableVirtualPortConfiguration) Get() *VirtualPortConfiguration {
	return v.value
}

func (v *NullableVirtualPortConfiguration) Set(val *VirtualPortConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualPortConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualPortConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualPortConfiguration(val *VirtualPortConfiguration) *NullableVirtualPortConfiguration {
	return &NullableVirtualPortConfiguration{value: val, isSet: true}
}

func (v NullableVirtualPortConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualPortConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
