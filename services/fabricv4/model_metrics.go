/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"time"
)

// checks if the Metrics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Metrics{}

// Metrics Bandwidth utilization statistics for a specified interval.
type Metrics struct {
	// Interval end timestamp
	IntervalEndTimestamp *time.Time `json:"intervalEndTimestamp,omitempty"`
	// Max bandwidth within statistics object time interval, represented in units specified by response \"units\" field
	Max *float32 `json:"max,omitempty"`
	// Mean bandwidth within statistics object time interval, represented in units specified by response \"units\" field
	Mean                 *float32 `json:"mean,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Metrics Metrics

// NewMetrics instantiates a new Metrics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetrics() *Metrics {
	this := Metrics{}
	return &this
}

// NewMetricsWithDefaults instantiates a new Metrics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricsWithDefaults() *Metrics {
	this := Metrics{}
	return &this
}

// GetIntervalEndTimestamp returns the IntervalEndTimestamp field value if set, zero value otherwise.
func (o *Metrics) GetIntervalEndTimestamp() time.Time {
	if o == nil || IsNil(o.IntervalEndTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.IntervalEndTimestamp
}

// GetIntervalEndTimestampOk returns a tuple with the IntervalEndTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metrics) GetIntervalEndTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.IntervalEndTimestamp) {
		return nil, false
	}
	return o.IntervalEndTimestamp, true
}

// HasIntervalEndTimestamp returns a boolean if a field has been set.
func (o *Metrics) HasIntervalEndTimestamp() bool {
	if o != nil && !IsNil(o.IntervalEndTimestamp) {
		return true
	}

	return false
}

// SetIntervalEndTimestamp gets a reference to the given time.Time and assigns it to the IntervalEndTimestamp field.
func (o *Metrics) SetIntervalEndTimestamp(v time.Time) {
	o.IntervalEndTimestamp = &v
}

// GetMax returns the Max field value if set, zero value otherwise.
func (o *Metrics) GetMax() float32 {
	if o == nil || IsNil(o.Max) {
		var ret float32
		return ret
	}
	return *o.Max
}

// GetMaxOk returns a tuple with the Max field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metrics) GetMaxOk() (*float32, bool) {
	if o == nil || IsNil(o.Max) {
		return nil, false
	}
	return o.Max, true
}

// HasMax returns a boolean if a field has been set.
func (o *Metrics) HasMax() bool {
	if o != nil && !IsNil(o.Max) {
		return true
	}

	return false
}

// SetMax gets a reference to the given float32 and assigns it to the Max field.
func (o *Metrics) SetMax(v float32) {
	o.Max = &v
}

// GetMean returns the Mean field value if set, zero value otherwise.
func (o *Metrics) GetMean() float32 {
	if o == nil || IsNil(o.Mean) {
		var ret float32
		return ret
	}
	return *o.Mean
}

// GetMeanOk returns a tuple with the Mean field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metrics) GetMeanOk() (*float32, bool) {
	if o == nil || IsNil(o.Mean) {
		return nil, false
	}
	return o.Mean, true
}

// HasMean returns a boolean if a field has been set.
func (o *Metrics) HasMean() bool {
	if o != nil && !IsNil(o.Mean) {
		return true
	}

	return false
}

// SetMean gets a reference to the given float32 and assigns it to the Mean field.
func (o *Metrics) SetMean(v float32) {
	o.Mean = &v
}

func (o Metrics) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Metrics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IntervalEndTimestamp) {
		toSerialize["intervalEndTimestamp"] = o.IntervalEndTimestamp
	}
	if !IsNil(o.Max) {
		toSerialize["max"] = o.Max
	}
	if !IsNil(o.Mean) {
		toSerialize["mean"] = o.Mean
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Metrics) UnmarshalJSON(data []byte) (err error) {
	varMetrics := _Metrics{}

	err = json.Unmarshal(data, &varMetrics)

	if err != nil {
		return err
	}

	*o = Metrics(varMetrics)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "intervalEndTimestamp")
		delete(additionalProperties, "max")
		delete(additionalProperties, "mean")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMetrics struct {
	value *Metrics
	isSet bool
}

func (v NullableMetrics) Get() *Metrics {
	return v.value
}

func (v *NullableMetrics) Set(val *Metrics) {
	v.value = val
	v.isSet = true
}

func (v NullableMetrics) IsSet() bool {
	return v.isSet
}

func (v *NullableMetrics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetrics(val *Metrics) *NullableMetrics {
	return &NullableMetrics{value: val, isSet: true}
}

func (v NullableMetrics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetrics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
