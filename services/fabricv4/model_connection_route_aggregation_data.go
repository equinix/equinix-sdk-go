/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the ConnectionRouteAggregationData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectionRouteAggregationData{}

// ConnectionRouteAggregationData struct for ConnectionRouteAggregationData
type ConnectionRouteAggregationData struct {
	// Route Aggregation URI
	Href *string                             `json:"href,omitempty"`
	Type *ConnectionRouteAggregationDataType `json:"type,omitempty"`
	// Route Aggregation identifier
	Uuid                 *string                                         `json:"uuid,omitempty"`
	AttachmentStatus     *ConnectionRouteAggregationDataAttachmentStatus `json:"attachmentStatus,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ConnectionRouteAggregationData ConnectionRouteAggregationData

// NewConnectionRouteAggregationData instantiates a new ConnectionRouteAggregationData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionRouteAggregationData() *ConnectionRouteAggregationData {
	this := ConnectionRouteAggregationData{}
	return &this
}

// NewConnectionRouteAggregationDataWithDefaults instantiates a new ConnectionRouteAggregationData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionRouteAggregationDataWithDefaults() *ConnectionRouteAggregationData {
	this := ConnectionRouteAggregationData{}
	return &this
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *ConnectionRouteAggregationData) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionRouteAggregationData) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *ConnectionRouteAggregationData) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *ConnectionRouteAggregationData) SetHref(v string) {
	o.Href = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ConnectionRouteAggregationData) GetType() ConnectionRouteAggregationDataType {
	if o == nil || IsNil(o.Type) {
		var ret ConnectionRouteAggregationDataType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionRouteAggregationData) GetTypeOk() (*ConnectionRouteAggregationDataType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ConnectionRouteAggregationData) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ConnectionRouteAggregationDataType and assigns it to the Type field.
func (o *ConnectionRouteAggregationData) SetType(v ConnectionRouteAggregationDataType) {
	o.Type = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *ConnectionRouteAggregationData) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionRouteAggregationData) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *ConnectionRouteAggregationData) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *ConnectionRouteAggregationData) SetUuid(v string) {
	o.Uuid = &v
}

// GetAttachmentStatus returns the AttachmentStatus field value if set, zero value otherwise.
func (o *ConnectionRouteAggregationData) GetAttachmentStatus() ConnectionRouteAggregationDataAttachmentStatus {
	if o == nil || IsNil(o.AttachmentStatus) {
		var ret ConnectionRouteAggregationDataAttachmentStatus
		return ret
	}
	return *o.AttachmentStatus
}

// GetAttachmentStatusOk returns a tuple with the AttachmentStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionRouteAggregationData) GetAttachmentStatusOk() (*ConnectionRouteAggregationDataAttachmentStatus, bool) {
	if o == nil || IsNil(o.AttachmentStatus) {
		return nil, false
	}
	return o.AttachmentStatus, true
}

// HasAttachmentStatus returns a boolean if a field has been set.
func (o *ConnectionRouteAggregationData) HasAttachmentStatus() bool {
	if o != nil && !IsNil(o.AttachmentStatus) {
		return true
	}

	return false
}

// SetAttachmentStatus gets a reference to the given ConnectionRouteAggregationDataAttachmentStatus and assigns it to the AttachmentStatus field.
func (o *ConnectionRouteAggregationData) SetAttachmentStatus(v ConnectionRouteAggregationDataAttachmentStatus) {
	o.AttachmentStatus = &v
}

func (o ConnectionRouteAggregationData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectionRouteAggregationData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.AttachmentStatus) {
		toSerialize["attachmentStatus"] = o.AttachmentStatus
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ConnectionRouteAggregationData) UnmarshalJSON(data []byte) (err error) {
	varConnectionRouteAggregationData := _ConnectionRouteAggregationData{}

	err = json.Unmarshal(data, &varConnectionRouteAggregationData)

	if err != nil {
		return err
	}

	*o = ConnectionRouteAggregationData(varConnectionRouteAggregationData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "href")
		delete(additionalProperties, "type")
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "attachmentStatus")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableConnectionRouteAggregationData struct {
	value *ConnectionRouteAggregationData
	isSet bool
}

func (v NullableConnectionRouteAggregationData) Get() *ConnectionRouteAggregationData {
	return v.value
}

func (v *NullableConnectionRouteAggregationData) Set(val *ConnectionRouteAggregationData) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionRouteAggregationData) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionRouteAggregationData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionRouteAggregationData(val *ConnectionRouteAggregationData) *NullableConnectionRouteAggregationData {
	return &NullableConnectionRouteAggregationData{value: val, isSet: true}
}

func (v NullableConnectionRouteAggregationData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionRouteAggregationData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
