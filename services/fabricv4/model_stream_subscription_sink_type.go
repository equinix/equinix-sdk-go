/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// StreamSubscriptionSinkType destination type
type StreamSubscriptionSinkType string

// List of StreamSubscriptionSink_type
const (
	STREAMSUBSCRIPTIONSINKTYPE_DATADOG    StreamSubscriptionSinkType = "DATADOG"
	STREAMSUBSCRIPTIONSINKTYPE_PAGERDUTY  StreamSubscriptionSinkType = "PAGERDUTY"
	STREAMSUBSCRIPTIONSINKTYPE_SPLUNK_HEC StreamSubscriptionSinkType = "SPLUNK_HEC"
	STREAMSUBSCRIPTIONSINKTYPE_SLACK      StreamSubscriptionSinkType = "SLACK"
	STREAMSUBSCRIPTIONSINKTYPE_TEAMS      StreamSubscriptionSinkType = "TEAMS"
	STREAMSUBSCRIPTIONSINKTYPE_CUSTOM     StreamSubscriptionSinkType = "CUSTOM"
)

// All allowed values of StreamSubscriptionSinkType enum
var AllowedStreamSubscriptionSinkTypeEnumValues = []StreamSubscriptionSinkType{
	"DATADOG",
	"PAGERDUTY",
	"SPLUNK_HEC",
	"SLACK",
	"TEAMS",
	"CUSTOM",
}

func (v *StreamSubscriptionSinkType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StreamSubscriptionSinkType(value)
	for _, existing := range AllowedStreamSubscriptionSinkTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StreamSubscriptionSinkType", value)
}

// NewStreamSubscriptionSinkTypeFromValue returns a pointer to a valid StreamSubscriptionSinkType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStreamSubscriptionSinkTypeFromValue(v string) (*StreamSubscriptionSinkType, error) {
	ev := StreamSubscriptionSinkType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StreamSubscriptionSinkType: valid values are %v", v, AllowedStreamSubscriptionSinkTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StreamSubscriptionSinkType) IsValid() bool {
	for _, existing := range AllowedStreamSubscriptionSinkTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StreamSubscriptionSink_type value
func (v StreamSubscriptionSinkType) Ptr() *StreamSubscriptionSinkType {
	return &v
}

type NullableStreamSubscriptionSinkType struct {
	value *StreamSubscriptionSinkType
	isSet bool
}

func (v NullableStreamSubscriptionSinkType) Get() *StreamSubscriptionSinkType {
	return v.value
}

func (v *NullableStreamSubscriptionSinkType) Set(val *StreamSubscriptionSinkType) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamSubscriptionSinkType) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamSubscriptionSinkType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamSubscriptionSinkType(val *StreamSubscriptionSinkType) *NullableStreamSubscriptionSinkType {
	return &NullableStreamSubscriptionSinkType{value: val, isSet: true}
}

func (v NullableStreamSubscriptionSinkType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamSubscriptionSinkType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
