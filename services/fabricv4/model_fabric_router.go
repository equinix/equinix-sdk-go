/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// checks if the FabricRouter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FabricRouter{}

// FabricRouter The Router schema defines the structure for a network router within the orchestrator system.
type FabricRouter struct {
	Type FabricRouterType `json:"type"`
	Name *string          `json:"name,omitempty"`
	// Equinix-assigned access point identifier
	Uuid                 *string                        `json:"uuid,omitempty"`
	Location             *SimplifiedLocationWithoutIBX  `json:"location,omitempty"`
	Package              *CloudRouterPostRequestPackage `json:"package,omitempty"`
	DeploymentProperties TopologyProperties             `json:"deploymentProperties"`
	AdditionalProperties map[string]interface{}
}

type _FabricRouter FabricRouter

// NewFabricRouter instantiates a new FabricRouter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFabricRouter(type_ FabricRouterType, deploymentProperties TopologyProperties) *FabricRouter {
	this := FabricRouter{}
	this.Type = type_
	this.DeploymentProperties = deploymentProperties
	return &this
}

// NewFabricRouterWithDefaults instantiates a new FabricRouter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFabricRouterWithDefaults() *FabricRouter {
	this := FabricRouter{}
	return &this
}

// GetType returns the Type field value
func (o *FabricRouter) GetType() FabricRouterType {
	if o == nil {
		var ret FabricRouterType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *FabricRouter) GetTypeOk() (*FabricRouterType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *FabricRouter) SetType(v FabricRouterType) {
	o.Type = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FabricRouter) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FabricRouter) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FabricRouter) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FabricRouter) SetName(v string) {
	o.Name = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *FabricRouter) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FabricRouter) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *FabricRouter) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *FabricRouter) SetUuid(v string) {
	o.Uuid = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *FabricRouter) GetLocation() SimplifiedLocationWithoutIBX {
	if o == nil || IsNil(o.Location) {
		var ret SimplifiedLocationWithoutIBX
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FabricRouter) GetLocationOk() (*SimplifiedLocationWithoutIBX, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *FabricRouter) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given SimplifiedLocationWithoutIBX and assigns it to the Location field.
func (o *FabricRouter) SetLocation(v SimplifiedLocationWithoutIBX) {
	o.Location = &v
}

// GetPackage returns the Package field value if set, zero value otherwise.
func (o *FabricRouter) GetPackage() CloudRouterPostRequestPackage {
	if o == nil || IsNil(o.Package) {
		var ret CloudRouterPostRequestPackage
		return ret
	}
	return *o.Package
}

// GetPackageOk returns a tuple with the Package field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FabricRouter) GetPackageOk() (*CloudRouterPostRequestPackage, bool) {
	if o == nil || IsNil(o.Package) {
		return nil, false
	}
	return o.Package, true
}

// HasPackage returns a boolean if a field has been set.
func (o *FabricRouter) HasPackage() bool {
	if o != nil && !IsNil(o.Package) {
		return true
	}

	return false
}

// SetPackage gets a reference to the given CloudRouterPostRequestPackage and assigns it to the Package field.
func (o *FabricRouter) SetPackage(v CloudRouterPostRequestPackage) {
	o.Package = &v
}

// GetDeploymentProperties returns the DeploymentProperties field value
func (o *FabricRouter) GetDeploymentProperties() TopologyProperties {
	if o == nil {
		var ret TopologyProperties
		return ret
	}

	return o.DeploymentProperties
}

// GetDeploymentPropertiesOk returns a tuple with the DeploymentProperties field value
// and a boolean to check if the value has been set.
func (o *FabricRouter) GetDeploymentPropertiesOk() (*TopologyProperties, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeploymentProperties, true
}

// SetDeploymentProperties sets field value
func (o *FabricRouter) SetDeploymentProperties(v TopologyProperties) {
	o.DeploymentProperties = v
}

func (o FabricRouter) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FabricRouter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Package) {
		toSerialize["package"] = o.Package
	}
	toSerialize["deploymentProperties"] = o.DeploymentProperties

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FabricRouter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"deploymentProperties",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFabricRouter := _FabricRouter{}

	err = json.Unmarshal(data, &varFabricRouter)

	if err != nil {
		return err
	}

	*o = FabricRouter(varFabricRouter)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "name")
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "location")
		delete(additionalProperties, "package")
		delete(additionalProperties, "deploymentProperties")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFabricRouter struct {
	value *FabricRouter
	isSet bool
}

func (v NullableFabricRouter) Get() *FabricRouter {
	return v.value
}

func (v *NullableFabricRouter) Set(val *FabricRouter) {
	v.value = val
	v.isSet = true
}

func (v NullableFabricRouter) IsSet() bool {
	return v.isSet
}

func (v *NullableFabricRouter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFabricRouter(val *FabricRouter) *NullableFabricRouter {
	return &NullableFabricRouter{value: val, isSet: true}
}

func (v NullableFabricRouter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFabricRouter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
