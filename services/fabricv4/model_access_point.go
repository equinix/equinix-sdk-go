/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the AccessPoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccessPoint{}

// AccessPoint Access point object
type AccessPoint struct {
	Type          *AccessPointType          `json:"type,omitempty"`
	Account       *SimplifiedAccount        `json:"account,omitempty"`
	Location      *SimplifiedLocation       `json:"location,omitempty"`
	Port          *SimplifiedPort           `json:"port,omitempty"`
	Profile       *SimplifiedServiceProfile `json:"profile,omitempty"`
	Router        *CloudRouter              `json:"router,omitempty"`
	LinkProtocol  *SimplifiedLinkProtocol   `json:"linkProtocol,omitempty"`
	VirtualDevice *VirtualDevice            `json:"virtualDevice,omitempty"`
	Interface     *Interface                `json:"interface,omitempty"`
	Network       *SimplifiedNetwork        `json:"network,omitempty"`
	// Access point seller region
	SellerRegion *string      `json:"sellerRegion,omitempty"`
	PeeringType  *PeeringType `json:"peeringType,omitempty"`
	// Access point authentication key
	AuthenticationKey *string `json:"authenticationKey,omitempty"`
	// Provider assigned Connection Id
	ProviderConnectionId *string               `json:"providerConnectionId,omitempty"`
	VirtualNetwork       *VirtualNetwork       `json:"virtualNetwork,omitempty"`
	Interconnection      *MetalInterconnection `json:"interconnection,omitempty"`
	VpicInterface        *VpicInterface        `json:"vpic_interface,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AccessPoint AccessPoint

// NewAccessPoint instantiates a new AccessPoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessPoint() *AccessPoint {
	this := AccessPoint{}
	return &this
}

// NewAccessPointWithDefaults instantiates a new AccessPoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessPointWithDefaults() *AccessPoint {
	this := AccessPoint{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AccessPoint) GetType() AccessPointType {
	if o == nil || IsNil(o.Type) {
		var ret AccessPointType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPoint) GetTypeOk() (*AccessPointType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AccessPoint) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given AccessPointType and assigns it to the Type field.
func (o *AccessPoint) SetType(v AccessPointType) {
	o.Type = &v
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *AccessPoint) GetAccount() SimplifiedAccount {
	if o == nil || IsNil(o.Account) {
		var ret SimplifiedAccount
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPoint) GetAccountOk() (*SimplifiedAccount, bool) {
	if o == nil || IsNil(o.Account) {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *AccessPoint) HasAccount() bool {
	if o != nil && !IsNil(o.Account) {
		return true
	}

	return false
}

// SetAccount gets a reference to the given SimplifiedAccount and assigns it to the Account field.
func (o *AccessPoint) SetAccount(v SimplifiedAccount) {
	o.Account = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *AccessPoint) GetLocation() SimplifiedLocation {
	if o == nil || IsNil(o.Location) {
		var ret SimplifiedLocation
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPoint) GetLocationOk() (*SimplifiedLocation, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *AccessPoint) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given SimplifiedLocation and assigns it to the Location field.
func (o *AccessPoint) SetLocation(v SimplifiedLocation) {
	o.Location = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *AccessPoint) GetPort() SimplifiedPort {
	if o == nil || IsNil(o.Port) {
		var ret SimplifiedPort
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPoint) GetPortOk() (*SimplifiedPort, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *AccessPoint) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given SimplifiedPort and assigns it to the Port field.
func (o *AccessPoint) SetPort(v SimplifiedPort) {
	o.Port = &v
}

// GetProfile returns the Profile field value if set, zero value otherwise.
func (o *AccessPoint) GetProfile() SimplifiedServiceProfile {
	if o == nil || IsNil(o.Profile) {
		var ret SimplifiedServiceProfile
		return ret
	}
	return *o.Profile
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPoint) GetProfileOk() (*SimplifiedServiceProfile, bool) {
	if o == nil || IsNil(o.Profile) {
		return nil, false
	}
	return o.Profile, true
}

// HasProfile returns a boolean if a field has been set.
func (o *AccessPoint) HasProfile() bool {
	if o != nil && !IsNil(o.Profile) {
		return true
	}

	return false
}

// SetProfile gets a reference to the given SimplifiedServiceProfile and assigns it to the Profile field.
func (o *AccessPoint) SetProfile(v SimplifiedServiceProfile) {
	o.Profile = &v
}

// GetRouter returns the Router field value if set, zero value otherwise.
func (o *AccessPoint) GetRouter() CloudRouter {
	if o == nil || IsNil(o.Router) {
		var ret CloudRouter
		return ret
	}
	return *o.Router
}

// GetRouterOk returns a tuple with the Router field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPoint) GetRouterOk() (*CloudRouter, bool) {
	if o == nil || IsNil(o.Router) {
		return nil, false
	}
	return o.Router, true
}

// HasRouter returns a boolean if a field has been set.
func (o *AccessPoint) HasRouter() bool {
	if o != nil && !IsNil(o.Router) {
		return true
	}

	return false
}

// SetRouter gets a reference to the given CloudRouter and assigns it to the Router field.
func (o *AccessPoint) SetRouter(v CloudRouter) {
	o.Router = &v
}

// GetLinkProtocol returns the LinkProtocol field value if set, zero value otherwise.
func (o *AccessPoint) GetLinkProtocol() SimplifiedLinkProtocol {
	if o == nil || IsNil(o.LinkProtocol) {
		var ret SimplifiedLinkProtocol
		return ret
	}
	return *o.LinkProtocol
}

// GetLinkProtocolOk returns a tuple with the LinkProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPoint) GetLinkProtocolOk() (*SimplifiedLinkProtocol, bool) {
	if o == nil || IsNil(o.LinkProtocol) {
		return nil, false
	}
	return o.LinkProtocol, true
}

// HasLinkProtocol returns a boolean if a field has been set.
func (o *AccessPoint) HasLinkProtocol() bool {
	if o != nil && !IsNil(o.LinkProtocol) {
		return true
	}

	return false
}

// SetLinkProtocol gets a reference to the given SimplifiedLinkProtocol and assigns it to the LinkProtocol field.
func (o *AccessPoint) SetLinkProtocol(v SimplifiedLinkProtocol) {
	o.LinkProtocol = &v
}

// GetVirtualDevice returns the VirtualDevice field value if set, zero value otherwise.
func (o *AccessPoint) GetVirtualDevice() VirtualDevice {
	if o == nil || IsNil(o.VirtualDevice) {
		var ret VirtualDevice
		return ret
	}
	return *o.VirtualDevice
}

// GetVirtualDeviceOk returns a tuple with the VirtualDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPoint) GetVirtualDeviceOk() (*VirtualDevice, bool) {
	if o == nil || IsNil(o.VirtualDevice) {
		return nil, false
	}
	return o.VirtualDevice, true
}

// HasVirtualDevice returns a boolean if a field has been set.
func (o *AccessPoint) HasVirtualDevice() bool {
	if o != nil && !IsNil(o.VirtualDevice) {
		return true
	}

	return false
}

// SetVirtualDevice gets a reference to the given VirtualDevice and assigns it to the VirtualDevice field.
func (o *AccessPoint) SetVirtualDevice(v VirtualDevice) {
	o.VirtualDevice = &v
}

// GetInterface returns the Interface field value if set, zero value otherwise.
func (o *AccessPoint) GetInterface() Interface {
	if o == nil || IsNil(o.Interface) {
		var ret Interface
		return ret
	}
	return *o.Interface
}

// GetInterfaceOk returns a tuple with the Interface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPoint) GetInterfaceOk() (*Interface, bool) {
	if o == nil || IsNil(o.Interface) {
		return nil, false
	}
	return o.Interface, true
}

// HasInterface returns a boolean if a field has been set.
func (o *AccessPoint) HasInterface() bool {
	if o != nil && !IsNil(o.Interface) {
		return true
	}

	return false
}

// SetInterface gets a reference to the given Interface and assigns it to the Interface field.
func (o *AccessPoint) SetInterface(v Interface) {
	o.Interface = &v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *AccessPoint) GetNetwork() SimplifiedNetwork {
	if o == nil || IsNil(o.Network) {
		var ret SimplifiedNetwork
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPoint) GetNetworkOk() (*SimplifiedNetwork, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *AccessPoint) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given SimplifiedNetwork and assigns it to the Network field.
func (o *AccessPoint) SetNetwork(v SimplifiedNetwork) {
	o.Network = &v
}

// GetSellerRegion returns the SellerRegion field value if set, zero value otherwise.
func (o *AccessPoint) GetSellerRegion() string {
	if o == nil || IsNil(o.SellerRegion) {
		var ret string
		return ret
	}
	return *o.SellerRegion
}

// GetSellerRegionOk returns a tuple with the SellerRegion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPoint) GetSellerRegionOk() (*string, bool) {
	if o == nil || IsNil(o.SellerRegion) {
		return nil, false
	}
	return o.SellerRegion, true
}

// HasSellerRegion returns a boolean if a field has been set.
func (o *AccessPoint) HasSellerRegion() bool {
	if o != nil && !IsNil(o.SellerRegion) {
		return true
	}

	return false
}

// SetSellerRegion gets a reference to the given string and assigns it to the SellerRegion field.
func (o *AccessPoint) SetSellerRegion(v string) {
	o.SellerRegion = &v
}

// GetPeeringType returns the PeeringType field value if set, zero value otherwise.
func (o *AccessPoint) GetPeeringType() PeeringType {
	if o == nil || IsNil(o.PeeringType) {
		var ret PeeringType
		return ret
	}
	return *o.PeeringType
}

// GetPeeringTypeOk returns a tuple with the PeeringType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPoint) GetPeeringTypeOk() (*PeeringType, bool) {
	if o == nil || IsNil(o.PeeringType) {
		return nil, false
	}
	return o.PeeringType, true
}

// HasPeeringType returns a boolean if a field has been set.
func (o *AccessPoint) HasPeeringType() bool {
	if o != nil && !IsNil(o.PeeringType) {
		return true
	}

	return false
}

// SetPeeringType gets a reference to the given PeeringType and assigns it to the PeeringType field.
func (o *AccessPoint) SetPeeringType(v PeeringType) {
	o.PeeringType = &v
}

// GetAuthenticationKey returns the AuthenticationKey field value if set, zero value otherwise.
func (o *AccessPoint) GetAuthenticationKey() string {
	if o == nil || IsNil(o.AuthenticationKey) {
		var ret string
		return ret
	}
	return *o.AuthenticationKey
}

// GetAuthenticationKeyOk returns a tuple with the AuthenticationKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPoint) GetAuthenticationKeyOk() (*string, bool) {
	if o == nil || IsNil(o.AuthenticationKey) {
		return nil, false
	}
	return o.AuthenticationKey, true
}

// HasAuthenticationKey returns a boolean if a field has been set.
func (o *AccessPoint) HasAuthenticationKey() bool {
	if o != nil && !IsNil(o.AuthenticationKey) {
		return true
	}

	return false
}

// SetAuthenticationKey gets a reference to the given string and assigns it to the AuthenticationKey field.
func (o *AccessPoint) SetAuthenticationKey(v string) {
	o.AuthenticationKey = &v
}

// GetProviderConnectionId returns the ProviderConnectionId field value if set, zero value otherwise.
func (o *AccessPoint) GetProviderConnectionId() string {
	if o == nil || IsNil(o.ProviderConnectionId) {
		var ret string
		return ret
	}
	return *o.ProviderConnectionId
}

// GetProviderConnectionIdOk returns a tuple with the ProviderConnectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPoint) GetProviderConnectionIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProviderConnectionId) {
		return nil, false
	}
	return o.ProviderConnectionId, true
}

// HasProviderConnectionId returns a boolean if a field has been set.
func (o *AccessPoint) HasProviderConnectionId() bool {
	if o != nil && !IsNil(o.ProviderConnectionId) {
		return true
	}

	return false
}

// SetProviderConnectionId gets a reference to the given string and assigns it to the ProviderConnectionId field.
func (o *AccessPoint) SetProviderConnectionId(v string) {
	o.ProviderConnectionId = &v
}

// GetVirtualNetwork returns the VirtualNetwork field value if set, zero value otherwise.
func (o *AccessPoint) GetVirtualNetwork() VirtualNetwork {
	if o == nil || IsNil(o.VirtualNetwork) {
		var ret VirtualNetwork
		return ret
	}
	return *o.VirtualNetwork
}

// GetVirtualNetworkOk returns a tuple with the VirtualNetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPoint) GetVirtualNetworkOk() (*VirtualNetwork, bool) {
	if o == nil || IsNil(o.VirtualNetwork) {
		return nil, false
	}
	return o.VirtualNetwork, true
}

// HasVirtualNetwork returns a boolean if a field has been set.
func (o *AccessPoint) HasVirtualNetwork() bool {
	if o != nil && !IsNil(o.VirtualNetwork) {
		return true
	}

	return false
}

// SetVirtualNetwork gets a reference to the given VirtualNetwork and assigns it to the VirtualNetwork field.
func (o *AccessPoint) SetVirtualNetwork(v VirtualNetwork) {
	o.VirtualNetwork = &v
}

// GetInterconnection returns the Interconnection field value if set, zero value otherwise.
func (o *AccessPoint) GetInterconnection() MetalInterconnection {
	if o == nil || IsNil(o.Interconnection) {
		var ret MetalInterconnection
		return ret
	}
	return *o.Interconnection
}

// GetInterconnectionOk returns a tuple with the Interconnection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPoint) GetInterconnectionOk() (*MetalInterconnection, bool) {
	if o == nil || IsNil(o.Interconnection) {
		return nil, false
	}
	return o.Interconnection, true
}

// HasInterconnection returns a boolean if a field has been set.
func (o *AccessPoint) HasInterconnection() bool {
	if o != nil && !IsNil(o.Interconnection) {
		return true
	}

	return false
}

// SetInterconnection gets a reference to the given MetalInterconnection and assigns it to the Interconnection field.
func (o *AccessPoint) SetInterconnection(v MetalInterconnection) {
	o.Interconnection = &v
}

// GetVpicInterface returns the VpicInterface field value if set, zero value otherwise.
func (o *AccessPoint) GetVpicInterface() VpicInterface {
	if o == nil || IsNil(o.VpicInterface) {
		var ret VpicInterface
		return ret
	}
	return *o.VpicInterface
}

// GetVpicInterfaceOk returns a tuple with the VpicInterface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPoint) GetVpicInterfaceOk() (*VpicInterface, bool) {
	if o == nil || IsNil(o.VpicInterface) {
		return nil, false
	}
	return o.VpicInterface, true
}

// HasVpicInterface returns a boolean if a field has been set.
func (o *AccessPoint) HasVpicInterface() bool {
	if o != nil && !IsNil(o.VpicInterface) {
		return true
	}

	return false
}

// SetVpicInterface gets a reference to the given VpicInterface and assigns it to the VpicInterface field.
func (o *AccessPoint) SetVpicInterface(v VpicInterface) {
	o.VpicInterface = &v
}

func (o AccessPoint) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccessPoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Account) {
		toSerialize["account"] = o.Account
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.Profile) {
		toSerialize["profile"] = o.Profile
	}
	if !IsNil(o.Router) {
		toSerialize["router"] = o.Router
	}
	if !IsNil(o.LinkProtocol) {
		toSerialize["linkProtocol"] = o.LinkProtocol
	}
	if !IsNil(o.VirtualDevice) {
		toSerialize["virtualDevice"] = o.VirtualDevice
	}
	if !IsNil(o.Interface) {
		toSerialize["interface"] = o.Interface
	}
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	if !IsNil(o.SellerRegion) {
		toSerialize["sellerRegion"] = o.SellerRegion
	}
	if !IsNil(o.PeeringType) {
		toSerialize["peeringType"] = o.PeeringType
	}
	if !IsNil(o.AuthenticationKey) {
		toSerialize["authenticationKey"] = o.AuthenticationKey
	}
	if !IsNil(o.ProviderConnectionId) {
		toSerialize["providerConnectionId"] = o.ProviderConnectionId
	}
	if !IsNil(o.VirtualNetwork) {
		toSerialize["virtualNetwork"] = o.VirtualNetwork
	}
	if !IsNil(o.Interconnection) {
		toSerialize["interconnection"] = o.Interconnection
	}
	if !IsNil(o.VpicInterface) {
		toSerialize["vpic_interface"] = o.VpicInterface
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AccessPoint) UnmarshalJSON(data []byte) (err error) {
	varAccessPoint := _AccessPoint{}

	err = json.Unmarshal(data, &varAccessPoint)

	if err != nil {
		return err
	}

	*o = AccessPoint(varAccessPoint)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "account")
		delete(additionalProperties, "location")
		delete(additionalProperties, "port")
		delete(additionalProperties, "profile")
		delete(additionalProperties, "router")
		delete(additionalProperties, "linkProtocol")
		delete(additionalProperties, "virtualDevice")
		delete(additionalProperties, "interface")
		delete(additionalProperties, "network")
		delete(additionalProperties, "sellerRegion")
		delete(additionalProperties, "peeringType")
		delete(additionalProperties, "authenticationKey")
		delete(additionalProperties, "providerConnectionId")
		delete(additionalProperties, "virtualNetwork")
		delete(additionalProperties, "interconnection")
		delete(additionalProperties, "vpic_interface")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAccessPoint struct {
	value *AccessPoint
	isSet bool
}

func (v NullableAccessPoint) Get() *AccessPoint {
	return v.value
}

func (v *NullableAccessPoint) Set(val *AccessPoint) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessPoint) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessPoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessPoint(val *AccessPoint) *NullableAccessPoint {
	return &NullableAccessPoint{value: val, isSet: true}
}

func (v NullableAccessPoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessPoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
