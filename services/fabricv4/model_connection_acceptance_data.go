/*
Equinix Fabric API v4

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the ConnectionAcceptanceData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectionAcceptanceData{}

// ConnectionAcceptanceData Connection acceptance data
type ConnectionAcceptanceData struct {
	ZSide *ConnectionSide `json:"zSide,omitempty"`
	// Authorization key bandwidth in Mbps
	ProviderBandwidth    *int32 `json:"providerBandwidth,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ConnectionAcceptanceData ConnectionAcceptanceData

// NewConnectionAcceptanceData instantiates a new ConnectionAcceptanceData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionAcceptanceData() *ConnectionAcceptanceData {
	this := ConnectionAcceptanceData{}
	return &this
}

// NewConnectionAcceptanceDataWithDefaults instantiates a new ConnectionAcceptanceData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionAcceptanceDataWithDefaults() *ConnectionAcceptanceData {
	this := ConnectionAcceptanceData{}
	return &this
}

// GetZSide returns the ZSide field value if set, zero value otherwise.
func (o *ConnectionAcceptanceData) GetZSide() ConnectionSide {
	if o == nil || IsNil(o.ZSide) {
		var ret ConnectionSide
		return ret
	}
	return *o.ZSide
}

// GetZSideOk returns a tuple with the ZSide field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionAcceptanceData) GetZSideOk() (*ConnectionSide, bool) {
	if o == nil || IsNil(o.ZSide) {
		return nil, false
	}
	return o.ZSide, true
}

// HasZSide returns a boolean if a field has been set.
func (o *ConnectionAcceptanceData) HasZSide() bool {
	if o != nil && !IsNil(o.ZSide) {
		return true
	}

	return false
}

// SetZSide gets a reference to the given ConnectionSide and assigns it to the ZSide field.
func (o *ConnectionAcceptanceData) SetZSide(v ConnectionSide) {
	o.ZSide = &v
}

// GetProviderBandwidth returns the ProviderBandwidth field value if set, zero value otherwise.
func (o *ConnectionAcceptanceData) GetProviderBandwidth() int32 {
	if o == nil || IsNil(o.ProviderBandwidth) {
		var ret int32
		return ret
	}
	return *o.ProviderBandwidth
}

// GetProviderBandwidthOk returns a tuple with the ProviderBandwidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionAcceptanceData) GetProviderBandwidthOk() (*int32, bool) {
	if o == nil || IsNil(o.ProviderBandwidth) {
		return nil, false
	}
	return o.ProviderBandwidth, true
}

// HasProviderBandwidth returns a boolean if a field has been set.
func (o *ConnectionAcceptanceData) HasProviderBandwidth() bool {
	if o != nil && !IsNil(o.ProviderBandwidth) {
		return true
	}

	return false
}

// SetProviderBandwidth gets a reference to the given int32 and assigns it to the ProviderBandwidth field.
func (o *ConnectionAcceptanceData) SetProviderBandwidth(v int32) {
	o.ProviderBandwidth = &v
}

func (o ConnectionAcceptanceData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectionAcceptanceData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ZSide) {
		toSerialize["zSide"] = o.ZSide
	}
	if !IsNil(o.ProviderBandwidth) {
		toSerialize["providerBandwidth"] = o.ProviderBandwidth
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ConnectionAcceptanceData) UnmarshalJSON(data []byte) (err error) {
	varConnectionAcceptanceData := _ConnectionAcceptanceData{}

	err = json.Unmarshal(data, &varConnectionAcceptanceData)

	if err != nil {
		return err
	}

	*o = ConnectionAcceptanceData(varConnectionAcceptanceData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "zSide")
		delete(additionalProperties, "providerBandwidth")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableConnectionAcceptanceData struct {
	value *ConnectionAcceptanceData
	isSet bool
}

func (v NullableConnectionAcceptanceData) Get() *ConnectionAcceptanceData {
	return v.value
}

func (v *NullableConnectionAcceptanceData) Set(val *ConnectionAcceptanceData) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionAcceptanceData) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionAcceptanceData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionAcceptanceData(val *ConnectionAcceptanceData) *NullableConnectionAcceptanceData {
	return &NullableConnectionAcceptanceData{value: val, isSet: true}
}

func (v NullableConnectionAcceptanceData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionAcceptanceData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
