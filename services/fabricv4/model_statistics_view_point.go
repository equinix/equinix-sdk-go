/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// StatisticsViewPoint Point of view for connection metrics - aSide or zSide
type StatisticsViewPoint string

// List of Statistics_viewPoint
const (
	STATISTICSVIEWPOINT_A_SIDE StatisticsViewPoint = "aSide"
	STATISTICSVIEWPOINT_Z_SIDE StatisticsViewPoint = "zSide"
)

// All allowed values of StatisticsViewPoint enum
var AllowedStatisticsViewPointEnumValues = []StatisticsViewPoint{
	"aSide",
	"zSide",
}

func (v *StatisticsViewPoint) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StatisticsViewPoint(value)
	for _, existing := range AllowedStatisticsViewPointEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StatisticsViewPoint", value)
}

// NewStatisticsViewPointFromValue returns a pointer to a valid StatisticsViewPoint
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStatisticsViewPointFromValue(v string) (*StatisticsViewPoint, error) {
	ev := StatisticsViewPoint(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StatisticsViewPoint: valid values are %v", v, AllowedStatisticsViewPointEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StatisticsViewPoint) IsValid() bool {
	for _, existing := range AllowedStatisticsViewPointEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Statistics_viewPoint value
func (v StatisticsViewPoint) Ptr() *StatisticsViewPoint {
	return &v
}

type NullableStatisticsViewPoint struct {
	value *StatisticsViewPoint
	isSet bool
}

func (v NullableStatisticsViewPoint) Get() *StatisticsViewPoint {
	return v.value
}

func (v *NullableStatisticsViewPoint) Set(val *StatisticsViewPoint) {
	v.value = val
	v.isSet = true
}

func (v NullableStatisticsViewPoint) IsSet() bool {
	return v.isSet
}

func (v *NullableStatisticsViewPoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatisticsViewPoint(val *StatisticsViewPoint) *NullableStatisticsViewPoint {
	return &NullableStatisticsViewPoint{value: val, isSet: true}
}

func (v NullableStatisticsViewPoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatisticsViewPoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
