/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the PortLag type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PortLag{}

// PortLag Port Lag
type PortLag struct {
	// id
	Id *string `json:"id,omitempty"`
	// enabled
	// Deprecated
	Enabled *bool `json:"enabled,omitempty"`
	// name
	Name *string `json:"name,omitempty"`
	// member status
	MemberStatus         *string `json:"memberStatus,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PortLag PortLag

// NewPortLag instantiates a new PortLag object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPortLag() *PortLag {
	this := PortLag{}
	return &this
}

// NewPortLagWithDefaults instantiates a new PortLag object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortLagWithDefaults() *PortLag {
	this := PortLag{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PortLag) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortLag) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PortLag) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PortLag) SetId(v string) {
	o.Id = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
// Deprecated
func (o *PortLag) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *PortLag) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *PortLag) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
// Deprecated
func (o *PortLag) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PortLag) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortLag) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PortLag) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PortLag) SetName(v string) {
	o.Name = &v
}

// GetMemberStatus returns the MemberStatus field value if set, zero value otherwise.
func (o *PortLag) GetMemberStatus() string {
	if o == nil || IsNil(o.MemberStatus) {
		var ret string
		return ret
	}
	return *o.MemberStatus
}

// GetMemberStatusOk returns a tuple with the MemberStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortLag) GetMemberStatusOk() (*string, bool) {
	if o == nil || IsNil(o.MemberStatus) {
		return nil, false
	}
	return o.MemberStatus, true
}

// HasMemberStatus returns a boolean if a field has been set.
func (o *PortLag) HasMemberStatus() bool {
	if o != nil && !IsNil(o.MemberStatus) {
		return true
	}

	return false
}

// SetMemberStatus gets a reference to the given string and assigns it to the MemberStatus field.
func (o *PortLag) SetMemberStatus(v string) {
	o.MemberStatus = &v
}

func (o PortLag) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PortLag) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.MemberStatus) {
		toSerialize["memberStatus"] = o.MemberStatus
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PortLag) UnmarshalJSON(data []byte) (err error) {
	varPortLag := _PortLag{}

	err = json.Unmarshal(data, &varPortLag)

	if err != nil {
		return err
	}

	*o = PortLag(varPortLag)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "name")
		delete(additionalProperties, "memberStatus")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePortLag struct {
	value *PortLag
	isSet bool
}

func (v NullablePortLag) Get() *PortLag {
	return v.value
}

func (v *NullablePortLag) Set(val *PortLag) {
	v.value = val
	v.isSet = true
}

func (v NullablePortLag) IsSet() bool {
	return v.isSet
}

func (v *NullablePortLag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortLag(val *PortLag) *NullablePortLag {
	return &NullablePortLag{value: val, isSet: true}
}

func (v NullablePortLag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortLag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
