/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the ProviderSearchResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProviderSearchResponse{}

// ProviderSearchResponse struct for ProviderSearchResponse
type ProviderSearchResponse struct {
	Type                 *ProviderType             `json:"type,omitempty"`
	Data                 []ProvidersSearchResponse `json:"data,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ProviderSearchResponse ProviderSearchResponse

// NewProviderSearchResponse instantiates a new ProviderSearchResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProviderSearchResponse() *ProviderSearchResponse {
	this := ProviderSearchResponse{}
	return &this
}

// NewProviderSearchResponseWithDefaults instantiates a new ProviderSearchResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProviderSearchResponseWithDefaults() *ProviderSearchResponse {
	this := ProviderSearchResponse{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ProviderSearchResponse) GetType() ProviderType {
	if o == nil || IsNil(o.Type) {
		var ret ProviderType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProviderSearchResponse) GetTypeOk() (*ProviderType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ProviderSearchResponse) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ProviderType and assigns it to the Type field.
func (o *ProviderSearchResponse) SetType(v ProviderType) {
	o.Type = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ProviderSearchResponse) GetData() []ProvidersSearchResponse {
	if o == nil || IsNil(o.Data) {
		var ret []ProvidersSearchResponse
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProviderSearchResponse) GetDataOk() ([]ProvidersSearchResponse, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ProviderSearchResponse) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []ProvidersSearchResponse and assigns it to the Data field.
func (o *ProviderSearchResponse) SetData(v []ProvidersSearchResponse) {
	o.Data = v
}

func (o ProviderSearchResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProviderSearchResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProviderSearchResponse) UnmarshalJSON(data []byte) (err error) {
	varProviderSearchResponse := _ProviderSearchResponse{}

	err = json.Unmarshal(data, &varProviderSearchResponse)

	if err != nil {
		return err
	}

	*o = ProviderSearchResponse(varProviderSearchResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "data")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProviderSearchResponse struct {
	value *ProviderSearchResponse
	isSet bool
}

func (v NullableProviderSearchResponse) Get() *ProviderSearchResponse {
	return v.value
}

func (v *NullableProviderSearchResponse) Set(val *ProviderSearchResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableProviderSearchResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableProviderSearchResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProviderSearchResponse(val *ProviderSearchResponse) *NullableProviderSearchResponse {
	return &NullableProviderSearchResponse{value: val, isSet: true}
}

func (v NullableProviderSearchResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProviderSearchResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
