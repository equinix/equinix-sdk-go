/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// StreamSubscriptionSinkCredentialType credential type
type StreamSubscriptionSinkCredentialType string

// List of StreamSubscriptionSinkCredential_type
const (
	STREAMSUBSCRIPTIONSINKCREDENTIALTYPE_ACCESS_TOKEN      StreamSubscriptionSinkCredentialType = "ACCESS_TOKEN"
	STREAMSUBSCRIPTIONSINKCREDENTIALTYPE_INTEGRATION_KEY   StreamSubscriptionSinkCredentialType = "INTEGRATION_KEY"
	STREAMSUBSCRIPTIONSINKCREDENTIALTYPE_API_KEY           StreamSubscriptionSinkCredentialType = "API_KEY"
	STREAMSUBSCRIPTIONSINKCREDENTIALTYPE_USERNAME_PASSWORD StreamSubscriptionSinkCredentialType = "USERNAME_PASSWORD"
)

// All allowed values of StreamSubscriptionSinkCredentialType enum
var AllowedStreamSubscriptionSinkCredentialTypeEnumValues = []StreamSubscriptionSinkCredentialType{
	"ACCESS_TOKEN",
	"INTEGRATION_KEY",
	"API_KEY",
	"USERNAME_PASSWORD",
}

func (v *StreamSubscriptionSinkCredentialType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StreamSubscriptionSinkCredentialType(value)
	for _, existing := range AllowedStreamSubscriptionSinkCredentialTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StreamSubscriptionSinkCredentialType", value)
}

// NewStreamSubscriptionSinkCredentialTypeFromValue returns a pointer to a valid StreamSubscriptionSinkCredentialType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStreamSubscriptionSinkCredentialTypeFromValue(v string) (*StreamSubscriptionSinkCredentialType, error) {
	ev := StreamSubscriptionSinkCredentialType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StreamSubscriptionSinkCredentialType: valid values are %v", v, AllowedStreamSubscriptionSinkCredentialTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StreamSubscriptionSinkCredentialType) IsValid() bool {
	for _, existing := range AllowedStreamSubscriptionSinkCredentialTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StreamSubscriptionSinkCredential_type value
func (v StreamSubscriptionSinkCredentialType) Ptr() *StreamSubscriptionSinkCredentialType {
	return &v
}

type NullableStreamSubscriptionSinkCredentialType struct {
	value *StreamSubscriptionSinkCredentialType
	isSet bool
}

func (v NullableStreamSubscriptionSinkCredentialType) Get() *StreamSubscriptionSinkCredentialType {
	return v.value
}

func (v *NullableStreamSubscriptionSinkCredentialType) Set(val *StreamSubscriptionSinkCredentialType) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamSubscriptionSinkCredentialType) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamSubscriptionSinkCredentialType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamSubscriptionSinkCredentialType(val *StreamSubscriptionSinkCredentialType) *NullableStreamSubscriptionSinkCredentialType {
	return &NullableStreamSubscriptionSinkCredentialType{value: val, isSet: true}
}

func (v NullableStreamSubscriptionSinkCredentialType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamSubscriptionSinkCredentialType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
