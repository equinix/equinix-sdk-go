/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the AlertRulePostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlertRulePostRequest{}

// AlertRulePostRequest Create Stream Alert Rules
type AlertRulePostRequest struct {
	Type *AlertRulePostRequestType `json:"type,omitempty"`
	// Customer-provided stream name
	Name *string `json:"name,omitempty"`
	// Customer-provided stream description
	Description *string `json:"description,omitempty"`
	// Stream alert rule enabled status
	Enabled          *bool                      `json:"enabled,omitempty"`
	MetricName       *StreamAlertRuleMetricName `json:"metricName,omitempty"`
	ResourceSelector *ResourceSelector          `json:"resourceSelector,omitempty"`
	// Stream alert rule metric window size
	WindowSize *string                 `json:"windowSize,omitempty"`
	Operand    *StreamAlertRuleOperand `json:"operand,omitempty"`
	// Stream alert rule metric warning threshold
	WarningThreshold *string `json:"warningThreshold,omitempty"`
	// Stream alert rule metric critical threshold
	CriticalThreshold    *string `json:"criticalThreshold,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AlertRulePostRequest AlertRulePostRequest

// NewAlertRulePostRequest instantiates a new AlertRulePostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertRulePostRequest() *AlertRulePostRequest {
	this := AlertRulePostRequest{}
	var enabled bool = true
	this.Enabled = &enabled
	return &this
}

// NewAlertRulePostRequestWithDefaults instantiates a new AlertRulePostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertRulePostRequestWithDefaults() *AlertRulePostRequest {
	this := AlertRulePostRequest{}
	var enabled bool = true
	this.Enabled = &enabled
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AlertRulePostRequest) GetType() AlertRulePostRequestType {
	if o == nil || IsNil(o.Type) {
		var ret AlertRulePostRequestType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRulePostRequest) GetTypeOk() (*AlertRulePostRequestType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AlertRulePostRequest) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given AlertRulePostRequestType and assigns it to the Type field.
func (o *AlertRulePostRequest) SetType(v AlertRulePostRequestType) {
	o.Type = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AlertRulePostRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRulePostRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AlertRulePostRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AlertRulePostRequest) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AlertRulePostRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRulePostRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AlertRulePostRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AlertRulePostRequest) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *AlertRulePostRequest) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRulePostRequest) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *AlertRulePostRequest) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *AlertRulePostRequest) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetMetricName returns the MetricName field value if set, zero value otherwise.
func (o *AlertRulePostRequest) GetMetricName() StreamAlertRuleMetricName {
	if o == nil || IsNil(o.MetricName) {
		var ret StreamAlertRuleMetricName
		return ret
	}
	return *o.MetricName
}

// GetMetricNameOk returns a tuple with the MetricName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRulePostRequest) GetMetricNameOk() (*StreamAlertRuleMetricName, bool) {
	if o == nil || IsNil(o.MetricName) {
		return nil, false
	}
	return o.MetricName, true
}

// HasMetricName returns a boolean if a field has been set.
func (o *AlertRulePostRequest) HasMetricName() bool {
	if o != nil && !IsNil(o.MetricName) {
		return true
	}

	return false
}

// SetMetricName gets a reference to the given StreamAlertRuleMetricName and assigns it to the MetricName field.
func (o *AlertRulePostRequest) SetMetricName(v StreamAlertRuleMetricName) {
	o.MetricName = &v
}

// GetResourceSelector returns the ResourceSelector field value if set, zero value otherwise.
func (o *AlertRulePostRequest) GetResourceSelector() ResourceSelector {
	if o == nil || IsNil(o.ResourceSelector) {
		var ret ResourceSelector
		return ret
	}
	return *o.ResourceSelector
}

// GetResourceSelectorOk returns a tuple with the ResourceSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRulePostRequest) GetResourceSelectorOk() (*ResourceSelector, bool) {
	if o == nil || IsNil(o.ResourceSelector) {
		return nil, false
	}
	return o.ResourceSelector, true
}

// HasResourceSelector returns a boolean if a field has been set.
func (o *AlertRulePostRequest) HasResourceSelector() bool {
	if o != nil && !IsNil(o.ResourceSelector) {
		return true
	}

	return false
}

// SetResourceSelector gets a reference to the given ResourceSelector and assigns it to the ResourceSelector field.
func (o *AlertRulePostRequest) SetResourceSelector(v ResourceSelector) {
	o.ResourceSelector = &v
}

// GetWindowSize returns the WindowSize field value if set, zero value otherwise.
func (o *AlertRulePostRequest) GetWindowSize() string {
	if o == nil || IsNil(o.WindowSize) {
		var ret string
		return ret
	}
	return *o.WindowSize
}

// GetWindowSizeOk returns a tuple with the WindowSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRulePostRequest) GetWindowSizeOk() (*string, bool) {
	if o == nil || IsNil(o.WindowSize) {
		return nil, false
	}
	return o.WindowSize, true
}

// HasWindowSize returns a boolean if a field has been set.
func (o *AlertRulePostRequest) HasWindowSize() bool {
	if o != nil && !IsNil(o.WindowSize) {
		return true
	}

	return false
}

// SetWindowSize gets a reference to the given string and assigns it to the WindowSize field.
func (o *AlertRulePostRequest) SetWindowSize(v string) {
	o.WindowSize = &v
}

// GetOperand returns the Operand field value if set, zero value otherwise.
func (o *AlertRulePostRequest) GetOperand() StreamAlertRuleOperand {
	if o == nil || IsNil(o.Operand) {
		var ret StreamAlertRuleOperand
		return ret
	}
	return *o.Operand
}

// GetOperandOk returns a tuple with the Operand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRulePostRequest) GetOperandOk() (*StreamAlertRuleOperand, bool) {
	if o == nil || IsNil(o.Operand) {
		return nil, false
	}
	return o.Operand, true
}

// HasOperand returns a boolean if a field has been set.
func (o *AlertRulePostRequest) HasOperand() bool {
	if o != nil && !IsNil(o.Operand) {
		return true
	}

	return false
}

// SetOperand gets a reference to the given StreamAlertRuleOperand and assigns it to the Operand field.
func (o *AlertRulePostRequest) SetOperand(v StreamAlertRuleOperand) {
	o.Operand = &v
}

// GetWarningThreshold returns the WarningThreshold field value if set, zero value otherwise.
func (o *AlertRulePostRequest) GetWarningThreshold() string {
	if o == nil || IsNil(o.WarningThreshold) {
		var ret string
		return ret
	}
	return *o.WarningThreshold
}

// GetWarningThresholdOk returns a tuple with the WarningThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRulePostRequest) GetWarningThresholdOk() (*string, bool) {
	if o == nil || IsNil(o.WarningThreshold) {
		return nil, false
	}
	return o.WarningThreshold, true
}

// HasWarningThreshold returns a boolean if a field has been set.
func (o *AlertRulePostRequest) HasWarningThreshold() bool {
	if o != nil && !IsNil(o.WarningThreshold) {
		return true
	}

	return false
}

// SetWarningThreshold gets a reference to the given string and assigns it to the WarningThreshold field.
func (o *AlertRulePostRequest) SetWarningThreshold(v string) {
	o.WarningThreshold = &v
}

// GetCriticalThreshold returns the CriticalThreshold field value if set, zero value otherwise.
func (o *AlertRulePostRequest) GetCriticalThreshold() string {
	if o == nil || IsNil(o.CriticalThreshold) {
		var ret string
		return ret
	}
	return *o.CriticalThreshold
}

// GetCriticalThresholdOk returns a tuple with the CriticalThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRulePostRequest) GetCriticalThresholdOk() (*string, bool) {
	if o == nil || IsNil(o.CriticalThreshold) {
		return nil, false
	}
	return o.CriticalThreshold, true
}

// HasCriticalThreshold returns a boolean if a field has been set.
func (o *AlertRulePostRequest) HasCriticalThreshold() bool {
	if o != nil && !IsNil(o.CriticalThreshold) {
		return true
	}

	return false
}

// SetCriticalThreshold gets a reference to the given string and assigns it to the CriticalThreshold field.
func (o *AlertRulePostRequest) SetCriticalThreshold(v string) {
	o.CriticalThreshold = &v
}

func (o AlertRulePostRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertRulePostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.MetricName) {
		toSerialize["metricName"] = o.MetricName
	}
	if !IsNil(o.ResourceSelector) {
		toSerialize["resourceSelector"] = o.ResourceSelector
	}
	if !IsNil(o.WindowSize) {
		toSerialize["windowSize"] = o.WindowSize
	}
	if !IsNil(o.Operand) {
		toSerialize["operand"] = o.Operand
	}
	if !IsNil(o.WarningThreshold) {
		toSerialize["warningThreshold"] = o.WarningThreshold
	}
	if !IsNil(o.CriticalThreshold) {
		toSerialize["criticalThreshold"] = o.CriticalThreshold
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AlertRulePostRequest) UnmarshalJSON(data []byte) (err error) {
	varAlertRulePostRequest := _AlertRulePostRequest{}

	err = json.Unmarshal(data, &varAlertRulePostRequest)

	if err != nil {
		return err
	}

	*o = AlertRulePostRequest(varAlertRulePostRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "metricName")
		delete(additionalProperties, "resourceSelector")
		delete(additionalProperties, "windowSize")
		delete(additionalProperties, "operand")
		delete(additionalProperties, "warningThreshold")
		delete(additionalProperties, "criticalThreshold")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAlertRulePostRequest struct {
	value *AlertRulePostRequest
	isSet bool
}

func (v NullableAlertRulePostRequest) Get() *AlertRulePostRequest {
	return v.value
}

func (v *NullableAlertRulePostRequest) Set(val *AlertRulePostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertRulePostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertRulePostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertRulePostRequest(val *AlertRulePostRequest) *NullableAlertRulePostRequest {
	return &NullableAlertRulePostRequest{value: val, isSet: true}
}

func (v NullableAlertRulePostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertRulePostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
