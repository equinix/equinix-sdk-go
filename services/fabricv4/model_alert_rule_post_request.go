/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// checks if the AlertRulePostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlertRulePostRequest{}

// AlertRulePostRequest Create Stream Alert Rules
type AlertRulePostRequest struct {
	Type AlertRulePostRequestType `json:"type"`
	// Customer-provided stream name
	Name string `json:"name"`
	// Customer-provided stream description
	Description *string `json:"description,omitempty"`
	// Stream alert rule enabled status
	Enabled              *bool            `json:"enabled,omitempty"`
	MetricSelector       MetricSelector   `json:"metricSelector"`
	ResourceSelector     ResourceSelector `json:"resourceSelector"`
	DetectionMethod      DetectionMethod  `json:"detectionMethod"`
	AdditionalProperties map[string]interface{}
}

type _AlertRulePostRequest AlertRulePostRequest

// NewAlertRulePostRequest instantiates a new AlertRulePostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertRulePostRequest(type_ AlertRulePostRequestType, name string, metricSelector MetricSelector, resourceSelector ResourceSelector, detectionMethod DetectionMethod) *AlertRulePostRequest {
	this := AlertRulePostRequest{}
	this.Type = type_
	this.Name = name
	var enabled bool = true
	this.Enabled = &enabled
	this.MetricSelector = metricSelector
	this.ResourceSelector = resourceSelector
	this.DetectionMethod = detectionMethod
	return &this
}

// NewAlertRulePostRequestWithDefaults instantiates a new AlertRulePostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertRulePostRequestWithDefaults() *AlertRulePostRequest {
	this := AlertRulePostRequest{}
	var enabled bool = true
	this.Enabled = &enabled
	return &this
}

// GetType returns the Type field value
func (o *AlertRulePostRequest) GetType() AlertRulePostRequestType {
	if o == nil {
		var ret AlertRulePostRequestType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AlertRulePostRequest) GetTypeOk() (*AlertRulePostRequestType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AlertRulePostRequest) SetType(v AlertRulePostRequestType) {
	o.Type = v
}

// GetName returns the Name field value
func (o *AlertRulePostRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AlertRulePostRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AlertRulePostRequest) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AlertRulePostRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRulePostRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AlertRulePostRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AlertRulePostRequest) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *AlertRulePostRequest) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRulePostRequest) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *AlertRulePostRequest) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *AlertRulePostRequest) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetMetricSelector returns the MetricSelector field value
func (o *AlertRulePostRequest) GetMetricSelector() MetricSelector {
	if o == nil {
		var ret MetricSelector
		return ret
	}

	return o.MetricSelector
}

// GetMetricSelectorOk returns a tuple with the MetricSelector field value
// and a boolean to check if the value has been set.
func (o *AlertRulePostRequest) GetMetricSelectorOk() (*MetricSelector, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetricSelector, true
}

// SetMetricSelector sets field value
func (o *AlertRulePostRequest) SetMetricSelector(v MetricSelector) {
	o.MetricSelector = v
}

// GetResourceSelector returns the ResourceSelector field value
func (o *AlertRulePostRequest) GetResourceSelector() ResourceSelector {
	if o == nil {
		var ret ResourceSelector
		return ret
	}

	return o.ResourceSelector
}

// GetResourceSelectorOk returns a tuple with the ResourceSelector field value
// and a boolean to check if the value has been set.
func (o *AlertRulePostRequest) GetResourceSelectorOk() (*ResourceSelector, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceSelector, true
}

// SetResourceSelector sets field value
func (o *AlertRulePostRequest) SetResourceSelector(v ResourceSelector) {
	o.ResourceSelector = v
}

// GetDetectionMethod returns the DetectionMethod field value
func (o *AlertRulePostRequest) GetDetectionMethod() DetectionMethod {
	if o == nil {
		var ret DetectionMethod
		return ret
	}

	return o.DetectionMethod
}

// GetDetectionMethodOk returns a tuple with the DetectionMethod field value
// and a boolean to check if the value has been set.
func (o *AlertRulePostRequest) GetDetectionMethodOk() (*DetectionMethod, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DetectionMethod, true
}

// SetDetectionMethod sets field value
func (o *AlertRulePostRequest) SetDetectionMethod(v DetectionMethod) {
	o.DetectionMethod = v
}

func (o AlertRulePostRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertRulePostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	toSerialize["metricSelector"] = o.MetricSelector
	toSerialize["resourceSelector"] = o.ResourceSelector
	toSerialize["detectionMethod"] = o.DetectionMethod

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AlertRulePostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"name",
		"metricSelector",
		"resourceSelector",
		"detectionMethod",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAlertRulePostRequest := _AlertRulePostRequest{}

	err = json.Unmarshal(data, &varAlertRulePostRequest)

	if err != nil {
		return err
	}

	*o = AlertRulePostRequest(varAlertRulePostRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "metricSelector")
		delete(additionalProperties, "resourceSelector")
		delete(additionalProperties, "detectionMethod")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAlertRulePostRequest struct {
	value *AlertRulePostRequest
	isSet bool
}

func (v NullableAlertRulePostRequest) Get() *AlertRulePostRequest {
	return v.value
}

func (v *NullableAlertRulePostRequest) Set(val *AlertRulePostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertRulePostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertRulePostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertRulePostRequest(val *AlertRulePostRequest) *NullableAlertRulePostRequest {
	return &NullableAlertRulePostRequest{value: val, isSet: true}
}

func (v NullableAlertRulePostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertRulePostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
