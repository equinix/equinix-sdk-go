/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"time"
)

// checks if the StreamSubscriptionOperationErrors type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StreamSubscriptionOperationErrors{}

// StreamSubscriptionOperationErrors Error information for stream subscription delivery
type StreamSubscriptionOperationErrors struct {
	// Equinix Observability error code
	ErrorCode *string `json:"errorCode,omitempty"`
	// Equinix Observability error message
	ErrorMessage *string `json:"errorMessage,omitempty"`
	// Equinix Observability error date time
	DateTime             *time.Time                                 `json:"dateTime,omitempty"`
	AdditionalInfo       *StreamSubscriptionOperationAdditionalInfo `json:"additionalInfo,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StreamSubscriptionOperationErrors StreamSubscriptionOperationErrors

// NewStreamSubscriptionOperationErrors instantiates a new StreamSubscriptionOperationErrors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStreamSubscriptionOperationErrors() *StreamSubscriptionOperationErrors {
	this := StreamSubscriptionOperationErrors{}
	return &this
}

// NewStreamSubscriptionOperationErrorsWithDefaults instantiates a new StreamSubscriptionOperationErrors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStreamSubscriptionOperationErrorsWithDefaults() *StreamSubscriptionOperationErrors {
	this := StreamSubscriptionOperationErrors{}
	return &this
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *StreamSubscriptionOperationErrors) GetErrorCode() string {
	if o == nil || IsNil(o.ErrorCode) {
		var ret string
		return ret
	}
	return *o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscriptionOperationErrors) GetErrorCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorCode) {
		return nil, false
	}
	return o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *StreamSubscriptionOperationErrors) HasErrorCode() bool {
	if o != nil && !IsNil(o.ErrorCode) {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given string and assigns it to the ErrorCode field.
func (o *StreamSubscriptionOperationErrors) SetErrorCode(v string) {
	o.ErrorCode = &v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *StreamSubscriptionOperationErrors) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage) {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscriptionOperationErrors) GetErrorMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorMessage) {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *StreamSubscriptionOperationErrors) HasErrorMessage() bool {
	if o != nil && !IsNil(o.ErrorMessage) {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *StreamSubscriptionOperationErrors) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

// GetDateTime returns the DateTime field value if set, zero value otherwise.
func (o *StreamSubscriptionOperationErrors) GetDateTime() time.Time {
	if o == nil || IsNil(o.DateTime) {
		var ret time.Time
		return ret
	}
	return *o.DateTime
}

// GetDateTimeOk returns a tuple with the DateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscriptionOperationErrors) GetDateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateTime) {
		return nil, false
	}
	return o.DateTime, true
}

// HasDateTime returns a boolean if a field has been set.
func (o *StreamSubscriptionOperationErrors) HasDateTime() bool {
	if o != nil && !IsNil(o.DateTime) {
		return true
	}

	return false
}

// SetDateTime gets a reference to the given time.Time and assigns it to the DateTime field.
func (o *StreamSubscriptionOperationErrors) SetDateTime(v time.Time) {
	o.DateTime = &v
}

// GetAdditionalInfo returns the AdditionalInfo field value if set, zero value otherwise.
func (o *StreamSubscriptionOperationErrors) GetAdditionalInfo() StreamSubscriptionOperationAdditionalInfo {
	if o == nil || IsNil(o.AdditionalInfo) {
		var ret StreamSubscriptionOperationAdditionalInfo
		return ret
	}
	return *o.AdditionalInfo
}

// GetAdditionalInfoOk returns a tuple with the AdditionalInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscriptionOperationErrors) GetAdditionalInfoOk() (*StreamSubscriptionOperationAdditionalInfo, bool) {
	if o == nil || IsNil(o.AdditionalInfo) {
		return nil, false
	}
	return o.AdditionalInfo, true
}

// HasAdditionalInfo returns a boolean if a field has been set.
func (o *StreamSubscriptionOperationErrors) HasAdditionalInfo() bool {
	if o != nil && !IsNil(o.AdditionalInfo) {
		return true
	}

	return false
}

// SetAdditionalInfo gets a reference to the given StreamSubscriptionOperationAdditionalInfo and assigns it to the AdditionalInfo field.
func (o *StreamSubscriptionOperationErrors) SetAdditionalInfo(v StreamSubscriptionOperationAdditionalInfo) {
	o.AdditionalInfo = &v
}

func (o StreamSubscriptionOperationErrors) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StreamSubscriptionOperationErrors) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ErrorCode) {
		toSerialize["errorCode"] = o.ErrorCode
	}
	if !IsNil(o.ErrorMessage) {
		toSerialize["errorMessage"] = o.ErrorMessage
	}
	if !IsNil(o.DateTime) {
		toSerialize["dateTime"] = o.DateTime
	}
	if !IsNil(o.AdditionalInfo) {
		toSerialize["additionalInfo"] = o.AdditionalInfo
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StreamSubscriptionOperationErrors) UnmarshalJSON(data []byte) (err error) {
	varStreamSubscriptionOperationErrors := _StreamSubscriptionOperationErrors{}

	err = json.Unmarshal(data, &varStreamSubscriptionOperationErrors)

	if err != nil {
		return err
	}

	*o = StreamSubscriptionOperationErrors(varStreamSubscriptionOperationErrors)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "errorCode")
		delete(additionalProperties, "errorMessage")
		delete(additionalProperties, "dateTime")
		delete(additionalProperties, "additionalInfo")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStreamSubscriptionOperationErrors struct {
	value *StreamSubscriptionOperationErrors
	isSet bool
}

func (v NullableStreamSubscriptionOperationErrors) Get() *StreamSubscriptionOperationErrors {
	return v.value
}

func (v *NullableStreamSubscriptionOperationErrors) Set(val *StreamSubscriptionOperationErrors) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamSubscriptionOperationErrors) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamSubscriptionOperationErrors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamSubscriptionOperationErrors(val *StreamSubscriptionOperationErrors) *NullableStreamSubscriptionOperationErrors {
	return &NullableStreamSubscriptionOperationErrors{value: val, isSet: true}
}

func (v NullableStreamSubscriptionOperationErrors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamSubscriptionOperationErrors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
