/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the AuthContext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthContext{}

// AuthContext struct for AuthContext
type AuthContext struct {
	Authtype *AuthContextAuthtype `json:"authtype,omitempty"`
	Authid   *AuthContextAuthid   `json:"authid,omitempty"`
	// Cloud Event username
	Name *string `json:"name,omitempty"`
	// Cloud Event email
	Email                *string `json:"email,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AuthContext AuthContext

// NewAuthContext instantiates a new AuthContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthContext() *AuthContext {
	this := AuthContext{}
	return &this
}

// NewAuthContextWithDefaults instantiates a new AuthContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthContextWithDefaults() *AuthContext {
	this := AuthContext{}
	return &this
}

// GetAuthtype returns the Authtype field value if set, zero value otherwise.
func (o *AuthContext) GetAuthtype() AuthContextAuthtype {
	if o == nil || IsNil(o.Authtype) {
		var ret AuthContextAuthtype
		return ret
	}
	return *o.Authtype
}

// GetAuthtypeOk returns a tuple with the Authtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthContext) GetAuthtypeOk() (*AuthContextAuthtype, bool) {
	if o == nil || IsNil(o.Authtype) {
		return nil, false
	}
	return o.Authtype, true
}

// HasAuthtype returns a boolean if a field has been set.
func (o *AuthContext) HasAuthtype() bool {
	if o != nil && !IsNil(o.Authtype) {
		return true
	}

	return false
}

// SetAuthtype gets a reference to the given AuthContextAuthtype and assigns it to the Authtype field.
func (o *AuthContext) SetAuthtype(v AuthContextAuthtype) {
	o.Authtype = &v
}

// GetAuthid returns the Authid field value if set, zero value otherwise.
func (o *AuthContext) GetAuthid() AuthContextAuthid {
	if o == nil || IsNil(o.Authid) {
		var ret AuthContextAuthid
		return ret
	}
	return *o.Authid
}

// GetAuthidOk returns a tuple with the Authid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthContext) GetAuthidOk() (*AuthContextAuthid, bool) {
	if o == nil || IsNil(o.Authid) {
		return nil, false
	}
	return o.Authid, true
}

// HasAuthid returns a boolean if a field has been set.
func (o *AuthContext) HasAuthid() bool {
	if o != nil && !IsNil(o.Authid) {
		return true
	}

	return false
}

// SetAuthid gets a reference to the given AuthContextAuthid and assigns it to the Authid field.
func (o *AuthContext) SetAuthid(v AuthContextAuthid) {
	o.Authid = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AuthContext) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthContext) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AuthContext) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AuthContext) SetName(v string) {
	o.Name = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *AuthContext) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthContext) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *AuthContext) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *AuthContext) SetEmail(v string) {
	o.Email = &v
}

func (o AuthContext) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthContext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Authtype) {
		toSerialize["authtype"] = o.Authtype
	}
	if !IsNil(o.Authid) {
		toSerialize["authid"] = o.Authid
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AuthContext) UnmarshalJSON(data []byte) (err error) {
	varAuthContext := _AuthContext{}

	err = json.Unmarshal(data, &varAuthContext)

	if err != nil {
		return err
	}

	*o = AuthContext(varAuthContext)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "authtype")
		delete(additionalProperties, "authid")
		delete(additionalProperties, "name")
		delete(additionalProperties, "email")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAuthContext struct {
	value *AuthContext
	isSet bool
}

func (v NullableAuthContext) Get() *AuthContext {
	return v.value
}

func (v *NullableAuthContext) Set(val *AuthContext) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthContext) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthContext(val *AuthContext) *NullableAuthContext {
	return &NullableAuthContext{value: val, isSet: true}
}

func (v NullableAuthContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
