/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the PortOrderSignature type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PortOrderSignature{}

// PortOrderSignature Port signature Type
type PortOrderSignature struct {
	Signatory            *PortOrderSignatureSignatory `json:"signatory,omitempty"`
	Delegate             *PortOrderSignatureDelegate  `json:"delegate,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PortOrderSignature PortOrderSignature

// NewPortOrderSignature instantiates a new PortOrderSignature object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPortOrderSignature() *PortOrderSignature {
	this := PortOrderSignature{}
	return &this
}

// NewPortOrderSignatureWithDefaults instantiates a new PortOrderSignature object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortOrderSignatureWithDefaults() *PortOrderSignature {
	this := PortOrderSignature{}
	return &this
}

// GetSignatory returns the Signatory field value if set, zero value otherwise.
func (o *PortOrderSignature) GetSignatory() PortOrderSignatureSignatory {
	if o == nil || IsNil(o.Signatory) {
		var ret PortOrderSignatureSignatory
		return ret
	}
	return *o.Signatory
}

// GetSignatoryOk returns a tuple with the Signatory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortOrderSignature) GetSignatoryOk() (*PortOrderSignatureSignatory, bool) {
	if o == nil || IsNil(o.Signatory) {
		return nil, false
	}
	return o.Signatory, true
}

// HasSignatory returns a boolean if a field has been set.
func (o *PortOrderSignature) HasSignatory() bool {
	if o != nil && !IsNil(o.Signatory) {
		return true
	}

	return false
}

// SetSignatory gets a reference to the given PortOrderSignatureSignatory and assigns it to the Signatory field.
func (o *PortOrderSignature) SetSignatory(v PortOrderSignatureSignatory) {
	o.Signatory = &v
}

// GetDelegate returns the Delegate field value if set, zero value otherwise.
func (o *PortOrderSignature) GetDelegate() PortOrderSignatureDelegate {
	if o == nil || IsNil(o.Delegate) {
		var ret PortOrderSignatureDelegate
		return ret
	}
	return *o.Delegate
}

// GetDelegateOk returns a tuple with the Delegate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortOrderSignature) GetDelegateOk() (*PortOrderSignatureDelegate, bool) {
	if o == nil || IsNil(o.Delegate) {
		return nil, false
	}
	return o.Delegate, true
}

// HasDelegate returns a boolean if a field has been set.
func (o *PortOrderSignature) HasDelegate() bool {
	if o != nil && !IsNil(o.Delegate) {
		return true
	}

	return false
}

// SetDelegate gets a reference to the given PortOrderSignatureDelegate and assigns it to the Delegate field.
func (o *PortOrderSignature) SetDelegate(v PortOrderSignatureDelegate) {
	o.Delegate = &v
}

func (o PortOrderSignature) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PortOrderSignature) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Signatory) {
		toSerialize["signatory"] = o.Signatory
	}
	if !IsNil(o.Delegate) {
		toSerialize["delegate"] = o.Delegate
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PortOrderSignature) UnmarshalJSON(data []byte) (err error) {
	varPortOrderSignature := _PortOrderSignature{}

	err = json.Unmarshal(data, &varPortOrderSignature)

	if err != nil {
		return err
	}

	*o = PortOrderSignature(varPortOrderSignature)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "signatory")
		delete(additionalProperties, "delegate")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePortOrderSignature struct {
	value *PortOrderSignature
	isSet bool
}

func (v NullablePortOrderSignature) Get() *PortOrderSignature {
	return v.value
}

func (v *NullablePortOrderSignature) Set(val *PortOrderSignature) {
	v.value = val
	v.isSet = true
}

func (v NullablePortOrderSignature) IsSet() bool {
	return v.isSet
}

func (v *NullablePortOrderSignature) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortOrderSignature(val *PortOrderSignature) *NullablePortOrderSignature {
	return &NullablePortOrderSignature{value: val, isSet: true}
}

func (v NullablePortOrderSignature) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortOrderSignature) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
