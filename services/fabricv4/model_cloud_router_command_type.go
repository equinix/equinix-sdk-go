/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// CloudRouterCommandType Fabric Cloud Router Command Type
type CloudRouterCommandType string

// List of CloudRouterCommandType
const (
	CLOUDROUTERCOMMANDTYPE_PING_COMMAND       CloudRouterCommandType = "PING_COMMAND"
	CLOUDROUTERCOMMANDTYPE_TRACEROUTE_COMMAND CloudRouterCommandType = "TRACEROUTE_COMMAND"
)

// All allowed values of CloudRouterCommandType enum
var AllowedCloudRouterCommandTypeEnumValues = []CloudRouterCommandType{
	"PING_COMMAND",
	"TRACEROUTE_COMMAND",
}

func (v *CloudRouterCommandType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CloudRouterCommandType(value)
	for _, existing := range AllowedCloudRouterCommandTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CloudRouterCommandType", value)
}

// NewCloudRouterCommandTypeFromValue returns a pointer to a valid CloudRouterCommandType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCloudRouterCommandTypeFromValue(v string) (*CloudRouterCommandType, error) {
	ev := CloudRouterCommandType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CloudRouterCommandType: valid values are %v", v, AllowedCloudRouterCommandTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CloudRouterCommandType) IsValid() bool {
	for _, existing := range AllowedCloudRouterCommandTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CloudRouterCommandType value
func (v CloudRouterCommandType) Ptr() *CloudRouterCommandType {
	return &v
}

type NullableCloudRouterCommandType struct {
	value *CloudRouterCommandType
	isSet bool
}

func (v NullableCloudRouterCommandType) Get() *CloudRouterCommandType {
	return v.value
}

func (v *NullableCloudRouterCommandType) Set(val *CloudRouterCommandType) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudRouterCommandType) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudRouterCommandType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudRouterCommandType(val *CloudRouterCommandType) *NullableCloudRouterCommandType {
	return &NullableCloudRouterCommandType{value: val, isSet: true}
}

func (v NullableCloudRouterCommandType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudRouterCommandType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
