/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// RoutingProtocolData - struct for RoutingProtocolData
type RoutingProtocolData struct {
	RoutingProtocolBGPData    *RoutingProtocolBGPData
	RoutingProtocolDirectData *RoutingProtocolDirectData
}

// RoutingProtocolBGPDataAsRoutingProtocolData is a convenience function that returns RoutingProtocolBGPData wrapped in RoutingProtocolData
func RoutingProtocolBGPDataAsRoutingProtocolData(v *RoutingProtocolBGPData) RoutingProtocolData {
	return RoutingProtocolData{
		RoutingProtocolBGPData: v,
	}
}

// RoutingProtocolDirectDataAsRoutingProtocolData is a convenience function that returns RoutingProtocolDirectData wrapped in RoutingProtocolData
func RoutingProtocolDirectDataAsRoutingProtocolData(v *RoutingProtocolDirectData) RoutingProtocolData {
	return RoutingProtocolData{
		RoutingProtocolDirectData: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *RoutingProtocolData) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into RoutingProtocolBGPData
	err = newStrictDecoder(data).Decode(&dst.RoutingProtocolBGPData)
	if err == nil {
		jsonRoutingProtocolBGPData, _ := json.Marshal(dst.RoutingProtocolBGPData)
		if string(jsonRoutingProtocolBGPData) == "{}" { // empty struct
			dst.RoutingProtocolBGPData = nil
		} else {
			if err = validator.Validate(dst.RoutingProtocolBGPData); err != nil {
				dst.RoutingProtocolBGPData = nil
			} else {
				match++
			}
		}
	} else {
		dst.RoutingProtocolBGPData = nil
	}

	// try to unmarshal data into RoutingProtocolDirectData
	err = newStrictDecoder(data).Decode(&dst.RoutingProtocolDirectData)
	if err == nil {
		jsonRoutingProtocolDirectData, _ := json.Marshal(dst.RoutingProtocolDirectData)
		if string(jsonRoutingProtocolDirectData) == "{}" { // empty struct
			dst.RoutingProtocolDirectData = nil
		} else {
			if err = validator.Validate(dst.RoutingProtocolDirectData); err != nil {
				dst.RoutingProtocolDirectData = nil
			} else {
				match++
			}
		}
	} else {
		dst.RoutingProtocolDirectData = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.RoutingProtocolBGPData = nil
		dst.RoutingProtocolDirectData = nil

		return fmt.Errorf("data matches more than one schema in oneOf(RoutingProtocolData)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(RoutingProtocolData)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RoutingProtocolData) MarshalJSON() ([]byte, error) {
	if src.RoutingProtocolBGPData != nil {
		return json.Marshal(&src.RoutingProtocolBGPData)
	}

	if src.RoutingProtocolDirectData != nil {
		return json.Marshal(&src.RoutingProtocolDirectData)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RoutingProtocolData) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.RoutingProtocolBGPData != nil {
		return obj.RoutingProtocolBGPData
	}

	if obj.RoutingProtocolDirectData != nil {
		return obj.RoutingProtocolDirectData
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj RoutingProtocolData) GetActualInstanceValue() interface{} {
	if obj.RoutingProtocolBGPData != nil {
		return *obj.RoutingProtocolBGPData
	}

	if obj.RoutingProtocolDirectData != nil {
		return *obj.RoutingProtocolDirectData
	}

	// all schemas are nil
	return nil
}

type NullableRoutingProtocolData struct {
	value *RoutingProtocolData
	isSet bool
}

func (v NullableRoutingProtocolData) Get() *RoutingProtocolData {
	return v.value
}

func (v *NullableRoutingProtocolData) Set(val *RoutingProtocolData) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutingProtocolData) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutingProtocolData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutingProtocolData(val *RoutingProtocolData) *NullableRoutingProtocolData {
	return &NullableRoutingProtocolData{value: val, isSet: true}
}

func (v NullableRoutingProtocolData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutingProtocolData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
