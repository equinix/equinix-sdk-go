/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the CloudEventData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CloudEventData{}

// CloudEventData struct for CloudEventData
type CloudEventData struct {
	// Cloud Event message
	Message              *string       `json:"message,omitempty"`
	Resource             *ResourceData `json:"resource,omitempty"`
	Auth                 *AuthContext  `json:"auth,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CloudEventData CloudEventData

// NewCloudEventData instantiates a new CloudEventData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloudEventData() *CloudEventData {
	this := CloudEventData{}
	return &this
}

// NewCloudEventDataWithDefaults instantiates a new CloudEventData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloudEventDataWithDefaults() *CloudEventData {
	this := CloudEventData{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *CloudEventData) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudEventData) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *CloudEventData) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *CloudEventData) SetMessage(v string) {
	o.Message = &v
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *CloudEventData) GetResource() ResourceData {
	if o == nil || IsNil(o.Resource) {
		var ret ResourceData
		return ret
	}
	return *o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudEventData) GetResourceOk() (*ResourceData, bool) {
	if o == nil || IsNil(o.Resource) {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *CloudEventData) HasResource() bool {
	if o != nil && !IsNil(o.Resource) {
		return true
	}

	return false
}

// SetResource gets a reference to the given ResourceData and assigns it to the Resource field.
func (o *CloudEventData) SetResource(v ResourceData) {
	o.Resource = &v
}

// GetAuth returns the Auth field value if set, zero value otherwise.
func (o *CloudEventData) GetAuth() AuthContext {
	if o == nil || IsNil(o.Auth) {
		var ret AuthContext
		return ret
	}
	return *o.Auth
}

// GetAuthOk returns a tuple with the Auth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudEventData) GetAuthOk() (*AuthContext, bool) {
	if o == nil || IsNil(o.Auth) {
		return nil, false
	}
	return o.Auth, true
}

// HasAuth returns a boolean if a field has been set.
func (o *CloudEventData) HasAuth() bool {
	if o != nil && !IsNil(o.Auth) {
		return true
	}

	return false
}

// SetAuth gets a reference to the given AuthContext and assigns it to the Auth field.
func (o *CloudEventData) SetAuth(v AuthContext) {
	o.Auth = &v
}

func (o CloudEventData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CloudEventData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Resource) {
		toSerialize["resource"] = o.Resource
	}
	if !IsNil(o.Auth) {
		toSerialize["auth"] = o.Auth
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CloudEventData) UnmarshalJSON(data []byte) (err error) {
	varCloudEventData := _CloudEventData{}

	err = json.Unmarshal(data, &varCloudEventData)

	if err != nil {
		return err
	}

	*o = CloudEventData(varCloudEventData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "message")
		delete(additionalProperties, "resource")
		delete(additionalProperties, "auth")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCloudEventData struct {
	value *CloudEventData
	isSet bool
}

func (v NullableCloudEventData) Get() *CloudEventData {
	return v.value
}

func (v *NullableCloudEventData) Set(val *CloudEventData) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudEventData) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudEventData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudEventData(val *CloudEventData) *NullableCloudEventData {
	return &NullableCloudEventData{value: val, isSet: true}
}

func (v NullableCloudEventData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudEventData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
