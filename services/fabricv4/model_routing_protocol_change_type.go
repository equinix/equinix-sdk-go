/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// RoutingProtocolChangeType Type of change
type RoutingProtocolChangeType string

// List of RoutingProtocolChange_type
const (
	ROUTINGPROTOCOLCHANGETYPE_UPDATE   RoutingProtocolChangeType = "ROUTING_PROTOCOL_UPDATE"
	ROUTINGPROTOCOLCHANGETYPE_CREATION RoutingProtocolChangeType = "ROUTING_PROTOCOL_CREATION"
	ROUTINGPROTOCOLCHANGETYPE_DELETION RoutingProtocolChangeType = "ROUTING_PROTOCOL_DELETION"
)

// All allowed values of RoutingProtocolChangeType enum
var AllowedRoutingProtocolChangeTypeEnumValues = []RoutingProtocolChangeType{
	"ROUTING_PROTOCOL_UPDATE",
	"ROUTING_PROTOCOL_CREATION",
	"ROUTING_PROTOCOL_DELETION",
}

func (v *RoutingProtocolChangeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RoutingProtocolChangeType(value)
	for _, existing := range AllowedRoutingProtocolChangeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RoutingProtocolChangeType", value)
}

// NewRoutingProtocolChangeTypeFromValue returns a pointer to a valid RoutingProtocolChangeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRoutingProtocolChangeTypeFromValue(v string) (*RoutingProtocolChangeType, error) {
	ev := RoutingProtocolChangeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RoutingProtocolChangeType: valid values are %v", v, AllowedRoutingProtocolChangeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RoutingProtocolChangeType) IsValid() bool {
	for _, existing := range AllowedRoutingProtocolChangeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RoutingProtocolChange_type value
func (v RoutingProtocolChangeType) Ptr() *RoutingProtocolChangeType {
	return &v
}

type NullableRoutingProtocolChangeType struct {
	value *RoutingProtocolChangeType
	isSet bool
}

func (v NullableRoutingProtocolChangeType) Get() *RoutingProtocolChangeType {
	return v.value
}

func (v *NullableRoutingProtocolChangeType) Set(val *RoutingProtocolChangeType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutingProtocolChangeType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutingProtocolChangeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutingProtocolChangeType(val *RoutingProtocolChangeType) *NullableRoutingProtocolChangeType {
	return &NullableRoutingProtocolChangeType{value: val, isSet: true}
}

func (v NullableRoutingProtocolChangeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutingProtocolChangeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
