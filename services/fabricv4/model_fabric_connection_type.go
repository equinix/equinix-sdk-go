/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// FabricConnectionType the model 'FabricConnectionType'
type FabricConnectionType string

// List of FabricConnection_type
const (
	FABRICCONNECTIONTYPE_IP_VC FabricConnectionType = "IP_VC"
)

// All allowed values of FabricConnectionType enum
var AllowedFabricConnectionTypeEnumValues = []FabricConnectionType{
	"IP_VC",
}

func (v *FabricConnectionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FabricConnectionType(value)
	for _, existing := range AllowedFabricConnectionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FabricConnectionType", value)
}

// NewFabricConnectionTypeFromValue returns a pointer to a valid FabricConnectionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFabricConnectionTypeFromValue(v string) (*FabricConnectionType, error) {
	ev := FabricConnectionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FabricConnectionType: valid values are %v", v, AllowedFabricConnectionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FabricConnectionType) IsValid() bool {
	for _, existing := range AllowedFabricConnectionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FabricConnection_type value
func (v FabricConnectionType) Ptr() *FabricConnectionType {
	return &v
}

type NullableFabricConnectionType struct {
	value *FabricConnectionType
	isSet bool
}

func (v NullableFabricConnectionType) Get() *FabricConnectionType {
	return v.value
}

func (v *NullableFabricConnectionType) Set(val *FabricConnectionType) {
	v.value = val
	v.isSet = true
}

func (v NullableFabricConnectionType) IsSet() bool {
	return v.isSet
}

func (v *NullableFabricConnectionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFabricConnectionType(val *FabricConnectionType) *NullableFabricConnectionType {
	return &NullableFabricConnectionType{value: val, isSet: true}
}

func (v NullableFabricConnectionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFabricConnectionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
