/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// AlertRulePostRequestMetricName Stream alert rule metric name
type AlertRulePostRequestMetricName string

// List of AlertRulePostRequest_metricName
const (
	ALERTRULEPOSTREQUESTMETRICNAME_CONNECTION_BANDWIDTH_TX_USAGE                          AlertRulePostRequestMetricName = "equinix.fabric.connection.bandwidth_tx.usage"
	ALERTRULEPOSTREQUESTMETRICNAME_CONNECTION_BANDWIDTH_RX_USAGE                          AlertRulePostRequestMetricName = "equinix.fabric.connection.bandwidth_rx.usage"
	ALERTRULEPOSTREQUESTMETRICNAME_PORT_BANDWIDTH_TX_USAGE                                AlertRulePostRequestMetricName = "equinix.fabric.port.bandwidth_tx.usage"
	ALERTRULEPOSTREQUESTMETRICNAME_PORT_BANDWIDTH_RX_USAGE                                AlertRulePostRequestMetricName = "equinix.fabric.port.bandwidth_rx.usage"
	ALERTRULEPOSTREQUESTMETRICNAME_PORT_PACKETS_ERRED_TX_COUNT                            AlertRulePostRequestMetricName = "equinix.fabric.port.packets_erred_tx.count"
	ALERTRULEPOSTREQUESTMETRICNAME_PORT_PACKETS_ERRED_RX_COUNT                            AlertRulePostRequestMetricName = "equinix.fabric.port.packets_erred_rx.count"
	ALERTRULEPOSTREQUESTMETRICNAME_PORT_PACKETS_DROPPED_TX_COUNT                          AlertRulePostRequestMetricName = "equinix.fabric.port.packets_dropped_tx.count"
	ALERTRULEPOSTREQUESTMETRICNAME_PORT_PACKETS_DROPPED_RX_COUNT                          AlertRulePostRequestMetricName = "equinix.fabric.port.packets_dropped_rx.count"
	ALERTRULEPOSTREQUESTMETRICNAME_METRO_SOURCE_METRO_CODE_DESTINATION_METRO_CODE_LATENCY AlertRulePostRequestMetricName = "equinix.fabric.metro.<source_metro_code>_<destination_metro_code>.latency"
)

// All allowed values of AlertRulePostRequestMetricName enum
var AllowedAlertRulePostRequestMetricNameEnumValues = []AlertRulePostRequestMetricName{
	"equinix.fabric.connection.bandwidth_tx.usage",
	"equinix.fabric.connection.bandwidth_rx.usage",
	"equinix.fabric.port.bandwidth_tx.usage",
	"equinix.fabric.port.bandwidth_rx.usage",
	"equinix.fabric.port.packets_erred_tx.count",
	"equinix.fabric.port.packets_erred_rx.count",
	"equinix.fabric.port.packets_dropped_tx.count",
	"equinix.fabric.port.packets_dropped_rx.count",
	"equinix.fabric.metro.<source_metro_code>_<destination_metro_code>.latency",
}

func (v *AlertRulePostRequestMetricName) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AlertRulePostRequestMetricName(value)
	for _, existing := range AllowedAlertRulePostRequestMetricNameEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AlertRulePostRequestMetricName", value)
}

// NewAlertRulePostRequestMetricNameFromValue returns a pointer to a valid AlertRulePostRequestMetricName
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAlertRulePostRequestMetricNameFromValue(v string) (*AlertRulePostRequestMetricName, error) {
	ev := AlertRulePostRequestMetricName(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AlertRulePostRequestMetricName: valid values are %v", v, AllowedAlertRulePostRequestMetricNameEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AlertRulePostRequestMetricName) IsValid() bool {
	for _, existing := range AllowedAlertRulePostRequestMetricNameEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AlertRulePostRequest_metricName value
func (v AlertRulePostRequestMetricName) Ptr() *AlertRulePostRequestMetricName {
	return &v
}

type NullableAlertRulePostRequestMetricName struct {
	value *AlertRulePostRequestMetricName
	isSet bool
}

func (v NullableAlertRulePostRequestMetricName) Get() *AlertRulePostRequestMetricName {
	return v.value
}

func (v *NullableAlertRulePostRequestMetricName) Set(val *AlertRulePostRequestMetricName) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertRulePostRequestMetricName) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertRulePostRequestMetricName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertRulePostRequestMetricName(val *AlertRulePostRequestMetricName) *NullableAlertRulePostRequestMetricName {
	return &NullableAlertRulePostRequestMetricName{value: val, isSet: true}
}

func (v NullableAlertRulePostRequestMetricName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertRulePostRequestMetricName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
