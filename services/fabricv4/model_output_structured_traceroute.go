/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the OutputStructuredTraceroute type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OutputStructuredTraceroute{}

// OutputStructuredTraceroute struct for OutputStructuredTraceroute
type OutputStructuredTraceroute struct {
	DestinationIp        *string `json:"destinationIp,omitempty"`
	DestinationName      *string `json:"destinationName,omitempty"`
	PacketBytes          *int32  `json:"packetBytes,omitempty"`
	HopsMax              *int32  `json:"hopsMax,omitempty"`
	Hops                 []Hop   `json:"hops,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OutputStructuredTraceroute OutputStructuredTraceroute

// NewOutputStructuredTraceroute instantiates a new OutputStructuredTraceroute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutputStructuredTraceroute() *OutputStructuredTraceroute {
	this := OutputStructuredTraceroute{}
	return &this
}

// NewOutputStructuredTracerouteWithDefaults instantiates a new OutputStructuredTraceroute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutputStructuredTracerouteWithDefaults() *OutputStructuredTraceroute {
	this := OutputStructuredTraceroute{}
	return &this
}

// GetDestinationIp returns the DestinationIp field value if set, zero value otherwise.
func (o *OutputStructuredTraceroute) GetDestinationIp() string {
	if o == nil || IsNil(o.DestinationIp) {
		var ret string
		return ret
	}
	return *o.DestinationIp
}

// GetDestinationIpOk returns a tuple with the DestinationIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputStructuredTraceroute) GetDestinationIpOk() (*string, bool) {
	if o == nil || IsNil(o.DestinationIp) {
		return nil, false
	}
	return o.DestinationIp, true
}

// HasDestinationIp returns a boolean if a field has been set.
func (o *OutputStructuredTraceroute) HasDestinationIp() bool {
	if o != nil && !IsNil(o.DestinationIp) {
		return true
	}

	return false
}

// SetDestinationIp gets a reference to the given string and assigns it to the DestinationIp field.
func (o *OutputStructuredTraceroute) SetDestinationIp(v string) {
	o.DestinationIp = &v
}

// GetDestinationName returns the DestinationName field value if set, zero value otherwise.
func (o *OutputStructuredTraceroute) GetDestinationName() string {
	if o == nil || IsNil(o.DestinationName) {
		var ret string
		return ret
	}
	return *o.DestinationName
}

// GetDestinationNameOk returns a tuple with the DestinationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputStructuredTraceroute) GetDestinationNameOk() (*string, bool) {
	if o == nil || IsNil(o.DestinationName) {
		return nil, false
	}
	return o.DestinationName, true
}

// HasDestinationName returns a boolean if a field has been set.
func (o *OutputStructuredTraceroute) HasDestinationName() bool {
	if o != nil && !IsNil(o.DestinationName) {
		return true
	}

	return false
}

// SetDestinationName gets a reference to the given string and assigns it to the DestinationName field.
func (o *OutputStructuredTraceroute) SetDestinationName(v string) {
	o.DestinationName = &v
}

// GetPacketBytes returns the PacketBytes field value if set, zero value otherwise.
func (o *OutputStructuredTraceroute) GetPacketBytes() int32 {
	if o == nil || IsNil(o.PacketBytes) {
		var ret int32
		return ret
	}
	return *o.PacketBytes
}

// GetPacketBytesOk returns a tuple with the PacketBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputStructuredTraceroute) GetPacketBytesOk() (*int32, bool) {
	if o == nil || IsNil(o.PacketBytes) {
		return nil, false
	}
	return o.PacketBytes, true
}

// HasPacketBytes returns a boolean if a field has been set.
func (o *OutputStructuredTraceroute) HasPacketBytes() bool {
	if o != nil && !IsNil(o.PacketBytes) {
		return true
	}

	return false
}

// SetPacketBytes gets a reference to the given int32 and assigns it to the PacketBytes field.
func (o *OutputStructuredTraceroute) SetPacketBytes(v int32) {
	o.PacketBytes = &v
}

// GetHopsMax returns the HopsMax field value if set, zero value otherwise.
func (o *OutputStructuredTraceroute) GetHopsMax() int32 {
	if o == nil || IsNil(o.HopsMax) {
		var ret int32
		return ret
	}
	return *o.HopsMax
}

// GetHopsMaxOk returns a tuple with the HopsMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputStructuredTraceroute) GetHopsMaxOk() (*int32, bool) {
	if o == nil || IsNil(o.HopsMax) {
		return nil, false
	}
	return o.HopsMax, true
}

// HasHopsMax returns a boolean if a field has been set.
func (o *OutputStructuredTraceroute) HasHopsMax() bool {
	if o != nil && !IsNil(o.HopsMax) {
		return true
	}

	return false
}

// SetHopsMax gets a reference to the given int32 and assigns it to the HopsMax field.
func (o *OutputStructuredTraceroute) SetHopsMax(v int32) {
	o.HopsMax = &v
}

// GetHops returns the Hops field value if set, zero value otherwise.
func (o *OutputStructuredTraceroute) GetHops() []Hop {
	if o == nil || IsNil(o.Hops) {
		var ret []Hop
		return ret
	}
	return o.Hops
}

// GetHopsOk returns a tuple with the Hops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputStructuredTraceroute) GetHopsOk() ([]Hop, bool) {
	if o == nil || IsNil(o.Hops) {
		return nil, false
	}
	return o.Hops, true
}

// HasHops returns a boolean if a field has been set.
func (o *OutputStructuredTraceroute) HasHops() bool {
	if o != nil && !IsNil(o.Hops) {
		return true
	}

	return false
}

// SetHops gets a reference to the given []Hop and assigns it to the Hops field.
func (o *OutputStructuredTraceroute) SetHops(v []Hop) {
	o.Hops = v
}

func (o OutputStructuredTraceroute) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OutputStructuredTraceroute) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DestinationIp) {
		toSerialize["destinationIp"] = o.DestinationIp
	}
	if !IsNil(o.DestinationName) {
		toSerialize["destinationName"] = o.DestinationName
	}
	if !IsNil(o.PacketBytes) {
		toSerialize["packetBytes"] = o.PacketBytes
	}
	if !IsNil(o.HopsMax) {
		toSerialize["hopsMax"] = o.HopsMax
	}
	if !IsNil(o.Hops) {
		toSerialize["hops"] = o.Hops
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OutputStructuredTraceroute) UnmarshalJSON(data []byte) (err error) {
	varOutputStructuredTraceroute := _OutputStructuredTraceroute{}

	err = json.Unmarshal(data, &varOutputStructuredTraceroute)

	if err != nil {
		return err
	}

	*o = OutputStructuredTraceroute(varOutputStructuredTraceroute)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "destinationIp")
		delete(additionalProperties, "destinationName")
		delete(additionalProperties, "packetBytes")
		delete(additionalProperties, "hopsMax")
		delete(additionalProperties, "hops")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOutputStructuredTraceroute struct {
	value *OutputStructuredTraceroute
	isSet bool
}

func (v NullableOutputStructuredTraceroute) Get() *OutputStructuredTraceroute {
	return v.value
}

func (v *NullableOutputStructuredTraceroute) Set(val *OutputStructuredTraceroute) {
	v.value = val
	v.isSet = true
}

func (v NullableOutputStructuredTraceroute) IsSet() bool {
	return v.isSet
}

func (v *NullableOutputStructuredTraceroute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutputStructuredTraceroute(val *OutputStructuredTraceroute) *NullableOutputStructuredTraceroute {
	return &NullableOutputStructuredTraceroute{value: val, isSet: true}
}

func (v NullableOutputStructuredTraceroute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutputStructuredTraceroute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
