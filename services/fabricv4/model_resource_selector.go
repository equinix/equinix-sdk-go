/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the ResourceSelector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceSelector{}

// ResourceSelector struct for ResourceSelector
type ResourceSelector struct {
	// ### Supported metric names to use on filters with property /subject:   * `/fabric/v4/ports/<uuid>` - port metrics   * `/fabric/v4/connections/<uuid>` - connection metrics   * `/fabric/v4/metros/<metroCode>` - metro latency metrics
	Include              []string `json:"include,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ResourceSelector ResourceSelector

// NewResourceSelector instantiates a new ResourceSelector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceSelector() *ResourceSelector {
	this := ResourceSelector{}
	return &this
}

// NewResourceSelectorWithDefaults instantiates a new ResourceSelector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceSelectorWithDefaults() *ResourceSelector {
	this := ResourceSelector{}
	return &this
}

// GetInclude returns the Include field value if set, zero value otherwise.
func (o *ResourceSelector) GetInclude() []string {
	if o == nil || IsNil(o.Include) {
		var ret []string
		return ret
	}
	return o.Include
}

// GetIncludeOk returns a tuple with the Include field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceSelector) GetIncludeOk() ([]string, bool) {
	if o == nil || IsNil(o.Include) {
		return nil, false
	}
	return o.Include, true
}

// HasInclude returns a boolean if a field has been set.
func (o *ResourceSelector) HasInclude() bool {
	if o != nil && !IsNil(o.Include) {
		return true
	}

	return false
}

// SetInclude gets a reference to the given []string and assigns it to the Include field.
func (o *ResourceSelector) SetInclude(v []string) {
	o.Include = v
}

func (o ResourceSelector) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceSelector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Include) {
		toSerialize["include"] = o.Include
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ResourceSelector) UnmarshalJSON(data []byte) (err error) {
	varResourceSelector := _ResourceSelector{}

	err = json.Unmarshal(data, &varResourceSelector)

	if err != nil {
		return err
	}

	*o = ResourceSelector(varResourceSelector)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "include")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableResourceSelector struct {
	value *ResourceSelector
	isSet bool
}

func (v NullableResourceSelector) Get() *ResourceSelector {
	return v.value
}

func (v *NullableResourceSelector) Set(val *ResourceSelector) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceSelector(val *ResourceSelector) *NullableResourceSelector {
	return &NullableResourceSelector{value: val, isSet: true}
}

func (v NullableResourceSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
