/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// PackageCode Type of Port Package
type PackageCode string

// List of Package_code
const (
	PACKAGECODE_STANDARD       PackageCode = "STANDARD"
	PACKAGECODE_UNLIMITED      PackageCode = "UNLIMITED"
	PACKAGECODE_UNLIMITED_PLUS PackageCode = "UNLIMITED_PLUS"
)

// All allowed values of PackageCode enum
var AllowedPackageCodeEnumValues = []PackageCode{
	"STANDARD",
	"UNLIMITED",
	"UNLIMITED_PLUS",
}

func (v *PackageCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PackageCode(value)
	for _, existing := range AllowedPackageCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PackageCode", value)
}

// NewPackageCodeFromValue returns a pointer to a valid PackageCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPackageCodeFromValue(v string) (*PackageCode, error) {
	ev := PackageCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PackageCode: valid values are %v", v, AllowedPackageCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PackageCode) IsValid() bool {
	for _, existing := range AllowedPackageCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Package_code value
func (v PackageCode) Ptr() *PackageCode {
	return &v
}

type NullablePackageCode struct {
	value *PackageCode
	isSet bool
}

func (v NullablePackageCode) Get() *PackageCode {
	return v.value
}

func (v *NullablePackageCode) Set(val *PackageCode) {
	v.value = val
	v.isSet = true
}

func (v NullablePackageCode) IsSet() bool {
	return v.isSet
}

func (v *NullablePackageCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePackageCode(val *PackageCode) *NullablePackageCode {
	return &NullablePackageCode{value: val, isSet: true}
}

func (v NullablePackageCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePackageCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
