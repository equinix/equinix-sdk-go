/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the NetworkFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkFilter{}

// NetworkFilter struct for NetworkFilter
type NetworkFilter struct {
	And                  []NetworkFilter         `json:"and,omitempty"`
	Or                   []NetworkFilter         `json:"or,omitempty"`
	Property             *NetworkSearchFieldName `json:"property,omitempty"`
	Operator             *NetworkFilterOperator  `json:"operator,omitempty"`
	Values               []string                `json:"values,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NetworkFilter NetworkFilter

// NewNetworkFilter instantiates a new NetworkFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkFilter() *NetworkFilter {
	this := NetworkFilter{}
	return &this
}

// NewNetworkFilterWithDefaults instantiates a new NetworkFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkFilterWithDefaults() *NetworkFilter {
	this := NetworkFilter{}
	return &this
}

// GetAnd returns the And field value if set, zero value otherwise.
func (o *NetworkFilter) GetAnd() []NetworkFilter {
	if o == nil || IsNil(o.And) {
		var ret []NetworkFilter
		return ret
	}
	return o.And
}

// GetAndOk returns a tuple with the And field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkFilter) GetAndOk() ([]NetworkFilter, bool) {
	if o == nil || IsNil(o.And) {
		return nil, false
	}
	return o.And, true
}

// HasAnd returns a boolean if a field has been set.
func (o *NetworkFilter) HasAnd() bool {
	if o != nil && !IsNil(o.And) {
		return true
	}

	return false
}

// SetAnd gets a reference to the given []NetworkFilter and assigns it to the And field.
func (o *NetworkFilter) SetAnd(v []NetworkFilter) {
	o.And = v
}

// GetOr returns the Or field value if set, zero value otherwise.
func (o *NetworkFilter) GetOr() []NetworkFilter {
	if o == nil || IsNil(o.Or) {
		var ret []NetworkFilter
		return ret
	}
	return o.Or
}

// GetOrOk returns a tuple with the Or field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkFilter) GetOrOk() ([]NetworkFilter, bool) {
	if o == nil || IsNil(o.Or) {
		return nil, false
	}
	return o.Or, true
}

// HasOr returns a boolean if a field has been set.
func (o *NetworkFilter) HasOr() bool {
	if o != nil && !IsNil(o.Or) {
		return true
	}

	return false
}

// SetOr gets a reference to the given []NetworkFilter and assigns it to the Or field.
func (o *NetworkFilter) SetOr(v []NetworkFilter) {
	o.Or = v
}

// GetProperty returns the Property field value if set, zero value otherwise.
func (o *NetworkFilter) GetProperty() NetworkSearchFieldName {
	if o == nil || IsNil(o.Property) {
		var ret NetworkSearchFieldName
		return ret
	}
	return *o.Property
}

// GetPropertyOk returns a tuple with the Property field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkFilter) GetPropertyOk() (*NetworkSearchFieldName, bool) {
	if o == nil || IsNil(o.Property) {
		return nil, false
	}
	return o.Property, true
}

// HasProperty returns a boolean if a field has been set.
func (o *NetworkFilter) HasProperty() bool {
	if o != nil && !IsNil(o.Property) {
		return true
	}

	return false
}

// SetProperty gets a reference to the given NetworkSearchFieldName and assigns it to the Property field.
func (o *NetworkFilter) SetProperty(v NetworkSearchFieldName) {
	o.Property = &v
}

// GetOperator returns the Operator field value if set, zero value otherwise.
func (o *NetworkFilter) GetOperator() NetworkFilterOperator {
	if o == nil || IsNil(o.Operator) {
		var ret NetworkFilterOperator
		return ret
	}
	return *o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkFilter) GetOperatorOk() (*NetworkFilterOperator, bool) {
	if o == nil || IsNil(o.Operator) {
		return nil, false
	}
	return o.Operator, true
}

// HasOperator returns a boolean if a field has been set.
func (o *NetworkFilter) HasOperator() bool {
	if o != nil && !IsNil(o.Operator) {
		return true
	}

	return false
}

// SetOperator gets a reference to the given NetworkFilterOperator and assigns it to the Operator field.
func (o *NetworkFilter) SetOperator(v NetworkFilterOperator) {
	o.Operator = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *NetworkFilter) GetValues() []string {
	if o == nil || IsNil(o.Values) {
		var ret []string
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkFilter) GetValuesOk() ([]string, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *NetworkFilter) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []string and assigns it to the Values field.
func (o *NetworkFilter) SetValues(v []string) {
	o.Values = v
}

func (o NetworkFilter) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.And) {
		toSerialize["and"] = o.And
	}
	if !IsNil(o.Or) {
		toSerialize["or"] = o.Or
	}
	if !IsNil(o.Property) {
		toSerialize["property"] = o.Property
	}
	if !IsNil(o.Operator) {
		toSerialize["operator"] = o.Operator
	}
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NetworkFilter) UnmarshalJSON(data []byte) (err error) {
	varNetworkFilter := _NetworkFilter{}

	err = json.Unmarshal(data, &varNetworkFilter)

	if err != nil {
		return err
	}

	*o = NetworkFilter(varNetworkFilter)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "and")
		delete(additionalProperties, "or")
		delete(additionalProperties, "property")
		delete(additionalProperties, "operator")
		delete(additionalProperties, "values")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNetworkFilter struct {
	value *NetworkFilter
	isSet bool
}

func (v NullableNetworkFilter) Get() *NetworkFilter {
	return v.value
}

func (v *NullableNetworkFilter) Set(val *NetworkFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkFilter(val *NetworkFilter) *NullableNetworkFilter {
	return &NullableNetworkFilter{value: val, isSet: true}
}

func (v NullableNetworkFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
