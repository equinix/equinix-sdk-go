/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// CloudRouterSortBy Possible field names to use on sorting
type CloudRouterSortBy string

// List of CloudRouterSortBy
const (
	CLOUDROUTERSORTBY_NAME                         CloudRouterSortBy = "/name"
	CLOUDROUTERSORTBY_UUID                         CloudRouterSortBy = "/uuid"
	CLOUDROUTERSORTBY_STATE                        CloudRouterSortBy = "/state"
	CLOUDROUTERSORTBY_LOCATION_METRO_CODE          CloudRouterSortBy = "/location/metroCode"
	CLOUDROUTERSORTBY_LOCATION_METRO_NAME          CloudRouterSortBy = "/location/metroName"
	CLOUDROUTERSORTBY_PACKAGE_CODE                 CloudRouterSortBy = "/package/code"
	CLOUDROUTERSORTBY_CHANGE_LOG_CREATED_DATE_TIME CloudRouterSortBy = "/changeLog/createdDateTime"
	CLOUDROUTERSORTBY_CHANGE_LOG_UPDATED_DATE_TIME CloudRouterSortBy = "/changeLog/updatedDateTime"
)

// All allowed values of CloudRouterSortBy enum
var AllowedCloudRouterSortByEnumValues = []CloudRouterSortBy{
	"/name",
	"/uuid",
	"/state",
	"/location/metroCode",
	"/location/metroName",
	"/package/code",
	"/changeLog/createdDateTime",
	"/changeLog/updatedDateTime",
}

func (v *CloudRouterSortBy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CloudRouterSortBy(value)
	for _, existing := range AllowedCloudRouterSortByEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CloudRouterSortBy", value)
}

// NewCloudRouterSortByFromValue returns a pointer to a valid CloudRouterSortBy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCloudRouterSortByFromValue(v string) (*CloudRouterSortBy, error) {
	ev := CloudRouterSortBy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CloudRouterSortBy: valid values are %v", v, AllowedCloudRouterSortByEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CloudRouterSortBy) IsValid() bool {
	for _, existing := range AllowedCloudRouterSortByEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CloudRouterSortBy value
func (v CloudRouterSortBy) Ptr() *CloudRouterSortBy {
	return &v
}

type NullableCloudRouterSortBy struct {
	value *CloudRouterSortBy
	isSet bool
}

func (v NullableCloudRouterSortBy) Get() *CloudRouterSortBy {
	return v.value
}

func (v *NullableCloudRouterSortBy) Set(val *CloudRouterSortBy) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudRouterSortBy) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudRouterSortBy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudRouterSortBy(val *CloudRouterSortBy) *NullableCloudRouterSortBy {
	return &NullableCloudRouterSortBy{value: val, isSet: true}
}

func (v NullableCloudRouterSortBy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudRouterSortBy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
