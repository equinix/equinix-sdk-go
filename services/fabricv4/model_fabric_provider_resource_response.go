/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// FabricProviderResourceResponse - struct for FabricProviderResourceResponse
type FabricProviderResourceResponse struct {
	FabricConnectionResponse     *FabricConnectionResponse
	FabricRouteProtocolsResponse *FabricRouteProtocolsResponse
	FabricRouterResponse         *FabricRouterResponse
}

// FabricConnectionResponseAsFabricProviderResourceResponse is a convenience function that returns FabricConnectionResponse wrapped in FabricProviderResourceResponse
func FabricConnectionResponseAsFabricProviderResourceResponse(v *FabricConnectionResponse) FabricProviderResourceResponse {
	return FabricProviderResourceResponse{
		FabricConnectionResponse: v,
	}
}

// FabricRouteProtocolsResponseAsFabricProviderResourceResponse is a convenience function that returns FabricRouteProtocolsResponse wrapped in FabricProviderResourceResponse
func FabricRouteProtocolsResponseAsFabricProviderResourceResponse(v *FabricRouteProtocolsResponse) FabricProviderResourceResponse {
	return FabricProviderResourceResponse{
		FabricRouteProtocolsResponse: v,
	}
}

// FabricRouterResponseAsFabricProviderResourceResponse is a convenience function that returns FabricRouterResponse wrapped in FabricProviderResourceResponse
func FabricRouterResponseAsFabricProviderResourceResponse(v *FabricRouterResponse) FabricProviderResourceResponse {
	return FabricProviderResourceResponse{
		FabricRouterResponse: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *FabricProviderResourceResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into FabricConnectionResponse
	err = newStrictDecoder(data).Decode(&dst.FabricConnectionResponse)
	if err == nil {
		jsonFabricConnectionResponse, _ := json.Marshal(dst.FabricConnectionResponse)
		if string(jsonFabricConnectionResponse) == "{}" { // empty struct
			dst.FabricConnectionResponse = nil
		} else {
			if err = validator.Validate(dst.FabricConnectionResponse); err != nil {
				dst.FabricConnectionResponse = nil
			} else {
				match++
			}
		}
	} else {
		dst.FabricConnectionResponse = nil
	}

	// try to unmarshal data into FabricRouteProtocolsResponse
	err = newStrictDecoder(data).Decode(&dst.FabricRouteProtocolsResponse)
	if err == nil {
		jsonFabricRouteProtocolsResponse, _ := json.Marshal(dst.FabricRouteProtocolsResponse)
		if string(jsonFabricRouteProtocolsResponse) == "{}" { // empty struct
			dst.FabricRouteProtocolsResponse = nil
		} else {
			if err = validator.Validate(dst.FabricRouteProtocolsResponse); err != nil {
				dst.FabricRouteProtocolsResponse = nil
			} else {
				match++
			}
		}
	} else {
		dst.FabricRouteProtocolsResponse = nil
	}

	// try to unmarshal data into FabricRouterResponse
	err = newStrictDecoder(data).Decode(&dst.FabricRouterResponse)
	if err == nil {
		jsonFabricRouterResponse, _ := json.Marshal(dst.FabricRouterResponse)
		if string(jsonFabricRouterResponse) == "{}" { // empty struct
			dst.FabricRouterResponse = nil
		} else {
			if err = validator.Validate(dst.FabricRouterResponse); err != nil {
				dst.FabricRouterResponse = nil
			} else {
				match++
			}
		}
	} else {
		dst.FabricRouterResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.FabricConnectionResponse = nil
		dst.FabricRouteProtocolsResponse = nil
		dst.FabricRouterResponse = nil

		return fmt.Errorf("data matches more than one schema in oneOf(FabricProviderResourceResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(FabricProviderResourceResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src FabricProviderResourceResponse) MarshalJSON() ([]byte, error) {
	if src.FabricConnectionResponse != nil {
		return json.Marshal(&src.FabricConnectionResponse)
	}

	if src.FabricRouteProtocolsResponse != nil {
		return json.Marshal(&src.FabricRouteProtocolsResponse)
	}

	if src.FabricRouterResponse != nil {
		return json.Marshal(&src.FabricRouterResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *FabricProviderResourceResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.FabricConnectionResponse != nil {
		return obj.FabricConnectionResponse
	}

	if obj.FabricRouteProtocolsResponse != nil {
		return obj.FabricRouteProtocolsResponse
	}

	if obj.FabricRouterResponse != nil {
		return obj.FabricRouterResponse
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj FabricProviderResourceResponse) GetActualInstanceValue() interface{} {
	if obj.FabricConnectionResponse != nil {
		return *obj.FabricConnectionResponse
	}

	if obj.FabricRouteProtocolsResponse != nil {
		return *obj.FabricRouteProtocolsResponse
	}

	if obj.FabricRouterResponse != nil {
		return *obj.FabricRouterResponse
	}

	// all schemas are nil
	return nil
}

type NullableFabricProviderResourceResponse struct {
	value *FabricProviderResourceResponse
	isSet bool
}

func (v NullableFabricProviderResourceResponse) Get() *FabricProviderResourceResponse {
	return v.value
}

func (v *NullableFabricProviderResourceResponse) Set(val *FabricProviderResourceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFabricProviderResourceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFabricProviderResourceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFabricProviderResourceResponse(val *FabricProviderResourceResponse) *NullableFabricProviderResourceResponse {
	return &NullableFabricProviderResourceResponse{value: val, isSet: true}
}

func (v NullableFabricProviderResourceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFabricProviderResourceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
