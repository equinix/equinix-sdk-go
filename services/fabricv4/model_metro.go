/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the Metro type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Metro{}

// Metro GET Metros retrieves all Equinix? Fabric? metros, as well as latency data for each location.This performance data helps network planning engineers and administrators make strategic decisions about port locations and traffic routes.
type Metro struct {
	// The Canonical URL at which the resource resides.
	Href *string `json:"href,omitempty"`
	// Indicator of a Fabric Metro
	Type *string `json:"type,omitempty"`
	// Code Assigned to an Equinix IBX data center in a specified metropolitan area.
	Code *string `json:"code,omitempty"`
	// Board geographic area in which the data center is located
	Region *string `json:"region,omitempty"`
	// Name of the region in which the data center is located.
	Name *string `json:"name,omitempty"`
	// Autonomous system number (ASN) for a specified Fabric metro. The ASN is a unique identifier that carries the network routing protocol and exchanges that data with other internal systems via border gateway protocol.
	EquinixAsn *int64 `json:"equinixAsn,omitempty"`
	// This field holds Max Connection speed with in the metro
	LocalVCBandwidthMax *int64           `json:"localVCBandwidthMax,omitempty"`
	GeoCoordinates      *GeoCoordinates  `json:"geoCoordinates,omitempty"`
	ConnectedMetros     []ConnectedMetro `json:"connectedMetros,omitempty"`
	// List of supported geographic boundaries of a Fabric Metro.
	GeoScopes            []GeoScopeType `json:"geoScopes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Metro Metro

// NewMetro instantiates a new Metro object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetro() *Metro {
	this := Metro{}
	return &this
}

// NewMetroWithDefaults instantiates a new Metro object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetroWithDefaults() *Metro {
	this := Metro{}
	return &this
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *Metro) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metro) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *Metro) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *Metro) SetHref(v string) {
	o.Href = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Metro) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metro) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Metro) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Metro) SetType(v string) {
	o.Type = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *Metro) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metro) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *Metro) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *Metro) SetCode(v string) {
	o.Code = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *Metro) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metro) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *Metro) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *Metro) SetRegion(v string) {
	o.Region = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Metro) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metro) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Metro) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Metro) SetName(v string) {
	o.Name = &v
}

// GetEquinixAsn returns the EquinixAsn field value if set, zero value otherwise.
func (o *Metro) GetEquinixAsn() int64 {
	if o == nil || IsNil(o.EquinixAsn) {
		var ret int64
		return ret
	}
	return *o.EquinixAsn
}

// GetEquinixAsnOk returns a tuple with the EquinixAsn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metro) GetEquinixAsnOk() (*int64, bool) {
	if o == nil || IsNil(o.EquinixAsn) {
		return nil, false
	}
	return o.EquinixAsn, true
}

// HasEquinixAsn returns a boolean if a field has been set.
func (o *Metro) HasEquinixAsn() bool {
	if o != nil && !IsNil(o.EquinixAsn) {
		return true
	}

	return false
}

// SetEquinixAsn gets a reference to the given int64 and assigns it to the EquinixAsn field.
func (o *Metro) SetEquinixAsn(v int64) {
	o.EquinixAsn = &v
}

// GetLocalVCBandwidthMax returns the LocalVCBandwidthMax field value if set, zero value otherwise.
func (o *Metro) GetLocalVCBandwidthMax() int64 {
	if o == nil || IsNil(o.LocalVCBandwidthMax) {
		var ret int64
		return ret
	}
	return *o.LocalVCBandwidthMax
}

// GetLocalVCBandwidthMaxOk returns a tuple with the LocalVCBandwidthMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metro) GetLocalVCBandwidthMaxOk() (*int64, bool) {
	if o == nil || IsNil(o.LocalVCBandwidthMax) {
		return nil, false
	}
	return o.LocalVCBandwidthMax, true
}

// HasLocalVCBandwidthMax returns a boolean if a field has been set.
func (o *Metro) HasLocalVCBandwidthMax() bool {
	if o != nil && !IsNil(o.LocalVCBandwidthMax) {
		return true
	}

	return false
}

// SetLocalVCBandwidthMax gets a reference to the given int64 and assigns it to the LocalVCBandwidthMax field.
func (o *Metro) SetLocalVCBandwidthMax(v int64) {
	o.LocalVCBandwidthMax = &v
}

// GetGeoCoordinates returns the GeoCoordinates field value if set, zero value otherwise.
func (o *Metro) GetGeoCoordinates() GeoCoordinates {
	if o == nil || IsNil(o.GeoCoordinates) {
		var ret GeoCoordinates
		return ret
	}
	return *o.GeoCoordinates
}

// GetGeoCoordinatesOk returns a tuple with the GeoCoordinates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metro) GetGeoCoordinatesOk() (*GeoCoordinates, bool) {
	if o == nil || IsNil(o.GeoCoordinates) {
		return nil, false
	}
	return o.GeoCoordinates, true
}

// HasGeoCoordinates returns a boolean if a field has been set.
func (o *Metro) HasGeoCoordinates() bool {
	if o != nil && !IsNil(o.GeoCoordinates) {
		return true
	}

	return false
}

// SetGeoCoordinates gets a reference to the given GeoCoordinates and assigns it to the GeoCoordinates field.
func (o *Metro) SetGeoCoordinates(v GeoCoordinates) {
	o.GeoCoordinates = &v
}

// GetConnectedMetros returns the ConnectedMetros field value if set, zero value otherwise.
func (o *Metro) GetConnectedMetros() []ConnectedMetro {
	if o == nil || IsNil(o.ConnectedMetros) {
		var ret []ConnectedMetro
		return ret
	}
	return o.ConnectedMetros
}

// GetConnectedMetrosOk returns a tuple with the ConnectedMetros field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metro) GetConnectedMetrosOk() ([]ConnectedMetro, bool) {
	if o == nil || IsNil(o.ConnectedMetros) {
		return nil, false
	}
	return o.ConnectedMetros, true
}

// HasConnectedMetros returns a boolean if a field has been set.
func (o *Metro) HasConnectedMetros() bool {
	if o != nil && !IsNil(o.ConnectedMetros) {
		return true
	}

	return false
}

// SetConnectedMetros gets a reference to the given []ConnectedMetro and assigns it to the ConnectedMetros field.
func (o *Metro) SetConnectedMetros(v []ConnectedMetro) {
	o.ConnectedMetros = v
}

// GetGeoScopes returns the GeoScopes field value if set, zero value otherwise.
func (o *Metro) GetGeoScopes() []GeoScopeType {
	if o == nil || IsNil(o.GeoScopes) {
		var ret []GeoScopeType
		return ret
	}
	return o.GeoScopes
}

// GetGeoScopesOk returns a tuple with the GeoScopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metro) GetGeoScopesOk() ([]GeoScopeType, bool) {
	if o == nil || IsNil(o.GeoScopes) {
		return nil, false
	}
	return o.GeoScopes, true
}

// HasGeoScopes returns a boolean if a field has been set.
func (o *Metro) HasGeoScopes() bool {
	if o != nil && !IsNil(o.GeoScopes) {
		return true
	}

	return false
}

// SetGeoScopes gets a reference to the given []GeoScopeType and assigns it to the GeoScopes field.
func (o *Metro) SetGeoScopes(v []GeoScopeType) {
	o.GeoScopes = v
}

func (o Metro) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Metro) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.EquinixAsn) {
		toSerialize["equinixAsn"] = o.EquinixAsn
	}
	if !IsNil(o.LocalVCBandwidthMax) {
		toSerialize["localVCBandwidthMax"] = o.LocalVCBandwidthMax
	}
	if !IsNil(o.GeoCoordinates) {
		toSerialize["geoCoordinates"] = o.GeoCoordinates
	}
	if !IsNil(o.ConnectedMetros) {
		toSerialize["connectedMetros"] = o.ConnectedMetros
	}
	if !IsNil(o.GeoScopes) {
		toSerialize["geoScopes"] = o.GeoScopes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Metro) UnmarshalJSON(data []byte) (err error) {
	varMetro := _Metro{}

	err = json.Unmarshal(data, &varMetro)

	if err != nil {
		return err
	}

	*o = Metro(varMetro)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "href")
		delete(additionalProperties, "type")
		delete(additionalProperties, "code")
		delete(additionalProperties, "region")
		delete(additionalProperties, "name")
		delete(additionalProperties, "equinixAsn")
		delete(additionalProperties, "localVCBandwidthMax")
		delete(additionalProperties, "geoCoordinates")
		delete(additionalProperties, "connectedMetros")
		delete(additionalProperties, "geoScopes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMetro struct {
	value *Metro
	isSet bool
}

func (v NullableMetro) Get() *Metro {
	return v.value
}

func (v *NullableMetro) Set(val *Metro) {
	v.value = val
	v.isSet = true
}

func (v NullableMetro) IsSet() bool {
	return v.isSet
}

func (v *NullableMetro) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetro(val *Metro) *NullableMetro {
	return &NullableMetro{value: val, isSet: true}
}

func (v NullableMetro) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetro) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
