/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the PeeringConnectionResIpv4 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PeeringConnectionResIpv4{}

// PeeringConnectionResIpv4 BGP IPv4 Connection Details
type PeeringConnectionResIpv4 struct {
	// Customer peer IPv4 address
	CustomerPeerIp *string `json:"customerPeerIp,omitempty"`
	// Primary Equinix peer IPv4 address
	PrimaryEquinixPeerIp *string `json:"primaryEquinixPeerIp,omitempty"`
	// Secondary Equinix peer IPv4 address
	SecondaryEquinixPeerIp *string `json:"secondaryEquinixPeerIp,omitempty"`
	// Reverse DNS address for the BGP session
	ReverseDnsAddress *string `json:"reverseDnsAddress,omitempty"`
	// Autonomous System Set for the BGP session
	AsSet *string `json:"asSet,omitempty"`
	// Whether MLPE is enabled for the BGP session
	MlpeEnabled *bool                              `json:"mlpeEnabled,omitempty"`
	AuthKeys    []PeeringConnectionResIpv4AuthKeys `json:"authKeys,omitempty"`
	// List of IP prefixes for the BGP session
	IpPrefixes []string `json:"ipPrefixes,omitempty"`
	// Whether BGP IPv4 is enabled
	Enabled              *bool `json:"enabled,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PeeringConnectionResIpv4 PeeringConnectionResIpv4

// NewPeeringConnectionResIpv4 instantiates a new PeeringConnectionResIpv4 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPeeringConnectionResIpv4() *PeeringConnectionResIpv4 {
	this := PeeringConnectionResIpv4{}
	return &this
}

// NewPeeringConnectionResIpv4WithDefaults instantiates a new PeeringConnectionResIpv4 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPeeringConnectionResIpv4WithDefaults() *PeeringConnectionResIpv4 {
	this := PeeringConnectionResIpv4{}
	return &this
}

// GetCustomerPeerIp returns the CustomerPeerIp field value if set, zero value otherwise.
func (o *PeeringConnectionResIpv4) GetCustomerPeerIp() string {
	if o == nil || IsNil(o.CustomerPeerIp) {
		var ret string
		return ret
	}
	return *o.CustomerPeerIp
}

// GetCustomerPeerIpOk returns a tuple with the CustomerPeerIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeeringConnectionResIpv4) GetCustomerPeerIpOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerPeerIp) {
		return nil, false
	}
	return o.CustomerPeerIp, true
}

// HasCustomerPeerIp returns a boolean if a field has been set.
func (o *PeeringConnectionResIpv4) HasCustomerPeerIp() bool {
	if o != nil && !IsNil(o.CustomerPeerIp) {
		return true
	}

	return false
}

// SetCustomerPeerIp gets a reference to the given string and assigns it to the CustomerPeerIp field.
func (o *PeeringConnectionResIpv4) SetCustomerPeerIp(v string) {
	o.CustomerPeerIp = &v
}

// GetPrimaryEquinixPeerIp returns the PrimaryEquinixPeerIp field value if set, zero value otherwise.
func (o *PeeringConnectionResIpv4) GetPrimaryEquinixPeerIp() string {
	if o == nil || IsNil(o.PrimaryEquinixPeerIp) {
		var ret string
		return ret
	}
	return *o.PrimaryEquinixPeerIp
}

// GetPrimaryEquinixPeerIpOk returns a tuple with the PrimaryEquinixPeerIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeeringConnectionResIpv4) GetPrimaryEquinixPeerIpOk() (*string, bool) {
	if o == nil || IsNil(o.PrimaryEquinixPeerIp) {
		return nil, false
	}
	return o.PrimaryEquinixPeerIp, true
}

// HasPrimaryEquinixPeerIp returns a boolean if a field has been set.
func (o *PeeringConnectionResIpv4) HasPrimaryEquinixPeerIp() bool {
	if o != nil && !IsNil(o.PrimaryEquinixPeerIp) {
		return true
	}

	return false
}

// SetPrimaryEquinixPeerIp gets a reference to the given string and assigns it to the PrimaryEquinixPeerIp field.
func (o *PeeringConnectionResIpv4) SetPrimaryEquinixPeerIp(v string) {
	o.PrimaryEquinixPeerIp = &v
}

// GetSecondaryEquinixPeerIp returns the SecondaryEquinixPeerIp field value if set, zero value otherwise.
func (o *PeeringConnectionResIpv4) GetSecondaryEquinixPeerIp() string {
	if o == nil || IsNil(o.SecondaryEquinixPeerIp) {
		var ret string
		return ret
	}
	return *o.SecondaryEquinixPeerIp
}

// GetSecondaryEquinixPeerIpOk returns a tuple with the SecondaryEquinixPeerIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeeringConnectionResIpv4) GetSecondaryEquinixPeerIpOk() (*string, bool) {
	if o == nil || IsNil(o.SecondaryEquinixPeerIp) {
		return nil, false
	}
	return o.SecondaryEquinixPeerIp, true
}

// HasSecondaryEquinixPeerIp returns a boolean if a field has been set.
func (o *PeeringConnectionResIpv4) HasSecondaryEquinixPeerIp() bool {
	if o != nil && !IsNil(o.SecondaryEquinixPeerIp) {
		return true
	}

	return false
}

// SetSecondaryEquinixPeerIp gets a reference to the given string and assigns it to the SecondaryEquinixPeerIp field.
func (o *PeeringConnectionResIpv4) SetSecondaryEquinixPeerIp(v string) {
	o.SecondaryEquinixPeerIp = &v
}

// GetReverseDnsAddress returns the ReverseDnsAddress field value if set, zero value otherwise.
func (o *PeeringConnectionResIpv4) GetReverseDnsAddress() string {
	if o == nil || IsNil(o.ReverseDnsAddress) {
		var ret string
		return ret
	}
	return *o.ReverseDnsAddress
}

// GetReverseDnsAddressOk returns a tuple with the ReverseDnsAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeeringConnectionResIpv4) GetReverseDnsAddressOk() (*string, bool) {
	if o == nil || IsNil(o.ReverseDnsAddress) {
		return nil, false
	}
	return o.ReverseDnsAddress, true
}

// HasReverseDnsAddress returns a boolean if a field has been set.
func (o *PeeringConnectionResIpv4) HasReverseDnsAddress() bool {
	if o != nil && !IsNil(o.ReverseDnsAddress) {
		return true
	}

	return false
}

// SetReverseDnsAddress gets a reference to the given string and assigns it to the ReverseDnsAddress field.
func (o *PeeringConnectionResIpv4) SetReverseDnsAddress(v string) {
	o.ReverseDnsAddress = &v
}

// GetAsSet returns the AsSet field value if set, zero value otherwise.
func (o *PeeringConnectionResIpv4) GetAsSet() string {
	if o == nil || IsNil(o.AsSet) {
		var ret string
		return ret
	}
	return *o.AsSet
}

// GetAsSetOk returns a tuple with the AsSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeeringConnectionResIpv4) GetAsSetOk() (*string, bool) {
	if o == nil || IsNil(o.AsSet) {
		return nil, false
	}
	return o.AsSet, true
}

// HasAsSet returns a boolean if a field has been set.
func (o *PeeringConnectionResIpv4) HasAsSet() bool {
	if o != nil && !IsNil(o.AsSet) {
		return true
	}

	return false
}

// SetAsSet gets a reference to the given string and assigns it to the AsSet field.
func (o *PeeringConnectionResIpv4) SetAsSet(v string) {
	o.AsSet = &v
}

// GetMlpeEnabled returns the MlpeEnabled field value if set, zero value otherwise.
func (o *PeeringConnectionResIpv4) GetMlpeEnabled() bool {
	if o == nil || IsNil(o.MlpeEnabled) {
		var ret bool
		return ret
	}
	return *o.MlpeEnabled
}

// GetMlpeEnabledOk returns a tuple with the MlpeEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeeringConnectionResIpv4) GetMlpeEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.MlpeEnabled) {
		return nil, false
	}
	return o.MlpeEnabled, true
}

// HasMlpeEnabled returns a boolean if a field has been set.
func (o *PeeringConnectionResIpv4) HasMlpeEnabled() bool {
	if o != nil && !IsNil(o.MlpeEnabled) {
		return true
	}

	return false
}

// SetMlpeEnabled gets a reference to the given bool and assigns it to the MlpeEnabled field.
func (o *PeeringConnectionResIpv4) SetMlpeEnabled(v bool) {
	o.MlpeEnabled = &v
}

// GetAuthKeys returns the AuthKeys field value if set, zero value otherwise.
func (o *PeeringConnectionResIpv4) GetAuthKeys() []PeeringConnectionResIpv4AuthKeys {
	if o == nil || IsNil(o.AuthKeys) {
		var ret []PeeringConnectionResIpv4AuthKeys
		return ret
	}
	return o.AuthKeys
}

// GetAuthKeysOk returns a tuple with the AuthKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeeringConnectionResIpv4) GetAuthKeysOk() ([]PeeringConnectionResIpv4AuthKeys, bool) {
	if o == nil || IsNil(o.AuthKeys) {
		return nil, false
	}
	return o.AuthKeys, true
}

// HasAuthKeys returns a boolean if a field has been set.
func (o *PeeringConnectionResIpv4) HasAuthKeys() bool {
	if o != nil && !IsNil(o.AuthKeys) {
		return true
	}

	return false
}

// SetAuthKeys gets a reference to the given []PeeringConnectionResIpv4AuthKeys and assigns it to the AuthKeys field.
func (o *PeeringConnectionResIpv4) SetAuthKeys(v []PeeringConnectionResIpv4AuthKeys) {
	o.AuthKeys = v
}

// GetIpPrefixes returns the IpPrefixes field value if set, zero value otherwise.
func (o *PeeringConnectionResIpv4) GetIpPrefixes() []string {
	if o == nil || IsNil(o.IpPrefixes) {
		var ret []string
		return ret
	}
	return o.IpPrefixes
}

// GetIpPrefixesOk returns a tuple with the IpPrefixes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeeringConnectionResIpv4) GetIpPrefixesOk() ([]string, bool) {
	if o == nil || IsNil(o.IpPrefixes) {
		return nil, false
	}
	return o.IpPrefixes, true
}

// HasIpPrefixes returns a boolean if a field has been set.
func (o *PeeringConnectionResIpv4) HasIpPrefixes() bool {
	if o != nil && !IsNil(o.IpPrefixes) {
		return true
	}

	return false
}

// SetIpPrefixes gets a reference to the given []string and assigns it to the IpPrefixes field.
func (o *PeeringConnectionResIpv4) SetIpPrefixes(v []string) {
	o.IpPrefixes = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *PeeringConnectionResIpv4) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeeringConnectionResIpv4) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *PeeringConnectionResIpv4) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *PeeringConnectionResIpv4) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o PeeringConnectionResIpv4) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PeeringConnectionResIpv4) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CustomerPeerIp) {
		toSerialize["customerPeerIp"] = o.CustomerPeerIp
	}
	if !IsNil(o.PrimaryEquinixPeerIp) {
		toSerialize["primaryEquinixPeerIp"] = o.PrimaryEquinixPeerIp
	}
	if !IsNil(o.SecondaryEquinixPeerIp) {
		toSerialize["secondaryEquinixPeerIp"] = o.SecondaryEquinixPeerIp
	}
	if !IsNil(o.ReverseDnsAddress) {
		toSerialize["reverseDnsAddress"] = o.ReverseDnsAddress
	}
	if !IsNil(o.AsSet) {
		toSerialize["asSet"] = o.AsSet
	}
	if !IsNil(o.MlpeEnabled) {
		toSerialize["mlpeEnabled"] = o.MlpeEnabled
	}
	if !IsNil(o.AuthKeys) {
		toSerialize["authKeys"] = o.AuthKeys
	}
	if !IsNil(o.IpPrefixes) {
		toSerialize["ipPrefixes"] = o.IpPrefixes
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PeeringConnectionResIpv4) UnmarshalJSON(data []byte) (err error) {
	varPeeringConnectionResIpv4 := _PeeringConnectionResIpv4{}

	err = json.Unmarshal(data, &varPeeringConnectionResIpv4)

	if err != nil {
		return err
	}

	*o = PeeringConnectionResIpv4(varPeeringConnectionResIpv4)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "customerPeerIp")
		delete(additionalProperties, "primaryEquinixPeerIp")
		delete(additionalProperties, "secondaryEquinixPeerIp")
		delete(additionalProperties, "reverseDnsAddress")
		delete(additionalProperties, "asSet")
		delete(additionalProperties, "mlpeEnabled")
		delete(additionalProperties, "authKeys")
		delete(additionalProperties, "ipPrefixes")
		delete(additionalProperties, "enabled")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePeeringConnectionResIpv4 struct {
	value *PeeringConnectionResIpv4
	isSet bool
}

func (v NullablePeeringConnectionResIpv4) Get() *PeeringConnectionResIpv4 {
	return v.value
}

func (v *NullablePeeringConnectionResIpv4) Set(val *PeeringConnectionResIpv4) {
	v.value = val
	v.isSet = true
}

func (v NullablePeeringConnectionResIpv4) IsSet() bool {
	return v.isSet
}

func (v *NullablePeeringConnectionResIpv4) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePeeringConnectionResIpv4(val *PeeringConnectionResIpv4) *NullablePeeringConnectionResIpv4 {
	return &NullablePeeringConnectionResIpv4{value: val, isSet: true}
}

func (v NullablePeeringConnectionResIpv4) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePeeringConnectionResIpv4) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
