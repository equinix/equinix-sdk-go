/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// PortOrderPurchaseOrderSelectionType the model 'PortOrderPurchaseOrderSelectionType'
type PortOrderPurchaseOrderSelectionType string

// List of PortOrder_purchaseOrder_selectionType
const (
	PORTORDERPURCHASEORDERSELECTIONTYPE_EXEMPTION PortOrderPurchaseOrderSelectionType = "EXEMPTION"
	PORTORDERPURCHASEORDERSELECTIONTYPE_EXISTING  PortOrderPurchaseOrderSelectionType = "EXISTING"
	PORTORDERPURCHASEORDERSELECTIONTYPE_NEW       PortOrderPurchaseOrderSelectionType = "NEW"
	PORTORDERPURCHASEORDERSELECTIONTYPE_BLANKET   PortOrderPurchaseOrderSelectionType = "BLANKET"
)

// All allowed values of PortOrderPurchaseOrderSelectionType enum
var AllowedPortOrderPurchaseOrderSelectionTypeEnumValues = []PortOrderPurchaseOrderSelectionType{
	"EXEMPTION",
	"EXISTING",
	"NEW",
	"BLANKET",
}

func (v *PortOrderPurchaseOrderSelectionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PortOrderPurchaseOrderSelectionType(value)
	for _, existing := range AllowedPortOrderPurchaseOrderSelectionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PortOrderPurchaseOrderSelectionType", value)
}

// NewPortOrderPurchaseOrderSelectionTypeFromValue returns a pointer to a valid PortOrderPurchaseOrderSelectionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPortOrderPurchaseOrderSelectionTypeFromValue(v string) (*PortOrderPurchaseOrderSelectionType, error) {
	ev := PortOrderPurchaseOrderSelectionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PortOrderPurchaseOrderSelectionType: valid values are %v", v, AllowedPortOrderPurchaseOrderSelectionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PortOrderPurchaseOrderSelectionType) IsValid() bool {
	for _, existing := range AllowedPortOrderPurchaseOrderSelectionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PortOrder_purchaseOrder_selectionType value
func (v PortOrderPurchaseOrderSelectionType) Ptr() *PortOrderPurchaseOrderSelectionType {
	return &v
}

type NullablePortOrderPurchaseOrderSelectionType struct {
	value *PortOrderPurchaseOrderSelectionType
	isSet bool
}

func (v NullablePortOrderPurchaseOrderSelectionType) Get() *PortOrderPurchaseOrderSelectionType {
	return v.value
}

func (v *NullablePortOrderPurchaseOrderSelectionType) Set(val *PortOrderPurchaseOrderSelectionType) {
	v.value = val
	v.isSet = true
}

func (v NullablePortOrderPurchaseOrderSelectionType) IsSet() bool {
	return v.isSet
}

func (v *NullablePortOrderPurchaseOrderSelectionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortOrderPurchaseOrderSelectionType(val *PortOrderPurchaseOrderSelectionType) *NullablePortOrderPurchaseOrderSelectionType {
	return &NullablePortOrderPurchaseOrderSelectionType{value: val, isSet: true}
}

func (v NullablePortOrderPurchaseOrderSelectionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortOrderPurchaseOrderSelectionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
