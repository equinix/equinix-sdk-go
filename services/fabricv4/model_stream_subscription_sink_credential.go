/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the StreamSubscriptionSinkCredential type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StreamSubscriptionSinkCredential{}

// StreamSubscriptionSinkCredential Stream subscription sink credentials
type StreamSubscriptionSinkCredential struct {
	Type *StreamSubscriptionSinkCredentialType `json:"type,omitempty"`
	// passed as Authorization header value
	AccessToken *string `json:"accessToken,omitempty"`
	// passed as Authorization header value
	IntegrationKey *string `json:"integrationKey,omitempty"`
	// passed as Authorization header value
	ApiKey *string `json:"apiKey,omitempty"`
	// passed as Authorization header value
	Username *string `json:"username,omitempty"`
	// passed as Authorization header value
	Password             *string `json:"password,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StreamSubscriptionSinkCredential StreamSubscriptionSinkCredential

// NewStreamSubscriptionSinkCredential instantiates a new StreamSubscriptionSinkCredential object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStreamSubscriptionSinkCredential() *StreamSubscriptionSinkCredential {
	this := StreamSubscriptionSinkCredential{}
	return &this
}

// NewStreamSubscriptionSinkCredentialWithDefaults instantiates a new StreamSubscriptionSinkCredential object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStreamSubscriptionSinkCredentialWithDefaults() *StreamSubscriptionSinkCredential {
	this := StreamSubscriptionSinkCredential{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *StreamSubscriptionSinkCredential) GetType() StreamSubscriptionSinkCredentialType {
	if o == nil || IsNil(o.Type) {
		var ret StreamSubscriptionSinkCredentialType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscriptionSinkCredential) GetTypeOk() (*StreamSubscriptionSinkCredentialType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *StreamSubscriptionSinkCredential) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given StreamSubscriptionSinkCredentialType and assigns it to the Type field.
func (o *StreamSubscriptionSinkCredential) SetType(v StreamSubscriptionSinkCredentialType) {
	o.Type = &v
}

// GetAccessToken returns the AccessToken field value if set, zero value otherwise.
func (o *StreamSubscriptionSinkCredential) GetAccessToken() string {
	if o == nil || IsNil(o.AccessToken) {
		var ret string
		return ret
	}
	return *o.AccessToken
}

// GetAccessTokenOk returns a tuple with the AccessToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscriptionSinkCredential) GetAccessTokenOk() (*string, bool) {
	if o == nil || IsNil(o.AccessToken) {
		return nil, false
	}
	return o.AccessToken, true
}

// HasAccessToken returns a boolean if a field has been set.
func (o *StreamSubscriptionSinkCredential) HasAccessToken() bool {
	if o != nil && !IsNil(o.AccessToken) {
		return true
	}

	return false
}

// SetAccessToken gets a reference to the given string and assigns it to the AccessToken field.
func (o *StreamSubscriptionSinkCredential) SetAccessToken(v string) {
	o.AccessToken = &v
}

// GetIntegrationKey returns the IntegrationKey field value if set, zero value otherwise.
func (o *StreamSubscriptionSinkCredential) GetIntegrationKey() string {
	if o == nil || IsNil(o.IntegrationKey) {
		var ret string
		return ret
	}
	return *o.IntegrationKey
}

// GetIntegrationKeyOk returns a tuple with the IntegrationKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscriptionSinkCredential) GetIntegrationKeyOk() (*string, bool) {
	if o == nil || IsNil(o.IntegrationKey) {
		return nil, false
	}
	return o.IntegrationKey, true
}

// HasIntegrationKey returns a boolean if a field has been set.
func (o *StreamSubscriptionSinkCredential) HasIntegrationKey() bool {
	if o != nil && !IsNil(o.IntegrationKey) {
		return true
	}

	return false
}

// SetIntegrationKey gets a reference to the given string and assigns it to the IntegrationKey field.
func (o *StreamSubscriptionSinkCredential) SetIntegrationKey(v string) {
	o.IntegrationKey = &v
}

// GetApiKey returns the ApiKey field value if set, zero value otherwise.
func (o *StreamSubscriptionSinkCredential) GetApiKey() string {
	if o == nil || IsNil(o.ApiKey) {
		var ret string
		return ret
	}
	return *o.ApiKey
}

// GetApiKeyOk returns a tuple with the ApiKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscriptionSinkCredential) GetApiKeyOk() (*string, bool) {
	if o == nil || IsNil(o.ApiKey) {
		return nil, false
	}
	return o.ApiKey, true
}

// HasApiKey returns a boolean if a field has been set.
func (o *StreamSubscriptionSinkCredential) HasApiKey() bool {
	if o != nil && !IsNil(o.ApiKey) {
		return true
	}

	return false
}

// SetApiKey gets a reference to the given string and assigns it to the ApiKey field.
func (o *StreamSubscriptionSinkCredential) SetApiKey(v string) {
	o.ApiKey = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *StreamSubscriptionSinkCredential) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscriptionSinkCredential) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *StreamSubscriptionSinkCredential) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *StreamSubscriptionSinkCredential) SetUsername(v string) {
	o.Username = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *StreamSubscriptionSinkCredential) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscriptionSinkCredential) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *StreamSubscriptionSinkCredential) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *StreamSubscriptionSinkCredential) SetPassword(v string) {
	o.Password = &v
}

func (o StreamSubscriptionSinkCredential) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StreamSubscriptionSinkCredential) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.AccessToken) {
		toSerialize["accessToken"] = o.AccessToken
	}
	if !IsNil(o.IntegrationKey) {
		toSerialize["integrationKey"] = o.IntegrationKey
	}
	if !IsNil(o.ApiKey) {
		toSerialize["apiKey"] = o.ApiKey
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StreamSubscriptionSinkCredential) UnmarshalJSON(data []byte) (err error) {
	varStreamSubscriptionSinkCredential := _StreamSubscriptionSinkCredential{}

	err = json.Unmarshal(data, &varStreamSubscriptionSinkCredential)

	if err != nil {
		return err
	}

	*o = StreamSubscriptionSinkCredential(varStreamSubscriptionSinkCredential)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "accessToken")
		delete(additionalProperties, "integrationKey")
		delete(additionalProperties, "apiKey")
		delete(additionalProperties, "username")
		delete(additionalProperties, "password")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStreamSubscriptionSinkCredential struct {
	value *StreamSubscriptionSinkCredential
	isSet bool
}

func (v NullableStreamSubscriptionSinkCredential) Get() *StreamSubscriptionSinkCredential {
	return v.value
}

func (v *NullableStreamSubscriptionSinkCredential) Set(val *StreamSubscriptionSinkCredential) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamSubscriptionSinkCredential) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamSubscriptionSinkCredential) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamSubscriptionSinkCredential(val *StreamSubscriptionSinkCredential) *NullableStreamSubscriptionSinkCredential {
	return &NullableStreamSubscriptionSinkCredential{value: val, isSet: true}
}

func (v NullableStreamSubscriptionSinkCredential) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamSubscriptionSinkCredential) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
