/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the OperationalStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OperationalStatus{}

// OperationalStatus struct for OperationalStatus
type OperationalStatus struct {
	// Operational status for the resource target of the event
	OperationalStatus    *string `json:"operationalStatus,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OperationalStatus OperationalStatus

// NewOperationalStatus instantiates a new OperationalStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOperationalStatus() *OperationalStatus {
	this := OperationalStatus{}
	return &this
}

// NewOperationalStatusWithDefaults instantiates a new OperationalStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOperationalStatusWithDefaults() *OperationalStatus {
	this := OperationalStatus{}
	return &this
}

// GetOperationalStatus returns the OperationalStatus field value if set, zero value otherwise.
func (o *OperationalStatus) GetOperationalStatus() string {
	if o == nil || IsNil(o.OperationalStatus) {
		var ret string
		return ret
	}
	return *o.OperationalStatus
}

// GetOperationalStatusOk returns a tuple with the OperationalStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperationalStatus) GetOperationalStatusOk() (*string, bool) {
	if o == nil || IsNil(o.OperationalStatus) {
		return nil, false
	}
	return o.OperationalStatus, true
}

// HasOperationalStatus returns a boolean if a field has been set.
func (o *OperationalStatus) HasOperationalStatus() bool {
	if o != nil && !IsNil(o.OperationalStatus) {
		return true
	}

	return false
}

// SetOperationalStatus gets a reference to the given string and assigns it to the OperationalStatus field.
func (o *OperationalStatus) SetOperationalStatus(v string) {
	o.OperationalStatus = &v
}

func (o OperationalStatus) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OperationalStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OperationalStatus) {
		toSerialize["operationalStatus"] = o.OperationalStatus
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OperationalStatus) UnmarshalJSON(data []byte) (err error) {
	varOperationalStatus := _OperationalStatus{}

	err = json.Unmarshal(data, &varOperationalStatus)

	if err != nil {
		return err
	}

	*o = OperationalStatus(varOperationalStatus)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "operationalStatus")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOperationalStatus struct {
	value *OperationalStatus
	isSet bool
}

func (v NullableOperationalStatus) Get() *OperationalStatus {
	return v.value
}

func (v *NullableOperationalStatus) Set(val *OperationalStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableOperationalStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableOperationalStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOperationalStatus(val *OperationalStatus) *NullableOperationalStatus {
	return &NullableOperationalStatus{value: val, isSet: true}
}

func (v NullableOperationalStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOperationalStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
