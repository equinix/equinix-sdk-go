/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// ServiceTokenType Type of Service Token
type ServiceTokenType string

// List of ServiceTokenType
const (
	SERVICETOKENTYPE_VC_TOKEN  ServiceTokenType = "VC_TOKEN"
	SERVICETOKENTYPE_EPL_TOKEN ServiceTokenType = "EPL_TOKEN"
)

// All allowed values of ServiceTokenType enum
var AllowedServiceTokenTypeEnumValues = []ServiceTokenType{
	"VC_TOKEN",
	"EPL_TOKEN",
}

func (v *ServiceTokenType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ServiceTokenType(value)
	for _, existing := range AllowedServiceTokenTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServiceTokenType", value)
}

// NewServiceTokenTypeFromValue returns a pointer to a valid ServiceTokenType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServiceTokenTypeFromValue(v string) (*ServiceTokenType, error) {
	ev := ServiceTokenType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServiceTokenType: valid values are %v", v, AllowedServiceTokenTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServiceTokenType) IsValid() bool {
	for _, existing := range AllowedServiceTokenTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ServiceTokenType value
func (v ServiceTokenType) Ptr() *ServiceTokenType {
	return &v
}

type NullableServiceTokenType struct {
	value *ServiceTokenType
	isSet bool
}

func (v NullableServiceTokenType) Get() *ServiceTokenType {
	return v.value
}

func (v *NullableServiceTokenType) Set(val *ServiceTokenType) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceTokenType) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceTokenType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceTokenType(val *ServiceTokenType) *NullableServiceTokenType {
	return &NullableServiceTokenType{value: val, isSet: true}
}

func (v NullableServiceTokenType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceTokenType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
