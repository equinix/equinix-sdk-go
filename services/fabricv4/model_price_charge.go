/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the PriceCharge type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PriceCharge{}

// PriceCharge Price  Charge
type PriceCharge struct {
	Type *PriceChargeType `json:"type,omitempty"`
	// Offering price
	Price                *float64 `json:"price,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PriceCharge PriceCharge

// NewPriceCharge instantiates a new PriceCharge object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPriceCharge() *PriceCharge {
	this := PriceCharge{}
	return &this
}

// NewPriceChargeWithDefaults instantiates a new PriceCharge object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPriceChargeWithDefaults() *PriceCharge {
	this := PriceCharge{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PriceCharge) GetType() PriceChargeType {
	if o == nil || IsNil(o.Type) {
		var ret PriceChargeType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceCharge) GetTypeOk() (*PriceChargeType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PriceCharge) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given PriceChargeType and assigns it to the Type field.
func (o *PriceCharge) SetType(v PriceChargeType) {
	o.Type = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *PriceCharge) GetPrice() float64 {
	if o == nil || IsNil(o.Price) {
		var ret float64
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceCharge) GetPriceOk() (*float64, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *PriceCharge) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float64 and assigns it to the Price field.
func (o *PriceCharge) SetPrice(v float64) {
	o.Price = &v
}

func (o PriceCharge) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PriceCharge) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PriceCharge) UnmarshalJSON(data []byte) (err error) {
	varPriceCharge := _PriceCharge{}

	err = json.Unmarshal(data, &varPriceCharge)

	if err != nil {
		return err
	}

	*o = PriceCharge(varPriceCharge)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "price")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePriceCharge struct {
	value *PriceCharge
	isSet bool
}

func (v NullablePriceCharge) Get() *PriceCharge {
	return v.value
}

func (v *NullablePriceCharge) Set(val *PriceCharge) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceCharge) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceCharge) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceCharge(val *PriceCharge) *NullablePriceCharge {
	return &NullablePriceCharge{value: val, isSet: true}
}

func (v NullablePriceCharge) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceCharge) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
