/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// DeploymentState Deployment status
type DeploymentState string

// List of DeploymentState
const (
	DEPLOYMENTSTATE_NOT_STARTED    DeploymentState = "NOT_STARTED"
	DEPLOYMENTSTATE_DEPLOYING      DeploymentState = "DEPLOYING"
	DEPLOYMENTSTATE_DEPLOYED       DeploymentState = "DEPLOYED"
	DEPLOYMENTSTATE_DEPROVISIONED  DeploymentState = "DEPROVISIONED"
	DEPLOYMENTSTATE_DEPROVISIONING DeploymentState = "DEPROVISIONING"
	DEPLOYMENTSTATE_FAILED         DeploymentState = "FAILED"
	DEPLOYMENTSTATE_PENDING        DeploymentState = "PENDING"
	DEPLOYMENTSTATE_PROVISIONED    DeploymentState = "PROVISIONED"
	DEPLOYMENTSTATE_PROVISIONING   DeploymentState = "PROVISIONING"
)

// All allowed values of DeploymentState enum
var AllowedDeploymentStateEnumValues = []DeploymentState{
	"NOT_STARTED",
	"DEPLOYING",
	"DEPLOYED",
	"DEPROVISIONED",
	"DEPROVISIONING",
	"FAILED",
	"PENDING",
	"PROVISIONED",
	"PROVISIONING",
}

func (v *DeploymentState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeploymentState(value)
	for _, existing := range AllowedDeploymentStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeploymentState", value)
}

// NewDeploymentStateFromValue returns a pointer to a valid DeploymentState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeploymentStateFromValue(v string) (*DeploymentState, error) {
	ev := DeploymentState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeploymentState: valid values are %v", v, AllowedDeploymentStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeploymentState) IsValid() bool {
	for _, existing := range AllowedDeploymentStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DeploymentState value
func (v DeploymentState) Ptr() *DeploymentState {
	return &v
}

type NullableDeploymentState struct {
	value *DeploymentState
	isSet bool
}

func (v NullableDeploymentState) Get() *DeploymentState {
	return v.value
}

func (v *NullableDeploymentState) Set(val *DeploymentState) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentState) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentState(val *DeploymentState) *NullableDeploymentState {
	return &NullableDeploymentState{value: val, isSet: true}
}

func (v NullableDeploymentState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
