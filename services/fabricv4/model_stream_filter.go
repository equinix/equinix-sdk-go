/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// StreamFilter struct for StreamFilter
type StreamFilter struct {
	StreamFilterOrFilter         *StreamFilterOrFilter
	StreamFilterSimpleExpression *StreamFilterSimpleExpression
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *StreamFilter) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into StreamFilterOrFilter
	err = json.Unmarshal(data, &dst.StreamFilterOrFilter)
	if err == nil {
		jsonStreamFilterOrFilter, _ := json.Marshal(dst.StreamFilterOrFilter)
		if string(jsonStreamFilterOrFilter) == "{}" { // empty struct
			dst.StreamFilterOrFilter = nil
		} else {
			return nil // data stored in dst.StreamFilterOrFilter, return on the first match
		}
	} else {
		dst.StreamFilterOrFilter = nil
	}

	// try to unmarshal JSON data into StreamFilterSimpleExpression
	err = json.Unmarshal(data, &dst.StreamFilterSimpleExpression)
	if err == nil {
		jsonStreamFilterSimpleExpression, _ := json.Marshal(dst.StreamFilterSimpleExpression)
		if string(jsonStreamFilterSimpleExpression) == "{}" { // empty struct
			dst.StreamFilterSimpleExpression = nil
		} else {
			return nil // data stored in dst.StreamFilterSimpleExpression, return on the first match
		}
	} else {
		dst.StreamFilterSimpleExpression = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(StreamFilter)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src StreamFilter) MarshalJSON() ([]byte, error) {
	if src.StreamFilterOrFilter != nil {
		return json.Marshal(&src.StreamFilterOrFilter)
	}

	if src.StreamFilterSimpleExpression != nil {
		return json.Marshal(&src.StreamFilterSimpleExpression)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableStreamFilter struct {
	value *StreamFilter
	isSet bool
}

func (v NullableStreamFilter) Get() *StreamFilter {
	return v.value
}

func (v *NullableStreamFilter) Set(val *StreamFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamFilter(val *StreamFilter) *NullableStreamFilter {
	return &NullableStreamFilter{value: val, isSet: true}
}

func (v NullableStreamFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
