/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// VirtualDeviceInterfaceType Type of interface
type VirtualDeviceInterfaceType string

// List of VirtualDeviceInterface_type
const (
	VIRTUALDEVICEINTERFACETYPE_NETWORK VirtualDeviceInterfaceType = "NETWORK"
)

// All allowed values of VirtualDeviceInterfaceType enum
var AllowedVirtualDeviceInterfaceTypeEnumValues = []VirtualDeviceInterfaceType{
	"NETWORK",
}

func (v *VirtualDeviceInterfaceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VirtualDeviceInterfaceType(value)
	for _, existing := range AllowedVirtualDeviceInterfaceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VirtualDeviceInterfaceType", value)
}

// NewVirtualDeviceInterfaceTypeFromValue returns a pointer to a valid VirtualDeviceInterfaceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVirtualDeviceInterfaceTypeFromValue(v string) (*VirtualDeviceInterfaceType, error) {
	ev := VirtualDeviceInterfaceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VirtualDeviceInterfaceType: valid values are %v", v, AllowedVirtualDeviceInterfaceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VirtualDeviceInterfaceType) IsValid() bool {
	for _, existing := range AllowedVirtualDeviceInterfaceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VirtualDeviceInterface_type value
func (v VirtualDeviceInterfaceType) Ptr() *VirtualDeviceInterfaceType {
	return &v
}

type NullableVirtualDeviceInterfaceType struct {
	value *VirtualDeviceInterfaceType
	isSet bool
}

func (v NullableVirtualDeviceInterfaceType) Get() *VirtualDeviceInterfaceType {
	return v.value
}

func (v *NullableVirtualDeviceInterfaceType) Set(val *VirtualDeviceInterfaceType) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualDeviceInterfaceType) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualDeviceInterfaceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualDeviceInterfaceType(val *VirtualDeviceInterfaceType) *NullableVirtualDeviceInterfaceType {
	return &NullableVirtualDeviceInterfaceType{value: val, isSet: true}
}

func (v NullableVirtualDeviceInterfaceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualDeviceInterfaceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
