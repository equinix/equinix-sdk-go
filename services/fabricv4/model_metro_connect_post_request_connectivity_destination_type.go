/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// MetroConnectPostRequestConnectivityDestinationType Destination Port connectivity type
type MetroConnectPostRequestConnectivityDestinationType string

// List of MetroConnectPostRequest_connectivityDestinationType
const (
	METROCONNECTPOSTREQUESTCONNECTIVITYDESTINATIONTYPE_COLO   MetroConnectPostRequestConnectivityDestinationType = "COLO"
	METROCONNECTPOSTREQUESTCONNECTIVITYDESTINATIONTYPE_BMMR   MetroConnectPostRequestConnectivityDestinationType = "BMMR"
	METROCONNECTPOSTREQUESTCONNECTIVITYDESTINATIONTYPE_REMOTE MetroConnectPostRequestConnectivityDestinationType = "REMOTE"
)

// All allowed values of MetroConnectPostRequestConnectivityDestinationType enum
var AllowedMetroConnectPostRequestConnectivityDestinationTypeEnumValues = []MetroConnectPostRequestConnectivityDestinationType{
	"COLO",
	"BMMR",
	"REMOTE",
}

func (v *MetroConnectPostRequestConnectivityDestinationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MetroConnectPostRequestConnectivityDestinationType(value)
	for _, existing := range AllowedMetroConnectPostRequestConnectivityDestinationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MetroConnectPostRequestConnectivityDestinationType", value)
}

// NewMetroConnectPostRequestConnectivityDestinationTypeFromValue returns a pointer to a valid MetroConnectPostRequestConnectivityDestinationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMetroConnectPostRequestConnectivityDestinationTypeFromValue(v string) (*MetroConnectPostRequestConnectivityDestinationType, error) {
	ev := MetroConnectPostRequestConnectivityDestinationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MetroConnectPostRequestConnectivityDestinationType: valid values are %v", v, AllowedMetroConnectPostRequestConnectivityDestinationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MetroConnectPostRequestConnectivityDestinationType) IsValid() bool {
	for _, existing := range AllowedMetroConnectPostRequestConnectivityDestinationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MetroConnectPostRequest_connectivityDestinationType value
func (v MetroConnectPostRequestConnectivityDestinationType) Ptr() *MetroConnectPostRequestConnectivityDestinationType {
	return &v
}

type NullableMetroConnectPostRequestConnectivityDestinationType struct {
	value *MetroConnectPostRequestConnectivityDestinationType
	isSet bool
}

func (v NullableMetroConnectPostRequestConnectivityDestinationType) Get() *MetroConnectPostRequestConnectivityDestinationType {
	return v.value
}

func (v *NullableMetroConnectPostRequestConnectivityDestinationType) Set(val *MetroConnectPostRequestConnectivityDestinationType) {
	v.value = val
	v.isSet = true
}

func (v NullableMetroConnectPostRequestConnectivityDestinationType) IsSet() bool {
	return v.isSet
}

func (v *NullableMetroConnectPostRequestConnectivityDestinationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetroConnectPostRequestConnectivityDestinationType(val *MetroConnectPostRequestConnectivityDestinationType) *NullableMetroConnectPostRequestConnectivityDestinationType {
	return &NullableMetroConnectPostRequestConnectivityDestinationType{value: val, isSet: true}
}

func (v NullableMetroConnectPostRequestConnectivityDestinationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetroConnectPostRequestConnectivityDestinationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
