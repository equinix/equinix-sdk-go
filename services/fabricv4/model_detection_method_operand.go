/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// DetectionMethodOperand Stream alert rule metric operand
type DetectionMethodOperand string

// List of DetectionMethod_operand
const (
	DETECTIONMETHODOPERAND_ABOVE DetectionMethodOperand = "ABOVE"
	DETECTIONMETHODOPERAND_BELOW DetectionMethodOperand = "BELOW"
)

// All allowed values of DetectionMethodOperand enum
var AllowedDetectionMethodOperandEnumValues = []DetectionMethodOperand{
	"ABOVE",
	"BELOW",
}

func (v *DetectionMethodOperand) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DetectionMethodOperand(value)
	for _, existing := range AllowedDetectionMethodOperandEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DetectionMethodOperand", value)
}

// NewDetectionMethodOperandFromValue returns a pointer to a valid DetectionMethodOperand
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDetectionMethodOperandFromValue(v string) (*DetectionMethodOperand, error) {
	ev := DetectionMethodOperand(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DetectionMethodOperand: valid values are %v", v, AllowedDetectionMethodOperandEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DetectionMethodOperand) IsValid() bool {
	for _, existing := range AllowedDetectionMethodOperandEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DetectionMethod_operand value
func (v DetectionMethodOperand) Ptr() *DetectionMethodOperand {
	return &v
}

type NullableDetectionMethodOperand struct {
	value *DetectionMethodOperand
	isSet bool
}

func (v NullableDetectionMethodOperand) Get() *DetectionMethodOperand {
	return v.value
}

func (v *NullableDetectionMethodOperand) Set(val *DetectionMethodOperand) {
	v.value = val
	v.isSet = true
}

func (v NullableDetectionMethodOperand) IsSet() bool {
	return v.isSet
}

func (v *NullableDetectionMethodOperand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDetectionMethodOperand(val *DetectionMethodOperand) *NullableDetectionMethodOperand {
	return &NullableDetectionMethodOperand{value: val, isSet: true}
}

func (v NullableDetectionMethodOperand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDetectionMethodOperand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
