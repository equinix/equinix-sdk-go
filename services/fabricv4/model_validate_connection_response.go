/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the ValidateConnectionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValidateConnectionResponse{}

// ValidateConnectionResponse Validate Connection specification
type ValidateConnectionResponse struct {
	// Equinix-assigned connection identifier
	Uuid *string `json:"uuid,omitempty"`
	// Connection bandwidth in Mbps
	Bandwidth            *int32                `json:"bandwidth,omitempty"`
	Redundancy           *ConnectionRedundancy `json:"redundancy,omitempty"`
	ASide                *ConnectionSide       `json:"aSide,omitempty"`
	ZSide                *ConnectionSide       `json:"zSide,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ValidateConnectionResponse ValidateConnectionResponse

// NewValidateConnectionResponse instantiates a new ValidateConnectionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidateConnectionResponse() *ValidateConnectionResponse {
	this := ValidateConnectionResponse{}
	return &this
}

// NewValidateConnectionResponseWithDefaults instantiates a new ValidateConnectionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidateConnectionResponseWithDefaults() *ValidateConnectionResponse {
	this := ValidateConnectionResponse{}
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *ValidateConnectionResponse) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateConnectionResponse) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *ValidateConnectionResponse) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *ValidateConnectionResponse) SetUuid(v string) {
	o.Uuid = &v
}

// GetBandwidth returns the Bandwidth field value if set, zero value otherwise.
func (o *ValidateConnectionResponse) GetBandwidth() int32 {
	if o == nil || IsNil(o.Bandwidth) {
		var ret int32
		return ret
	}
	return *o.Bandwidth
}

// GetBandwidthOk returns a tuple with the Bandwidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateConnectionResponse) GetBandwidthOk() (*int32, bool) {
	if o == nil || IsNil(o.Bandwidth) {
		return nil, false
	}
	return o.Bandwidth, true
}

// HasBandwidth returns a boolean if a field has been set.
func (o *ValidateConnectionResponse) HasBandwidth() bool {
	if o != nil && !IsNil(o.Bandwidth) {
		return true
	}

	return false
}

// SetBandwidth gets a reference to the given int32 and assigns it to the Bandwidth field.
func (o *ValidateConnectionResponse) SetBandwidth(v int32) {
	o.Bandwidth = &v
}

// GetRedundancy returns the Redundancy field value if set, zero value otherwise.
func (o *ValidateConnectionResponse) GetRedundancy() ConnectionRedundancy {
	if o == nil || IsNil(o.Redundancy) {
		var ret ConnectionRedundancy
		return ret
	}
	return *o.Redundancy
}

// GetRedundancyOk returns a tuple with the Redundancy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateConnectionResponse) GetRedundancyOk() (*ConnectionRedundancy, bool) {
	if o == nil || IsNil(o.Redundancy) {
		return nil, false
	}
	return o.Redundancy, true
}

// HasRedundancy returns a boolean if a field has been set.
func (o *ValidateConnectionResponse) HasRedundancy() bool {
	if o != nil && !IsNil(o.Redundancy) {
		return true
	}

	return false
}

// SetRedundancy gets a reference to the given ConnectionRedundancy and assigns it to the Redundancy field.
func (o *ValidateConnectionResponse) SetRedundancy(v ConnectionRedundancy) {
	o.Redundancy = &v
}

// GetASide returns the ASide field value if set, zero value otherwise.
func (o *ValidateConnectionResponse) GetASide() ConnectionSide {
	if o == nil || IsNil(o.ASide) {
		var ret ConnectionSide
		return ret
	}
	return *o.ASide
}

// GetASideOk returns a tuple with the ASide field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateConnectionResponse) GetASideOk() (*ConnectionSide, bool) {
	if o == nil || IsNil(o.ASide) {
		return nil, false
	}
	return o.ASide, true
}

// HasASide returns a boolean if a field has been set.
func (o *ValidateConnectionResponse) HasASide() bool {
	if o != nil && !IsNil(o.ASide) {
		return true
	}

	return false
}

// SetASide gets a reference to the given ConnectionSide and assigns it to the ASide field.
func (o *ValidateConnectionResponse) SetASide(v ConnectionSide) {
	o.ASide = &v
}

// GetZSide returns the ZSide field value if set, zero value otherwise.
func (o *ValidateConnectionResponse) GetZSide() ConnectionSide {
	if o == nil || IsNil(o.ZSide) {
		var ret ConnectionSide
		return ret
	}
	return *o.ZSide
}

// GetZSideOk returns a tuple with the ZSide field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateConnectionResponse) GetZSideOk() (*ConnectionSide, bool) {
	if o == nil || IsNil(o.ZSide) {
		return nil, false
	}
	return o.ZSide, true
}

// HasZSide returns a boolean if a field has been set.
func (o *ValidateConnectionResponse) HasZSide() bool {
	if o != nil && !IsNil(o.ZSide) {
		return true
	}

	return false
}

// SetZSide gets a reference to the given ConnectionSide and assigns it to the ZSide field.
func (o *ValidateConnectionResponse) SetZSide(v ConnectionSide) {
	o.ZSide = &v
}

func (o ValidateConnectionResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValidateConnectionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.Bandwidth) {
		toSerialize["bandwidth"] = o.Bandwidth
	}
	if !IsNil(o.Redundancy) {
		toSerialize["redundancy"] = o.Redundancy
	}
	if !IsNil(o.ASide) {
		toSerialize["aSide"] = o.ASide
	}
	if !IsNil(o.ZSide) {
		toSerialize["zSide"] = o.ZSide
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ValidateConnectionResponse) UnmarshalJSON(data []byte) (err error) {
	varValidateConnectionResponse := _ValidateConnectionResponse{}

	err = json.Unmarshal(data, &varValidateConnectionResponse)

	if err != nil {
		return err
	}

	*o = ValidateConnectionResponse(varValidateConnectionResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "bandwidth")
		delete(additionalProperties, "redundancy")
		delete(additionalProperties, "aSide")
		delete(additionalProperties, "zSide")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableValidateConnectionResponse struct {
	value *ValidateConnectionResponse
	isSet bool
}

func (v NullableValidateConnectionResponse) Get() *ValidateConnectionResponse {
	return v.value
}

func (v *NullableValidateConnectionResponse) Set(val *ValidateConnectionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableValidateConnectionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableValidateConnectionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidateConnectionResponse(val *ValidateConnectionResponse) *NullableValidateConnectionResponse {
	return &NullableValidateConnectionResponse{value: val, isSet: true}
}

func (v NullableValidateConnectionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidateConnectionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
