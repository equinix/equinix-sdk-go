/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// RoutingProtocolChangeOperationOp Handy shortcut for operation name
type RoutingProtocolChangeOperationOp string

// List of RoutingProtocolChangeOperation_op
const (
	ROUTINGPROTOCOLCHANGEOPERATIONOP_ADD     RoutingProtocolChangeOperationOp = "add"
	ROUTINGPROTOCOLCHANGEOPERATIONOP_REPLACE RoutingProtocolChangeOperationOp = "replace"
	ROUTINGPROTOCOLCHANGEOPERATIONOP_REMOVE  RoutingProtocolChangeOperationOp = "remove"
)

// All allowed values of RoutingProtocolChangeOperationOp enum
var AllowedRoutingProtocolChangeOperationOpEnumValues = []RoutingProtocolChangeOperationOp{
	"add",
	"replace",
	"remove",
}

func (v *RoutingProtocolChangeOperationOp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RoutingProtocolChangeOperationOp(value)
	for _, existing := range AllowedRoutingProtocolChangeOperationOpEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RoutingProtocolChangeOperationOp", value)
}

// NewRoutingProtocolChangeOperationOpFromValue returns a pointer to a valid RoutingProtocolChangeOperationOp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRoutingProtocolChangeOperationOpFromValue(v string) (*RoutingProtocolChangeOperationOp, error) {
	ev := RoutingProtocolChangeOperationOp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RoutingProtocolChangeOperationOp: valid values are %v", v, AllowedRoutingProtocolChangeOperationOpEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RoutingProtocolChangeOperationOp) IsValid() bool {
	for _, existing := range AllowedRoutingProtocolChangeOperationOpEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RoutingProtocolChangeOperation_op value
func (v RoutingProtocolChangeOperationOp) Ptr() *RoutingProtocolChangeOperationOp {
	return &v
}

type NullableRoutingProtocolChangeOperationOp struct {
	value *RoutingProtocolChangeOperationOp
	isSet bool
}

func (v NullableRoutingProtocolChangeOperationOp) Get() *RoutingProtocolChangeOperationOp {
	return v.value
}

func (v *NullableRoutingProtocolChangeOperationOp) Set(val *RoutingProtocolChangeOperationOp) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutingProtocolChangeOperationOp) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutingProtocolChangeOperationOp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutingProtocolChangeOperationOp(val *RoutingProtocolChangeOperationOp) *NullableRoutingProtocolChangeOperationOp {
	return &NullableRoutingProtocolChangeOperationOp{value: val, isSet: true}
}

func (v NullableRoutingProtocolChangeOperationOp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutingProtocolChangeOperationOp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
