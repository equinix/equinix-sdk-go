/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the ServiceMetros type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceMetros{}

// ServiceMetros Service Profile Metros
type ServiceMetros struct {
	Data                 []ServiceMetro `json:"data,omitempty"`
	Pagination           *Pagination    `json:"pagination,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServiceMetros ServiceMetros

// NewServiceMetros instantiates a new ServiceMetros object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceMetros() *ServiceMetros {
	this := ServiceMetros{}
	return &this
}

// NewServiceMetrosWithDefaults instantiates a new ServiceMetros object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceMetrosWithDefaults() *ServiceMetros {
	this := ServiceMetros{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ServiceMetros) GetData() []ServiceMetro {
	if o == nil || IsNil(o.Data) {
		var ret []ServiceMetro
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceMetros) GetDataOk() ([]ServiceMetro, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ServiceMetros) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []ServiceMetro and assigns it to the Data field.
func (o *ServiceMetros) SetData(v []ServiceMetro) {
	o.Data = v
}

// GetPagination returns the Pagination field value if set, zero value otherwise.
func (o *ServiceMetros) GetPagination() Pagination {
	if o == nil || IsNil(o.Pagination) {
		var ret Pagination
		return ret
	}
	return *o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceMetros) GetPaginationOk() (*Pagination, bool) {
	if o == nil || IsNil(o.Pagination) {
		return nil, false
	}
	return o.Pagination, true
}

// HasPagination returns a boolean if a field has been set.
func (o *ServiceMetros) HasPagination() bool {
	if o != nil && !IsNil(o.Pagination) {
		return true
	}

	return false
}

// SetPagination gets a reference to the given Pagination and assigns it to the Pagination field.
func (o *ServiceMetros) SetPagination(v Pagination) {
	o.Pagination = &v
}

func (o ServiceMetros) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceMetros) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Pagination) {
		toSerialize["pagination"] = o.Pagination
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServiceMetros) UnmarshalJSON(data []byte) (err error) {
	varServiceMetros := _ServiceMetros{}

	err = json.Unmarshal(data, &varServiceMetros)

	if err != nil {
		return err
	}

	*o = ServiceMetros(varServiceMetros)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "data")
		delete(additionalProperties, "pagination")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServiceMetros struct {
	value *ServiceMetros
	isSet bool
}

func (v NullableServiceMetros) Get() *ServiceMetros {
	return v.value
}

func (v *NullableServiceMetros) Set(val *ServiceMetros) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceMetros) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceMetros) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceMetros(val *ServiceMetros) *NullableServiceMetros {
	return &NullableServiceMetros{value: val, isSet: true}
}

func (v NullableServiceMetros) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceMetros) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
