/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// AccessPointSelectorType Type of Access point
type AccessPointSelectorType string

// List of AccessPointSelector_type
const (
	ACCESSPOINTSELECTORTYPE_COLO    AccessPointSelectorType = "COLO"
	ACCESSPOINTSELECTORTYPE_VD      AccessPointSelectorType = "VD"
	ACCESSPOINTSELECTORTYPE_NETWORK AccessPointSelectorType = "NETWORK"
)

// All allowed values of AccessPointSelectorType enum
var AllowedAccessPointSelectorTypeEnumValues = []AccessPointSelectorType{
	"COLO",
	"VD",
	"NETWORK",
}

func (v *AccessPointSelectorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccessPointSelectorType(value)
	for _, existing := range AllowedAccessPointSelectorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AccessPointSelectorType", value)
}

// NewAccessPointSelectorTypeFromValue returns a pointer to a valid AccessPointSelectorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccessPointSelectorTypeFromValue(v string) (*AccessPointSelectorType, error) {
	ev := AccessPointSelectorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AccessPointSelectorType: valid values are %v", v, AllowedAccessPointSelectorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccessPointSelectorType) IsValid() bool {
	for _, existing := range AllowedAccessPointSelectorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AccessPointSelector_type value
func (v AccessPointSelectorType) Ptr() *AccessPointSelectorType {
	return &v
}

type NullableAccessPointSelectorType struct {
	value *AccessPointSelectorType
	isSet bool
}

func (v NullableAccessPointSelectorType) Get() *AccessPointSelectorType {
	return v.value
}

func (v *NullableAccessPointSelectorType) Set(val *AccessPointSelectorType) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessPointSelectorType) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessPointSelectorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessPointSelectorType(val *AccessPointSelectorType) *NullableAccessPointSelectorType {
	return &NullableAccessPointSelectorType{value: val, isSet: true}
}

func (v NullableAccessPointSelectorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessPointSelectorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
