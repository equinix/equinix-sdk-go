/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the PeeringConnectionIpv4 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PeeringConnectionIpv4{}

// PeeringConnectionIpv4 struct for PeeringConnectionIpv4
type PeeringConnectionIpv4 struct {
	ReverseDnsAddress    *string                         `json:"reverseDnsAddress,omitempty"`
	AsSet                *string                         `json:"asSet,omitempty"`
	MlpeEnabled          *bool                           `json:"mlpeEnabled,omitempty"`
	AuthKeys             []PeeringConnectionIpv4AuthKeys `json:"authKeys,omitempty"`
	IpPrefixes           []string                        `json:"ipPrefixes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PeeringConnectionIpv4 PeeringConnectionIpv4

// NewPeeringConnectionIpv4 instantiates a new PeeringConnectionIpv4 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPeeringConnectionIpv4() *PeeringConnectionIpv4 {
	this := PeeringConnectionIpv4{}
	return &this
}

// NewPeeringConnectionIpv4WithDefaults instantiates a new PeeringConnectionIpv4 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPeeringConnectionIpv4WithDefaults() *PeeringConnectionIpv4 {
	this := PeeringConnectionIpv4{}
	return &this
}

// GetReverseDnsAddress returns the ReverseDnsAddress field value if set, zero value otherwise.
func (o *PeeringConnectionIpv4) GetReverseDnsAddress() string {
	if o == nil || IsNil(o.ReverseDnsAddress) {
		var ret string
		return ret
	}
	return *o.ReverseDnsAddress
}

// GetReverseDnsAddressOk returns a tuple with the ReverseDnsAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeeringConnectionIpv4) GetReverseDnsAddressOk() (*string, bool) {
	if o == nil || IsNil(o.ReverseDnsAddress) {
		return nil, false
	}
	return o.ReverseDnsAddress, true
}

// HasReverseDnsAddress returns a boolean if a field has been set.
func (o *PeeringConnectionIpv4) HasReverseDnsAddress() bool {
	if o != nil && !IsNil(o.ReverseDnsAddress) {
		return true
	}

	return false
}

// SetReverseDnsAddress gets a reference to the given string and assigns it to the ReverseDnsAddress field.
func (o *PeeringConnectionIpv4) SetReverseDnsAddress(v string) {
	o.ReverseDnsAddress = &v
}

// GetAsSet returns the AsSet field value if set, zero value otherwise.
func (o *PeeringConnectionIpv4) GetAsSet() string {
	if o == nil || IsNil(o.AsSet) {
		var ret string
		return ret
	}
	return *o.AsSet
}

// GetAsSetOk returns a tuple with the AsSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeeringConnectionIpv4) GetAsSetOk() (*string, bool) {
	if o == nil || IsNil(o.AsSet) {
		return nil, false
	}
	return o.AsSet, true
}

// HasAsSet returns a boolean if a field has been set.
func (o *PeeringConnectionIpv4) HasAsSet() bool {
	if o != nil && !IsNil(o.AsSet) {
		return true
	}

	return false
}

// SetAsSet gets a reference to the given string and assigns it to the AsSet field.
func (o *PeeringConnectionIpv4) SetAsSet(v string) {
	o.AsSet = &v
}

// GetMlpeEnabled returns the MlpeEnabled field value if set, zero value otherwise.
func (o *PeeringConnectionIpv4) GetMlpeEnabled() bool {
	if o == nil || IsNil(o.MlpeEnabled) {
		var ret bool
		return ret
	}
	return *o.MlpeEnabled
}

// GetMlpeEnabledOk returns a tuple with the MlpeEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeeringConnectionIpv4) GetMlpeEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.MlpeEnabled) {
		return nil, false
	}
	return o.MlpeEnabled, true
}

// HasMlpeEnabled returns a boolean if a field has been set.
func (o *PeeringConnectionIpv4) HasMlpeEnabled() bool {
	if o != nil && !IsNil(o.MlpeEnabled) {
		return true
	}

	return false
}

// SetMlpeEnabled gets a reference to the given bool and assigns it to the MlpeEnabled field.
func (o *PeeringConnectionIpv4) SetMlpeEnabled(v bool) {
	o.MlpeEnabled = &v
}

// GetAuthKeys returns the AuthKeys field value if set, zero value otherwise.
func (o *PeeringConnectionIpv4) GetAuthKeys() []PeeringConnectionIpv4AuthKeys {
	if o == nil || IsNil(o.AuthKeys) {
		var ret []PeeringConnectionIpv4AuthKeys
		return ret
	}
	return o.AuthKeys
}

// GetAuthKeysOk returns a tuple with the AuthKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeeringConnectionIpv4) GetAuthKeysOk() ([]PeeringConnectionIpv4AuthKeys, bool) {
	if o == nil || IsNil(o.AuthKeys) {
		return nil, false
	}
	return o.AuthKeys, true
}

// HasAuthKeys returns a boolean if a field has been set.
func (o *PeeringConnectionIpv4) HasAuthKeys() bool {
	if o != nil && !IsNil(o.AuthKeys) {
		return true
	}

	return false
}

// SetAuthKeys gets a reference to the given []PeeringConnectionIpv4AuthKeys and assigns it to the AuthKeys field.
func (o *PeeringConnectionIpv4) SetAuthKeys(v []PeeringConnectionIpv4AuthKeys) {
	o.AuthKeys = v
}

// GetIpPrefixes returns the IpPrefixes field value if set, zero value otherwise.
func (o *PeeringConnectionIpv4) GetIpPrefixes() []string {
	if o == nil || IsNil(o.IpPrefixes) {
		var ret []string
		return ret
	}
	return o.IpPrefixes
}

// GetIpPrefixesOk returns a tuple with the IpPrefixes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeeringConnectionIpv4) GetIpPrefixesOk() ([]string, bool) {
	if o == nil || IsNil(o.IpPrefixes) {
		return nil, false
	}
	return o.IpPrefixes, true
}

// HasIpPrefixes returns a boolean if a field has been set.
func (o *PeeringConnectionIpv4) HasIpPrefixes() bool {
	if o != nil && !IsNil(o.IpPrefixes) {
		return true
	}

	return false
}

// SetIpPrefixes gets a reference to the given []string and assigns it to the IpPrefixes field.
func (o *PeeringConnectionIpv4) SetIpPrefixes(v []string) {
	o.IpPrefixes = v
}

func (o PeeringConnectionIpv4) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PeeringConnectionIpv4) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ReverseDnsAddress) {
		toSerialize["reverseDnsAddress"] = o.ReverseDnsAddress
	}
	if !IsNil(o.AsSet) {
		toSerialize["asSet"] = o.AsSet
	}
	if !IsNil(o.MlpeEnabled) {
		toSerialize["mlpeEnabled"] = o.MlpeEnabled
	}
	if !IsNil(o.AuthKeys) {
		toSerialize["authKeys"] = o.AuthKeys
	}
	if !IsNil(o.IpPrefixes) {
		toSerialize["ipPrefixes"] = o.IpPrefixes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PeeringConnectionIpv4) UnmarshalJSON(data []byte) (err error) {
	varPeeringConnectionIpv4 := _PeeringConnectionIpv4{}

	err = json.Unmarshal(data, &varPeeringConnectionIpv4)

	if err != nil {
		return err
	}

	*o = PeeringConnectionIpv4(varPeeringConnectionIpv4)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "reverseDnsAddress")
		delete(additionalProperties, "asSet")
		delete(additionalProperties, "mlpeEnabled")
		delete(additionalProperties, "authKeys")
		delete(additionalProperties, "ipPrefixes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePeeringConnectionIpv4 struct {
	value *PeeringConnectionIpv4
	isSet bool
}

func (v NullablePeeringConnectionIpv4) Get() *PeeringConnectionIpv4 {
	return v.value
}

func (v *NullablePeeringConnectionIpv4) Set(val *PeeringConnectionIpv4) {
	v.value = val
	v.isSet = true
}

func (v NullablePeeringConnectionIpv4) IsSet() bool {
	return v.isSet
}

func (v *NullablePeeringConnectionIpv4) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePeeringConnectionIpv4(val *PeeringConnectionIpv4) *NullablePeeringConnectionIpv4 {
	return &NullablePeeringConnectionIpv4{value: val, isSet: true}
}

func (v NullablePeeringConnectionIpv4) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePeeringConnectionIpv4) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
