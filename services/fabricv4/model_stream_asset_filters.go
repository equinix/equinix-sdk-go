/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the StreamAssetFilters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StreamAssetFilters{}

// StreamAssetFilters struct for StreamAssetFilters
type StreamAssetFilters struct {
	And                  []StreamAssetFilter `json:"and,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StreamAssetFilters StreamAssetFilters

// NewStreamAssetFilters instantiates a new StreamAssetFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStreamAssetFilters() *StreamAssetFilters {
	this := StreamAssetFilters{}
	return &this
}

// NewStreamAssetFiltersWithDefaults instantiates a new StreamAssetFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStreamAssetFiltersWithDefaults() *StreamAssetFilters {
	this := StreamAssetFilters{}
	return &this
}

// GetAnd returns the And field value if set, zero value otherwise.
func (o *StreamAssetFilters) GetAnd() []StreamAssetFilter {
	if o == nil || IsNil(o.And) {
		var ret []StreamAssetFilter
		return ret
	}
	return o.And
}

// GetAndOk returns a tuple with the And field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamAssetFilters) GetAndOk() ([]StreamAssetFilter, bool) {
	if o == nil || IsNil(o.And) {
		return nil, false
	}
	return o.And, true
}

// HasAnd returns a boolean if a field has been set.
func (o *StreamAssetFilters) HasAnd() bool {
	if o != nil && !IsNil(o.And) {
		return true
	}

	return false
}

// SetAnd gets a reference to the given []StreamAssetFilter and assigns it to the And field.
func (o *StreamAssetFilters) SetAnd(v []StreamAssetFilter) {
	o.And = v
}

func (o StreamAssetFilters) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StreamAssetFilters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.And) {
		toSerialize["and"] = o.And
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StreamAssetFilters) UnmarshalJSON(data []byte) (err error) {
	varStreamAssetFilters := _StreamAssetFilters{}

	err = json.Unmarshal(data, &varStreamAssetFilters)

	if err != nil {
		return err
	}

	*o = StreamAssetFilters(varStreamAssetFilters)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "and")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStreamAssetFilters struct {
	value *StreamAssetFilters
	isSet bool
}

func (v NullableStreamAssetFilters) Get() *StreamAssetFilters {
	return v.value
}

func (v *NullableStreamAssetFilters) Set(val *StreamAssetFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamAssetFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamAssetFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamAssetFilters(val *StreamAssetFilters) *NullableStreamAssetFilters {
	return &NullableStreamAssetFilters{value: val, isSet: true}
}

func (v NullableStreamAssetFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamAssetFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
