/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// checks if the PortPackage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PortPackage{}

// PortPackage Port Package details
type PortPackage struct {
	// Port Package URI
	Href *string         `json:"href,omitempty"`
	Type PortPackageType `json:"type"`
	// Port Package code
	Code string `json:"code"`
	// Maximum virtual connection bandwidth in Mbps
	VcBandwidthMax *int32 `json:"vcBandwidthMax,omitempty"`
	// Indicates if remote virtual connections are supported
	VcRemoteSupported *bool `json:"vcRemoteSupported,omitempty"`
	// List of supported service types
	SupportedServiceTypes []PortPackageSupportedServiceTypesInner `json:"supportedServiceTypes,omitempty"`
	// List of supported source types
	SupportedSourceTypes []PortPackageSourceType `json:"supportedSourceTypes,omitempty"`
	// List of supported metros
	SupportedMetros      []string `json:"supportedMetros,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PortPackage PortPackage

// NewPortPackage instantiates a new PortPackage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPortPackage(type_ PortPackageType, code string) *PortPackage {
	this := PortPackage{}
	this.Type = type_
	this.Code = code
	return &this
}

// NewPortPackageWithDefaults instantiates a new PortPackage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortPackageWithDefaults() *PortPackage {
	this := PortPackage{}
	return &this
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *PortPackage) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortPackage) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *PortPackage) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *PortPackage) SetHref(v string) {
	o.Href = &v
}

// GetType returns the Type field value
func (o *PortPackage) GetType() PortPackageType {
	if o == nil {
		var ret PortPackageType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PortPackage) GetTypeOk() (*PortPackageType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PortPackage) SetType(v PortPackageType) {
	o.Type = v
}

// GetCode returns the Code field value
func (o *PortPackage) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *PortPackage) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *PortPackage) SetCode(v string) {
	o.Code = v
}

// GetVcBandwidthMax returns the VcBandwidthMax field value if set, zero value otherwise.
func (o *PortPackage) GetVcBandwidthMax() int32 {
	if o == nil || IsNil(o.VcBandwidthMax) {
		var ret int32
		return ret
	}
	return *o.VcBandwidthMax
}

// GetVcBandwidthMaxOk returns a tuple with the VcBandwidthMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortPackage) GetVcBandwidthMaxOk() (*int32, bool) {
	if o == nil || IsNil(o.VcBandwidthMax) {
		return nil, false
	}
	return o.VcBandwidthMax, true
}

// HasVcBandwidthMax returns a boolean if a field has been set.
func (o *PortPackage) HasVcBandwidthMax() bool {
	if o != nil && !IsNil(o.VcBandwidthMax) {
		return true
	}

	return false
}

// SetVcBandwidthMax gets a reference to the given int32 and assigns it to the VcBandwidthMax field.
func (o *PortPackage) SetVcBandwidthMax(v int32) {
	o.VcBandwidthMax = &v
}

// GetVcRemoteSupported returns the VcRemoteSupported field value if set, zero value otherwise.
func (o *PortPackage) GetVcRemoteSupported() bool {
	if o == nil || IsNil(o.VcRemoteSupported) {
		var ret bool
		return ret
	}
	return *o.VcRemoteSupported
}

// GetVcRemoteSupportedOk returns a tuple with the VcRemoteSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortPackage) GetVcRemoteSupportedOk() (*bool, bool) {
	if o == nil || IsNil(o.VcRemoteSupported) {
		return nil, false
	}
	return o.VcRemoteSupported, true
}

// HasVcRemoteSupported returns a boolean if a field has been set.
func (o *PortPackage) HasVcRemoteSupported() bool {
	if o != nil && !IsNil(o.VcRemoteSupported) {
		return true
	}

	return false
}

// SetVcRemoteSupported gets a reference to the given bool and assigns it to the VcRemoteSupported field.
func (o *PortPackage) SetVcRemoteSupported(v bool) {
	o.VcRemoteSupported = &v
}

// GetSupportedServiceTypes returns the SupportedServiceTypes field value if set, zero value otherwise.
func (o *PortPackage) GetSupportedServiceTypes() []PortPackageSupportedServiceTypesInner {
	if o == nil || IsNil(o.SupportedServiceTypes) {
		var ret []PortPackageSupportedServiceTypesInner
		return ret
	}
	return o.SupportedServiceTypes
}

// GetSupportedServiceTypesOk returns a tuple with the SupportedServiceTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortPackage) GetSupportedServiceTypesOk() ([]PortPackageSupportedServiceTypesInner, bool) {
	if o == nil || IsNil(o.SupportedServiceTypes) {
		return nil, false
	}
	return o.SupportedServiceTypes, true
}

// HasSupportedServiceTypes returns a boolean if a field has been set.
func (o *PortPackage) HasSupportedServiceTypes() bool {
	if o != nil && !IsNil(o.SupportedServiceTypes) {
		return true
	}

	return false
}

// SetSupportedServiceTypes gets a reference to the given []PortPackageSupportedServiceTypesInner and assigns it to the SupportedServiceTypes field.
func (o *PortPackage) SetSupportedServiceTypes(v []PortPackageSupportedServiceTypesInner) {
	o.SupportedServiceTypes = v
}

// GetSupportedSourceTypes returns the SupportedSourceTypes field value if set, zero value otherwise.
func (o *PortPackage) GetSupportedSourceTypes() []PortPackageSourceType {
	if o == nil || IsNil(o.SupportedSourceTypes) {
		var ret []PortPackageSourceType
		return ret
	}
	return o.SupportedSourceTypes
}

// GetSupportedSourceTypesOk returns a tuple with the SupportedSourceTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortPackage) GetSupportedSourceTypesOk() ([]PortPackageSourceType, bool) {
	if o == nil || IsNil(o.SupportedSourceTypes) {
		return nil, false
	}
	return o.SupportedSourceTypes, true
}

// HasSupportedSourceTypes returns a boolean if a field has been set.
func (o *PortPackage) HasSupportedSourceTypes() bool {
	if o != nil && !IsNil(o.SupportedSourceTypes) {
		return true
	}

	return false
}

// SetSupportedSourceTypes gets a reference to the given []PortPackageSourceType and assigns it to the SupportedSourceTypes field.
func (o *PortPackage) SetSupportedSourceTypes(v []PortPackageSourceType) {
	o.SupportedSourceTypes = v
}

// GetSupportedMetros returns the SupportedMetros field value if set, zero value otherwise.
func (o *PortPackage) GetSupportedMetros() []string {
	if o == nil || IsNil(o.SupportedMetros) {
		var ret []string
		return ret
	}
	return o.SupportedMetros
}

// GetSupportedMetrosOk returns a tuple with the SupportedMetros field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortPackage) GetSupportedMetrosOk() ([]string, bool) {
	if o == nil || IsNil(o.SupportedMetros) {
		return nil, false
	}
	return o.SupportedMetros, true
}

// HasSupportedMetros returns a boolean if a field has been set.
func (o *PortPackage) HasSupportedMetros() bool {
	if o != nil && !IsNil(o.SupportedMetros) {
		return true
	}

	return false
}

// SetSupportedMetros gets a reference to the given []string and assigns it to the SupportedMetros field.
func (o *PortPackage) SetSupportedMetros(v []string) {
	o.SupportedMetros = v
}

func (o PortPackage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PortPackage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	toSerialize["type"] = o.Type
	toSerialize["code"] = o.Code
	if !IsNil(o.VcBandwidthMax) {
		toSerialize["vcBandwidthMax"] = o.VcBandwidthMax
	}
	if !IsNil(o.VcRemoteSupported) {
		toSerialize["vcRemoteSupported"] = o.VcRemoteSupported
	}
	if !IsNil(o.SupportedServiceTypes) {
		toSerialize["supportedServiceTypes"] = o.SupportedServiceTypes
	}
	if !IsNil(o.SupportedSourceTypes) {
		toSerialize["supportedSourceTypes"] = o.SupportedSourceTypes
	}
	if !IsNil(o.SupportedMetros) {
		toSerialize["supportedMetros"] = o.SupportedMetros
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PortPackage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPortPackage := _PortPackage{}

	err = json.Unmarshal(data, &varPortPackage)

	if err != nil {
		return err
	}

	*o = PortPackage(varPortPackage)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "href")
		delete(additionalProperties, "type")
		delete(additionalProperties, "code")
		delete(additionalProperties, "vcBandwidthMax")
		delete(additionalProperties, "vcRemoteSupported")
		delete(additionalProperties, "supportedServiceTypes")
		delete(additionalProperties, "supportedSourceTypes")
		delete(additionalProperties, "supportedMetros")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePortPackage struct {
	value *PortPackage
	isSet bool
}

func (v NullablePortPackage) Get() *PortPackage {
	return v.value
}

func (v *NullablePortPackage) Set(val *PortPackage) {
	v.value = val
	v.isSet = true
}

func (v NullablePortPackage) IsSet() bool {
	return v.isSet
}

func (v *NullablePortPackage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortPackage(val *PortPackage) *NullablePortPackage {
	return &NullablePortPackage{value: val, isSet: true}
}

func (v NullablePortPackage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortPackage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
