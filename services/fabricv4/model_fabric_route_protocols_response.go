/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// FabricRouteProtocolsResponse - struct for FabricRouteProtocolsResponse
type FabricRouteProtocolsResponse struct {
	FabricRoutingProtocolBGPType *FabricRoutingProtocolBGPType
}

// FabricRoutingProtocolBGPTypeAsFabricRouteProtocolsResponse is a convenience function that returns FabricRoutingProtocolBGPType wrapped in FabricRouteProtocolsResponse
func FabricRoutingProtocolBGPTypeAsFabricRouteProtocolsResponse(v *FabricRoutingProtocolBGPType) FabricRouteProtocolsResponse {
	return FabricRouteProtocolsResponse{
		FabricRoutingProtocolBGPType: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *FabricRouteProtocolsResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into FabricRoutingProtocolBGPType
	err = newStrictDecoder(data).Decode(&dst.FabricRoutingProtocolBGPType)
	if err == nil {
		jsonFabricRoutingProtocolBGPType, _ := json.Marshal(dst.FabricRoutingProtocolBGPType)
		if string(jsonFabricRoutingProtocolBGPType) == "{}" { // empty struct
			dst.FabricRoutingProtocolBGPType = nil
		} else {
			if err = validator.Validate(dst.FabricRoutingProtocolBGPType); err != nil {
				dst.FabricRoutingProtocolBGPType = nil
			} else {
				match++
			}
		}
	} else {
		dst.FabricRoutingProtocolBGPType = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.FabricRoutingProtocolBGPType = nil

		return fmt.Errorf("data matches more than one schema in oneOf(FabricRouteProtocolsResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(FabricRouteProtocolsResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src FabricRouteProtocolsResponse) MarshalJSON() ([]byte, error) {
	if src.FabricRoutingProtocolBGPType != nil {
		return json.Marshal(&src.FabricRoutingProtocolBGPType)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *FabricRouteProtocolsResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.FabricRoutingProtocolBGPType != nil {
		return obj.FabricRoutingProtocolBGPType
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj FabricRouteProtocolsResponse) GetActualInstanceValue() interface{} {
	if obj.FabricRoutingProtocolBGPType != nil {
		return *obj.FabricRoutingProtocolBGPType
	}

	// all schemas are nil
	return nil
}

type NullableFabricRouteProtocolsResponse struct {
	value *FabricRouteProtocolsResponse
	isSet bool
}

func (v NullableFabricRouteProtocolsResponse) Get() *FabricRouteProtocolsResponse {
	return v.value
}

func (v *NullableFabricRouteProtocolsResponse) Set(val *FabricRouteProtocolsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFabricRouteProtocolsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFabricRouteProtocolsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFabricRouteProtocolsResponse(val *FabricRouteProtocolsResponse) *NullableFabricRouteProtocolsResponse {
	return &NullableFabricRouteProtocolsResponse{value: val, isSet: true}
}

func (v NullableFabricRouteProtocolsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFabricRouteProtocolsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
