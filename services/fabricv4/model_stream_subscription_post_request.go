/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// checks if the StreamSubscriptionPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StreamSubscriptionPostRequest{}

// StreamSubscriptionPostRequest Create Stream Subscription
type StreamSubscriptionPostRequest struct {
	Type StreamSubscriptionPostRequestType `json:"type"`
	// Customer-provided stream subscription name
	Name string `json:"name"`
	// Customer-provided stream subscription description
	Description *string `json:"description,omitempty"`
	// Stream subscription enabled status
	Enabled              *bool                       `json:"enabled,omitempty"`
	MetricSelector       *StreamSubscriptionSelector `json:"metricSelector,omitempty"`
	EventSelector        *StreamSubscriptionSelector `json:"eventSelector,omitempty"`
	Sink                 StreamSubscriptionSink      `json:"sink"`
	AdditionalProperties map[string]interface{}
}

type _StreamSubscriptionPostRequest StreamSubscriptionPostRequest

// NewStreamSubscriptionPostRequest instantiates a new StreamSubscriptionPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStreamSubscriptionPostRequest(type_ StreamSubscriptionPostRequestType, name string, sink StreamSubscriptionSink) *StreamSubscriptionPostRequest {
	this := StreamSubscriptionPostRequest{}
	this.Type = type_
	this.Name = name
	var enabled bool = true
	this.Enabled = &enabled
	this.Sink = sink
	return &this
}

// NewStreamSubscriptionPostRequestWithDefaults instantiates a new StreamSubscriptionPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStreamSubscriptionPostRequestWithDefaults() *StreamSubscriptionPostRequest {
	this := StreamSubscriptionPostRequest{}
	var enabled bool = true
	this.Enabled = &enabled
	return &this
}

// GetType returns the Type field value
func (o *StreamSubscriptionPostRequest) GetType() StreamSubscriptionPostRequestType {
	if o == nil {
		var ret StreamSubscriptionPostRequestType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *StreamSubscriptionPostRequest) GetTypeOk() (*StreamSubscriptionPostRequestType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *StreamSubscriptionPostRequest) SetType(v StreamSubscriptionPostRequestType) {
	o.Type = v
}

// GetName returns the Name field value
func (o *StreamSubscriptionPostRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *StreamSubscriptionPostRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *StreamSubscriptionPostRequest) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *StreamSubscriptionPostRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscriptionPostRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *StreamSubscriptionPostRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *StreamSubscriptionPostRequest) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *StreamSubscriptionPostRequest) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscriptionPostRequest) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *StreamSubscriptionPostRequest) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *StreamSubscriptionPostRequest) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetMetricSelector returns the MetricSelector field value if set, zero value otherwise.
func (o *StreamSubscriptionPostRequest) GetMetricSelector() StreamSubscriptionSelector {
	if o == nil || IsNil(o.MetricSelector) {
		var ret StreamSubscriptionSelector
		return ret
	}
	return *o.MetricSelector
}

// GetMetricSelectorOk returns a tuple with the MetricSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscriptionPostRequest) GetMetricSelectorOk() (*StreamSubscriptionSelector, bool) {
	if o == nil || IsNil(o.MetricSelector) {
		return nil, false
	}
	return o.MetricSelector, true
}

// HasMetricSelector returns a boolean if a field has been set.
func (o *StreamSubscriptionPostRequest) HasMetricSelector() bool {
	if o != nil && !IsNil(o.MetricSelector) {
		return true
	}

	return false
}

// SetMetricSelector gets a reference to the given StreamSubscriptionSelector and assigns it to the MetricSelector field.
func (o *StreamSubscriptionPostRequest) SetMetricSelector(v StreamSubscriptionSelector) {
	o.MetricSelector = &v
}

// GetEventSelector returns the EventSelector field value if set, zero value otherwise.
func (o *StreamSubscriptionPostRequest) GetEventSelector() StreamSubscriptionSelector {
	if o == nil || IsNil(o.EventSelector) {
		var ret StreamSubscriptionSelector
		return ret
	}
	return *o.EventSelector
}

// GetEventSelectorOk returns a tuple with the EventSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscriptionPostRequest) GetEventSelectorOk() (*StreamSubscriptionSelector, bool) {
	if o == nil || IsNil(o.EventSelector) {
		return nil, false
	}
	return o.EventSelector, true
}

// HasEventSelector returns a boolean if a field has been set.
func (o *StreamSubscriptionPostRequest) HasEventSelector() bool {
	if o != nil && !IsNil(o.EventSelector) {
		return true
	}

	return false
}

// SetEventSelector gets a reference to the given StreamSubscriptionSelector and assigns it to the EventSelector field.
func (o *StreamSubscriptionPostRequest) SetEventSelector(v StreamSubscriptionSelector) {
	o.EventSelector = &v
}

// GetSink returns the Sink field value
func (o *StreamSubscriptionPostRequest) GetSink() StreamSubscriptionSink {
	if o == nil {
		var ret StreamSubscriptionSink
		return ret
	}

	return o.Sink
}

// GetSinkOk returns a tuple with the Sink field value
// and a boolean to check if the value has been set.
func (o *StreamSubscriptionPostRequest) GetSinkOk() (*StreamSubscriptionSink, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sink, true
}

// SetSink sets field value
func (o *StreamSubscriptionPostRequest) SetSink(v StreamSubscriptionSink) {
	o.Sink = v
}

func (o StreamSubscriptionPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StreamSubscriptionPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.MetricSelector) {
		toSerialize["metricSelector"] = o.MetricSelector
	}
	if !IsNil(o.EventSelector) {
		toSerialize["eventSelector"] = o.EventSelector
	}
	toSerialize["sink"] = o.Sink

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StreamSubscriptionPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"name",
		"sink",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStreamSubscriptionPostRequest := _StreamSubscriptionPostRequest{}

	err = json.Unmarshal(data, &varStreamSubscriptionPostRequest)

	if err != nil {
		return err
	}

	*o = StreamSubscriptionPostRequest(varStreamSubscriptionPostRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "metricSelector")
		delete(additionalProperties, "eventSelector")
		delete(additionalProperties, "sink")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStreamSubscriptionPostRequest struct {
	value *StreamSubscriptionPostRequest
	isSet bool
}

func (v NullableStreamSubscriptionPostRequest) Get() *StreamSubscriptionPostRequest {
	return v.value
}

func (v *NullableStreamSubscriptionPostRequest) Set(val *StreamSubscriptionPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamSubscriptionPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamSubscriptionPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamSubscriptionPostRequest(val *StreamSubscriptionPostRequest) *NullableStreamSubscriptionPostRequest {
	return &NullableStreamSubscriptionPostRequest{value: val, isSet: true}
}

func (v NullableStreamSubscriptionPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamSubscriptionPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
