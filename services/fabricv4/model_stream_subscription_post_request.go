/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the StreamSubscriptionPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StreamSubscriptionPostRequest{}

// StreamSubscriptionPostRequest Create Stream Subscription
type StreamSubscriptionPostRequest struct {
	Type *StreamSubscriptionPostRequestType `json:"type,omitempty"`
	// Customer-provided stream subscription name
	Name *string `json:"name,omitempty"`
	// Customer-provided stream subscription description
	Description *string  `json:"description,omitempty"`
	Project     *Project `json:"project,omitempty"`
	// Stream subscription enabled status
	Enabled              *bool                     `json:"enabled,omitempty"`
	Stream               *StreamTarget             `json:"stream,omitempty"`
	Filters              *StreamSubscriptionFilter `json:"filters,omitempty"`
	Sink                 *StreamSubscriptionSink   `json:"sink,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StreamSubscriptionPostRequest StreamSubscriptionPostRequest

// NewStreamSubscriptionPostRequest instantiates a new StreamSubscriptionPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStreamSubscriptionPostRequest() *StreamSubscriptionPostRequest {
	this := StreamSubscriptionPostRequest{}
	return &this
}

// NewStreamSubscriptionPostRequestWithDefaults instantiates a new StreamSubscriptionPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStreamSubscriptionPostRequestWithDefaults() *StreamSubscriptionPostRequest {
	this := StreamSubscriptionPostRequest{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *StreamSubscriptionPostRequest) GetType() StreamSubscriptionPostRequestType {
	if o == nil || IsNil(o.Type) {
		var ret StreamSubscriptionPostRequestType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscriptionPostRequest) GetTypeOk() (*StreamSubscriptionPostRequestType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *StreamSubscriptionPostRequest) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given StreamSubscriptionPostRequestType and assigns it to the Type field.
func (o *StreamSubscriptionPostRequest) SetType(v StreamSubscriptionPostRequestType) {
	o.Type = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *StreamSubscriptionPostRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscriptionPostRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *StreamSubscriptionPostRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *StreamSubscriptionPostRequest) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *StreamSubscriptionPostRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscriptionPostRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *StreamSubscriptionPostRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *StreamSubscriptionPostRequest) SetDescription(v string) {
	o.Description = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *StreamSubscriptionPostRequest) GetProject() Project {
	if o == nil || IsNil(o.Project) {
		var ret Project
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscriptionPostRequest) GetProjectOk() (*Project, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *StreamSubscriptionPostRequest) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given Project and assigns it to the Project field.
func (o *StreamSubscriptionPostRequest) SetProject(v Project) {
	o.Project = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *StreamSubscriptionPostRequest) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscriptionPostRequest) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *StreamSubscriptionPostRequest) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *StreamSubscriptionPostRequest) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetStream returns the Stream field value if set, zero value otherwise.
func (o *StreamSubscriptionPostRequest) GetStream() StreamTarget {
	if o == nil || IsNil(o.Stream) {
		var ret StreamTarget
		return ret
	}
	return *o.Stream
}

// GetStreamOk returns a tuple with the Stream field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscriptionPostRequest) GetStreamOk() (*StreamTarget, bool) {
	if o == nil || IsNil(o.Stream) {
		return nil, false
	}
	return o.Stream, true
}

// HasStream returns a boolean if a field has been set.
func (o *StreamSubscriptionPostRequest) HasStream() bool {
	if o != nil && !IsNil(o.Stream) {
		return true
	}

	return false
}

// SetStream gets a reference to the given StreamTarget and assigns it to the Stream field.
func (o *StreamSubscriptionPostRequest) SetStream(v StreamTarget) {
	o.Stream = &v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *StreamSubscriptionPostRequest) GetFilters() StreamSubscriptionFilter {
	if o == nil || IsNil(o.Filters) {
		var ret StreamSubscriptionFilter
		return ret
	}
	return *o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscriptionPostRequest) GetFiltersOk() (*StreamSubscriptionFilter, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *StreamSubscriptionPostRequest) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given StreamSubscriptionFilter and assigns it to the Filters field.
func (o *StreamSubscriptionPostRequest) SetFilters(v StreamSubscriptionFilter) {
	o.Filters = &v
}

// GetSink returns the Sink field value if set, zero value otherwise.
func (o *StreamSubscriptionPostRequest) GetSink() StreamSubscriptionSink {
	if o == nil || IsNil(o.Sink) {
		var ret StreamSubscriptionSink
		return ret
	}
	return *o.Sink
}

// GetSinkOk returns a tuple with the Sink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSubscriptionPostRequest) GetSinkOk() (*StreamSubscriptionSink, bool) {
	if o == nil || IsNil(o.Sink) {
		return nil, false
	}
	return o.Sink, true
}

// HasSink returns a boolean if a field has been set.
func (o *StreamSubscriptionPostRequest) HasSink() bool {
	if o != nil && !IsNil(o.Sink) {
		return true
	}

	return false
}

// SetSink gets a reference to the given StreamSubscriptionSink and assigns it to the Sink field.
func (o *StreamSubscriptionPostRequest) SetSink(v StreamSubscriptionSink) {
	o.Sink = &v
}

func (o StreamSubscriptionPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StreamSubscriptionPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Stream) {
		toSerialize["stream"] = o.Stream
	}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	if !IsNil(o.Sink) {
		toSerialize["sink"] = o.Sink
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StreamSubscriptionPostRequest) UnmarshalJSON(data []byte) (err error) {
	varStreamSubscriptionPostRequest := _StreamSubscriptionPostRequest{}

	err = json.Unmarshal(data, &varStreamSubscriptionPostRequest)

	if err != nil {
		return err
	}

	*o = StreamSubscriptionPostRequest(varStreamSubscriptionPostRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "project")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "stream")
		delete(additionalProperties, "filters")
		delete(additionalProperties, "sink")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStreamSubscriptionPostRequest struct {
	value *StreamSubscriptionPostRequest
	isSet bool
}

func (v NullableStreamSubscriptionPostRequest) Get() *StreamSubscriptionPostRequest {
	return v.value
}

func (v *NullableStreamSubscriptionPostRequest) Set(val *StreamSubscriptionPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamSubscriptionPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamSubscriptionPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamSubscriptionPostRequest(val *StreamSubscriptionPostRequest) *NullableStreamSubscriptionPostRequest {
	return &NullableStreamSubscriptionPostRequest{value: val, isSet: true}
}

func (v NullableStreamSubscriptionPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamSubscriptionPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
