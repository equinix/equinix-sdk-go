/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// checks if the PrecisionTimePackageResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrecisionTimePackageResponse{}

// PrecisionTimePackageResponse EPT Service Package Information
type PrecisionTimePackageResponse struct {
	Href *string                                          `json:"href,omitempty"`
	Type PrecisionTimePackageResponseType                 `json:"type"`
	Code GetTimeServicesPackageByCodePackageCodeParameter `json:"code"`
	// Connection bandwidth in Mbps.
	Bandwidth int32 `json:"bandwidth"`
	// Max. number of clients that can be synchronized per second at a packet rate of 1 per second.
	ClientsPerSecondMax *int32 `json:"clientsPerSecondMax,omitempty"`
	// Is Redundant virtual connection supported for the package code.
	RedundancySupported *bool `json:"redundancySupported,omitempty"`
	// Is Multiple subnet supported for the package code.
	MultiSubnetSupported *bool `json:"multiSubnetSupported,omitempty"`
	// Accuracy SLA unit.
	AccuracySlaUnit *string `json:"accuracySlaUnit,omitempty"`
	// Accuracy SLA for the package code, -1 value denotes the accuracySla is not published.
	AccuracySla *int32 `json:"accuracySla,omitempty"`
	// Typical minimum Accuracy for the package code.
	AccuracySlaMin *int32 `json:"accuracySlaMin,omitempty"`
	// Typical maximum Accuracy for the package code.
	AccuracySlaMax       *int32     `json:"accuracySlaMax,omitempty"`
	Changelog            *Changelog `json:"changelog,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PrecisionTimePackageResponse PrecisionTimePackageResponse

// NewPrecisionTimePackageResponse instantiates a new PrecisionTimePackageResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrecisionTimePackageResponse(type_ PrecisionTimePackageResponseType, code GetTimeServicesPackageByCodePackageCodeParameter, bandwidth int32) *PrecisionTimePackageResponse {
	this := PrecisionTimePackageResponse{}
	this.Type = type_
	this.Code = code
	this.Bandwidth = bandwidth
	return &this
}

// NewPrecisionTimePackageResponseWithDefaults instantiates a new PrecisionTimePackageResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrecisionTimePackageResponseWithDefaults() *PrecisionTimePackageResponse {
	this := PrecisionTimePackageResponse{}
	return &this
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *PrecisionTimePackageResponse) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrecisionTimePackageResponse) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *PrecisionTimePackageResponse) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *PrecisionTimePackageResponse) SetHref(v string) {
	o.Href = &v
}

// GetType returns the Type field value
func (o *PrecisionTimePackageResponse) GetType() PrecisionTimePackageResponseType {
	if o == nil {
		var ret PrecisionTimePackageResponseType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PrecisionTimePackageResponse) GetTypeOk() (*PrecisionTimePackageResponseType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PrecisionTimePackageResponse) SetType(v PrecisionTimePackageResponseType) {
	o.Type = v
}

// GetCode returns the Code field value
func (o *PrecisionTimePackageResponse) GetCode() GetTimeServicesPackageByCodePackageCodeParameter {
	if o == nil {
		var ret GetTimeServicesPackageByCodePackageCodeParameter
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *PrecisionTimePackageResponse) GetCodeOk() (*GetTimeServicesPackageByCodePackageCodeParameter, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *PrecisionTimePackageResponse) SetCode(v GetTimeServicesPackageByCodePackageCodeParameter) {
	o.Code = v
}

// GetBandwidth returns the Bandwidth field value
func (o *PrecisionTimePackageResponse) GetBandwidth() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Bandwidth
}

// GetBandwidthOk returns a tuple with the Bandwidth field value
// and a boolean to check if the value has been set.
func (o *PrecisionTimePackageResponse) GetBandwidthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bandwidth, true
}

// SetBandwidth sets field value
func (o *PrecisionTimePackageResponse) SetBandwidth(v int32) {
	o.Bandwidth = v
}

// GetClientsPerSecondMax returns the ClientsPerSecondMax field value if set, zero value otherwise.
func (o *PrecisionTimePackageResponse) GetClientsPerSecondMax() int32 {
	if o == nil || IsNil(o.ClientsPerSecondMax) {
		var ret int32
		return ret
	}
	return *o.ClientsPerSecondMax
}

// GetClientsPerSecondMaxOk returns a tuple with the ClientsPerSecondMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrecisionTimePackageResponse) GetClientsPerSecondMaxOk() (*int32, bool) {
	if o == nil || IsNil(o.ClientsPerSecondMax) {
		return nil, false
	}
	return o.ClientsPerSecondMax, true
}

// HasClientsPerSecondMax returns a boolean if a field has been set.
func (o *PrecisionTimePackageResponse) HasClientsPerSecondMax() bool {
	if o != nil && !IsNil(o.ClientsPerSecondMax) {
		return true
	}

	return false
}

// SetClientsPerSecondMax gets a reference to the given int32 and assigns it to the ClientsPerSecondMax field.
func (o *PrecisionTimePackageResponse) SetClientsPerSecondMax(v int32) {
	o.ClientsPerSecondMax = &v
}

// GetRedundancySupported returns the RedundancySupported field value if set, zero value otherwise.
func (o *PrecisionTimePackageResponse) GetRedundancySupported() bool {
	if o == nil || IsNil(o.RedundancySupported) {
		var ret bool
		return ret
	}
	return *o.RedundancySupported
}

// GetRedundancySupportedOk returns a tuple with the RedundancySupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrecisionTimePackageResponse) GetRedundancySupportedOk() (*bool, bool) {
	if o == nil || IsNil(o.RedundancySupported) {
		return nil, false
	}
	return o.RedundancySupported, true
}

// HasRedundancySupported returns a boolean if a field has been set.
func (o *PrecisionTimePackageResponse) HasRedundancySupported() bool {
	if o != nil && !IsNil(o.RedundancySupported) {
		return true
	}

	return false
}

// SetRedundancySupported gets a reference to the given bool and assigns it to the RedundancySupported field.
func (o *PrecisionTimePackageResponse) SetRedundancySupported(v bool) {
	o.RedundancySupported = &v
}

// GetMultiSubnetSupported returns the MultiSubnetSupported field value if set, zero value otherwise.
func (o *PrecisionTimePackageResponse) GetMultiSubnetSupported() bool {
	if o == nil || IsNil(o.MultiSubnetSupported) {
		var ret bool
		return ret
	}
	return *o.MultiSubnetSupported
}

// GetMultiSubnetSupportedOk returns a tuple with the MultiSubnetSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrecisionTimePackageResponse) GetMultiSubnetSupportedOk() (*bool, bool) {
	if o == nil || IsNil(o.MultiSubnetSupported) {
		return nil, false
	}
	return o.MultiSubnetSupported, true
}

// HasMultiSubnetSupported returns a boolean if a field has been set.
func (o *PrecisionTimePackageResponse) HasMultiSubnetSupported() bool {
	if o != nil && !IsNil(o.MultiSubnetSupported) {
		return true
	}

	return false
}

// SetMultiSubnetSupported gets a reference to the given bool and assigns it to the MultiSubnetSupported field.
func (o *PrecisionTimePackageResponse) SetMultiSubnetSupported(v bool) {
	o.MultiSubnetSupported = &v
}

// GetAccuracySlaUnit returns the AccuracySlaUnit field value if set, zero value otherwise.
func (o *PrecisionTimePackageResponse) GetAccuracySlaUnit() string {
	if o == nil || IsNil(o.AccuracySlaUnit) {
		var ret string
		return ret
	}
	return *o.AccuracySlaUnit
}

// GetAccuracySlaUnitOk returns a tuple with the AccuracySlaUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrecisionTimePackageResponse) GetAccuracySlaUnitOk() (*string, bool) {
	if o == nil || IsNil(o.AccuracySlaUnit) {
		return nil, false
	}
	return o.AccuracySlaUnit, true
}

// HasAccuracySlaUnit returns a boolean if a field has been set.
func (o *PrecisionTimePackageResponse) HasAccuracySlaUnit() bool {
	if o != nil && !IsNil(o.AccuracySlaUnit) {
		return true
	}

	return false
}

// SetAccuracySlaUnit gets a reference to the given string and assigns it to the AccuracySlaUnit field.
func (o *PrecisionTimePackageResponse) SetAccuracySlaUnit(v string) {
	o.AccuracySlaUnit = &v
}

// GetAccuracySla returns the AccuracySla field value if set, zero value otherwise.
func (o *PrecisionTimePackageResponse) GetAccuracySla() int32 {
	if o == nil || IsNil(o.AccuracySla) {
		var ret int32
		return ret
	}
	return *o.AccuracySla
}

// GetAccuracySlaOk returns a tuple with the AccuracySla field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrecisionTimePackageResponse) GetAccuracySlaOk() (*int32, bool) {
	if o == nil || IsNil(o.AccuracySla) {
		return nil, false
	}
	return o.AccuracySla, true
}

// HasAccuracySla returns a boolean if a field has been set.
func (o *PrecisionTimePackageResponse) HasAccuracySla() bool {
	if o != nil && !IsNil(o.AccuracySla) {
		return true
	}

	return false
}

// SetAccuracySla gets a reference to the given int32 and assigns it to the AccuracySla field.
func (o *PrecisionTimePackageResponse) SetAccuracySla(v int32) {
	o.AccuracySla = &v
}

// GetAccuracySlaMin returns the AccuracySlaMin field value if set, zero value otherwise.
func (o *PrecisionTimePackageResponse) GetAccuracySlaMin() int32 {
	if o == nil || IsNil(o.AccuracySlaMin) {
		var ret int32
		return ret
	}
	return *o.AccuracySlaMin
}

// GetAccuracySlaMinOk returns a tuple with the AccuracySlaMin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrecisionTimePackageResponse) GetAccuracySlaMinOk() (*int32, bool) {
	if o == nil || IsNil(o.AccuracySlaMin) {
		return nil, false
	}
	return o.AccuracySlaMin, true
}

// HasAccuracySlaMin returns a boolean if a field has been set.
func (o *PrecisionTimePackageResponse) HasAccuracySlaMin() bool {
	if o != nil && !IsNil(o.AccuracySlaMin) {
		return true
	}

	return false
}

// SetAccuracySlaMin gets a reference to the given int32 and assigns it to the AccuracySlaMin field.
func (o *PrecisionTimePackageResponse) SetAccuracySlaMin(v int32) {
	o.AccuracySlaMin = &v
}

// GetAccuracySlaMax returns the AccuracySlaMax field value if set, zero value otherwise.
func (o *PrecisionTimePackageResponse) GetAccuracySlaMax() int32 {
	if o == nil || IsNil(o.AccuracySlaMax) {
		var ret int32
		return ret
	}
	return *o.AccuracySlaMax
}

// GetAccuracySlaMaxOk returns a tuple with the AccuracySlaMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrecisionTimePackageResponse) GetAccuracySlaMaxOk() (*int32, bool) {
	if o == nil || IsNil(o.AccuracySlaMax) {
		return nil, false
	}
	return o.AccuracySlaMax, true
}

// HasAccuracySlaMax returns a boolean if a field has been set.
func (o *PrecisionTimePackageResponse) HasAccuracySlaMax() bool {
	if o != nil && !IsNil(o.AccuracySlaMax) {
		return true
	}

	return false
}

// SetAccuracySlaMax gets a reference to the given int32 and assigns it to the AccuracySlaMax field.
func (o *PrecisionTimePackageResponse) SetAccuracySlaMax(v int32) {
	o.AccuracySlaMax = &v
}

// GetChangelog returns the Changelog field value if set, zero value otherwise.
func (o *PrecisionTimePackageResponse) GetChangelog() Changelog {
	if o == nil || IsNil(o.Changelog) {
		var ret Changelog
		return ret
	}
	return *o.Changelog
}

// GetChangelogOk returns a tuple with the Changelog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrecisionTimePackageResponse) GetChangelogOk() (*Changelog, bool) {
	if o == nil || IsNil(o.Changelog) {
		return nil, false
	}
	return o.Changelog, true
}

// HasChangelog returns a boolean if a field has been set.
func (o *PrecisionTimePackageResponse) HasChangelog() bool {
	if o != nil && !IsNil(o.Changelog) {
		return true
	}

	return false
}

// SetChangelog gets a reference to the given Changelog and assigns it to the Changelog field.
func (o *PrecisionTimePackageResponse) SetChangelog(v Changelog) {
	o.Changelog = &v
}

func (o PrecisionTimePackageResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrecisionTimePackageResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	toSerialize["type"] = o.Type
	toSerialize["code"] = o.Code
	toSerialize["bandwidth"] = o.Bandwidth
	if !IsNil(o.ClientsPerSecondMax) {
		toSerialize["clientsPerSecondMax"] = o.ClientsPerSecondMax
	}
	if !IsNil(o.RedundancySupported) {
		toSerialize["redundancySupported"] = o.RedundancySupported
	}
	if !IsNil(o.MultiSubnetSupported) {
		toSerialize["multiSubnetSupported"] = o.MultiSubnetSupported
	}
	if !IsNil(o.AccuracySlaUnit) {
		toSerialize["accuracySlaUnit"] = o.AccuracySlaUnit
	}
	if !IsNil(o.AccuracySla) {
		toSerialize["accuracySla"] = o.AccuracySla
	}
	if !IsNil(o.AccuracySlaMin) {
		toSerialize["accuracySlaMin"] = o.AccuracySlaMin
	}
	if !IsNil(o.AccuracySlaMax) {
		toSerialize["accuracySlaMax"] = o.AccuracySlaMax
	}
	if !IsNil(o.Changelog) {
		toSerialize["changelog"] = o.Changelog
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PrecisionTimePackageResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"code",
		"bandwidth",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPrecisionTimePackageResponse := _PrecisionTimePackageResponse{}

	err = json.Unmarshal(data, &varPrecisionTimePackageResponse)

	if err != nil {
		return err
	}

	*o = PrecisionTimePackageResponse(varPrecisionTimePackageResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "href")
		delete(additionalProperties, "type")
		delete(additionalProperties, "code")
		delete(additionalProperties, "bandwidth")
		delete(additionalProperties, "clientsPerSecondMax")
		delete(additionalProperties, "redundancySupported")
		delete(additionalProperties, "multiSubnetSupported")
		delete(additionalProperties, "accuracySlaUnit")
		delete(additionalProperties, "accuracySla")
		delete(additionalProperties, "accuracySlaMin")
		delete(additionalProperties, "accuracySlaMax")
		delete(additionalProperties, "changelog")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePrecisionTimePackageResponse struct {
	value *PrecisionTimePackageResponse
	isSet bool
}

func (v NullablePrecisionTimePackageResponse) Get() *PrecisionTimePackageResponse {
	return v.value
}

func (v *NullablePrecisionTimePackageResponse) Set(val *PrecisionTimePackageResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePrecisionTimePackageResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePrecisionTimePackageResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrecisionTimePackageResponse(val *PrecisionTimePackageResponse) *NullablePrecisionTimePackageResponse {
	return &NullablePrecisionTimePackageResponse{value: val, isSet: true}
}

func (v NullablePrecisionTimePackageResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrecisionTimePackageResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
