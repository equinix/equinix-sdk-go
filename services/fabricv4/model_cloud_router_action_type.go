/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// CloudRouterActionType Cloud Router action type
type CloudRouterActionType string

// List of CloudRouterActionType
const (
	CLOUDROUTERACTIONTYPE_BGP_SESSION_STATUS_UPDATE     CloudRouterActionType = "BGP_SESSION_STATUS_UPDATE"
	CLOUDROUTERACTIONTYPE_ROUTE_TABLE_ENTRY_UPDATE      CloudRouterActionType = "ROUTE_TABLE_ENTRY_UPDATE"
	CLOUDROUTERACTIONTYPE_RECEIVED_ROUTE_ENTRY_UPDATE   CloudRouterActionType = "RECEIVED_ROUTE_ENTRY_UPDATE"
	CLOUDROUTERACTIONTYPE_ADVERTISED_ROUTE_ENTRY_UPDATE CloudRouterActionType = "ADVERTISED_ROUTE_ENTRY_UPDATE"
)

// All allowed values of CloudRouterActionType enum
var AllowedCloudRouterActionTypeEnumValues = []CloudRouterActionType{
	"BGP_SESSION_STATUS_UPDATE",
	"ROUTE_TABLE_ENTRY_UPDATE",
	"RECEIVED_ROUTE_ENTRY_UPDATE",
	"ADVERTISED_ROUTE_ENTRY_UPDATE",
}

func (v *CloudRouterActionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CloudRouterActionType(value)
	for _, existing := range AllowedCloudRouterActionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CloudRouterActionType", value)
}

// NewCloudRouterActionTypeFromValue returns a pointer to a valid CloudRouterActionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCloudRouterActionTypeFromValue(v string) (*CloudRouterActionType, error) {
	ev := CloudRouterActionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CloudRouterActionType: valid values are %v", v, AllowedCloudRouterActionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CloudRouterActionType) IsValid() bool {
	for _, existing := range AllowedCloudRouterActionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CloudRouterActionType value
func (v CloudRouterActionType) Ptr() *CloudRouterActionType {
	return &v
}

type NullableCloudRouterActionType struct {
	value *CloudRouterActionType
	isSet bool
}

func (v NullableCloudRouterActionType) Get() *CloudRouterActionType {
	return v.value
}

func (v *NullableCloudRouterActionType) Set(val *CloudRouterActionType) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudRouterActionType) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudRouterActionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudRouterActionType(val *CloudRouterActionType) *NullableCloudRouterActionType {
	return &NullableCloudRouterActionType{value: val, isSet: true}
}

func (v NullableCloudRouterActionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudRouterActionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
