/*
Equinix Fabric API v4

Testing StreamAlertRulesApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package fabricv4

import (
	"context"
	"testing"

	openapiclient "github.com/equinix/equinix-sdk-go/services/fabricv4"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_fabricv4_StreamAlertRulesApiService(t *testing.T) {
	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test StreamAlertRulesApiService CreateStreamAlertRules", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var streamId string

		resp, httpRes, err := apiClient.StreamAlertRulesApi.CreateStreamAlertRules(context.Background(), streamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test StreamAlertRulesApiService DeleteStreamAlertRuleByUuid", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var streamId string
		var alertRuleId string

		resp, httpRes, err := apiClient.StreamAlertRulesApi.DeleteStreamAlertRuleByUuid(context.Background(), streamId, alertRuleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test StreamAlertRulesApiService GetStreamAlertRuleByUuid", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var streamId string
		var alertRuleId string

		resp, httpRes, err := apiClient.StreamAlertRulesApi.GetStreamAlertRuleByUuid(context.Background(), streamId, alertRuleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test StreamAlertRulesApiService GetStreamAlertRules", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var streamId string

		resp, httpRes, err := apiClient.StreamAlertRulesApi.GetStreamAlertRules(context.Background(), streamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test StreamAlertRulesApiService UpdateStreamAlertRuleByUuid", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var streamId string
		var alertRuleId string

		resp, httpRes, err := apiClient.StreamAlertRulesApi.UpdateStreamAlertRuleByUuid(context.Background(), streamId, alertRuleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})
}
