/*
Equinix Fabric API v4

Testing StreamsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package fabricv4

import (
	"context"
	"testing"

	openapiclient "github.com/equinix/equinix-sdk-go/services/fabricv4"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_fabricv4_StreamsApiService(t *testing.T) {
	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test StreamsApiService CreateStreams", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.StreamsApi.CreateStreams(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test StreamsApiService DeleteStreamAssetByUuid", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var assetId string
		var asset openapiclient.Asset
		var streamId string

		resp, httpRes, err := apiClient.StreamsApi.DeleteStreamAssetByUuid(context.Background(), assetId, asset, streamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test StreamsApiService DeleteStreamByUuid", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var streamId string

		resp, httpRes, err := apiClient.StreamsApi.DeleteStreamByUuid(context.Background(), streamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test StreamsApiService GetStreamAssetByUuid", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var assetId string
		var asset openapiclient.Asset
		var streamId string

		resp, httpRes, err := apiClient.StreamsApi.GetStreamAssetByUuid(context.Background(), assetId, asset, streamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test StreamsApiService GetStreamByUuid", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var streamId string

		resp, httpRes, err := apiClient.StreamsApi.GetStreamByUuid(context.Background(), streamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test StreamsApiService GetStreams", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.StreamsApi.GetStreams(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test StreamsApiService GetStreamsAssets", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.StreamsApi.GetStreamsAssets(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test StreamsApiService GetSubscriptionsInStream", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var streamId string

		resp, httpRes, err := apiClient.StreamsApi.GetSubscriptionsInStream(context.Background(), streamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test StreamsApiService UpdateStreamAssetByUuid", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var assetId string
		var asset openapiclient.Asset
		var streamId string

		resp, httpRes, err := apiClient.StreamsApi.UpdateStreamAssetByUuid(context.Background(), assetId, asset, streamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test StreamsApiService UpdateStreamByUuid", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var streamId string

		resp, httpRes, err := apiClient.StreamsApi.UpdateStreamByUuid(context.Background(), streamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})
}
