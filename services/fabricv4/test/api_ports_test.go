/*
Equinix Fabric API v4

Testing PortsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package fabricv4

import (
	"context"
	"testing"

	openapiclient "github.com/equinix/equinix-sdk-go/services/fabricv4"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_fabricv4_PortsApiService(t *testing.T) {
	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PortsApiService AddToLag", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var portId string

		resp, httpRes, err := apiClient.PortsApi.AddToLag(context.Background(), portId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test PortsApiService CreateBulkPort", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PortsApi.CreateBulkPort(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test PortsApiService CreatePort", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PortsApi.CreatePort(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test PortsApiService DeletePort", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var portId string

		resp, httpRes, err := apiClient.PortsApi.DeletePort(context.Background(), portId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test PortsApiService GetPortByUuid", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var portId string

		resp, httpRes, err := apiClient.PortsApi.GetPortByUuid(context.Background(), portId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test PortsApiService GetPorts", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PortsApi.GetPorts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test PortsApiService GetVlans", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var portUuid string

		resp, httpRes, err := apiClient.PortsApi.GetVlans(context.Background(), portUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test PortsApiService SearchPorts", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PortsApi.SearchPorts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test PortsApiService UpdatePortByUuid", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var portId string

		resp, httpRes, err := apiClient.PortsApi.UpdatePortByUuid(context.Background(), portId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})
}
