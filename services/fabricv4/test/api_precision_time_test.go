/*
Equinix Fabric API v4

Testing PrecisionTimeApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package fabricv4

import (
	"context"
	"testing"

	openapiclient "github.com/equinix/equinix-sdk-go/services/fabricv4"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_fabricv4_PrecisionTimeApiService(t *testing.T) {
	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PrecisionTimeApiService CreateTimeServices", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PrecisionTimeApi.CreateTimeServices(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test PrecisionTimeApiService DeleteTimeServiceById", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var serviceId string

		resp, httpRes, err := apiClient.PrecisionTimeApi.DeleteTimeServiceById(context.Background(), serviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test PrecisionTimeApiService FulfillTimeServices", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var serviceId string

		resp, httpRes, err := apiClient.PrecisionTimeApi.FulfillTimeServices(context.Background(), serviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test PrecisionTimeApiService GetTimeServicesById", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var serviceId string

		resp, httpRes, err := apiClient.PrecisionTimeApi.GetTimeServicesById(context.Background(), serviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test PrecisionTimeApiService GetTimeServicesConnectionsByServiceId", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var serviceId string

		resp, httpRes, err := apiClient.PrecisionTimeApi.GetTimeServicesConnectionsByServiceId(context.Background(), serviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test PrecisionTimeApiService GetTimeServicesPackageByCode", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var packageCode openapiclient.GetTimeServicesPackageByCodePackageCodeParameter

		resp, httpRes, err := apiClient.PrecisionTimeApi.GetTimeServicesPackageByCode(context.Background(), packageCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test PrecisionTimeApiService GetTimeServicesPackages", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PrecisionTimeApi.GetTimeServicesPackages(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test PrecisionTimeApiService SearchTimeServices", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PrecisionTimeApi.SearchTimeServices(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test PrecisionTimeApiService UpdateTimeServicesById", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var serviceId string

		resp, httpRes, err := apiClient.PrecisionTimeApi.UpdateTimeServicesById(context.Background(), serviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})
}
