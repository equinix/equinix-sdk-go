/*
Equinix Fabric API v4

Testing RouteAggregationRulesApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package fabricv4

import (
	"context"
	"testing"

	openapiclient "github.com/equinix/equinix-sdk-go/services/fabricv4"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_fabricv4_RouteAggregationRulesApiService(t *testing.T) {
	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RouteAggregationRulesApiService CreateRouteAggregationRule", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var routeAggregationId string

		resp, httpRes, err := apiClient.RouteAggregationRulesApi.CreateRouteAggregationRule(context.Background(), routeAggregationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RouteAggregationRulesApiService CreateRouteAggregationRulesInBulk", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var routeAggregationId string

		resp, httpRes, err := apiClient.RouteAggregationRulesApi.CreateRouteAggregationRulesInBulk(context.Background(), routeAggregationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RouteAggregationRulesApiService DeleteRouteAggregationRuleByUuid", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var routeAggregationId string
		var routeAggregationRuleId string

		resp, httpRes, err := apiClient.RouteAggregationRulesApi.DeleteRouteAggregationRuleByUuid(context.Background(), routeAggregationId, routeAggregationRuleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RouteAggregationRulesApiService GetRouteAggregationRuleByUuid", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var routeAggregationId string
		var routeAggregationRuleId string

		resp, httpRes, err := apiClient.RouteAggregationRulesApi.GetRouteAggregationRuleByUuid(context.Background(), routeAggregationId, routeAggregationRuleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RouteAggregationRulesApiService GetRouteAggregationRuleChangeByUuid", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var routeAggregationId string
		var routeAggregationRuleId string
		var changeId string

		resp, httpRes, err := apiClient.RouteAggregationRulesApi.GetRouteAggregationRuleChangeByUuid(context.Background(), routeAggregationId, routeAggregationRuleId, changeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RouteAggregationRulesApiService GetRouteAggregationRuleChanges", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var routeAggregationId string
		var routeAggregationRuleId string

		resp, httpRes, err := apiClient.RouteAggregationRulesApi.GetRouteAggregationRuleChanges(context.Background(), routeAggregationId, routeAggregationRuleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RouteAggregationRulesApiService GetRouteAggregationRules", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var routeAggregationId string

		resp, httpRes, err := apiClient.RouteAggregationRulesApi.GetRouteAggregationRules(context.Background(), routeAggregationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RouteAggregationRulesApiService PatchRouteAggregationRuleByUuid", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var routeAggregationId string
		var routeAggregationRuleId string

		resp, httpRes, err := apiClient.RouteAggregationRulesApi.PatchRouteAggregationRuleByUuid(context.Background(), routeAggregationId, routeAggregationRuleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RouteAggregationRulesApiService ReplaceRouteAggregationRuleByUuid", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var routeAggregationId string
		var routeAggregationRuleId string

		resp, httpRes, err := apiClient.RouteAggregationRulesApi.ReplaceRouteAggregationRuleByUuid(context.Background(), routeAggregationId, routeAggregationRuleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})
}
