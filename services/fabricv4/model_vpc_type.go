/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// VPCType the model 'VPCType'
type VPCType string

// List of VPC_type
const (
	VPCTYPE_VPC VPCType = "VPC"
)

// All allowed values of VPCType enum
var AllowedVPCTypeEnumValues = []VPCType{
	"VPC",
}

func (v *VPCType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VPCType(value)
	for _, existing := range AllowedVPCTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VPCType", value)
}

// NewVPCTypeFromValue returns a pointer to a valid VPCType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVPCTypeFromValue(v string) (*VPCType, error) {
	ev := VPCType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VPCType: valid values are %v", v, AllowedVPCTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VPCType) IsValid() bool {
	for _, existing := range AllowedVPCTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VPC_type value
func (v VPCType) Ptr() *VPCType {
	return &v
}

type NullableVPCType struct {
	value *VPCType
	isSet bool
}

func (v NullableVPCType) Get() *VPCType {
	return v.value
}

func (v *NullableVPCType) Set(val *VPCType) {
	v.value = val
	v.isSet = true
}

func (v NullableVPCType) IsSet() bool {
	return v.isSet
}

func (v *NullableVPCType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVPCType(val *VPCType) *NullableVPCType {
	return &NullableVPCType{value: val, isSet: true}
}

func (v NullableVPCType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVPCType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
