/*
Equinix Fabric API v4

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// GCPProviderType the model 'GCPProviderType'
type GCPProviderType string

// List of GCPProvider_type
const (
	GCPPROVIDERTYPE_GCP_PROVIDER GCPProviderType = "GCP_PROVIDER"
)

// All allowed values of GCPProviderType enum
var AllowedGCPProviderTypeEnumValues = []GCPProviderType{
	"GCP_PROVIDER",
}

func (v *GCPProviderType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GCPProviderType(value)
	for _, existing := range AllowedGCPProviderTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GCPProviderType", value)
}

// NewGCPProviderTypeFromValue returns a pointer to a valid GCPProviderType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGCPProviderTypeFromValue(v string) (*GCPProviderType, error) {
	ev := GCPProviderType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GCPProviderType: valid values are %v", v, AllowedGCPProviderTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GCPProviderType) IsValid() bool {
	for _, existing := range AllowedGCPProviderTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GCPProvider_type value
func (v GCPProviderType) Ptr() *GCPProviderType {
	return &v
}

type NullableGCPProviderType struct {
	value *GCPProviderType
	isSet bool
}

func (v NullableGCPProviderType) Get() *GCPProviderType {
	return v.value
}

func (v *NullableGCPProviderType) Set(val *GCPProviderType) {
	v.value = val
	v.isSet = true
}

func (v NullableGCPProviderType) IsSet() bool {
	return v.isSet
}

func (v *NullableGCPProviderType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGCPProviderType(val *GCPProviderType) *NullableGCPProviderType {
	return &NullableGCPProviderType{value: val, isSet: true}
}

func (v NullableGCPProviderType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGCPProviderType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
